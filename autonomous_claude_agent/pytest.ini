[tool:pytest]
# Pytest Configuration for Autonomous Claude Agent
# ================================================

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 6.0

# Add source directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:data/coverage
    --cov-report=xml:data/coverage.xml
    --cov-fail-under=80
    --durations=10
    --color=yes
    -p no:warnings
    --maxfail=5

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, requires components)
    stress: Stress tests (resource intensive, long running)
    slow: Tests that take more than 10 seconds
    network: Tests that require network access
    claude: Tests that require Claude API access
    mock: Tests using mocked dependencies
    async: Asynchronous tests
    serial: Tests that must run serially
    parallel: Tests that can run in parallel
    critical: Critical functionality tests
    experimental: Experimental feature tests

# Async support
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:aiohttp.*
    error::RuntimeWarning

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution settings
# Use with: pytest -n auto
# addopts = -n auto  # Uncomment to enable by default

# Coverage settings
[coverage:run]
source = src
omit = 
    */tests/*
    */conftest.py
    */__init__.py
    */migrations/*
    */venv/*
    */virtualenv/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract
    @overload

show_missing = true
skip_covered = false
skip_empty = true
precision = 2

[coverage:html]
directory = data/coverage

[coverage:xml]
output = data/coverage.xml