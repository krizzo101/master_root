{
  "project_name": "project_mapper_v2",
  "source_directory": "/home/opsvi/project_mapper_v2/src",
  "package_structure": {"proj_mapper":{"cli.py":null,"version.py":null,"__main__.py":null,"web":{"app.py":null},"core":{"pipeline.py":null,"config.py":null,"mapping.py":null,"file_discovery.py":null,"project_manager.py":null,"discovery.py":null,"serialization.py":null,"analysis.py":null},"output":{"ai_optimization.py":null,"config.py":null,"storage.py":null,"chunking.py":null,"pipeline_stages.py":null,"generator.py":null,"visualization.py":null,"adapters":{"markdown_adapter.py":null,"json_adapter.py":null},"templates":{"project_overview.py":null}},"stages":{"project_discovery.py":null},"pipeline":{"base.py":null},"utils":{"json_encoder.py":null},"relationship":{"mapper.py":null,"cross_ref.py":null,"pipeline_stage.py":null,"detector.py":null,"graph.py":null,"pipeline_stages.py":null,"function_analyzer.py":null,"scoring.py":null,"graph":{"node.py":null,"graph.py":null,"edge.py":null}},"cli":{"main.py":null,"interactive.py":null,"progress.py":null,"config_handler.py":null,"commands":{"relationship.py":null,"output.py":null}},"storage":{"map_storage.py":null},"models":{"file.py":null,"base.py":null,"relationship.py":null,"analysis.py":null,"code.py":null,"project.py":null,"documentation.py":null},"analyzers":{"pipeline.py":null,"base.py":null,"factory.py":null,"pipeline_stages.py":null,"documentation":{"pipeline.py":null,"markdown.py":null},"code":{"python_ast_visitor.py":null,"python.py":null,"python_ast_visitor":{"visitor.py":null,"utils.py":null,"metadata.py":null,"node_processors.py":null}}}}},
  "modules": {"proj_mapper":{"path":"__init__.py","docstring":"Project Mapper - Map and analyze project structure.\n\nThis package provides tools for analyzing projects, detecting relationships\nbetween code and documentation, and generating structured maps optimized\nfor AI consumption.","imports":{},"from_imports":{"proj_mapper.core.config":["Configuration"],"proj_mapper.core.file_discovery":["FileDiscovery"],"proj_mapper.core.pipeline":["Pipeline","PipelineContext","PipelineStage"],"proj_mapper.core.project_manager":["ProjectManager"],"proj_mapper.models.base":["BaseModel"],"proj_mapper.models.file":["FileType","DiscoveredFile"],"proj_mapper.models.code":["CodeElementType","CodeElement","Visibility"],"proj_mapper.models.documentation":["DocumentationType","DocumentationElement"],"proj_mapper.models.relationship":["RelationshipType","Relationship"],"proj_mapper.models.project":["Project","ProjectMap"]},"classes":{},"functions":{"_import_modules":{"name":"_import_modules","docstring":"Import modules, delaying to avoid circular references.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"__getattr__":{"name":"__getattr__","docstring":"Lazy-load modules when accessed.","params":["name"],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.models.documentation","proj_mapper.core.analysis"],"imported_by":[],"is_entry_point":false},"proj_mapper.cli":{"path":"__init__.py","docstring":"Command-line interface for Project Mapper.","imports":{},"from_imports":{"proj_mapper.cli.main":["cli"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.cli.config_handler"],"imported_by":[],"is_entry_point":false},"proj_mapper.version":{"path":"version.py","docstring":"Version information for Project Mapper.\n\nThis module contains the version information for the Project Mapper package.","imports":{},"from_imports":{},"classes":{},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.__main__":{"path":"__main__.py","docstring":"Main entry point for the Project Mapper package.\n\nThis module allows running the Project Mapper using:\npython -m proj_mapper","imports":{"sys":"sys","logging":"logging"},"from_imports":{"proj_mapper.cli.main":["cli"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.cli.config_handler"],"imported_by":[],"is_entry_point":true},"proj_mapper.web":{"path":"__init__.py","docstring":"Web interface for Project Mapper.","imports":{},"from_imports":{"proj_mapper.web.app":["app"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.web.app"],"imported_by":[],"is_entry_point":false},"proj_mapper.web.app":{"path":"app.py","docstring":"Web interface for Project Mapper.\n\nThis module provides a web interface for the Project Mapper tool.","imports":{"os":"os","sys":"sys","json":"json","uuid":"uuid","shutil":"shutil","logging":"logging","tempfile":"tempfile"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Dict","List","Any","Optional"],"flask":["Flask","render_template","request","redirect","url_for","jsonify","flash","send_file","abort"],"werkzeug.utils":["secure_filename"],"proj_mapper.version":["__version__"]},"classes":{},"functions":{"allowed_file":{"name":"allowed_file","docstring":"Check if the file has an allowed extension.","params":["filename: str"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]},"generate_project_id":{"name":"generate_project_id","docstring":"Generate a unique project ID.","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"save_project_metadata":{"name":"save_project_metadata","docstring":"Save project metadata to file.","params":["project_id: str","metadata: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"load_project_metadata":{"name":"load_project_metadata","docstring":"Load project metadata from file.","params":["project_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"load_all_projects":{"name":"load_all_projects","docstring":"Load metadata for all projects.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"load_project_map":{"name":"load_project_map","docstring":"Load project map from file.","params":["project_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_project_tree":{"name":"get_project_tree","docstring":"Generate project tree structure from project map.","params":["project_map: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"analyze_project":{"name":"analyze_project","docstring":"Analyze a project and generate maps.","params":["project_id: str","config: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"index":{"name":"index","docstring":"Render the home page.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"projects":{"name":"projects","docstring":"Render the projects list page.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"upload":{"name":"upload","docstring":"Render the upload page.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"upload_file":{"name":"upload_file","docstring":"Handle file upload.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"analyze_directory":{"name":"analyze_directory","docstring":"Handle directory analysis.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"project_details":{"name":"project_details","docstring":"Render the project details page.","params":["project_id"],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"project_analyze":{"name":"project_analyze","docstring":"Re-analyze a project.","params":["project_id"],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"project_download":{"name":"project_download","docstring":"Download the project map.","params":["project_id"],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"project_delete":{"name":"project_delete","docstring":"Delete a project.","params":["project_id"],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]},"api_project_analyze":{"name":"api_project_analyze","docstring":"API endpoint to analyze a project.","params":["project_id"],"return_type":null,"is_async":false,"calls":[],"decorators":["app.route"]}},"constants":{},"dependencies":["proj_mapper.analyzers"],"imported_by":["proj_mapper.web"],"is_entry_point":true},"proj_mapper.core":{"path":"__init__.py","docstring":"Core components of Project Mapper.\n\nThis package contains the core components for project analysis, processing, and mapping.","imports":{},"from_imports":{},"classes":{},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.core.pipeline":{"path":"pipeline.py","docstring":"Pipeline module.\n\nThis module provides the core pipeline functionality for processing projects.","imports":{"logging":"logging","time":"time"},"from_imports":{"dataclasses":["dataclass","field"],"typing":["Any","Dict","Generic","List","Optional","TypeVar"]},"classes":{"PipelineContext":{"name":"PipelineContext","docstring":"Context object for sharing data between pipeline stages.","bases":[],"methods":{"get":{"name":"get","docstring":"Get a value from the context.\n\nArgs:\n    key: The key to get\n    default: Default value if key doesn't exist\n    \nReturns:\n    The value or default","params":["key: str","default: Any"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]},"set":{"name":"set","docstring":"Set a value in the context.\n\nArgs:\n    key: The key to set\n    value: The value to set","params":["key: str","value: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"set_metadata":{"name":"set_metadata","docstring":"Set a metadata value.\n\nArgs:\n    key: The key to set\n    value: The value to set","params":["key: str","value: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["project","_data","_metadata"],"class_attrs":{"project":"None"},"decorators":["dataclass"]},"PipelineStage":{"name":"PipelineStage","docstring":"Base class for pipeline stages.","bases":["Unknown"],"methods":{"process":{"name":"process","docstring":"Process data through the pipeline stage.\n\nArgs:\n    context: The pipeline context\n    data: The input data\n    \nReturns:\n    The processed data\n    \nRaises:\n    NotImplementedError: If not implemented by subclass","params":["context: PipelineContext","data: T"],"return_type":"U","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"Pipeline":{"name":"Pipeline","docstring":"Pipeline for processing data through a series of stages.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the pipeline.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_stage":{"name":"add_stage","docstring":"Add a stage to the pipeline.\n\nArgs:\n    stage: The stage to add","params":["stage: PipelineStage"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"run":{"name":"run","docstring":"Run data through the pipeline.\n\nArgs:\n    data: The input data\n    \nReturns:\n    The pipeline context with results","params":["data: Any"],"return_type":"PipelineContext","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.core.config":{"path":"config.py","docstring":"Configuration management for Project Mapper.\n\nThis module provides configuration loading, validation, and access.","imports":{"os":"os","logging":"logging","yaml":"yaml"},"from_imports":{"abc":["ABC","abstractmethod"],"pathlib":["Path"],"typing":["Any","Dict","List","Optional","Union","Set"],"pydantic":["BaseModel","Field","ValidationError"]},"classes":{"ConfigurationSchema":{"name":"ConfigurationSchema","docstring":"Schema for validating configuration data.\n\nThis schema defines the structure and validation rules for Project Mapper configuration.","bases":["BaseModel"],"methods":{},"properties":["project_name","output_dir","include_patterns","exclude_patterns","max_file_size","analyze_code","analyze_docs","detect_relationships","min_confidence","output_format","pretty_print","chunk_size","parallel_processing","max_workers"],"class_attrs":{},"decorators":[]},"ConfigSource":{"name":"ConfigSource","docstring":"Base class for configuration sources.","bases":[],"methods":{"get_config":{"name":"get_config","docstring":"Get configuration from this source.\n\nReturns:\n    Dictionary of configuration values","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"priority":{"name":"priority","docstring":"Get the priority of this source.\n\nHigher priority sources override lower priority ones.\n\nReturns:\n    Priority value (0-100)","params":[],"return_type":"int","is_async":false,"calls":[],"decorators":["property"]}},"properties":[],"class_attrs":{},"decorators":[]},"EnvironmentConfigSource":{"name":"EnvironmentConfigSource","docstring":"Configuration source that reads from environment variables.","bases":["ConfigSource"],"methods":{"get_config":{"name":"get_config","docstring":"Get configuration from environment variables.\n\nReturns:\n    Dictionary of configuration values","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"priority":{"name":"priority","docstring":"Get the priority of environment variables.\n\nReturns:\n    Priority value (50)","params":[],"return_type":"int","is_async":false,"calls":[],"decorators":["property"]}},"properties":[],"class_attrs":{"ENV_PREFIX":"'PROJ_MAPPER_'"},"decorators":[]},"FileConfigSource":{"name":"FileConfigSource","docstring":"Configuration source that reads from a file.","bases":["ConfigSource"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the file config source.\n\nArgs:\n    file_path: Path to the configuration file","params":["file_path: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_config":{"name":"get_config","docstring":"Get configuration from the file.\n\nReturns:\n    Dictionary of configuration values","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"priority":{"name":"priority","docstring":"Get the priority of file configuration.\n\nReturns:\n    Priority value (25)","params":[],"return_type":"int","is_async":false,"calls":[],"decorators":["property"]}},"properties":[],"class_attrs":{},"decorators":[]},"Configuration":{"name":"Configuration","docstring":"Configuration manager for Project Mapper.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the configuration manager.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_source":{"name":"add_source","docstring":"Add a configuration source.\n\nArgs:\n    source: The configuration source to add","params":["source: ConfigSource"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"load":{"name":"load","docstring":"Load configuration from all sources.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get":{"name":"get","docstring":"Get a configuration value.\n\nArgs:\n    key: The configuration key\n    default: Default value if key doesn't exist\n    \nReturns:\n    The configuration value or default","params":["key: str","default: Any"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]},"get_all":{"name":"get_all","docstring":"Get all configuration values.\n\nReturns:\n    Dictionary of all configuration values","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"set":{"name":"set","docstring":"Set a configuration value.\n\nArgs:\n    key: The configuration key\n    value: The value to set","params":["key: str","value: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"from_file":{"name":"from_file","docstring":"Create a configuration instance from a file.\n\nArgs:\n    file_path: Path to the configuration file\n    \nReturns:\n    Configuration instance with the file as a source","params":["cls","file_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"create_default":{"name":"create_default","docstring":"Create a configuration instance with default sources.\n\nArgs:\n    project_path: Path to the project root (optional)\n    \nReturns:\n    Configuration instance with default sources","params":["cls","project_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]}},"properties":[],"class_attrs":{"DEFAULTS":"{}"},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.core.mapping":{"path":"mapping.py","docstring":"","imports":{},"from_imports":{"proj_mapper.models.code":["CodeElement","CodeReference","Location","LocationModel","CodeElementType"],"typing":["Optional","Union","Dict","Any"]},"classes":{},"functions":{"add_reference":{"name":"add_reference","docstring":"Add a reference between two code elements.\n\nArgs:\n    source_id: ID of the source element\n    target_id: ID of the target element\n    ref_type: Type of reference\n    location: Optional location of the reference (Location or LocationModel)\n    confidence: Confidence score for this reference","params":["source_id: str","target_id: str","ref_type: str","location: Unknown","confidence: float"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.core.file_discovery":{"path":"file_discovery.py","docstring":"File discovery module.\n\nThis module provides functionality for discovering and categorizing files in a project.","imports":{"logging":"logging","os":"os","fnmatch":"fnmatch"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Dict","List","Optional","Set"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"FileDiscovery":{"name":"FileDiscovery","docstring":"Discovers and categorizes files in a project.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the file discovery.\n\nArgs:\n    include_patterns: Set of glob patterns for files to include\n    exclude_patterns: Set of glob patterns for files to exclude\n    max_file_size: Maximum file size in bytes","params":["include_patterns: Unknown","exclude_patterns: Unknown","max_file_size: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"discover_files":{"name":"discover_files","docstring":"Discover files in a directory.\n\nArgs:\n    root_path: Path to the root directory\n    \nReturns:\n    List of discovered files","params":["root_path: Path"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"categorize_files":{"name":"categorize_files","docstring":"Categorize files by type.\n\nArgs:\n    files: List of discovered files\n    \nReturns:\n    Dictionary mapping file type strings to lists of files","params":["files: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_matches_pattern":{"name":"_matches_pattern","docstring":"Check if a path matches a glob pattern.\n\nArgs:\n    path: Path to check (relative to root)\n    root: Root directory path\n    pattern: Glob pattern\n    \nReturns:\n    True if the path matches the pattern","params":["path: str","root: str","pattern: str"],"return_type":"bool","is_async":false,"calls":[],"decorators":["staticmethod"]},"_is_binary":{"name":"_is_binary","docstring":"Check if a file is likely binary.\n\nArgs:\n    path: Path to check\n    \nReturns:\n    True if the file is likely binary, False otherwise","params":["path: Path"],"return_type":"bool","is_async":false,"calls":[],"decorators":["staticmethod"]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.core.project_manager":{"path":"project_manager.py","docstring":"Project Manager for Project Mapper.\n\nThis module defines the ProjectManager class, which serves as the main entry point\nto the Project Mapper system.","imports":{"logging":"logging"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Any","Dict","List","Optional","Union","cast"],"proj_mapper.core.config":["Configuration"],"proj_mapper.core.file_discovery":["FileDiscovery"],"proj_mapper.core.pipeline":["Pipeline","PipelineContext","PipelineStage"],"proj_mapper.models.file":["DiscoveredFile","FileType"],"proj_mapper.models.project":["Project","ProjectMap"],"proj_mapper.core.discovery":["ProjectDiscoveryStage"],"proj_mapper.analyzers.pipeline_stages":["CodeAnalysisStage","DocumentationAnalysisStage","CombinedAnalysisStage"],"proj_mapper.storage.map_storage":["MapStorage"]},"classes":{"ProjectDiscoveryStage":{"name":"ProjectDiscoveryStage","docstring":"Pipeline stage for discovering files in a project.","bases":["Unknown"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the discovery stage.\n\nArgs:\n    config: The configuration to use","params":["config: Configuration"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the project by discovering its files.\n\nArgs:\n    context: The pipeline context\n    project: The project to discover files for\n    \nReturns:\n    The updated project with discovered files","params":["context: PipelineContext","project: Project"],"return_type":"Project","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ProjectMapCreationStage":{"name":"ProjectMapCreationStage","docstring":"Pipeline stage for creating the final project map.","bases":["Unknown"],"methods":{"process":{"name":"process","docstring":"Process the project by creating a project map.\n\nArgs:\n    context: The pipeline context\n    project: The project to create a map for\n    \nReturns:\n    The project","params":["context: PipelineContext","project: Project"],"return_type":"Project","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ProjectManager":{"name":"ProjectManager","docstring":"Main entry point for the Project Mapper system.\n\nThe ProjectManager coordinates the analysis process and manages the overall workflow.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the project manager.\n\nArgs:\n    config: Optional configuration object","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"analyze_project":{"name":"analyze_project","docstring":"Analyze a project and generate a project map.\n\nArgs:\n    project_path: Path to the project root\n    \nReturns:\n    Generated project map\n    \nRaises:\n    ValueError: If project path is invalid","params":["project_path: str"],"return_type":"ProjectMap","is_async":false,"calls":[],"decorators":[]},"update_map":{"name":"update_map","docstring":"Update an existing project map.\n\nArgs:\n    project_path: Path to the project root\n    \nReturns:\n    Updated project map\n    \nRaises:\n    ValueError: If project path is invalid","params":["project_path: str"],"return_type":"ProjectMap","is_async":false,"calls":[],"decorators":[]},"_create_pipeline":{"name":"_create_pipeline","docstring":"Create the analysis pipeline.\n\nReturns:\n    Configured pipeline instance","params":[],"return_type":"Pipeline","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.core.analysis","proj_mapper.analyzers.code","proj_mapper.core.analysis","proj_mapper.models.documentation","proj_mapper.storage.map_storage","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.core.analysis"],"imported_by":[],"is_entry_point":false},"proj_mapper.core.discovery":{"path":"discovery.py","docstring":"Project discovery stage for Project Mapper.\n\nThis module contains the ProjectDiscoveryStage class which handles discovering files\nin a project and categorizing them by type.","imports":{"logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["Dict","Any","Optional","List","Set"],"proj_mapper.core.file_discovery":["FileDiscovery"],"proj_mapper.core.pipeline":["PipelineContext","PipelineStage"],"proj_mapper.models.file":["DiscoveredProject"]},"classes":{"ProjectDiscoveryStage":{"name":"ProjectDiscoveryStage","docstring":"Pipeline stage for discovering project files.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the discovery stage.\n\nArgs:\n    config: Optional configuration dictionary","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the discovery stage.\n\nArgs:\n    context: The pipeline context\n    \nRaises:\n    ValueError: If project path is not set in context","params":["context: PipelineContext"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.core.analysis","proj_mapper.models.documentation","proj_mapper.core.analysis"],"imported_by":[],"is_entry_point":false},"proj_mapper.core.serialization":{"path":"serialization.py","docstring":"","imports":{},"from_imports":{},"classes":{},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.core.analysis":{"path":"analysis.py","docstring":"Analysis module for Project Mapper.\n\nThis module contains the CombinedAnalysisStage class which handles analyzing\ndiscovered files and generating project maps.","imports":{"logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["Dict","Any","Optional","List"],"datetime":["datetime"],"proj_mapper.analyzers.factory":["AnalyzerFactory"],"proj_mapper.core.pipeline":["PipelineContext","PipelineStage"],"proj_mapper.models.file":["DiscoveredProject","FileType"],"proj_mapper.models.project":["Project","ProjectMap"]},"classes":{"CombinedAnalysisStage":{"name":"CombinedAnalysisStage","docstring":"Pipeline stage for analyzing discovered files.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the analysis stage.\n\nArgs:\n    config: Optional configuration dictionary","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the analysis stage.\n\nArgs:\n    context: The pipeline context\n    \nRaises:\n    ValueError: If discovered project is not set in context","params":["context: PipelineContext"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.code","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":["proj_mapper","proj_mapper","proj_mapper","proj_mapper","proj_mapper.core.project_manager","proj_mapper.core.project_manager","proj_mapper.core.project_manager","proj_mapper.core.project_manager","proj_mapper.core.discovery","proj_mapper.core.discovery","proj_mapper.output.pipeline_stages","proj_mapper.relationship.mapper","proj_mapper.relationship.pipeline_stages","proj_mapper.cli.main","proj_mapper.cli.commands.relationship","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.documentation.pipeline"],"is_entry_point":false},"proj_mapper.output":{"path":"__init__.py","docstring":"Project Mapper output generation subsystem.\n\nThis package contains components for generating maps, visualizations, and other outputs.","imports":{},"from_imports":{"proj_mapper.output.config":["GeneratorConfig","MapFormatType"],"proj_mapper.output.generator":["MapTemplate","MapGenerator"],"proj_mapper.output.adapters":["OutputAdapter"],"proj_mapper.output.adapters.json_adapter":["JSONAdapter"],"proj_mapper.output.adapters.markdown_adapter":["MarkdownAdapter"],"proj_mapper.output.templates.project_overview":["ProjectOverviewTemplate"],"proj_mapper.output.storage":["StorageManager","MapStorageProvider","LocalFileSystemStorage"],"proj_mapper.output.ai_optimization":["TokenizationEstimator","AIOptimizer"],"proj_mapper.output.chunking":["ChunkingStrategy","HierarchicalChunkingStrategy","ChunkingEngine"],"proj_mapper.output.pipeline_stages":["MapGenerationStage","VisualizationGenerationStage"],"proj_mapper.output.visualization":["VisualizationGenerator","VisualizationConfig","VisualizationType","VisualizationFormat","DotRenderer","GraphRenderer"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.output.adapters.json_adapter","proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.output.adapters.json_adapter","proj_mapper.output.adapters.json_adapter","proj_mapper.output.adapters","proj_mapper.output.templates.project_overview"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.ai_optimization":{"path":"ai_optimization.py","docstring":"AI optimization utilities for Project Mapper.\n\nThis module provides functionality for optimizing map outputs for AI model\nconsumption, including tokenization estimation and optimization strategies.","imports":{"logging":"logging","re":"re"},"from_imports":{"typing":["Any","Dict","List","Mapping","Optional","Sequence","Set","Union"],"proj_mapper.models.relationship":["RelationshipType"],"proj_mapper.output.config":["GeneratorConfig"]},"classes":{"TokenizationEstimator":{"name":"TokenizationEstimator","docstring":"Estimator for token counts in AI models.\n\nThis class provides methods for estimating the number of tokens that\ndifferent data structures will consume in AI models.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the token estimator.\n\nArgs:\n    chars_per_token: Average characters per token (GPT models average ~4)","params":["chars_per_token: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"estimate_tokens":{"name":"estimate_tokens","docstring":"Estimate the number of tokens in the data.\n\nArgs:\n    data: The data to estimate tokens for\n    \nReturns:\n    Estimated token count","params":["data: Any"],"return_type":"int","is_async":false,"calls":[],"decorators":[]},"_estimate_string_tokens":{"name":"_estimate_string_tokens","docstring":"Estimate the number of tokens in a string.\n\nArgs:\n    text: The string to estimate tokens for\n    \nReturns:\n    Estimated token count","params":["text: str"],"return_type":"int","is_async":false,"calls":[],"decorators":[]},"_estimate_dict_tokens":{"name":"_estimate_dict_tokens","docstring":"Estimate the number of tokens in a dictionary.\n\nArgs:\n    data: The dictionary to estimate tokens for\n    \nReturns:\n    Estimated token count","params":["data: Mapping"],"return_type":"int","is_async":false,"calls":[],"decorators":[]},"_estimate_sequence_tokens":{"name":"_estimate_sequence_tokens","docstring":"Estimate the number of tokens in a sequence.\n\nArgs:\n    data: The sequence to estimate tokens for\n    \nReturns:\n    Estimated token count","params":["data: Sequence"],"return_type":"int","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"AIOptimizer":{"name":"AIOptimizer","docstring":"Optimizer for AI model consumption.\n\nThis class provides methods for optimizing map structures to be more\nefficiently consumed by AI models.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the AI optimizer.\n\nArgs:\n    config: The generator configuration","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"optimize_map":{"name":"optimize_map","docstring":"Optimize a map structure for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_optimize_code_elements":{"name":"_optimize_code_elements","docstring":"Optimize code elements for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_optimize_documentation_elements":{"name":"_optimize_documentation_elements","docstring":"Optimize documentation elements for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_optimize_relationships":{"name":"_optimize_relationships","docstring":"Optimize relationships for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_add_ai_metadata":{"name":"_add_ai_metadata","docstring":"Add AI-specific metadata to the map.\n\nArgs:\n    map_structure: The map structure to augment\n    \nReturns:\n    The augmented map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.output.adapters"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.config":{"path":"config.py","docstring":"Generator configuration for Project Mapper.\n\nThis module contains configuration classes for map generation.","imports":{"logging":"logging"},"from_imports":{"dataclasses":["dataclass"],"enum":["Enum"],"typing":["Optional"]},"classes":{"MapFormatType":{"name":"MapFormatType","docstring":"Supported map format types.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{"JSON":"'json'","MARKDOWN":"'markdown'","YAML":"'yaml'","DOT":"'dot'"},"decorators":[]},"GeneratorConfig":{"name":"GeneratorConfig","docstring":"Configuration for map generation.\n\nAttributes:\n    include_code: Whether to include code elements in the map\n    include_documentation: Whether to include documentation elements in the map\n    include_metadata: Whether to include metadata in the map\n    enable_chunking: Whether to enable chunking for large maps\n    max_tokens: Maximum token estimate (0 for no limit)\n    ai_optimize: Whether to apply AI optimization\n    format_type: The format type for the map","bases":[],"methods":{"to_dict":{"name":"to_dict","docstring":"Convert the config to a serializable dictionary.\n\nReturns:\n    A dictionary representation of this config","params":[],"return_type":"dict","is_async":false,"calls":[],"decorators":[]}},"properties":["include_code","include_documentation","include_metadata","enable_chunking","max_tokens","ai_optimize","format_type"],"class_attrs":{"include_code":"True","include_documentation":"True","include_metadata":"True","enable_chunking":"False","max_tokens":"0","ai_optimize":"False"},"decorators":["dataclass"]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.output.storage":{"path":"storage.py","docstring":"Storage management for Project Mapper.\n\nThis module provides functionality for storing and retrieving generated maps.","imports":{"json":"json","logging":"logging","os":"os","re":"re","shutil":"shutil","platform":"platform"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Any","Dict","List","Optional","Set","Union"],"proj_mapper.output.config":["GeneratorConfig","MapFormatType"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{"MapStorageProvider":{"name":"MapStorageProvider","docstring":"Base class for map storage providers.","bases":[],"methods":{"store_map":{"name":"store_map","docstring":"Store a generated map.\n\nArgs:\n    map_data: The map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    format_extension: The file extension for the format\n    \nReturns:\n    The path to the stored map","params":["map_data: Any","project_name: str","config: GeneratorConfig","format_extension: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"store_chunked_map":{"name":"store_chunked_map","docstring":"Store a chunked map.\n\nArgs:\n    chunked_map: The chunked map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    format_extension: The file extension for the format\n    \nReturns:\n    The path to the master chunk","params":["chunked_map: Unknown","project_name: str","config: GeneratorConfig","format_extension: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_latest_map":{"name":"get_latest_map","docstring":"Get the path to the latest map for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    The path to the latest map, or None if not found","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_map_history":{"name":"get_map_history","docstring":"Get the history of maps for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    A list of map metadata dictionaries","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"clean_old_maps":{"name":"clean_old_maps","docstring":"Clean old maps for a project.\n\nArgs:\n    project_name: The name of the project\n    keep_count: The number of maps to keep\n    \nReturns:\n    The number of maps deleted","params":["project_name: str","keep_count: int"],"return_type":"int","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"LocalFileSystemStorage":{"name":"LocalFileSystemStorage","docstring":"Storage provider that uses the local file system.","bases":["MapStorageProvider"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the storage provider.\n\nArgs:\n    base_dir: The base directory for storing maps","params":["base_dir: str"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"store_map":{"name":"store_map","docstring":"Store a generated map.\n\nArgs:\n    map_data: The map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    format_extension: The file extension for the format\n    \nReturns:\n    The path to the stored map","params":["map_data: Any","project_name: str","config: GeneratorConfig","format_extension: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"store_chunked_map":{"name":"store_chunked_map","docstring":"Store a chunked map.\n\nArgs:\n    chunked_map: The chunked map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    format_extension: The file extension for the format\n    \nReturns:\n    The path to the master chunk","params":["chunked_map: Unknown","project_name: str","config: GeneratorConfig","format_extension: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_latest_map":{"name":"get_latest_map","docstring":"Get the path to the latest map for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    The path to the latest map, or None if not found","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_map_history":{"name":"get_map_history","docstring":"Get the history of maps for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    A list of map metadata dictionaries","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"clean_old_maps":{"name":"clean_old_maps","docstring":"Clean old maps for a project.\n\nArgs:\n    project_name: The name of the project\n    keep_count: The number of maps to keep\n    \nReturns:\n    The number of maps deleted","params":["project_name: str","keep_count: int"],"return_type":"int","is_async":false,"calls":[],"decorators":[]},"_ensure_maps_dir":{"name":"_ensure_maps_dir","docstring":"Create the maps directory if it doesn't exist.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_sanitize_name":{"name":"_sanitize_name","docstring":"Sanitize a name for use in filenames.\n\nArgs:\n    name: The name to sanitize\n    \nReturns:\n    The sanitized name","params":["name: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_update_latest_link":{"name":"_update_latest_link","docstring":"Update the latest symlink for a project.\n\nArgs:\n    project_dir: The project directory\n    filename: The filename to link to","params":["project_dir: str","filename: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_ensure_index_file":{"name":"_ensure_index_file","docstring":"Make sure the index file exists.\n\nArgs:\n    project_dir: The project directory","params":["project_dir: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_update_index":{"name":"_update_index","docstring":"Update the index file with a new map.\n\nArgs:\n    project_dir: The project directory\n    filename: The filename of the new map\n    config: The generator configuration","params":["project_dir: str","filename: str","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"StorageManager":{"name":"StorageManager","docstring":"Manages storage operations for project maps.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the storage manager.\n\nArgs:\n    storage_provider: The storage provider to use. If None, uses LocalFileSystemStorage.","params":["storage_provider: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"store_map":{"name":"store_map","docstring":"Store a generated map.\n\nArgs:\n    map_data: The map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    \nReturns:\n    The path to the stored map","params":["map_data: Any","project_name: str","config: GeneratorConfig"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"store_chunked_map":{"name":"store_chunked_map","docstring":"Store a chunked map.\n\nArgs:\n    chunked_map: The chunked map data to store\n    project_name: The name of the project\n    config: The generator configuration\n    \nReturns:\n    The path to the master chunk","params":["chunked_map: Unknown","project_name: str","config: GeneratorConfig"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_latest_map":{"name":"get_latest_map","docstring":"Get the path to the latest map for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    The path to the latest map, or None if not found","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_map_history":{"name":"get_map_history","docstring":"Get the history of maps for a project.\n\nArgs:\n    project_name: The name of the project\n    \nReturns:\n    A list of map metadata dictionaries","params":["project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"clean_old_maps":{"name":"clean_old_maps","docstring":"Clean old maps for a project.\n\nArgs:\n    project_name: The name of the project\n    keep_count: The number of maps to keep\n    \nReturns:\n    The number of maps deleted","params":["project_name: str","keep_count: int"],"return_type":"int","is_async":false,"calls":[],"decorators":[]},"_get_format_extension":{"name":"_get_format_extension","docstring":"Get the file extension for a format type.\n\nArgs:\n    format_type: The format type\n    \nReturns:\n    The file extension with leading dot","params":["format_type: MapFormatType"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.utils.json_encoder"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.chunking":{"path":"chunking.py","docstring":"Chunking engine for project maps.\n\nThis module provides functionality for chunking large maps into smaller,\nmore manageable pieces for AI consumption.","imports":{"logging":"logging","copy":"copy"},"from_imports":{"typing":["Any","Dict","List","Optional","Set","Tuple"],"proj_mapper.output.ai_optimization":["TokenizationEstimator"],"proj_mapper.output.config":["GeneratorConfig"]},"classes":{"ChunkingStrategy":{"name":"ChunkingStrategy","docstring":"Base class for chunking strategies.","bases":[],"methods":{"chunk_map":{"name":"chunk_map","docstring":"Chunk a map into smaller pieces.\n\nArgs:\n    map_structure: The complete map structure\n    config: The generator configuration\n    \nReturns:\n    A dictionary of chunk IDs to chunk data","params":["map_structure: Unknown","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"HierarchicalChunkingStrategy":{"name":"HierarchicalChunkingStrategy","docstring":"Chunking strategy that creates a hierarchy of chunks based on map sections.","bases":["ChunkingStrategy"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the chunking strategy.\n\nArgs:\n    target_chunk_size: The target token size for each chunk\n    overlap: The percentage of overlap between chunks (0.0-1.0)","params":["target_chunk_size: int","overlap: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"chunk_map":{"name":"chunk_map","docstring":"Chunk a map into smaller pieces using a hierarchical approach.\n\nArgs:\n    map_structure: The complete map structure\n    config: The generator configuration\n    \nReturns:\n    A dictionary of chunk IDs to chunk data","params":["map_structure: Unknown","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_chunk_code_elements":{"name":"_chunk_code_elements","docstring":"Chunk code elements into manageable pieces.\n\nArgs:\n    map_structure: The complete map structure\n    chunks: The dictionary of chunks to update\n    master_chunk: The master chunk to update","params":["map_structure: Unknown","chunks: Unknown","master_chunk: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_chunk_documentation_elements":{"name":"_chunk_documentation_elements","docstring":"Chunk documentation elements into manageable pieces.\n\nArgs:\n    map_structure: The complete map structure\n    chunks: The dictionary of chunks to update\n    master_chunk: The master chunk to update","params":["map_structure: Unknown","chunks: Unknown","master_chunk: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_chunk_relationships":{"name":"_chunk_relationships","docstring":"Chunk relationships into manageable pieces.\n\nArgs:\n    map_structure: The complete map structure\n    chunks: The dictionary of chunks to update\n    master_chunk: The master chunk to update","params":["map_structure: Unknown","chunks: Unknown","master_chunk: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ChunkingEngine":{"name":"ChunkingEngine","docstring":"Engine for chunking maps into smaller pieces.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the chunking engine.\n\nArgs:\n    strategy: The chunking strategy to use (defaults to HierarchicalChunkingStrategy)","params":["strategy: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"chunk_map":{"name":"chunk_map","docstring":"Chunk a map into smaller pieces.\n\nArgs:\n    map_structure: The complete map structure\n    config: The generator configuration\n    \nReturns:\n    A dictionary of chunk IDs to chunk data","params":["map_structure: Unknown","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.output.adapters"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.pipeline_stages":{"path":"pipeline_stages.py","docstring":"Pipeline stages for map generation.\n\nThis module contains pipeline stages for generating different types of maps.","imports":{"logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["Dict","List","Any","Optional","cast"],"proj_mapper.core.pipeline":["PipelineStage","PipelineContext"],"proj_mapper.models.code":["CodeElement"],"proj_mapper.models.documentation":["DocumentationElement"],"proj_mapper.models.relationship":["Relationship"],"proj_mapper.output.generator":["MapGenerator"],"proj_mapper.output.visualization":["VisualizationGenerator","VisualizationConfig","VisualizationType","VisualizationFormat"]},"classes":{"MapGenerationStage":{"name":"MapGenerationStage","docstring":"Pipeline stage for generating maps.\n\nThis stage generates maps from code elements, documentation elements, and relationships.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the map generation stage.\n\nArgs:\n    output_dir: Directory to output maps to (default: None, in-memory only)\n    project_name: Name of the project","params":["output_dir: Unknown","project_name: str"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process code elements, documentation elements, and relationships to generate maps.\n\nArgs:\n    context: The pipeline context\n    input_data: Input data (not used, reads from context)\n    \nReturns:\n    Dictionary with generated maps\n    \nNotes:\n    This stage reads code elements, documentation elements, and relationships\n    from the pipeline context and generates various maps. The results are added\n    to the context under the key 'generated_maps'.","params":["context: PipelineContext","input_data: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"VisualizationGenerationStage":{"name":"VisualizationGenerationStage","docstring":"Pipeline stage for generating visualizations.\n\nThis stage generates various visualizations from the generated maps.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the visualization generation stage.\n\nArgs:\n    output_dir: Directory to output visualizations to (default: None)\n    visualization_types: Types of visualizations to generate (default: all)\n    config: Visualization configuration (default: None)","params":["output_dir: Unknown","visualization_types: Unknown","config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process generated maps to create visualizations.\n\nArgs:\n    context: The pipeline context\n    input_data: Input data (not used, reads from context)\n    \nReturns:\n    Dictionary with generated visualization paths\n    \nNotes:\n    This stage reads generated maps from the pipeline context and creates\n    visualizations. The results are added to the context under the key\n    'generated_visualizations'.","params":["context: PipelineContext","input_data: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.output.adapters","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.generator":{"path":"generator.py","docstring":"Map generator for project mapping.\n\nThis module contains the MapGenerator class that creates different types of maps.","imports":{"json":"json","logging":"logging","os":"os"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Dict","List","Any","Optional","Set"],"proj_mapper.models.code":["CodeElement"],"proj_mapper.models.documentation":["DocumentationElement"],"proj_mapper.models.relationship":["Relationship"],"proj_mapper.models.project":["Project","ProjectMap"],"proj_mapper.output.chunking":["ChunkingStrategy","HierarchicalChunkingStrategy"],"proj_mapper.output.storage":["MapStorageProvider","LocalFileSystemStorage"],"proj_mapper.output.config":["GeneratorConfig"]},"classes":{"MapTemplate":{"name":"MapTemplate","docstring":"Base class for map templates.","bases":[],"methods":{"name":{"name":"name","docstring":"Get the template name.\n\nReturns:\n    The template name","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":["property"]},"generate":{"name":"generate","docstring":"Generate a map from the relationship graph.\n\nArgs:\n    graph: The relationship graph\n    config: The generator configuration\n    \nReturns:\n    The generated map structure","params":["graph: Any","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"MapGenerator":{"name":"MapGenerator","docstring":"Generator for creating different types of project maps.\n\nThis class handles the conversion of code and documentation elements and their\nrelationships into various map formats, including HTML, JSON, and specialized \nformats for visualization tools.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the map generator.\n\nArgs:\n    storage_provider: Provider for storing maps (default: LocalFileSystemStorage)\n    chunking_strategy: Strategy for chunking large maps (default: HierarchicalChunkingStrategy)","params":["storage_provider: Unknown","chunking_strategy: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"generate_project_map":{"name":"generate_project_map","docstring":"Generate a complete project map.\n\nArgs:\n    code_elements: List of code elements\n    doc_elements: List of documentation elements\n    relationships: List of relationships\n    project_name: Name of the project\n    output_dir: Directory to output map files (optional)\n    metadata: Additional metadata for the project map\n    \nReturns:\n    The generated project map","params":["code_elements: Unknown","doc_elements: Unknown","relationships: Unknown","project_name: str","output_dir: Unknown","metadata: Unknown"],"return_type":"ProjectMap","is_async":false,"calls":[],"decorators":[]},"generate_relationship_graph":{"name":"generate_relationship_graph","docstring":"Generate a graph representation of relationships.\n\nArgs:\n    relationships: List of relationships\n    code_elements: List of code elements\n    doc_elements: List of documentation elements\n    project_name: Name of the project\n    output_dir: Directory to output graph file (optional)\n    \nReturns:\n    Dictionary with nodes and edges for visualization","params":["relationships: Unknown","code_elements: Unknown","doc_elements: Unknown","project_name: str","output_dir: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_save_map":{"name":"_save_map","docstring":"Save the project map to the specified path.\n\nArgs:\n    project_map: The project map to save\n    output_path: The path to save the map to","params":["project_map: ProjectMap","output_path: Path"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"generate_documentation_structure_map":{"name":"generate_documentation_structure_map","docstring":"Generate a map of documentation structure.\n\nArgs:\n    doc_elements: List of documentation elements\n    relationships: List of relationships\n    project_name: Name of the project\n    output_dir: Directory to output map file (optional)\n    \nReturns:\n    Dictionary representing documentation structure","params":["doc_elements: Unknown","relationships: Unknown","project_name: str","output_dir: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_build_doc_tree":{"name":"_build_doc_tree","docstring":"Build a tree structure for a documentation element and its children.\n\nArgs:\n    doc: The root documentation element\n    file_elements: All elements in the same file\n    doc_map: Map of doc element titles to elements\n    \nReturns:\n    Dictionary representing the element and its children","params":["doc: DocumentationElement","file_elements: Unknown","doc_map: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.output.adapters","proj_mapper.models.documentation","proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.visualization":{"path":"visualization.py","docstring":"Visualization generator for Project Mapper.\n\nThis module provides functionality for generating various types of visualizations\nfrom project maps.","imports":{"logging":"logging","os":"os"},"from_imports":{"pathlib":["Path"],"typing":["Any","Dict","List","Optional","Set","Union"],"enum":["Enum"]},"classes":{"VisualizationType":{"name":"VisualizationType","docstring":"Types of visualizations that can be generated.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{"DEPENDENCY":"'dependency'","HIERARCHY":"'hierarchy'","MODULE":"'module'","DOCUMENTATION":"'documentation'","RELATIONSHIP":"'relationship'"},"decorators":[]},"VisualizationFormat":{"name":"VisualizationFormat","docstring":"Output formats for visualizations.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{"DOT":"'dot'","SVG":"'svg'","PNG":"'png'","HTML":"'html'"},"decorators":[]},"VisualizationConfig":{"name":"VisualizationConfig","docstring":"Configuration for visualization generation.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize visualization configuration.\n\nArgs:\n    output_format: The output format for the visualization\n    include_metadata: Whether to include metadata in the visualization\n    include_weights: Whether to include relationship weights/confidence\n    min_confidence: Minimum confidence threshold for relationships\n    max_nodes: Maximum number of nodes to include\n    theme: Color theme for the visualization\n    interactive: Whether to generate interactive visualizations","params":["output_format: VisualizationFormat","include_metadata: bool","include_weights: bool","min_confidence: float","max_nodes: int","theme: str","interactive: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"GraphRenderer":{"name":"GraphRenderer","docstring":"Base class for graph-based visualization renderers.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the renderer.\n\nArgs:\n    config: The visualization configuration","params":["config: VisualizationConfig"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"render":{"name":"render","docstring":"Render a graph visualization.\n\nArgs:\n    graph_data: The graph data to visualize\n    output_path: Path to save the visualization","params":["graph_data: Unknown","output_path: Path"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"DotRenderer":{"name":"DotRenderer","docstring":"Renderer for Graphviz DOT format.","bases":["GraphRenderer"],"methods":{"render":{"name":"render","docstring":"Render a graph in DOT format.\n\nArgs:\n    graph_data: The graph data to visualize\n    output_path: Path to save the visualization","params":["graph_data: Unknown","output_path: Path"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"VisualizationGenerator":{"name":"VisualizationGenerator","docstring":"Generator for creating visualizations from project maps.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the visualization generator.\n\nArgs:\n    config: The visualization configuration","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"generate_visualization":{"name":"generate_visualization","docstring":"Generate a visualization.\n\nArgs:\n    map_data: The map data to visualize\n    vis_type: The type of visualization to generate\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization, or None if generation failed","params":["map_data: Unknown","vis_type: VisualizationType","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_generate_relationship_visualization":{"name":"_generate_relationship_visualization","docstring":"Generate a relationship graph visualization.\n\nArgs:\n    map_data: The map data to visualize\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization","params":["map_data: Unknown","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_generate_dependency_visualization":{"name":"_generate_dependency_visualization","docstring":"Generate a dependency graph visualization.\n\nArgs:\n    map_data: The map data to visualize\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization","params":["map_data: Unknown","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_generate_hierarchy_visualization":{"name":"_generate_hierarchy_visualization","docstring":"Generate a hierarchy visualization.\n\nArgs:\n    map_data: The map data to visualize\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization","params":["map_data: Unknown","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_generate_module_visualization":{"name":"_generate_module_visualization","docstring":"Generate a module structure visualization.\n\nArgs:\n    map_data: The map data to visualize\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization","params":["map_data: Unknown","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_generate_documentation_visualization":{"name":"_generate_documentation_visualization","docstring":"Generate a documentation structure visualization.\n\nArgs:\n    map_data: The map data to visualize\n    output_dir: Directory to save the visualization\n    project_name: Name of the project\n    \nReturns:\n    Path to the generated visualization","params":["map_data: Unknown","output_dir: Path","project_name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.output.adapters":{"path":"__init__.py","docstring":"Output adapters for Project Mapper.\n\nThis module provides the base OutputAdapter class and related functionality\nfor converting the internal map structure to specific output formats.","imports":{"logging":"logging"},"from_imports":{"abc":["ABC","abstractmethod"],"typing":["Any"],"proj_mapper.output.generator":["GeneratorConfig"]},"classes":{"OutputAdapter":{"name":"OutputAdapter","docstring":"Base class for output format adapters.\n\nOutput adapters are responsible for converting the internal map structure\nto specific output formats.","bases":["ABC"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the output adapter.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"render":{"name":"render","docstring":"Render the map structure to a specific output format.\n\nArgs:\n    map_structure: The map structure to render\n    config: The generator configuration\n    \nReturns:\n    The rendered map in the specific format","params":["map_structure: Any","config: GeneratorConfig"],"return_type":"Any","is_async":false,"calls":[],"decorators":["abstractmethod"]},"get_extension":{"name":"get_extension","docstring":"Get the file extension for this format.\n\nReturns:\n    The file extension (including the dot)","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_content_type":{"name":"get_content_type","docstring":"Get the MIME content type for this format.\n\nReturns:\n    The MIME content type","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":["proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output.ai_optimization","proj_mapper.output.storage","proj_mapper.output.chunking","proj_mapper.output.chunking","proj_mapper.output.pipeline_stages","proj_mapper.output.pipeline_stages","proj_mapper.output.generator","proj_mapper.output.generator","proj_mapper.output.generator","proj_mapper.output.adapters.markdown_adapter","proj_mapper.output.adapters.json_adapter","proj_mapper.output.templates.project_overview","proj_mapper.output.templates.project_overview","proj_mapper.cli.main","proj_mapper.cli.main","proj_mapper.cli.commands.output","proj_mapper.cli.commands.output","proj_mapper.cli.commands.output"],"is_entry_point":false},"proj_mapper.output.adapters.markdown_adapter":{"path":"markdown_adapter.py","docstring":"Markdown adapter for Project Mapper.\n\nThis module provides the MarkdownAdapter class for outputting maps in Markdown format.","imports":{"logging":"logging","json":"json"},"from_imports":{"typing":["Any","Dict","List","Optional","Union"],"proj_mapper.output.adapters":["OutputAdapter"],"proj_mapper.output.generator":["GeneratorConfig"],"proj_mapper.models.project":["ProjectMap"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{"MarkdownAdapter":{"name":"MarkdownAdapter","docstring":"Adapter for Markdown output format.\n\nThis adapter converts the internal map structure to a Markdown document.","bases":["OutputAdapter"],"methods":{"render":{"name":"render","docstring":"Render the map structure to Markdown.\n\nArgs:\n    map_structure: The map structure to render\n    config: The generator configuration\n    \nReturns:\n    The rendered map as a Markdown string","params":["map_structure: Any","config: GeneratorConfig"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_extension":{"name":"get_extension","docstring":"Get the file extension for Markdown output.\n\nReturns:\n    The file extension for Markdown","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_content_type":{"name":"get_content_type","docstring":"Get the MIME content type for Markdown.\n\nReturns:\n    The MIME content type for Markdown","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_render_metadata":{"name":"_render_metadata","docstring":"Render metadata to Markdown.\n\nArgs:\n    metadata: The metadata to render\n    lines: The list of lines to append to","params":["metadata: Unknown","lines: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_render_statistics":{"name":"_render_statistics","docstring":"Render statistics to Markdown.\n\nArgs:\n    statistics: The statistics to render\n    lines: The list of lines to append to","params":["statistics: Unknown","lines: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_render_elements":{"name":"_render_elements","docstring":"Render elements to Markdown.\n\nArgs:\n    elements: The elements to render\n    lines: The list of lines to append to","params":["elements: Unknown","lines: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_render_relationships":{"name":"_render_relationships","docstring":"Render relationships to Markdown.\n\nArgs:\n    relationships: The relationships to render\n    lines: The list of lines to append to","params":["relationships: Unknown","lines: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.utils.json_encoder","proj_mapper.output.adapters","proj_mapper.output.adapters.json_adapter","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.output.adapters.json_adapter":{"path":"json_adapter.py","docstring":"JSON adapter for Project Mapper.\n\nThis module provides the JSONAdapter class for outputting maps in JSON format.","imports":{"json":"json","logging":"logging"},"from_imports":{"datetime":["datetime"],"typing":["Any","Dict","List","Union"],"proj_mapper.output.adapters":["OutputAdapter"],"proj_mapper.output.generator":["GeneratorConfig"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{"JSONAdapter":{"name":"JSONAdapter","docstring":"Adapter for JSON output format.\n\nThis adapter converts the internal map structure to a JSON string or dictionary.","bases":["OutputAdapter"],"methods":{"render":{"name":"render","docstring":"Render the map structure to JSON.\n\nArgs:\n    map_structure: The map structure to render\n    config: The generator configuration\n    \nReturns:\n    The rendered map as a JSON string or dictionary","params":["map_structure: Any","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_extension":{"name":"get_extension","docstring":"Get the file extension for JSON output.\n\nReturns:\n    The file extension for JSON","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_content_type":{"name":"get_content_type","docstring":"Get the MIME content type for JSON.\n\nReturns:\n    The MIME content type for JSON","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_make_serializable":{"name":"_make_serializable","docstring":"Make an object JSON-serializable.\n\nArgs:\n    obj: The object to make serializable\n    \nReturns:\n    A JSON-serializable version of the object","params":["obj: Any"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]},"_config_to_dict":{"name":"_config_to_dict","docstring":"Convert a generator configuration to a dictionary.\n\nArgs:\n    config: The generator configuration\n    \nReturns:\n    A dictionary representation of the configuration","params":["config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_timestamp":{"name":"_get_timestamp","docstring":"Get the current timestamp.\n\nReturns:\n    The current timestamp in ISO format","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_get_map_stats":{"name":"_get_map_stats","docstring":"Get statistics about the map structure.\n\nArgs:\n    map_structure: The map structure\n    \nReturns:\n    Statistics about the map structure","params":["map_structure: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.utils.json_encoder"],"imported_by":["proj_mapper.output","proj_mapper.output","proj_mapper.output","proj_mapper.output.adapters.markdown_adapter"],"is_entry_point":false},"proj_mapper.output.templates.project_overview":{"path":"project_overview.py","docstring":"Project overview template for Project Mapper.\n\nThis module provides a template for generating complete project overview maps.","imports":{"logging":"logging"},"from_imports":{"typing":["Any","Dict","List","Optional","Set"],"proj_mapper.models.relationship":["RelationshipType"],"proj_mapper.relationship.graph":["RelationshipGraph","Node","Edge"],"proj_mapper.output.generator":["MapTemplate"],"proj_mapper.output.config":["GeneratorConfig"]},"classes":{"ProjectOverviewTemplate":{"name":"ProjectOverviewTemplate","docstring":"Template for generating complete project overview maps.","bases":["MapTemplate"],"methods":{"name":{"name":"name","docstring":"Get the template name.\n\nReturns:\n    The template name","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":["property"]},"generate":{"name":"generate","docstring":"Generate a project overview map from the relationship graph.\n\nArgs:\n    graph: The relationship graph\n    config: The generator configuration\n    \nReturns:\n    The generated map structure","params":["graph: RelationshipGraph","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_project_name":{"name":"_get_project_name","docstring":"Get the project name from the graph.\n\nArgs:\n    graph: The relationship graph\n    \nReturns:\n    The project name","params":["graph: RelationshipGraph"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_get_timestamp":{"name":"_get_timestamp","docstring":"Get the current timestamp.\n\nReturns:\n    The current timestamp as ISO format","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_get_statistics":{"name":"_get_statistics","docstring":"Get statistics about the graph.\n\nArgs:\n    graph: The relationship graph\n    \nReturns:\n    Statistics about the graph","params":["graph: RelationshipGraph"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_metadata":{"name":"_get_metadata","docstring":"Get metadata from the graph.\n\nArgs:\n    graph: The relationship graph\n    \nReturns:\n    Metadata about the graph","params":["graph: RelationshipGraph"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_process_nodes":{"name":"_process_nodes","docstring":"Process nodes from the graph to add code and documentation elements.\n\nArgs:\n    graph: The relationship graph\n    map_structure: The map structure to update\n    config: The generator configuration","params":["graph: RelationshipGraph","map_structure: Unknown","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_extract_element_data":{"name":"_extract_element_data","docstring":"Extract data from a node for inclusion in the map.\n\nArgs:\n    node: The node to extract data from\n    \nReturns:\n    The extracted data, or None if the node has no data","params":["node: Node"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_process_relationships":{"name":"_process_relationships","docstring":"Process edges from the graph to add relationships.\n\nArgs:\n    graph: The relationship graph\n    map_structure: The map structure to update\n    config: The generator configuration","params":["graph: RelationshipGraph","map_structure: Unknown","config: GeneratorConfig"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.relationship.graph.edge"],"imported_by":["proj_mapper.output"],"is_entry_point":false},"proj_mapper.stages.project_discovery":{"path":"project_discovery.py","docstring":"","imports":{},"from_imports":{},"classes":{"ProjectDiscoveryStage":{"name":"ProjectDiscoveryStage","docstring":"Stage for discovering project files and structure.","bases":["AnalysisStage"],"methods":{"run":{"name":"run","docstring":"Run the project discovery stage.\n\nArgs:\n    context: Analysis context","params":["context: AnalysisContext"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.pipeline":{"path":"__init__.py","docstring":"Pipeline module for Project Mapper.","imports":{},"from_imports":{"base":["PipelineContext","PipelineStage"]},"classes":{},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.pipeline.base":{"path":"base.py","docstring":"Base classes for the pipeline architecture.","imports":{},"from_imports":{"abc":["ABC","abstractmethod"],"dataclasses":["dataclass","field"],"typing":["Any","Dict"]},"classes":{"PipelineContext":{"name":"PipelineContext","docstring":"Context object passed between pipeline stages.","bases":[],"methods":{"set_result":{"name":"set_result","docstring":"Set a result in the context.\n\nArgs:\n    key: Result key\n    value: Result value","params":["key: str","value: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_result":{"name":"get_result","docstring":"Get a result from the context.\n\nArgs:\n    key: Result key\n    default: Default value if key not found\n    \nReturns:\n    Result value or default","params":["key: str","default: Any"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]},"has_result":{"name":"has_result","docstring":"Check if a result exists in the context.\n\nArgs:\n    key: Result key\n    \nReturns:\n    True if result exists, False otherwise","params":["key: str"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]}},"properties":["_results"],"class_attrs":{},"decorators":["dataclass"]},"PipelineStage":{"name":"PipelineStage","docstring":"Base class for pipeline stages.","bases":["ABC"],"methods":{"process":{"name":"process","docstring":"Process the pipeline context.\n\nArgs:\n    context: Pipeline context\n    \nReturns:\n    Updated context","params":["context: PipelineContext"],"return_type":"PipelineContext","is_async":false,"calls":[],"decorators":["abstractmethod"]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":["proj_mapper.cli.commands.output"],"is_entry_point":false},"proj_mapper.utils.json_encoder":{"path":"json_encoder.py","docstring":"JSON encoder utilities.\n\nThis module provides custom JSON encoders for project data.","imports":{"json":"json"},"from_imports":{"enum":["Enum"],"typing":["Any","Dict","Type","Callable"],"pathlib":["Path"]},"classes":{"EnumEncoder":{"name":"EnumEncoder","docstring":"Custom JSON encoder that handles Enum values, Location objects, and Path objects.\n\nThis encoder converts Enum objects to their string values, Location objects\nto dictionary representations, and Path objects to strings for JSON serialization.","bases":["json.JSONEncoder"],"methods":{"default":{"name":"default","docstring":"Override default encoding behavior.\n\nArgs:\n    obj: The object to encode\n    \nReturns:\n    JSON-serializable representation of the object","params":["obj: Any"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{"register_serializer":{"name":"register_serializer","docstring":"Register a serializer function for a class.\n\nArgs:\n    cls: The class to register a serializer for\n    serializer_func: Function that converts instances to dictionaries","params":["cls: Type","serializer_func: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"constants":{"_SERIALIZERS":"{}"},"dependencies":[],"imported_by":["proj_mapper.output.storage","proj_mapper.output.adapters.markdown_adapter","proj_mapper.output.adapters.json_adapter","proj_mapper.relationship.graph.graph","proj_mapper.cli.main","proj_mapper.cli.commands.relationship","proj_mapper.models.code","proj_mapper.models.documentation"],"is_entry_point":false},"proj_mapper.relationship":{"path":"__init__.py","docstring":"Relationship Mapping Subsystem.\n\nThis package provides functionality for mapping relationships between code and documentation elements.","imports":{},"from_imports":{"proj_mapper.relationship.detector":["RelationshipDetector","RelationshipRule","ImportRelationshipRule","InheritanceRelationshipRule","DocumentationReferenceRule","NameMatchRelationshipRule"],"proj_mapper.relationship.scoring":["ConfidenceScorer","ScoringStrategy","RelationshipTypeScoring","ContextualProximityScoring","MultipleDetectionScoring"],"proj_mapper.relationship.cross_ref":["CrossReferenceResolver","ReferenceCandidate","ReferenceMatch"],"proj_mapper.relationship.graph":["RelationshipGraph","Node","Edge"],"proj_mapper.relationship.pipeline_stages":["RelationshipDetectionStage","RelationshipScoringStage","CrossReferenceResolutionStage","RelationshipGraphBuildingStage","RelationshipServiceStage","RelationshipService"],"proj_mapper.relationship.mapper":["RelationshipMapper","RelationshipMappingStage"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.relationship.scoring","proj_mapper.relationship.scoring","proj_mapper.relationship.scoring","proj_mapper.relationship.scoring","proj_mapper.relationship.graph.edge","proj_mapper.relationship.scoring"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.mapper":{"path":"mapper.py","docstring":"Relationship mapping component for Project Mapper.\n\nThis module provides functionality for mapping relationships between code and documentation.","imports":{"logging":"logging","re":"re"},"from_imports":{"typing":["Dict","List","Set","Tuple","Optional","Any"],"collections":["defaultdict"],"dataclasses":["dataclass","field"],"proj_mapper.models.code":["CodeElement","CodeElementType"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"],"proj_mapper.models.relationship":["Relationship","RelationshipType"],"proj_mapper.core.pipeline":["PipelineStage","PipelineContext"],"proj_mapper.relationship.function_analyzer":["FunctionCallAnalyzer"]},"classes":{"RelationshipMapper":{"name":"RelationshipMapper","docstring":"Maps relationships between code and documentation elements.","bases":[],"methods":{"add_code_elements":{"name":"add_code_elements","docstring":"Add code elements to the mapper.\n\nArgs:\n    elements: List of code elements to add","params":["elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_doc_elements":{"name":"add_doc_elements","docstring":"Add documentation elements to the mapper.\n\nArgs:\n    elements: List of documentation elements to add","params":["elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"map_relationships":{"name":"map_relationships","docstring":"Map relationships between all elements.\n\nReturns:\n    List of identified relationships","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_map_doc_to_code_refs":{"name":"_map_doc_to_code_refs","docstring":"Map references from documentation to code elements.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_map_code_to_doc_refs":{"name":"_map_code_to_doc_refs","docstring":"Map references from code to documentation elements.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_map_function_calls":{"name":"_map_function_calls","docstring":"Map function call relationships between code elements.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_map_inheritance":{"name":"_map_inheritance","docstring":"Map inheritance relationships between classes.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_map_doc_to_doc_refs":{"name":"_map_doc_to_doc_refs","docstring":"Map references between documentation elements.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_calculate_doc_ref_confidence":{"name":"_calculate_doc_ref_confidence","docstring":"Calculate confidence score for a documentation reference.\n\nArgs:\n    text: The text containing the reference\n    element: The referenced element\n    \nReturns:\n    Confidence score between 0 and 1","params":["text: str","element: Unknown"],"return_type":"float","is_async":false,"calls":[],"decorators":[]},"_extract_reference_context":{"name":"_extract_reference_context","docstring":"Extract context around a reference in text.\n\nArgs:\n    text: The text containing the reference\n    reference: The reference to find context for\n    context_chars: Number of characters of context to include\n    \nReturns:\n    Context string around the reference","params":["text: str","reference: str","context_chars: int"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":["code_elements","doc_elements","relationships"],"class_attrs":{},"decorators":["dataclass"]},"RelationshipMappingStage":{"name":"RelationshipMappingStage","docstring":"Pipeline stage for mapping relationships between elements.\n\nThis stage analyzes code and documentation elements and identifies\nrelationships between them.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the relationship mapping stage.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process analysis results to map relationships.\n\nArgs:\n    context: The pipeline context\n    input_data: Input data (not used, reads from context)\n    \nReturns:\n    List of identified relationships\n    \nNotes:\n    This stage reads code and documentation analysis results from the\n    pipeline context and maps relationships between them. The results\n    are added to the context under the key 'relationships'.","params":["context: PipelineContext","input_data: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.relationship.scoring","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.cross_ref":{"path":"cross_ref.py","docstring":"Cross-reference resolver for Project Mapper.\n\nThis module provides functionality for resolving cross-references between\ncode and documentation elements.","imports":{"logging":"logging","re":"re"},"from_imports":{"difflib":["SequenceMatcher"],"typing":["Dict","List","Optional","Tuple","Set","Any","Union"],"proj_mapper.models.code":["CodeElement"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationReference"],"proj_mapper.models.relationship":["Relationship","RelationshipType"]},"classes":{"ReferenceCandidate":{"name":"ReferenceCandidate","docstring":"A potential match between a reference and an element.\n\nThis class is used to represent a potential match during cross-reference resolution.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a reference candidate.\n\nArgs:\n    element_id: The ID of the potential matching element\n    element_type: The type of the element ('code' or 'doc')\n    match_score: The confidence score for this match (0.0-1.0)\n    metadata: Additional information about the match","params":["element_id: str","element_type: str","match_score: float","metadata: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation of the candidate.\n\nReturns:\n    String representation with type and confidence","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ReferenceMatch":{"name":"ReferenceMatch","docstring":"A confirmed match between a reference and an element.\n\nThis class is used to represent a resolved cross-reference.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a reference match.\n\nArgs:\n    source_id: The ID of the referring element\n    source_type: The type of the referring element ('code' or 'doc')\n    target_id: The ID of the referenced element\n    target_type: The type of the referenced element ('code' or 'doc')\n    confidence: The confidence score for this match (0.0-1.0)\n    match_type: The type of match (e.g., 'exact', 'fuzzy', 'partial')\n    metadata: Additional information about the match","params":["source_id: str","source_type: str","target_id: str","target_type: str","confidence: float","match_type: str","metadata: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"to_relationship":{"name":"to_relationship","docstring":"Convert match to a relationship.\n\nReturns:\n    A Relationship object representing this match","params":[],"return_type":"Relationship","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"CrossReferenceResolver":{"name":"CrossReferenceResolver","docstring":"Resolver for cross-references between code and documentation.\n\nThis component resolves references between different elements, especially\nreferences from documentation to code elements.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the cross-reference resolver.\n\nArgs:\n    fuzzy_threshold: Minimum similarity score for fuzzy matching (0.0-1.0)","params":["fuzzy_threshold: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_code_elements":{"name":"add_code_elements","docstring":"Add code elements for reference resolution.\n\nArgs:\n    elements: List of code elements to add","params":["elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_doc_elements":{"name":"add_doc_elements","docstring":"Add documentation elements for reference resolution.\n\nArgs:\n    elements: List of documentation elements to add","params":["elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"resolve_doc_references":{"name":"resolve_doc_references","docstring":"Resolve references from documentation elements.\n\nReturns:\n    List of resolved reference matches","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"resolve_code_references":{"name":"resolve_code_references","docstring":"Resolve references from code elements.\n\nReturns:\n    List of resolved reference matches","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"resolve_all_references":{"name":"resolve_all_references","docstring":"Resolve all references.\n\nReturns:\n    List of all resolved reference matches","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_find_code_candidates":{"name":"_find_code_candidates","docstring":"Find code elements that might be referenced in the given text.\n\nArgs:\n    text: The text to search for references\n    \nReturns:\n    List of candidate matches","params":["text: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_extract_potential_code_names":{"name":"_extract_potential_code_names","docstring":"Extract potential code names from text.\n\nArgs:\n    text: The text to process\n    \nReturns:\n    Set of potential code names","params":["text: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_calculate_similarity":{"name":"_calculate_similarity","docstring":"Calculate the similarity between two names.\n\nArgs:\n    name1: First name\n    name2: Second name\n    \nReturns:\n    Similarity score between 0.0 and 1.0","params":["name1: str","name2: str"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.pipeline_stage":{"path":"pipeline_stage.py","docstring":"Pipeline stage for mapping relationships between code and documentation elements.","imports":{},"from_imports":{"typing":["Dict","List","Any"],"dataclasses":["dataclass"],"pipeline":["PipelineStage","PipelineContext"],"models.code":["CodeElement"],"models.documentation":["DocumentationElement"],"models.relationship":["Relationship"],"mapper":["RelationshipMapper"]},"classes":{"RelationshipMappingStage":{"name":"RelationshipMappingStage","docstring":"Pipeline stage that maps relationships between code and documentation elements.","bases":["PipelineStage"],"methods":{"process":{"name":"process","docstring":"Process the pipeline context to map relationships.\n\nArgs:\n    context: Pipeline context containing analysis results\n    \nReturns:\n    Updated context with mapped relationships","params":["context: PipelineContext"],"return_type":"PipelineContext","is_async":false,"calls":[],"decorators":[]},"_get_code_elements":{"name":"_get_code_elements","docstring":"Get code elements from the context.\n\nArgs:\n    context: Pipeline context\n    \nReturns:\n    List of code elements","params":["context: PipelineContext"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_doc_elements":{"name":"_get_doc_elements","docstring":"Get documentation elements from the context.\n\nArgs:\n    context: Pipeline context\n    \nReturns:\n    List of documentation elements","params":["context: PipelineContext"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":["dataclass"]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.detector":{"path":"detector.py","docstring":"Relationship detector for Project Mapper.\n\nThis module provides components for detecting relationships between code and documentation elements.","imports":{"logging":"logging","re":"re"},"from_imports":{"abc":["ABC","abstractmethod"],"enum":["Enum"],"typing":["Dict","List","Set","Optional","Any","Union","Tuple"],"proj_mapper.models.code":["CodeElement","CodeElementType","CodeReference"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationReference"],"proj_mapper.models.relationship":["Relationship","RelationshipType"]},"classes":{"RelationshipRule":{"name":"RelationshipRule","docstring":"Abstract base class for relationship detection rules.\n\nRules define specific heuristics for identifying relationships between elements.","bases":["ABC"],"methods":{"detect":{"name":"detect","docstring":"Detect if a relationship exists between the elements.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["abstractmethod"]},"relationship_type":{"name":"relationship_type","docstring":"Get the type of relationship this rule detects.\n\nReturns:\n    The relationship type","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]}},"properties":[],"class_attrs":{},"decorators":[]},"ImportRelationshipRule":{"name":"ImportRelationshipRule","docstring":"Rule for detecting import relationships between code elements.","bases":["RelationshipRule"],"methods":{"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect import relationships between code elements.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if an import is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"InheritanceRelationshipRule":{"name":"InheritanceRelationshipRule","docstring":"Rule for detecting inheritance relationships between classes.","bases":["RelationshipRule"],"methods":{"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect inheritance relationships between classes.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if inheritance is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"FunctionCallRelationshipRule":{"name":"FunctionCallRelationshipRule","docstring":"Rule for detecting function/method call relationships.","bases":["RelationshipRule"],"methods":{"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect function/method call relationships.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if a call is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"DocumentationReferenceRule":{"name":"DocumentationReferenceRule","docstring":"Rule for detecting documentation references to code elements.","bases":["RelationshipRule"],"methods":{"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect documentation references to code elements.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if a documentation reference is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"NameMatchRelationshipRule":{"name":"NameMatchRelationshipRule","docstring":"Rule for detecting relationships based on name matching.","bases":["RelationshipRule"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the name match rule.\n\nArgs:\n    base_confidence: Base confidence score for name matches","params":["base_confidence: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect relationships based on name similarity.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if name similarity is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_calculate_name_similarity":{"name":"_calculate_name_similarity","docstring":"Calculate the similarity between two names.\n\nArgs:\n    name1: First name\n    name2: Second name\n    \nReturns:\n    Similarity score between 0.0 and 1.0","params":["name1: str","name2: str"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ContentSimilarityRule":{"name":"ContentSimilarityRule","docstring":"Rule for detecting relationships based on content similarity.","bases":["RelationshipRule"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the content similarity rule.\n\nArgs:\n    base_confidence: Base confidence score for content similarities","params":["base_confidence: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"relationship_type":{"name":"relationship_type","docstring":"","params":[],"return_type":"RelationshipType","is_async":false,"calls":[],"decorators":["property"]},"detect":{"name":"detect","docstring":"Detect relationships based on content similarity.\n\nArgs:\n    source_element: The source element to check\n    target_element: The target element to check\n    \nReturns:\n    A Relationship object if content similarity is detected, None otherwise","params":["source_element: Unknown","target_element: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_calculate_content_similarity":{"name":"_calculate_content_similarity","docstring":"Calculate the similarity between two text contents.\n\nArgs:\n    content1: First content\n    content2: Second content\n    \nReturns:\n    Similarity score between 0.0 and 1.0","params":["content1: str","content2: str"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipDetector":{"name":"RelationshipDetector","docstring":"Main component for detecting relationships between elements.\n\nThis detector manages a set of relationship rules and applies them to detect\nrelationships between code and documentation elements.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the relationship detector with default rules.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_rule":{"name":"add_rule","docstring":"Add a relationship detection rule.\n\nArgs:\n    rule: The rule to add","params":["rule: RelationshipRule"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"detect_relationships":{"name":"detect_relationships","docstring":"Detect relationships between a source element and multiple target elements.\n\nArgs:\n    source_element: The source element\n    target_elements: List of potential target elements\n    \nReturns:\n    List of detected relationships","params":["source_element: Unknown","target_elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"detect_all_relationships":{"name":"detect_all_relationships","docstring":"Detect all relationships between the given code and documentation elements.\n\nArgs:\n    code_elements: List of code elements\n    doc_elements: List of documentation elements\n    \nReturns:\n    List of all detected relationships","params":["code_elements: Unknown","doc_elements: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.graph":{"path":"__init__.py","docstring":"Relationship graph for Project Mapper.\n\nThis module implements a graph structure for storing and querying relationships\nbetween code and documentation elements. This package exports the same interface\nas the original module to maintain backward compatibility.","imports":{},"from_imports":{"proj_mapper.relationship.graph.node":["Node"],"proj_mapper.relationship.graph.edge":["Edge"],"proj_mapper.relationship.graph.graph":["RelationshipGraph"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.relationship.graph.edge","proj_mapper.relationship.graph.edge","proj_mapper.relationship.graph.edge"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.pipeline_stages":{"path":"pipeline_stages.py","docstring":"Pipeline stages for relationship mapping.\n\nThis module provides pipeline stages that integrate relationship components with the pipeline.","imports":{"logging":"logging"},"from_imports":{"typing":["Dict","List","Any","Optional","Set"],"proj_mapper.core.pipeline":["PipelineStage","PipelineContext"],"proj_mapper.models.code":["CodeElement"],"proj_mapper.models.documentation":["DocumentationElement"],"proj_mapper.models.relationship":["Relationship","RelationshipType"],"proj_mapper.relationship.detector":["RelationshipDetector"],"proj_mapper.relationship.scoring":["ConfidenceScorer"],"proj_mapper.relationship.cross_ref":["CrossReferenceResolver"],"proj_mapper.relationship.graph":["RelationshipGraph"]},"classes":{"RelationshipDetectionStage":{"name":"RelationshipDetectionStage","docstring":"Pipeline stage for detecting relationships between elements.\n\nThis stage detects relationships between code and documentation elements.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the relationship detection stage.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the pipeline context to detect relationships.\n\nArgs:\n    context: The pipeline context containing analysis results\n    input_data: The input data (not used in this stage)\n    \nReturns:\n    List of detected relationships\n    \nRaises:\n    ValueError: If analysis results are not available in the context","params":["context: PipelineContext","input_data: Any"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_extract_code_elements":{"name":"_extract_code_elements","docstring":"Extract code elements from analysis results.\n\nArgs:\n    analysis_results: The analysis results\n    \nReturns:\n    List of code elements","params":["analysis_results: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_extract_doc_elements":{"name":"_extract_doc_elements","docstring":"Extract documentation elements from analysis results.\n\nArgs:\n    analysis_results: The analysis results\n    \nReturns:\n    List of documentation elements","params":["analysis_results: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipScoringStage":{"name":"RelationshipScoringStage","docstring":"Pipeline stage for scoring relationships.\n\nThis stage scores the confidence of relationships between elements.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the relationship scoring stage.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process relationships to score their confidence.\n\nArgs:\n    context: The pipeline context\n    input_data: The detected relationships to score\n    \nReturns:\n    List of scored relationships","params":["context: PipelineContext","input_data: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"CrossReferenceResolutionStage":{"name":"CrossReferenceResolutionStage","docstring":"Pipeline stage for resolving cross-references.\n\nThis stage resolves references between code and documentation elements.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the cross-reference resolution stage.\n\nArgs:\n    fuzzy_threshold: Minimum similarity score for fuzzy matching","params":["fuzzy_threshold: float"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the pipeline context to resolve cross-references.\n\nArgs:\n    context: The pipeline context containing elements\n    input_data: The relationships from previous stage\n    \nReturns:\n    Combined list of relationships including resolved references\n    \nRaises:\n    ValueError: If elements are not available in the context","params":["context: PipelineContext","input_data: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipGraphBuildingStage":{"name":"RelationshipGraphBuildingStage","docstring":"Pipeline stage for building the relationship graph.\n\nThis stage builds a graph representation of the relationships.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the graph building stage.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process relationships to build a graph.\n\nArgs:\n    context: The pipeline context\n    input_data: The relationships to add to the graph\n    \nReturns:\n    The built relationship graph","params":["context: PipelineContext","input_data: Unknown"],"return_type":"RelationshipGraph","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipServiceStage":{"name":"RelationshipServiceStage","docstring":"Pipeline stage for creating the relationship service.\n\nThis stage creates a service that provides access to relationships.","bases":["PipelineStage"],"methods":{"process":{"name":"process","docstring":"Process the graph to create a relationship service.\n\nArgs:\n    context: The pipeline context\n    input_data: The relationship graph\n    \nReturns:\n    The relationship service object","params":["context: PipelineContext","input_data: RelationshipGraph"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipService":{"name":"RelationshipService","docstring":"Service for accessing and querying relationships.\n\nThis service provides a high-level API for working with relationships.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the relationship service.\n\nArgs:\n    graph: The relationship graph","params":["graph: RelationshipGraph"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_related_elements":{"name":"get_related_elements","docstring":"Get elements related to the given element.\n\nArgs:\n    element_id: ID of the element\n    relationship_types: Types of relationships to include (all if None)\n    min_confidence: Minimum confidence score\n    max_depth: Maximum relationship depth\n    \nReturns:\n    Dictionary of related elements grouped by relationship type","params":["element_id: str","relationship_types: Unknown","min_confidence: float","max_depth: int"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"find_relationships":{"name":"find_relationships","docstring":"Find relationships matching the given criteria.\n\nArgs:\n    source_id: ID of the source element (optional)\n    target_id: ID of the target element (optional)\n    relationship_types: Types of relationships to include (all if None)\n    min_confidence: Minimum confidence score\n    \nReturns:\n    List of matching relationships","params":["source_id: Unknown","target_id: Unknown","relationship_types: Unknown","min_confidence: float"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_relationship_stats":{"name":"get_relationship_stats","docstring":"Get statistics about the relationships.\n\nReturns:\n    Dictionary with relationship statistics","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.relationship.scoring","proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.relationship.scoring","proj_mapper.relationship.graph.edge","proj_mapper.relationship.scoring","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.function_analyzer":{"path":"function_analyzer.py","docstring":"Function call analysis using AST parsing.\n\nThis module provides advanced function call detection using Python's AST module.","imports":{"ast":"ast","logging":"logging"},"from_imports":{"typing":["Dict","List","Set","Optional"],"dataclasses":["dataclass","field"]},"classes":{"CallContext":{"name":"CallContext","docstring":"Context information for a function call.","bases":[],"methods":{},"properties":["caller_id","callee_name","confidence","is_method_call","qualifier","line_number","context_before","context_after"],"class_attrs":{"confidence":"1.0","is_method_call":"False","qualifier":"None","line_number":"0","context_before":"''","context_after":"''"},"decorators":["dataclass"]},"ScopeInfo":{"name":"ScopeInfo","docstring":"Information about the current scope.","bases":[],"methods":{},"properties":["imports","aliases","class_methods","instance_methods"],"class_attrs":{},"decorators":["dataclass"]},"FunctionCallAnalyzer":{"name":"FunctionCallAnalyzer","docstring":"AST visitor for analyzing function calls in Python code.","bases":["ast.NodeVisitor"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the analyzer.\n\nArgs:\n    code: Python source code to analyze","params":["code: str"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"analyze":{"name":"analyze","docstring":"Analyze the code and return found function calls.\n\nReturns:\n    List of CallContext objects representing function calls","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_FunctionDef":{"name":"visit_FunctionDef","docstring":"Visit a function definition node.\n\nArgs:\n    node: AST node for function definition","params":["node: ast.FunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_Call":{"name":"visit_Call","docstring":"Visit a function call node.\n\nArgs:\n    node: AST node for function call","params":["node: ast.Call"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_Import":{"name":"visit_Import","docstring":"Visit an import node.\n\nArgs:\n    node: AST node for import statement","params":["node: ast.Import"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_ImportFrom":{"name":"visit_ImportFrom","docstring":"Visit an import from node.\n\nArgs:\n    node: AST node for import from statement","params":["node: ast.ImportFrom"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_analyze_call":{"name":"_analyze_call","docstring":"Analyze a function call node.\n\nArgs:\n    node: AST node for function call\n    \nReturns:\n    CallContext if a valid function call is found, None otherwise","params":["node: ast.Call"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_analyze_attribute_call":{"name":"_analyze_attribute_call","docstring":"Analyze an attribute-based function call.\n\nArgs:\n    node: AST attribute node representing the function call\n    \nReturns:\n    CallContext if a valid method call is found, None otherwise","params":["node: ast.Attribute"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_create_call_context":{"name":"_create_call_context","docstring":"Create a call context object.\n\nArgs:\n    callee_name: Name of the called function\n    line_number: Line number of the call\n    confidence: Confidence score for the call\n    is_method_call: Whether this is a method call\n    qualifier: Qualifier for method calls (e.g., object name)\n    \nReturns:\n    CallContext object with call information","params":["callee_name: str","line_number: int","confidence: float","is_method_call: bool","qualifier: Unknown"],"return_type":"CallContext","is_async":false,"calls":[],"decorators":[]},"_get_line_context":{"name":"_get_line_context","docstring":"Get context lines around a specific line.\n\nArgs:\n    line_number: Target line number\n    before: Whether to get context before (True) or after (False)\n    context_lines: Number of context lines to include\n    \nReturns:\n    String containing the context lines","params":["line_number: int","before: bool","context_lines: int"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_get_attribute_chain":{"name":"_get_attribute_chain","docstring":"Get the full chain of attributes.\n\nArgs:\n    node: AST attribute node\n    \nReturns:\n    String representing the attribute chain","params":["node: ast.Attribute"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_is_method":{"name":"_is_method","docstring":"Check if a function definition is a method.\n\nArgs:\n    node: AST function definition node\n    \nReturns:\n    True if the function is a method, False otherwise","params":["node: ast.FunctionDef"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]},"_is_classmethod":{"name":"_is_classmethod","docstring":"Check if a function definition is a classmethod.\n\nArgs:\n    node: AST function definition node\n    \nReturns:\n    True if the function is a classmethod, False otherwise","params":["node: ast.FunctionDef"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.scoring":{"path":"scoring.py","docstring":"Confidence scoring for relationships.\n\nThis module provides components for scoring the confidence of relationships between elements.","imports":{"logging":"logging"},"from_imports":{"abc":["ABC","abstractmethod"],"enum":["Enum"],"typing":["Dict","List","Optional","Any","Union","Set"],"proj_mapper.models.relationship":["Relationship","RelationshipType"]},"classes":{"ScoringStrategy":{"name":"ScoringStrategy","docstring":"Abstract base class for relationship scoring strategies.\n\nStrategies define specific methods for adjusting confidence scores.","bases":["ABC"],"methods":{"score":{"name":"score","docstring":"Score the confidence of a relationship.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The adjusted confidence score (0.0-1.0)","params":["relationship: Relationship"],"return_type":"float","is_async":false,"calls":[],"decorators":["abstractmethod"]},"get_name":{"name":"get_name","docstring":"Get the name of the scoring strategy.\n\nReturns:\n    The name of the strategy","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"RelationshipTypeScoring":{"name":"RelationshipTypeScoring","docstring":"Strategy for adjusting scores based on relationship type.\n\nDifferent relationship types have different base confidence levels.","bases":["ScoringStrategy"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize with default type-based confidence adjustments.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"score":{"name":"score","docstring":"Score based on relationship type.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The adjusted confidence score","params":["relationship: Relationship"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ContextualProximityScoring":{"name":"ContextualProximityScoring","docstring":"Strategy for adjusting scores based on contextual proximity.\n\nElements that are contextually close (e.g., in the same file, module, or document)\nare more likely to be related.","bases":["ScoringStrategy"],"methods":{"score":{"name":"score","docstring":"Score based on contextual proximity.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The adjusted confidence score","params":["relationship: Relationship"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"MultipleDetectionScoring":{"name":"MultipleDetectionScoring","docstring":"Strategy for adjusting scores based on detection by multiple rules.\n\nRelationships detected by multiple rules have higher confidence.","bases":["ScoringStrategy"],"methods":{"score":{"name":"score","docstring":"Score based on detection by multiple rules.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The adjusted confidence score","params":["relationship: Relationship"],"return_type":"float","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ConfidenceScorer":{"name":"ConfidenceScorer","docstring":"Main component for scoring relationship confidence.\n\nThis scorer manages a set of scoring strategies and applies them to adjust\nthe confidence scores of relationships.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize with default scoring strategies.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_strategy":{"name":"add_strategy","docstring":"Add a scoring strategy.\n\nArgs:\n    strategy: The strategy to add","params":["strategy: ScoringStrategy"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"score_relationship":{"name":"score_relationship","docstring":"Score a single relationship using all strategies.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The relationship with updated confidence score","params":["relationship: Relationship"],"return_type":"Relationship","is_async":false,"calls":[],"decorators":[]},"score_relationships":{"name":"score_relationships","docstring":"Score a list of relationships.\n\nArgs:\n    relationships: The relationships to score\n    \nReturns:\n    The relationships with updated confidence scores","params":["relationships: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_explanation":{"name":"get_explanation","docstring":"Get a human-readable explanation of the scoring.\n\nArgs:\n    relationship: The relationship to explain\n    \nReturns:\n    A string explaining how the confidence was calculated","params":["relationship: Relationship"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":["proj_mapper.relationship","proj_mapper.relationship","proj_mapper.relationship","proj_mapper.relationship","proj_mapper.relationship","proj_mapper.relationship.mapper","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.pipeline_stages","proj_mapper.cli.commands.relationship","proj_mapper.cli.commands.output"],"is_entry_point":false},"proj_mapper.relationship.graph.node":{"path":"node.py","docstring":"Node implementation for relationship graph.\n\nThis module contains the Node class, which represents elements in the graph.","imports":{},"from_imports":{"typing":["List","Optional","Any","Union"],"proj_mapper.models.code":["CodeElement","CodeElementType"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"]},"classes":{"Node":{"name":"Node","docstring":"Node in the relationship graph.\n\nRepresents an element (code or documentation) in the relationship graph.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a graph node.\n\nArgs:\n    id: Unique identifier for the node\n    node_type: Type of the node\n    data: Optional data associated with this node","params":["id: str","node_type: Unknown","data: Any"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_outgoing_edge":{"name":"add_outgoing_edge","docstring":"Add an outgoing edge from this node.\n\nArgs:\n    edge: The edge to add","params":["edge: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_incoming_edge":{"name":"add_incoming_edge","docstring":"Add an incoming edge to this node.\n\nArgs:\n    edge: The edge to add","params":["edge: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation of the node.\n\nReturns:\n    String representation with type and edge counts","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.graph.graph":{"path":"graph.py","docstring":"Relationship graph implementation.\n\nThis module contains the RelationshipGraph class, which stores and provides \nmethods for querying relationships between code and documentation elements.","imports":{"logging":"logging","json":"json","itertools":"itertools"},"from_imports":{"typing":["Dict","List","Optional","Set","Tuple","Any","Iterator","Union"],"dataclasses":["asdict"],"pydantic":["BaseModel"],"proj_mapper.models.code":["CodeElement","CodeElementType"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"],"proj_mapper.models.relationship":["Relationship","RelationshipType"],"proj_mapper.relationship.graph.node":["Node"],"proj_mapper.relationship.graph.edge":["Edge"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{"RelationshipGraph":{"name":"RelationshipGraph","docstring":"Graph for storing and querying relationships between elements.\n\nThe graph consists of nodes (representing code and documentation elements)\nand edges (representing relationships between elements).","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize an empty relationship graph.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_code_element":{"name":"add_code_element","docstring":"Add a code element to the graph.\n\nArgs:\n    element: The code element to add\n    \nReturns:\n    The created or existing node","params":["element: CodeElement"],"return_type":"Node","is_async":false,"calls":[],"decorators":[]},"add_documentation_element":{"name":"add_documentation_element","docstring":"Add a documentation element to the graph.\n\nArgs:\n    element: The documentation element to add\n    \nReturns:\n    The created or existing node","params":["element: DocumentationElement"],"return_type":"Node","is_async":false,"calls":[],"decorators":[]},"add_edge":{"name":"add_edge","docstring":"Add a relationship edge to the graph.\n\nArgs:\n    source_id: ID of the source node\n    target_id: ID of the target node\n    relationship_type: Type of relationship\n    confidence: Confidence score for the relationship (0.0-1.0)\n    metadata: Additional data about the relationship\n    \nReturns:\n    The created edge, or None if source or target nodes don't exist","params":["source_id: str","target_id: str","relationship_type: RelationshipType","confidence: float","metadata: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_relationship":{"name":"add_relationship","docstring":"Add a relationship to the graph.\n\nArgs:\n    relationship: The relationship to add\n    \nReturns:\n    The created edge, or None if source or target nodes don't exist","params":["relationship: Relationship"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_node":{"name":"get_node","docstring":"Get a node by its ID.\n\nArgs:\n    node_id: The ID of the node to get\n    \nReturns:\n    The node, or None if not found","params":["node_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_nodes_by_type":{"name":"get_nodes_by_type","docstring":"Get all nodes of a specific type.\n\nArgs:\n    node_type: The type of nodes to get\n    \nReturns:\n    List of nodes with the specified type","params":["node_type: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_relationships":{"name":"get_relationships","docstring":"Get relationships matching the specified criteria.\n\nArgs:\n    source_id: Optional source node ID to filter by\n    target_id: Optional target node ID to filter by\n    relationship_type: Optional relationship type to filter by\n    min_confidence: Minimum confidence score to include\n    \nReturns:\n    List of relationships matching the criteria","params":["source_id: Unknown","target_id: Unknown","relationship_type: Unknown","min_confidence: float"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_related_nodes":{"name":"get_related_nodes","docstring":"Get nodes related to the specified node.\n\nArgs:\n    node_id: ID of the node to find relations for\n    relationship_type: Optional relationship type to filter by\n    min_confidence: Minimum confidence score to include\n    outgoing: Whether to include outgoing relationships\n    incoming: Whether to include incoming relationships\n    \nReturns:\n    List of related nodes","params":["node_id: str","relationship_type: Unknown","min_confidence: float","outgoing: bool","incoming: bool"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"serialize":{"name":"serialize","docstring":"Serialize the graph to a dictionary.\n\nReturns:\n    Dictionary representation of the graph","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"to_json":{"name":"to_json","docstring":"Convert the graph to JSON.\n\nArgs:\n    indent: Optional indentation level\n    \nReturns:\n    JSON string representation","params":["indent: Unknown"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"from_json":{"name":"from_json","docstring":"Create a graph from JSON data.\n\nArgs:\n    json_data: JSON string or parsed dictionary\n    \nReturns:\n    Constructed relationship graph","params":["cls","json_data: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"__str__":{"name":"__str__","docstring":"Get a string representation of the graph.\n\nReturns:\n    String with node and edge counts","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.relationship.graph.edge","proj_mapper.relationship.graph.edge","proj_mapper.utils.json_encoder","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.relationship.graph.edge":{"path":"edge.py","docstring":"Relationship graph edge implementation.\n\nThis module contains the Edge class, which represents a relationship \nbetween nodes in the relationship graph.","imports":{},"from_imports":{"typing":["Dict","Any","Optional"],"proj_mapper.models.relationship":["Relationship","RelationshipType"],"proj_mapper.relationship.graph.node":["Node"]},"classes":{"Edge":{"name":"Edge","docstring":"Represents a relationship edge between two nodes in the graph.\n\nAttributes:\n    source: The source node\n    target: The target node\n    relationship_type: The type of relationship\n    confidence: Confidence score for the relationship (0.0-1.0)\n    metadata: Additional metadata about the relationship","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a relationship edge.\n\nArgs:\n    source: Source node\n    target: Target node\n    relationship_type: Type of relationship\n    confidence: Confidence score (0.0-1.0)\n    metadata: Additional information about the relationship","params":["source: Node","target: Node","relationship_type: RelationshipType","confidence: float","metadata: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"to_relationship":{"name":"to_relationship","docstring":"Convert edge to a relationship model.\n\nReturns:\n    A Relationship model representing this edge","params":[],"return_type":"Relationship","is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation of the edge.\n\nReturns:\n    String representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":["proj_mapper.output.templates.project_overview","proj_mapper.relationship","proj_mapper.relationship.graph","proj_mapper.relationship.graph","proj_mapper.relationship.graph","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.graph.graph","proj_mapper.relationship.graph.graph","proj_mapper.cli.commands.output"],"is_entry_point":false},"proj_mapper.cli.main":{"path":"main.py","docstring":"Main entry point for the Project Mapper CLI.\n\nThis module provides the main CLI entry point for the Project Mapper tool.","imports":{"os":"os","sys":"sys","click":"click","logging":"logging","json":"json"},"from_imports":{"pathlib":["Path"],"typing":["Optional","Dict","Any","List"],"datetime":["datetime"],"rich.console":["Console"],"proj_mapper.version":["__version__"],"proj_mapper.core.project_manager":["ProjectManager"],"proj_mapper.output.config":["GeneratorConfig","MapFormatType"],"proj_mapper.output.storage":["StorageManager"],"proj_mapper.cli.progress":["ProgressReporter","LogHandler"],"proj_mapper.cli.interactive":["run_interactive_mode"],"proj_mapper.cli.config_handler":["ConfigManager"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{"Context":{"name":"Context","docstring":"Context object for sharing state between commands.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the context.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{"cli":{"name":"cli","docstring":"Project Mapper - Map and analyze project structure.","params":["ctx","verbose","quiet","debug","config_file"],"return_type":null,"is_async":false,"calls":[],"decorators":["click.group","click.option","click.option","click.option","click.option","click.version_option","click.pass_context"]},"analyze":{"name":"analyze","docstring":"Analyze a project and generate maps.","params":["ctx","project_path","output","include","exclude","verbose","debug"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.argument","click.option","click.option","click.option","click.option","click.option","click.pass_context"]},"update":{"name":"update","docstring":"Update project maps.","params":["ctx","project_path","full"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.argument","click.option","click.pass_context"]},"info":{"name":"info","docstring":"Get information about a project.","params":["ctx","project_path"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.argument","click.pass_context"]},"interactive":{"name":"interactive","docstring":"Start interactive mode.","params":["ctx"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.pass_context"]},"web":{"name":"web","docstring":"Start the web interface.","params":["ctx","port","host","debug"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.option","click.option","click.option","click.pass_context"]},"config":{"name":"config","docstring":"View or modify configuration.","params":["ctx","key","value","list_config","save"],"return_type":null,"is_async":false,"calls":[],"decorators":["cli.command","click.argument","click.argument","click.option","click.option","click.pass_context"]}},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.cli.config_handler","proj_mapper.cli.config_handler","proj_mapper.analyzers","proj_mapper.output.adapters","proj_mapper.core.analysis","proj_mapper.utils.json_encoder","proj_mapper.cli.config_handler"],"imported_by":[],"is_entry_point":true},"proj_mapper.cli.interactive":{"path":"interactive.py","docstring":"Interactive shell for Project Mapper.\n\nThis module provides an interactive shell for the Project Mapper tool.","imports":{"os":"os","sys":"sys","cmd":"cmd","logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["List","Optional","Dict","Any"],"rich.console":["Console"],"rich.table":["Table"],"rich.panel":["Panel"],"rich.prompt":["Prompt","Confirm"],"proj_mapper.cli.config_handler":["ConfigManager"],"proj_mapper.cli.progress":["ProgressReporter"],"proj_mapper.version":["__version__"]},"classes":{"InteractiveShell":{"name":"InteractiveShell","docstring":"Interactive command shell for Project Mapper.","bases":["cmd.Cmd"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the interactive shell.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_exit":{"name":"do_exit","docstring":"Exit the interactive shell.","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_quit":{"name":"do_quit","docstring":"Exit the interactive shell.","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_version":{"name":"do_version","docstring":"Display version information.","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_help":{"name":"do_help","docstring":"Show help for commands.","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_analyze":{"name":"do_analyze","docstring":"Analyze a project and generate maps.\n\nUsage: analyze <project_path> [--output OUTPUT] [--include PATTERN]... [--exclude PATTERN]...","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_update":{"name":"do_update","docstring":"Update project maps.\n\nUsage: update <project_path> [--full]","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_info":{"name":"do_info","docstring":"Get information about a project.\n\nUsage: info <project_path>","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_config":{"name":"do_config","docstring":"View or modify configuration.\n\nUsage: config [key] [value]\n       config --list\n       config --save <filename>","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"do_open":{"name":"do_open","docstring":"Set current project.\n\nUsage: open <project_path>","params":["arg"],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{"prompt":"'proj_mapper> '"},"decorators":[]}},"functions":{"run_interactive_mode":{"name":"run_interactive_mode","docstring":"Run the interactive shell.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"constants":{},"dependencies":["proj_mapper.cli.config_handler","proj_mapper.cli.config_handler","proj_mapper.analyzers"],"imported_by":[],"is_entry_point":true},"proj_mapper.cli.progress":{"path":"progress.py","docstring":"Progress reporting utilities for Project Mapper.\n\nThis module provides progress reporting functionality for long-running operations.","imports":{"sys":"sys","time":"time","logging":"logging"},"from_imports":{"enum":["Enum"],"typing":["Optional","Callable","Dict","Any","List","Tuple","Union"],"rich.console":["Console"],"rich.progress":["Progress","BarColumn","TextColumn","TimeElapsedColumn","TimeRemainingColumn","SpinnerColumn"],"rich.logging":["RichHandler"],"rich.panel":["Panel"],"rich.table":["Table"]},"classes":{"LogLevel":{"name":"LogLevel","docstring":"Log levels for progress reporting.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{},"decorators":[]},"ProgressReporter":{"name":"ProgressReporter","docstring":"Reports progress of long-running operations.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the progress reporter.\n\nArgs:\n    console: Console to use for output\n    quiet: Whether to suppress output\n    verbose: Whether to show verbose output","params":["console: Unknown","quiet: bool","verbose: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"_configure_logging":{"name":"_configure_logging","docstring":"Configure logging with Rich handler.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"log":{"name":"log","docstring":"Log a message.\n\nArgs:\n    message: Message to log\n    level: Log level","params":["message: str","level: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"start_progress":{"name":"start_progress","docstring":"Start a new progress bar.\n\nArgs:\n    total: Total number of steps\n    description: Description of the operation","params":["total: int","description: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"update_progress":{"name":"update_progress","docstring":"Update the progress bar.\n\nArgs:\n    advance: Number of steps to advance\n    description: New description for the task\n    task_name: Name of the task to update (main task if None)","params":["advance: int","description: Unknown","task_name: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_subtask":{"name":"add_subtask","docstring":"Add a subtask to the progress bar.\n\nArgs:\n    name: Unique name for the subtask\n    total: Total number of steps for the subtask\n    description: Description of the subtask","params":["name: str","total: int","description: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"complete_subtask":{"name":"complete_subtask","docstring":"Mark a subtask as complete.\n\nArgs:\n    name: Name of the subtask","params":["name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"stop_progress":{"name":"stop_progress","docstring":"Stop the progress bar.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"display_result":{"name":"display_result","docstring":"Display a result table.\n\nArgs:\n    title: Title for the result\n    data: Data to display\n    expand: Whether to expand nested dictionaries","params":["title: str","data: Unknown","expand: bool"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"display_summary":{"name":"display_summary","docstring":"Display a summary panel.\n\nArgs:\n    title: Title for the summary\n    items: Items to display (strings or key-value tuples)","params":["title: str","items: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"create_spinner":{"name":"create_spinner","docstring":"Execute a function with a spinner.\n\nArgs:\n    text: Text to display with the spinner\n    callback: Function to execute\n    finish_text: Text to display when done\n    \nReturns:\n    Result from the callback","params":["text: str","callback: Unknown","finish_text: Unknown"],"return_type":"Any","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"LogHandler":{"name":"LogHandler","docstring":"Handles logging configuration and output.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the log handler.\n\nArgs:\n    console: Console to use for output\n    log_file: File to log to\n    verbose: Whether to show verbose output","params":["console: Unknown","log_file: Unknown","verbose: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"_configure_logging":{"name":"_configure_logging","docstring":"Configure logging with Rich handler.","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"set_log_level":{"name":"set_log_level","docstring":"Set the log level.\n\nArgs:\n    level: New log level","params":["level: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_logger":{"name":"get_logger","docstring":"Get a logger with a specific name.\n\nArgs:\n    name: Logger name\n    \nReturns:\n    Logger instance","params":["name: str"],"return_type":"logging.Logger","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.cli.config_handler":{"path":"config_handler.py","docstring":"Configuration handling for Project Mapper.\n\nThis module provides functionality for loading, validating, and managing\nconfiguration settings from various sources.","imports":{"os":"os","yaml":"yaml","json":"json","logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["Dict","Any","Optional","List","Union"]},"classes":{"ConfigValidator":{"name":"ConfigValidator","docstring":"Validates configuration settings.","bases":[],"methods":{"validate_config":{"name":"validate_config","docstring":"Validate the configuration.\n\nArgs:\n    config: Configuration to validate\n    \nReturns:\n    List of validation errors, empty if valid","params":["config: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["staticmethod"]}},"properties":[],"class_attrs":{},"decorators":[]},"ConfigManager":{"name":"ConfigManager","docstring":"Manages configuration settings from various sources.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the configuration manager.\n\nArgs:\n    base_config: Base configuration to start with\n    config_file: Path to configuration file","params":["base_config: Unknown","config_file: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"load_config":{"name":"load_config","docstring":"Load configuration from all sources.\n\nArgs:\n    project_path: Project path to use for relative paths\n    \nReturns:\n    The merged configuration\n    \nRaises:\n    ValueError: If the configuration is invalid","params":["project_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_default_config":{"name":"_get_default_config","docstring":"Get the default configuration.\n\nReturns:\n    Default configuration","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_load_config_file":{"name":"_load_config_file","docstring":"Load configuration from a file.\n\nArgs:\n    config_path: Path to the configuration file\n    \nReturns:\n    Configuration from file\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist\n    ValueError: If the file format is invalid","params":["config_path: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_find_config_file":{"name":"_find_config_file","docstring":"Find a configuration file in default locations.\n\nArgs:\n    project_path: Project path to use for relative paths\n    \nReturns:\n    Path to configuration file, or None if not found","params":["project_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_load_from_env":{"name":"_load_from_env","docstring":"Load configuration from environment variables.\n\nReturns:\n    Configuration from environment","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_parse_env_value":{"name":"_parse_env_value","docstring":"Parse an environment variable value.\n\nArgs:\n    value: Value to parse\n    \nReturns:\n    Parsed value","params":["value: str"],"return_type":"Any","is_async":false,"calls":[],"decorators":["staticmethod"]},"save_config":{"name":"save_config","docstring":"Save the configuration to a file.\n\nArgs:\n    config_path: Path to save the configuration to\n    config: Configuration to save, or None to use current\n    \nRaises:\n    ValueError: If the file format is unsupported","params":["config_path: str","config: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{"DEFAULT_CONFIG_PATHS":"['project_mapper.yaml', 'project_mapper.yml', 'project_mapper.json', '.project_mapper/config.yaml', '.project_mapper/config.yml', '.project_mapper/config.json']","ENV_PREFIX":"'PROJECT_MAPPER_'"},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":["proj_mapper.cli","proj_mapper.__main__","proj_mapper.cli.main","proj_mapper.cli.main","proj_mapper.cli.main","proj_mapper.cli.interactive","proj_mapper.cli.interactive"],"is_entry_point":false},"proj_mapper.cli.commands.relationship":{"path":"relationship.py","docstring":"CLI commands for relationship mapping subsystem.\n\nThis module provides CLI commands for working with relationships.","imports":{"click":"click","json":"json","logging":"logging"},"from_imports":{"typing":["Dict","List","Optional","Any"],"pathlib":["Path"],"proj_mapper.core.pipeline":["Pipeline","PipelineContext"],"proj_mapper.relationship.pipeline_stages":["RelationshipDetectionStage","RelationshipScoringStage","CrossReferenceResolutionStage","RelationshipGraphBuildingStage","RelationshipServiceStage"],"proj_mapper.utils.json_encoder":["EnumEncoder"]},"classes":{},"functions":{"relationship_group":{"name":"relationship_group","docstring":"Commands for working with code-documentation relationships.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["click.group"]},"detect_relationships":{"name":"detect_relationships","docstring":"Detect relationships between code and documentation elements.\n\nThis command detects relationships based on analysis results from a previous\nanalysis phase. It applies confidence scoring and cross-reference resolution.","params":["analysis_file: Path","output_file: Path","min_confidence: float","include_graph: bool","fuzzy_threshold: float","debug: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":["relationship_group.command","click.option","click.option","click.option","click.option","click.option","click.option"]},"query_relationships":{"name":"query_relationships","docstring":"Query relationships for a specific element.\n\nThis command loads relationship data and allows querying for specific\nelements to see what they are related to.","params":["relationships_file: Path","element_id: str","relationship_type: Unknown","min_confidence: float","max_depth: int","output_format: str"],"return_type":null,"is_async":false,"calls":[],"decorators":["relationship_group.command","click.option","click.option","click.option","click.option","click.option","click.option"]},"export_graph":{"name":"export_graph","docstring":"Export relationship graph for visualization.\n\nThis command exports the relationship graph in various formats for visualization.","params":["relationships_file: Path","output_file: Path","format: str","min_confidence: float"],"return_type":null,"is_async":false,"calls":[],"decorators":["relationship_group.command","click.option","click.option","click.option","click.option"]},"relationship_to_dict":{"name":"relationship_to_dict","docstring":"Convert a Relationship object to a dictionary.","params":["relationship"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"node_to_dict":{"name":"node_to_dict","docstring":"Convert a Node object to a dictionary.","params":["node"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"edge_to_dict":{"name":"edge_to_dict","docstring":"Convert an Edge object to a dictionary.","params":["edge"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"rebuild_graph_from_data":{"name":"rebuild_graph_from_data","docstring":"Rebuild a RelationshipGraph from exported data.","params":["data: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"graph_to_dot":{"name":"graph_to_dot","docstring":"Convert a RelationshipGraph to GraphViz DOT format.","params":["graph","min_confidence: float"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"constants":{},"dependencies":["proj_mapper.core.analysis","proj_mapper.relationship.scoring","proj_mapper.utils.json_encoder"],"imported_by":[],"is_entry_point":false},"proj_mapper.cli.commands.output":{"path":"output.py","docstring":"CLI commands for the output generation subsystem.\n\nThis module provides the CLI commands for generating, managing, and accessing\nproject maps.","imports":{"os":"os","json":"json","logging":"logging","click":"click"},"from_imports":{"typing":["Any","Dict","Optional"],"proj_mapper.output.generator":["GeneratorConfig","MapFormatType"],"proj_mapper.output.storage":["StorageManager"],"proj_mapper.relationship.graph":["RelationshipGraph"],"proj_mapper.pipeline.pipeline":["Pipeline"],"proj_mapper.relationship.pipeline_stages":["RelationshipDetectionStage","RelationshipScoringStage","CrossReferenceResolutionStage","RelationshipGraphBuildingStage","RelationshipServiceStage"],"proj_mapper.output.pipeline_stages":["MapGeneratorStage","MapStorageStage"]},"classes":{},"functions":{"output_group":{"name":"output_group","docstring":"Commands for generating and managing project maps.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":["click.group"]},"generate_map":{"name":"generate_map","docstring":"Generate a project map from analysis results.","params":["analysis_file: str","output_file: Unknown","format: str","min_confidence: float","template: str","include_code: bool","include_docs: bool","include_metadata: bool","enable_chunking: bool","max_tokens: int","ai_optimize: bool","debug: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":["output_group.command","click.option","click.option","click.option","click.option","click.option","click.option","click.option","click.option","click.option","click.option","click.option","click.option"]},"list_maps":{"name":"list_maps","docstring":"List available maps.","params":["project: Unknown","maps_dir: str"],"return_type":null,"is_async":false,"calls":[],"decorators":["output_group.command","click.option","click.option"]},"clean_maps":{"name":"clean_maps","docstring":"Clean old maps for a project.","params":["project: str","keep: int","maps_dir: str","force: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":["output_group.command","click.option","click.option","click.option","click.option"]},"delete_project":{"name":"delete_project","docstring":"Delete all maps for a project.","params":["project: str","maps_dir: str","force: bool"],"return_type":null,"is_async":false,"calls":[],"decorators":["output_group.command","click.option","click.option","click.option"]}},"constants":{},"dependencies":["proj_mapper.output.adapters","proj_mapper.output.adapters","proj_mapper.pipeline.base","proj_mapper.relationship.scoring","proj_mapper.output.adapters","proj_mapper.relationship.graph.edge"],"imported_by":[],"is_entry_point":false},"proj_mapper.storage":{"path":"__init__.py","docstring":"Storage package for Project Mapper.\n\nThis package contains modules for storing and loading project maps and other data.","imports":{},"from_imports":{"proj_mapper.storage.map_storage":["MapStorage"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.storage.map_storage"],"imported_by":[],"is_entry_point":false},"proj_mapper.storage.map_storage":{"path":"map_storage.py","docstring":"Map storage module for Project Mapper.\n\nThis module contains the MapStorage class which handles storing and loading project maps.","imports":{"json":"json","logging":"logging"},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Dict","Any","Optional"],"proj_mapper.models.project":["ProjectMap"]},"classes":{"MapStorage":{"name":"MapStorage","docstring":"Handles storing and loading project maps.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the map storage.\n\nArgs:\n    output_dir: Directory for storing maps","params":["output_dir: str"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"save_map":{"name":"save_map","docstring":"Save a project map to disk.\n\nArgs:\n    project_path: Path to the project root\n    project_map: Project map to save\n    \nReturns:\n    Path to the saved map file\n    \nRaises:\n    IOError: If the map cannot be saved","params":["project_path: str","project_map: ProjectMap"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"load_map":{"name":"load_map","docstring":"Load a project map from disk.\n\nArgs:\n    project_path: Path to the project root\n    \nReturns:\n    Loaded project map\n    \nRaises:\n    FileNotFoundError: If the map file doesn't exist\n    ValueError: If the map file is invalid","params":["project_path: str"],"return_type":"ProjectMap","is_async":false,"calls":[],"decorators":[]},"delete_map":{"name":"delete_map","docstring":"Delete a project map from disk.\n\nArgs:\n    project_path: Path to the project root\n    \nRaises:\n    FileNotFoundError: If the map file doesn't exist","params":["project_path: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":["proj_mapper.core.project_manager","proj_mapper.storage"],"is_entry_point":false},"proj_mapper.models":{"path":"__init__.py","docstring":"Data models for Project Mapper.\n\nThis package contains the data models used to represent projects, files, code elements,\ndocumentation elements, and relationships between them.","imports":{},"from_imports":{"proj_mapper.models.file":["DiscoveredFile","FileType"],"proj_mapper.models.project":["Project","ProjectMap"],"proj_mapper.models.code":["CodeElement","CodeElementType"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"],"proj_mapper.models.relationship":["Relationship","RelationshipType"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.models.file":{"path":"file.py","docstring":"File models for Project Mapper.\n\nThis module contains models related to files within a project.","imports":{"os":"os"},"from_imports":{"datetime":["datetime"],"enum":["Enum"],"pathlib":["Path"],"typing":["Dict","List","Optional","Any","Union"],"pydantic":["Field","validator"],"proj_mapper.models.base":["BaseModel"]},"classes":{"FileType":{"name":"FileType","docstring":"Enumeration of supported file types.","bases":["Enum"],"methods":{"from_extension":{"name":"from_extension","docstring":"Determine file type from file extension.\n\nArgs:\n    extension: The file extension (without dot)\n    \nReturns:\n    The determined file type","params":["cls","extension: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]}},"properties":[],"class_attrs":{"PYTHON":"'python'","JAVASCRIPT":"'javascript'","TYPESCRIPT":"'typescript'","JAVA":"'java'","CSHARP":"'csharp'","CPP":"'cpp'","C":"'c'","GO":"'go'","RUBY":"'ruby'","PHP":"'php'","RUST":"'rust'","HTML":"'html'","CSS":"'css'","MARKDOWN":"'markdown'","JSON":"'json'","YAML":"'yaml'","XML":"'xml'","SQL":"'sql'","TEXT":"'text'","BINARY":"'binary'","OTHER":"'other'","UNKNOWN":"'unknown'","RESTRUCTUREDTEXT":"'restructuredtext'"},"decorators":[]},"DiscoveredFile":{"name":"DiscoveredFile","docstring":"Represents a file discovered in the project.","bases":["BaseModel"],"methods":{"set_file_type_from_path":{"name":"set_file_type_from_path","docstring":"Determine file type from path if not provided.\n\nArgs:\n    v: The current value\n    values: The field values\n    \nReturns:\n    The determined file type","params":["cls","v: Any","values: Unknown"],"return_type":"FileType","is_async":false,"calls":[],"decorators":["validator"]},"from_path":{"name":"from_path","docstring":"Create a DiscoveredFile instance from a file path.\n\nArgs:\n    path: Path to the file\n    project_root: Root path of the project\n    \nReturns:\n    A new DiscoveredFile instance\n    \nRaises:\n    FileNotFoundError: If the file doesn't exist","params":["cls","path: Unknown","project_root: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"_is_binary":{"name":"_is_binary","docstring":"Check if a file is likely binary.\n\nArgs:\n    path: The path to check\n    \nReturns:\n    True if the file is likely binary, False otherwise","params":["path: Path"],"return_type":"bool","is_async":false,"calls":[],"decorators":["staticmethod"]},"create_mock":{"name":"create_mock","docstring":"Create a mock DiscoveredFile instance for testing purposes.\n\nThis method creates a simplified mock instance without checking if the file exists.\n\nArgs:\n    path: Path to the file\n    relative_path: Relative path to the file (defaults to the basename of path)\n    file_type: File type (detected from path if not provided)\n    \nReturns:\n    A mock DiscoveredFile instance for testing","params":["cls","path: Unknown","relative_path: Unknown","file_type: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"get_directory":{"name":"get_directory","docstring":"Get the directory containing this file.\n\nReturns:\n    Path to the containing directory","params":[],"return_type":"Path","is_async":false,"calls":[],"decorators":[]},"get_extension":{"name":"get_extension","docstring":"Get the file extension.\n\nReturns:\n    File extension with leading dot","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_name":{"name":"get_name","docstring":"Get the filename without extension.\n\nReturns:\n    Filename without extension","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"get_full_name":{"name":"get_full_name","docstring":"Get the full filename with extension.\n\nReturns:\n    Full filename","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert to a dictionary representation.\n\nReturns:\n    Dictionary with file information","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["path","relative_path","file_type","size","modified_time","created_time","is_binary","is_directory","is_symlink","metadata"],"class_attrs":{},"decorators":[]},"DiscoveredProject":{"name":"DiscoveredProject","docstring":"Represents a discovered project with its files and metadata.","bases":["BaseModel"],"methods":{"from_directory":{"name":"from_directory","docstring":"Create a DiscoveredProject from a directory.\n\nArgs:\n    directory: Path to the project directory\n    name: Optional project name (defaults to directory name)\n    excluded_patterns: Optional list of glob patterns to exclude\n    \nReturns:\n    A new DiscoveredProject instance\n    \nRaises:\n    FileNotFoundError: If the directory doesn't exist","params":["cls","directory: Unknown","name: Unknown","excluded_patterns: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"_matches_pattern":{"name":"_matches_pattern","docstring":"Check if a path matches a glob pattern.\n\nThis is a simplified implementation of glob matching.\n\nArgs:\n    path: Path to check\n    pattern: Glob pattern\n    \nReturns:\n    True if the path matches the pattern","params":["path: str","pattern: str"],"return_type":"bool","is_async":false,"calls":[],"decorators":["staticmethod"]},"get_files_by_type":{"name":"get_files_by_type","docstring":"Get all files of a specific type.\n\nArgs:\n    file_type: The file type to filter by\n    \nReturns:\n    List of files matching the given type","params":["file_type: FileType"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_file_by_path":{"name":"get_file_by_path","docstring":"Get a file by its path.\n\nArgs:\n    path: Absolute or relative path to the file\n    \nReturns:\n    The DiscoveredFile or None if not found","params":["path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"create_mock":{"name":"create_mock","docstring":"Create a mock DiscoveredProject for testing purposes.\n\nArgs:\n    name: Project name\n    files: List of DiscoveredFile instances (empty list if None)\n    root_path: Project root path (defaults to a temporary path)\n    \nReturns:\n    A mock DiscoveredProject instance for testing","params":["cls","name: str","files: Unknown","root_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]}},"properties":["name","root_path","files","excluded_patterns","metadata"],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.models.base":{"path":"base.py","docstring":"Base models for Project Mapper.\n\nThis module contains the base model class that all Project Mapper models extend.","imports":{},"from_imports":{"datetime":["datetime"],"pathlib":["Path"],"typing":["Any","Dict","Type","TypeVar","Optional","ClassVar"],"pydantic":["BaseModel","Field","root_validator"]},"classes":{"BaseModel":{"name":"BaseModel","docstring":"Base model class for all Project Mapper models.\n\nThis class provides common functionality for all models in the system,\nincluding serialization/deserialization and validation.","bases":["PydanticBaseModel"],"methods":{"from_dict":{"name":"from_dict","docstring":"Create a model instance from a dictionary.\n\nArgs:\n    data: Dictionary containing model data\n\nReturns:\n    Instance of the model","params":["cls: Unknown","data: Unknown"],"return_type":"T","is_async":false,"calls":[],"decorators":["classmethod"]},"to_dict":{"name":"to_dict","docstring":"Convert the model to a dictionary.\n\nReturns:\n    Dictionary representation of the model","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"validate_model_version":{"name":"validate_model_version","docstring":"Validate the model version if provided.\n\nThis validator checks that the provided model_version (if any)\nis compatible with this class's version.\n\nArgs:\n    values: The field values\n    \nReturns:\n    The validated values\n    \nRaises:\n    ValueError: If the model versions are incompatible","params":["cls","values: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["root_validator"]}},"properties":["model_version"],"class_attrs":{"model_version":"'1.0.0'"},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.models.relationship":{"path":"relationship.py","docstring":"Relationship model classes.\n\nThis module contains models related to relationships between code and documentation elements.","imports":{},"from_imports":{"enum":["Enum","auto"],"typing":["Dict","List","Optional","Any","Union"],"pydantic":["BaseModel","Field","validator"],"dataclasses":["dataclass","field"]},"classes":{"RelationshipType":{"name":"RelationshipType","docstring":"Types of relationships between elements.","bases":["Enum"],"methods":{"get_inverse":{"name":"get_inverse","docstring":"Get the inverse relationship type.\n\nArgs:\n    relationship_type: The relationship type to invert\n    \nReturns:\n    The inverse relationship type","params":["cls","relationship_type: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]}},"properties":[],"class_attrs":{},"decorators":[]},"Relationship":{"name":"Relationship","docstring":"A relationship between two elements.","bases":[],"methods":{},"properties":["source_id","target_id","relationship_type","source_type","target_type","confidence","context","metadata"],"class_attrs":{"source_type":"'unknown'","target_type":"'unknown'","confidence":"1.0","context":"None"},"decorators":["dataclass"]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.models.analysis":{"path":"analysis.py","docstring":"Analysis result models.\n\nThis module contains models that represent the results of file analysis.","imports":{},"from_imports":{"typing":["Dict","List","Optional","Any","Set","Union"],"pathlib":["Path"],"pydantic":["Field"],"proj_mapper.models.base":["BaseModel"],"proj_mapper.models.code":["CodeElement","CodeElementType","Location"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"],"proj_mapper.models.file":["DiscoveredFile"]},"classes":{"AnalysisResult":{"name":"AnalysisResult","docstring":"Base class for all analysis results.\n\nAnalysis results contain the extracted information from a file.","bases":["BaseModel"],"methods":{},"properties":["file_path","success","error_message","metadata"],"class_attrs":{},"decorators":[]},"CodeAnalysisResult":{"name":"CodeAnalysisResult","docstring":"Analysis result for code files.\n\nContains extracted code elements from a file.","bases":["AnalysisResult"],"methods":{"add_element":{"name":"add_element","docstring":"Add a code element to the result.\n\nArgs:\n    element: The code element to add","params":["element: CodeElement"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_elements_by_type":{"name":"get_elements_by_type","docstring":"Get elements of a specific type.\n\nArgs:\n    element_type: The element type to filter by\n    \nReturns:\n    List of elements matching the type","params":["element_type: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_import":{"name":"add_import","docstring":"Add an import statement to the result.\n\nArgs:\n    import_from: Module imported from (None for direct imports)\n    import_what: What was imported\n    alias: Optional alias for the import","params":["import_from: Unknown","import_what: str","alias: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["elements","imports","module_docstring","summary","module_name"],"class_attrs":{},"decorators":[]},"DocumentationAnalysisResult":{"name":"DocumentationAnalysisResult","docstring":"Analysis result for documentation files.\n\nContains extracted documentation elements from a file.","bases":["AnalysisResult"],"methods":{"add_element":{"name":"add_element","docstring":"Add a documentation element to the result.\n\nArgs:\n    element: The documentation element to add","params":["element: DocumentationElement"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_elements_by_type":{"name":"get_elements_by_type","docstring":"Get elements of a specific type.\n\nArgs:\n    element_type: The element type to filter by\n    \nReturns:\n    List of elements matching the type","params":["element_type: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_sections":{"name":"get_sections","docstring":"Get all section elements.\n\nReturns:\n    List of section elements","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["elements","metadata","summary","title"],"class_attrs":{},"decorators":[]},"AnalysisResultCollection":{"name":"AnalysisResultCollection","docstring":"Collection of analysis results.\n\nThis class represents the combined results of analyzing multiple files.","bases":["BaseModel"],"methods":{"add_result":{"name":"add_result","docstring":"Add an analysis result to the collection.\n\nArgs:\n    result: The analysis result to add","params":["result: AnalysisResult"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_result":{"name":"get_result","docstring":"Get the analysis result for a specific file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    The analysis result, or None if not found","params":["file_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_code_result":{"name":"get_code_result","docstring":"Get the code analysis result for a specific file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    The code analysis result, or None if not found","params":["file_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_doc_result":{"name":"get_doc_result","docstring":"Get the documentation analysis result for a specific file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    The documentation analysis result, or None if not found","params":["file_path: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_all_code_elements":{"name":"get_all_code_elements","docstring":"Get all code elements from all analysis results.\n\nReturns:\n    List of all code elements","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_all_doc_elements":{"name":"get_all_doc_elements","docstring":"Get all documentation elements from all analysis results.\n\nReturns:\n    List of all documentation elements","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["results","code_results","doc_results"],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.models.code":{"path":"code.py","docstring":"Code models for Project Mapper.\n\nThis module contains models related to code elements such as classes, functions, and variables.","imports":{},"from_imports":{"enum":["Enum","auto"],"typing":["Dict","List","Optional","Any","Set","Union"],"pathlib":["Path"],"dataclasses":["dataclass","field"],"pydantic":["Field","validator","model_serializer"],"proj_mapper.models.base":["BaseModel"],"proj_mapper.utils.json_encoder":["register_serializer"]},"classes":{"CodeElementType":{"name":"CodeElementType","docstring":"Types of code elements.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{},"decorators":[]},"Visibility":{"name":"Visibility","docstring":"Visibility levels for code elements.","bases":["str","Enum"],"methods":{},"properties":[],"class_attrs":{"PUBLIC":"'public'","PROTECTED":"'protected'","PRIVATE":"'private'","PACKAGE":"'package'","UNKNOWN":"'unknown'"},"decorators":[]},"Location":{"name":"Location","docstring":"Location in the codebase.\n\nDefines a starting and ending position in a file.","bases":[],"methods":{"__post_init__":{"name":"__post_init__","docstring":"Convert file_path to Path if it's a string.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert the Location to a dictionary.\n\nReturns:\n    Dictionary with file_path, start_line, end_line, start_column, end_column","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation.\n\nReturns:\n    String in the format file_path:start_line-end_line","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"model_dump":{"name":"model_dump","docstring":"Method to support Pydantic serialization.\n\nReturns:\n    Dictionary representation of this Location","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"__get_validators__":{"name":"__get_validators__","docstring":"For Pydantic v1 compatibility.\n\nYields:\n    Functions that validate a Location object","params":["cls"],"return_type":null,"is_async":false,"calls":[],"decorators":["classmethod"]},"validate":{"name":"validate","docstring":"Validate and convert a value to a Location.\n\nArgs:\n    v: Value to validate\n    \nReturns:\n    Location object\n    \nRaises:\n    ValueError: If the value cannot be converted to a Location","params":["cls","v"],"return_type":null,"is_async":false,"calls":[],"decorators":["classmethod"]},"__eq__":{"name":"__eq__","docstring":"Check if two locations are equal.\n\nArgs:\n    other: Another Location object\n    \nReturns:\n    True if the locations are equal, False otherwise","params":["other"],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"properties":["file_path","start_line","end_line","start_column","end_column"],"class_attrs":{"start_column":"0","end_column":"0"},"decorators":["dataclass"]},"LocationModel":{"name":"LocationModel","docstring":"Pydantic model for Location.","bases":["BaseModel"],"methods":{"from_location":{"name":"from_location","docstring":"Create a LocationModel from a Location object.\n\nArgs:\n    location: Location object\n    \nReturns:\n    LocationModel","params":["cls","location: Location"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"to_location":{"name":"to_location","docstring":"Convert to a Location object.\n\nReturns:\n    Location object","params":[],"return_type":"Location","is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"String representation of the location.\n\nReturns:\n    String representation showing file path and line numbers","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":["file_path","start_line","end_line","start_column","end_column"],"class_attrs":{},"decorators":[]},"CodeElement":{"name":"CodeElement","docstring":"Represents a code element such as a class, function, or variable.","bases":["BaseModel"],"methods":{"id_must_be_valid":{"name":"id_must_be_valid","docstring":"Validate that the ID is properly formatted.\n\nArgs:\n    v: The ID value\n    \nReturns:\n    The validated ID\n    \nRaises:\n    ValueError: If the ID is invalid","params":["cls","v: str"],"return_type":"str","is_async":false,"calls":[],"decorators":["validator"]},"add_child":{"name":"add_child","docstring":"Add a child element ID to this element.\n\nArgs:\n    child_id: The ID of the child element","params":["child_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_dependency":{"name":"add_dependency","docstring":"Add a dependency element ID to this element.\n\nArgs:\n    dependency_id: The ID of the dependency element","params":["dependency_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_dependent":{"name":"add_dependent","docstring":"Add a dependent element ID to this element.\n\nArgs:\n    dependent_id: The ID of the dependent element","params":["dependent_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_reference":{"name":"add_reference","docstring":"Add a reference to another element or resource.\n\nArgs:\n    reference_id: ID of the referenced element or resource\n    reference_type: Type of reference relationship\n    location: Optional location of the reference (Location or LocationModel)\n    confidence: Confidence score for this reference","params":["reference_id: str","reference_type: str","location: Unknown","confidence: float"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"to_reference":{"name":"to_reference","docstring":"Convert to a simplified reference format.\n\nReturns:\n    Dictionary with basic element information","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_full_name":{"name":"get_full_name","docstring":"Get the fully qualified name including module path.\n\nReturns:\n    Full name with module prefix","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"create_mock":{"name":"create_mock","docstring":"Create a mock CodeElement for testing.\n\nArgs:\n    id: Unique identifier\n    name: Element name\n    element_type: Type of code element\n    file_path: Path to the file\n    line_start: Starting line number\n    line_end: Ending line number\n    references: List of references\n    \nReturns:\n    A mock CodeElement instance","params":["cls","id: str","name: str","element_type: CodeElementType","file_path: str","line_start: int","line_end: Unknown","references: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]}},"properties":["id","name","element_type","file_path","line_start","line_end","col_start","col_end","module","parent_id","children_ids","visibility","signature","docstring","is_abstract","is_static","annotations","dependencies","dependents","references","complexity","metadata"],"class_attrs":{},"decorators":[]},"CodeReference":{"name":"CodeReference","docstring":"Represents a reference from one code element to another.","bases":["BaseModel"],"methods":{"__str__":{"name":"__str__","docstring":"Get string representation of the reference.\n\nReturns:\n    String in the format \"source -> target (type)\"","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert to a dictionary representation.\n\nReturns:\n    Dictionary with reference information","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["source_id","reference_id","reference_type","location","confidence","is_resolved","metadata"],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.utils.json_encoder"],"imported_by":[],"is_entry_point":false},"proj_mapper.models.project":{"path":"project.py","docstring":"Project models module.\n\nThis module provides models for representing projects and project maps.","imports":{},"from_imports":{"pathlib":["Path"],"typing":["Dict","Any","Optional","List","Union"],"datetime":["datetime"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"Project":{"name":"Project","docstring":"Represents a project.\n\nAttributes:\n    name: Name of the project\n    root_path: Root path of the project\n    files: List of discovered files\n    analysis_results: Dictionary of analysis results","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a project.\n\nArgs:\n    name: Name of the project\n    root_path: Root path of the project\n    files: Optional list of discovered files\n    analysis_results: Optional dictionary of analysis results","params":["name: str","root_path: Unknown","files: Unknown","analysis_results: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation.\n\nReturns:\n    String representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"__repr__":{"name":"__repr__","docstring":"Get detailed string representation.\n\nReturns:\n    Detailed string representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"ProjectMap":{"name":"ProjectMap","docstring":"Represents a project map.\n\nAttributes:\n    project: The project this map represents\n    files: List of discovered files\n    metadata: Optional metadata about the map\n    timestamp: Timestamp of when the map was created","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize a project map.\n\nArgs:\n    project: The project this map represents\n    files: Optional list of discovered files\n    metadata: Optional metadata about the map\n    timestamp: Optional timestamp string","params":["project: Project","files: Unknown","metadata: Unknown","timestamp: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert the project map to a dictionary.\n\nReturns:\n    Dictionary representation of the project map","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_make_dict_serializable":{"name":"_make_dict_serializable","docstring":"Make a dictionary JSON-serializable.\n\nArgs:\n    data: The dictionary to convert\n    \nReturns:\n    A serializable dictionary","params":["data: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"__str__":{"name":"__str__","docstring":"Get string representation.\n\nReturns:\n    String representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"__repr__":{"name":"__repr__","docstring":"Get detailed string representation.\n\nReturns:\n    Detailed string representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{"SCHEMA_VERSION":"'1.0.0'"},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.models.documentation":{"path":"documentation.py","docstring":"Documentation model classes.\n\nThis module contains models related to documentation elements.","imports":{},"from_imports":{"enum":["Enum","auto"],"typing":["Dict","List","Optional","Any","Set","Union"],"pathlib":["Path"],"pydantic":["Field","validator","BaseModel"],"dataclasses":["dataclass","field"],"proj_mapper.models.base":["BaseModel"],"proj_mapper.models.code":["LocationModel","Location"],"proj_mapper.utils.json_encoder":["register_serializer"]},"classes":{"DocumentationType":{"name":"DocumentationType","docstring":"Types of documentation elements.","bases":["Enum"],"methods":{},"properties":[],"class_attrs":{},"decorators":[]},"DocumentationElement":{"name":"DocumentationElement","docstring":"A documentation element found in the codebase.","bases":[],"methods":{"add_child":{"name":"add_child","docstring":"Add a child element to this element.\n\nArgs:\n    child_id: Identifier of the child element","params":["child_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_reference":{"name":"add_reference","docstring":"Add a reference to another element.\n\nArgs:\n    reference_type: Type of the reference (code, doc, external)\n    reference_id: Identifier of the referenced element\n    location: Location information for the reference (optional)\n    context: Context around the reference (optional)\n    confidence: Confidence score for this reference\n    metadata: Additional metadata for the reference (optional)","params":["reference_type: str","reference_id: str","location: Unknown","context: Unknown","confidence: float","metadata: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"to_reference":{"name":"to_reference","docstring":"Convert the element to a simplified reference format.\n\nReturns:\n    A dictionary with key information about the element","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["title","element_type","location","content","parent","children","references","metadata"],"class_attrs":{"parent":"None"},"decorators":["dataclass"]},"DocumentationReference":{"name":"DocumentationReference","docstring":"Represents a reference from a documentation element to another resource.\n\nThis can be a reference to code, another documentation element, or an external resource.","bases":["BaseModel"],"methods":{"__str__":{"name":"__str__","docstring":"Get string representation of the reference.\n\nReturns:\n    String representation","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert to a dictionary representation.\n\nReturns:\n    Dictionary with reference information","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["source_id","reference_id","reference_type","location","context","confidence","metadata"],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.utils.json_encoder"],"imported_by":["proj_mapper","proj_mapper","proj_mapper","proj_mapper","proj_mapper","proj_mapper","proj_mapper.core.mapping","proj_mapper.core.file_discovery","proj_mapper.core.project_manager","proj_mapper.core.project_manager","proj_mapper.core.discovery","proj_mapper.core.analysis","proj_mapper.core.analysis","proj_mapper.output.ai_optimization","proj_mapper.output.pipeline_stages","proj_mapper.output.pipeline_stages","proj_mapper.output.pipeline_stages","proj_mapper.output.generator","proj_mapper.output.generator","proj_mapper.output.generator","proj_mapper.output.generator","proj_mapper.output.adapters.markdown_adapter","proj_mapper.output.templates.project_overview","proj_mapper.relationship.mapper","proj_mapper.relationship.mapper","proj_mapper.relationship.mapper","proj_mapper.relationship.cross_ref","proj_mapper.relationship.cross_ref","proj_mapper.relationship.cross_ref","proj_mapper.relationship.detector","proj_mapper.relationship.detector","proj_mapper.relationship.detector","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.scoring","proj_mapper.relationship.graph.node","proj_mapper.relationship.graph.node","proj_mapper.relationship.graph.graph","proj_mapper.relationship.graph.graph","proj_mapper.relationship.graph.graph","proj_mapper.relationship.graph.edge","proj_mapper.storage.map_storage","proj_mapper.models","proj_mapper.models","proj_mapper.models","proj_mapper.models","proj_mapper.models","proj_mapper.models.file","proj_mapper.models.analysis","proj_mapper.models.analysis","proj_mapper.models.analysis","proj_mapper.models.analysis","proj_mapper.models.code","proj_mapper.models.project","proj_mapper.analyzers.pipeline","proj_mapper.analyzers.pipeline","proj_mapper.analyzers.base","proj_mapper.analyzers.factory","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.documentation.pipeline","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.code.python","proj_mapper.analyzers.code.python_ast_visitor.visitor","proj_mapper.analyzers.code.python_ast_visitor.metadata","proj_mapper.analyzers.code.python_ast_visitor.node_processors"],"is_entry_point":false},"proj_mapper.analyzers":{"path":"__init__.py","docstring":"Analyzers package for Project Mapper.\n\nThis package provides analyzers for different file types.","imports":{},"from_imports":{"proj_mapper.analyzers.base":["Analyzer","AnalysisResult"],"proj_mapper.analyzers.factory":["AnalyzerFactory"],"proj_mapper.analyzers.code.python":["PythonAnalyzer"],"proj_mapper.analyzers.documentation.markdown":["MarkdownAnalyzer"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.code","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.code.python","proj_mapper.analyzers.code"],"imported_by":["proj_mapper.web.app","proj_mapper.cli.main","proj_mapper.cli.interactive"],"is_entry_point":false},"proj_mapper.analyzers.pipeline":{"path":"pipeline.py","docstring":"Analysis pipeline.\n\nThis module provides a pipeline for analyzing project files.","imports":{"logging":"logging"},"from_imports":{"concurrent.futures":["ThreadPoolExecutor","as_completed"],"pathlib":["Path"],"typing":["Dict","List","Optional","Set","Tuple","Any"],"proj_mapper.analyzers.base":["AnalysisResult","Analyzer"],"proj_mapper.analyzers.factory":["AnalyzerFactory"],"proj_mapper.models.analysis":["CodeAnalysisResult","DocumentationAnalysisResult"],"proj_mapper.models.file":["DiscoveredFile","FileType","DiscoveredProject"]},"classes":{"AnalysisPipeline":{"name":"AnalysisPipeline","docstring":"Pipeline for analyzing project files.\n\nThis class coordinates the analysis of files using the appropriate analyzers.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the analysis pipeline.\n\nArgs:\n    max_workers: Maximum number of worker threads for parallel analysis","params":["max_workers: int"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"analyze_project":{"name":"analyze_project","docstring":"Analyze all files in a project.\n\nArgs:\n    project: The project to analyze\n    file_types: Optional set of file types to analyze (all file types if None)\n    \nReturns:\n    Dictionary mapping file paths to analysis results","params":["project: DiscoveredProject","file_types: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_analyze_file":{"name":"_analyze_file","docstring":"Analyze a single file.\n\nArgs:\n    file: The file to analyze\n    analyzer: The analyzer to use\n    \nReturns:\n    Analysis result or None if analysis failed","params":["file: DiscoveredFile","analyzer: Analyzer"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_related_files":{"name":"get_related_files","docstring":"Get files related to the specified file.\n\nArgs:\n    file_path: Path to the file\n    relationship_type: Type of relationship to look for\n    recursive: Whether to find relationships recursively\n    max_depth: Maximum recursion depth\n    \nReturns:\n    List of related file paths","params":["file_path: str","relationship_type: str","recursive: bool","max_depth: int"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_code_references_to_file":{"name":"get_code_references_to_file","docstring":"Find code references to the specified file.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    Dictionary mapping source files to lists of references","params":["file_path: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_documentation_for_code":{"name":"get_documentation_for_code","docstring":"Find documentation references to a code file.\n\nArgs:\n    code_file_path: Path to the code file\n    \nReturns:\n    Dictionary mapping documentation files to references","params":["code_file_path: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"generate_summary":{"name":"generate_summary","docstring":"Generate a summary of the analysis results.\n\nReturns:\n    Summary statistics and information","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.code","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.analyzers.code"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.base":{"path":"base.py","docstring":"Base analyzer module.\n\nThis module provides the base analyzer class and analysis result model.","imports":{"logging":"logging"},"from_imports":{"abc":["ABC","abstractmethod"],"typing":["Dict","Any","Optional","Type","ClassVar"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"AnalysisResult":{"name":"AnalysisResult","docstring":"Represents the result of a file analysis.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize an analysis result.\n\nArgs:\n    file: The file that was analyzed","params":["file: DiscoveredFile"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"add_import":{"name":"add_import","docstring":"Add an import relationship.\n\nArgs:\n    path: Path to the imported module\n    confidence: Confidence score for the relationship","params":["path: str","confidence: float"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_export":{"name":"add_export","docstring":"Add an exported symbol.\n\nArgs:\n    name: Name of the exported symbol\n    kind: Kind of symbol (e.g., 'class', 'function')","params":["name: str","kind: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"add_dependency":{"name":"add_dependency","docstring":"Add a dependency.\n\nArgs:\n    name: Name of the dependency\n    version: Optional version requirement","params":["name: str","version: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"set_module":{"name":"set_module","docstring":"Set module information.\n\nArgs:\n    name: Name of the module\n    kind: Kind of module (e.g., 'package', 'module')","params":["name: str","kind: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"set_documentation":{"name":"set_documentation","docstring":"Set documentation content.\n\nArgs:\n    content: Documentation content\n    format: Format of the content (e.g., 'text', 'markdown')","params":["content: str","format: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"to_dict":{"name":"to_dict","docstring":"Convert to a dictionary representation.\n\nReturns:\n    Dictionary with analysis results","params":[],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"__dict__":{"name":"__dict__","docstring":"Get a dictionary representation for JSON serialization.\n\nReturns:\n    A dictionary representation of this object","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"Analyzer":{"name":"Analyzer","docstring":"Base class for file analyzers.","bases":["ABC"],"methods":{"__init_subclass__":{"name":"__init_subclass__","docstring":"Register analyzer subclasses.\n\nThis method is called when a subclass is created.","params":["cls","**kwargs"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_registered_analyzers":{"name":"get_registered_analyzers","docstring":"Get all registered analyzer classes.\n\nReturns:\n    Dictionary mapping analyzer names to classes","params":["cls"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["classmethod"]},"can_analyze":{"name":"can_analyze","docstring":"Check if this analyzer can handle the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this analyzer can handle the file","params":["file: DiscoveredFile"],"return_type":"bool","is_async":false,"calls":[],"decorators":["abstractmethod"]},"analyze":{"name":"analyze","docstring":"Analyze a file.\n\nArgs:\n    file: The file to analyze\n    \nReturns:\n    Analysis results or None if analysis failed","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":["abstractmethod"]}},"properties":["_registry"],"class_attrs":{"_registry":"{}"},"decorators":[]},"AnalyzerRegistry":{"name":"AnalyzerRegistry","docstring":"Registry for analyzer classes.\n\nThis class provides a way to register and retrieve analyzers.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize an empty analyzer registry.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"register_analyzer":{"name":"register_analyzer","docstring":"Register an analyzer class.\n\nArgs:\n    analyzer_class: The analyzer class to register","params":["analyzer_class: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_analyzer":{"name":"get_analyzer","docstring":"Get an analyzer class by name.\n\nArgs:\n    name: Name of the analyzer to get\n    \nReturns:\n    The analyzer class, or None if not found","params":["name: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_analyzer_for_file":{"name":"get_analyzer_for_file","docstring":"Get an analyzer for the specified file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer that can analyze the file, or None if not found","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"AnalyzerFactory":{"name":"AnalyzerFactory","docstring":"Factory for creating appropriate analyzers.\n\nThis class provides a way to create analyzers for specific files.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize an analyzer factory.\n\nArgs:\n    registry: Optional analyzer registry to use (creates a new one if None)","params":["registry: AnalyzerRegistry"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_analyzer_for_file":{"name":"get_analyzer_for_file","docstring":"Get an appropriate analyzer for the given file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer instance if a suitable analyzer is found, None otherwise","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.factory":{"path":"factory.py","docstring":"Analyzer factory module.\n\nThis module provides the factory for creating analyzers.","imports":{"logging":"logging"},"from_imports":{"typing":["Optional","Type"],"proj_mapper.analyzers.base":["Analyzer"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"AnalyzerFactory":{"name":"AnalyzerFactory","docstring":"Factory for creating analyzers.\n\nThis class is responsible for creating the appropriate analyzer for a given file.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the analyzer factory.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"_register_analyzers":{"name":"_register_analyzers","docstring":"Register all available analyzers.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_analyzer_for_file":{"name":"get_analyzer_for_file","docstring":"Get an appropriate analyzer for the given file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer instance or None if no suitable analyzer is found","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"create_analyzer":{"name":"create_analyzer","docstring":"Create an analyzer based on file type.\n\nArgs:\n    file_type: The type of file to create an analyzer for\n    \nReturns:\n    An analyzer instance or None if no suitable analyzer is found","params":["file_type: FileType"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.analyzers.code"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.pipeline_stages":{"path":"pipeline_stages.py","docstring":"Pipeline stages for analysis.\n\nThis module provides pipeline stages that integrate analyzers with the pipeline.","imports":{"logging":"logging"},"from_imports":{"typing":["Dict","List","Any","Optional","Union"],"concurrent.futures":["ThreadPoolExecutor","as_completed"],"proj_mapper.core.pipeline":["PipelineStage","PipelineContext"],"proj_mapper.models.file":["DiscoveredFile","FileType"],"proj_mapper.analyzers.factory":["AnalyzerFactory"],"proj_mapper.analyzers.pipeline":["AnalysisPipeline"],"proj_mapper.models.project":["Project"]},"classes":{"CodeAnalysisStage":{"name":"CodeAnalysisStage","docstring":"Pipeline stage for analyzing code files.\n\nThis stage analyzes code files in the project.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the code analysis stage.\n\nArgs:\n    max_workers: Maximum number of worker threads for parallel analysis","params":["max_workers: int"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the pipeline context.\n\nArgs:\n    context: The pipeline context to process\n    \nReturns:\n    Updated pipeline context with code analysis results\n    \nRaises:\n    ValueError: If the project is not available in the context","params":["context: PipelineContext"],"return_type":"PipelineContext","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"DocumentationAnalysisStage":{"name":"DocumentationAnalysisStage","docstring":"Pipeline stage for analyzing documentation files.\n\nThis stage analyzes documentation files in the project.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the documentation analysis stage.\n\nArgs:\n    max_workers: Maximum number of worker threads for parallel analysis","params":["max_workers: int"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the pipeline context.\n\nArgs:\n    context: The pipeline context to process\n    \nReturns:\n    Updated pipeline context with documentation analysis results\n    \nRaises:\n    ValueError: If the project is not available in the context","params":["context: PipelineContext"],"return_type":"PipelineContext","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"CombinedAnalysisStage":{"name":"CombinedAnalysisStage","docstring":"Pipeline stage that combines code and documentation analysis.","bases":["Unknown"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the combined analysis stage.\n\nArgs:\n    config: Either the max_workers value as an integer or a config dictionary\n           containing analysis configuration options","params":["config: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process the project by analyzing code and documentation.\n\nArgs:\n    context: The pipeline context\n    project: The project to analyze\n    \nReturns:\n    The project with analysis results","params":["context: PipelineContext","project: Project"],"return_type":"Project","is_async":false,"calls":[],"decorators":[]},"_analyze_files":{"name":"_analyze_files","docstring":"Analyze a list of files in parallel.\n\nArgs:\n    files: List of files to analyze\n    \nReturns:\n    Dictionary mapping file paths to analysis results","params":["files: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_analyze_file":{"name":"_analyze_file","docstring":"Analyze a single file.\n\nArgs:\n    file: The file to analyze\n    \nReturns:\n    Analysis results dictionary or None if analysis fails","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{"analyze_file":{"name":"analyze_file","docstring":"Analyze a single file.\n\nArgs:\n    file_path: Path to the file to analyze\n    content: Optional file content (if already loaded)\n    \nReturns:\n    Analysis result as a dictionary","params":["file_path: str","content: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"analyze_files":{"name":"analyze_files","docstring":"Analyze multiple files.\n\nArgs:\n    files: List of file dictionaries with 'path' and optional 'content'\n    \nReturns:\n    Dictionary mapping file paths to analysis results","params":["files: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_determine_file_type":{"name":"_determine_file_type","docstring":"Determine the file type from the file path.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    File type as a string","params":["file_path: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.core.analysis","proj_mapper.analyzers.code","proj_mapper.analyzers.code","proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.documentation":{"path":"__init__.py","docstring":"Project Mapper documentation analyzers package.\n\nThis package contains analyzers for documentation files.","imports":{},"from_imports":{"proj_mapper.analyzers.documentation.markdown":["MarkdownAnalyzer"],"proj_mapper.analyzers.documentation.pipeline":["DocumentationAnalysisStage"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.documentation.markdown"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.documentation.pipeline":{"path":"pipeline.py","docstring":"Pipeline stage for documentation analysis.\n\nThis module provides a pipeline stage for analyzing documentation files.","imports":{"logging":"logging"},"from_imports":{"typing":["Dict","List","Any","Optional"],"proj_mapper.core.pipeline":["PipelineStage","PipelineContext"],"proj_mapper.models.file":["DiscoveredFile","FileType"],"proj_mapper.analyzers.documentation":["MarkdownAnalyzer"]},"classes":{"DocumentationAnalysisStage":{"name":"DocumentationAnalysisStage","docstring":"Pipeline stage for analyzing documentation files.\n\nThis stage processes documentation files (markdown, etc.) and extracts structure\nand references from them.","bases":["PipelineStage"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the documentation analysis stage.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process":{"name":"process","docstring":"Process documentation files through the analyzer.\n\nArgs:\n    context: The pipeline context\n    input_data: List of discovered files\n    \nReturns:\n    List of analysis results\n    \nNotes:\n    This stage filters for documentation files and passes them to the\n    appropriate analyzer. The results are added to the pipeline context\n    under the key 'documentation_analysis_results'.","params":["context: PipelineContext","input_data: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.documentation.markdown","proj_mapper.models.documentation","proj_mapper.core.analysis"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.documentation.markdown":{"path":"markdown.py","docstring":"Markdown documentation analyzer.\n\nThis module provides an analyzer for Markdown documentation files.","imports":{"logging":"logging","re":"re","markdown_it":"markdown_it"},"from_imports":{"pathlib":["Path"],"typing":["Dict","List","Optional","Any","Set","Tuple","ClassVar"],"markdown_it":["MarkdownIt"],"markdown_it.token":["Token"],"proj_mapper.analyzers.base":["Analyzer","AnalysisResult"],"proj_mapper.models.analysis":["DocumentationAnalysisResult"],"proj_mapper.models.code":["Location"],"proj_mapper.models.documentation":["DocumentationElement","DocumentationType"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"MarkdownAnalyzer":{"name":"MarkdownAnalyzer","docstring":"Analyzer for Markdown documentation files.\n\nThis class analyzes Markdown files and extracts document structure elements\nlike headings, sections, code blocks, and references.","bases":["Analyzer"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the Markdown analyzer.","params":[],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"can_analyze":{"name":"can_analyze","docstring":"Check if this analyzer can analyze the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this is a Markdown file, False otherwise","params":["file: DiscoveredFile"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]},"analyze":{"name":"analyze","docstring":"Analyze a Markdown file and extract document structure.\n\nArgs:\n    file: The file to analyze\n    content: Optional file content (if already loaded)\n    \nReturns:\n    Analysis results with extracted documentation elements\n    \nRaises:\n    ValueError: If the file cannot be analyzed","params":["file: DiscoveredFile","content: Unknown"],"return_type":"DocumentationAnalysisResult","is_async":false,"calls":[],"decorators":[]},"_get_next_id":{"name":"_get_next_id","docstring":"Get the next unique ID.\n\nReturns:\n    A unique ID string","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_extract_front_matter":{"name":"_extract_front_matter","docstring":"Extract front matter metadata from Markdown content.\n\nArgs:\n    content: The markdown content\n    \nReturns:\n    Tuple of (content without front matter, extracted metadata)","params":["content: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_process_tokens":{"name":"_process_tokens","docstring":"Process Markdown tokens and create documentation elements.\n\nArgs:\n    tokens: List of parsed Markdown tokens\n    file_path: Path to the file being analyzed\n    \nReturns:\n    List of documentation elements","params":["tokens: Unknown","file_path: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_detect_code_references":{"name":"_detect_code_references","docstring":"Detect code references in code blocks or other elements.\n\nArgs:\n    element: The documentation element to analyze","params":["element: DocumentationElement"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_detect_markdown_links":{"name":"_detect_markdown_links","docstring":"Detect Markdown links in content and extract file references.\n\nArgs:\n    element: The documentation element to analyze","params":["element: DocumentationElement"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":["supported_extensions"],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.models.documentation","proj_mapper.analyzers.code","proj_mapper.models.documentation"],"imported_by":["proj_mapper.analyzers","proj_mapper.analyzers.documentation","proj_mapper.analyzers.documentation","proj_mapper.analyzers.documentation.pipeline"],"is_entry_point":false},"proj_mapper.analyzers.code":{"path":"__init__.py","docstring":"Code analyzers package for Project Mapper.\n\nThis package provides analyzers for code files.","imports":{},"from_imports":{"proj_mapper.analyzers.code.python":["PythonAnalyzer"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.code.python"],"imported_by":["proj_mapper.core.project_manager","proj_mapper.core.analysis","proj_mapper.analyzers","proj_mapper.analyzers","proj_mapper.analyzers.pipeline","proj_mapper.analyzers.pipeline","proj_mapper.analyzers.factory","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.code.python"],"is_entry_point":false},"proj_mapper.analyzers.code.python_ast_visitor":{"path":"__init__.py","docstring":"Python AST visitor for code analysis.\n\nThis module provides a visitor for traversing Python's abstract syntax tree (AST)\nand extracting code elements. This is a backward compatibility layer that re-exports\nthe PythonASTVisitor class from its new location.","imports":{},"from_imports":{"proj_mapper.analyzers.code.python_ast_visitor.visitor":["PythonASTVisitor"]},"classes":{},"functions":{},"constants":{},"dependencies":["proj_mapper.analyzers.code.python_ast_visitor.node_processors"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.code.python":{"path":"python.py","docstring":"Python analyzer module.\n\nThis module provides the analyzer for Python files.","imports":{"ast":"ast","logging":"logging"},"from_imports":{"pathlib":["Path"],"typing":["Dict","Any","Optional","List","Set"],"proj_mapper.analyzers.base":["Analyzer","AnalysisResult"],"proj_mapper.models.file":["DiscoveredFile","FileType"]},"classes":{"PythonVisitor":{"name":"PythonVisitor","docstring":"AST visitor for Python files.","bases":["ast.NodeVisitor"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the visitor.\n\nArgs:\n    file: The file being analyzed","params":["file: DiscoveredFile"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"visit_Import":{"name":"visit_Import","docstring":"Visit an Import node.\n\nArgs:\n    node: The AST node","params":["node: ast.Import"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_ImportFrom":{"name":"visit_ImportFrom","docstring":"Visit an ImportFrom node.\n\nArgs:\n    node: The AST node","params":["node: ast.ImportFrom"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_ClassDef":{"name":"visit_ClassDef","docstring":"Visit a ClassDef node.\n\nArgs:\n    node: The AST node","params":["node: ast.ClassDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_FunctionDef":{"name":"visit_FunctionDef","docstring":"Visit a FunctionDef node.\n\nArgs:\n    node: The AST node","params":["node: ast.FunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_Module":{"name":"visit_Module","docstring":"Visit a Module node.\n\nArgs:\n    node: The AST node","params":["node: ast.Module"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]},"PythonAnalyzer":{"name":"PythonAnalyzer","docstring":"Analyzer for Python files.","bases":["Analyzer"],"methods":{"can_analyze":{"name":"can_analyze","docstring":"Check if this analyzer can handle the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this analyzer can handle the file","params":["file: DiscoveredFile"],"return_type":"bool","is_async":false,"calls":[],"decorators":[]},"analyze":{"name":"analyze","docstring":"Analyze a Python file.\n\nArgs:\n    file: The file to analyze\n    \nReturns:\n    Analysis results or None if analysis failed","params":["file: DiscoveredFile"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.analyzers.code"],"imported_by":["proj_mapper.analyzers","proj_mapper.analyzers.code"],"is_entry_point":false},"proj_mapper.analyzers.code.python_ast_visitor.visitor":{"path":"visitor.py","docstring":"Python AST visitor core implementation.\n\nThis module contains the core implementation of the Python AST visitor class\nresponsible for traversing the AST and coordinating the extraction of code elements.","imports":{"ast":"ast","logging":"logging"},"from_imports":{"typing":["Dict","List","Optional","Any","Set","Union","cast"],"proj_mapper.models.code":["CodeElement","CodeElementType","Location","Visibility"],"proj_mapper.analyzers.code.python_ast_visitor.node_processors":["NodeProcessors"],"proj_mapper.analyzers.code.python_ast_visitor.metadata":["MetadataExtractor"],"proj_mapper.analyzers.code.python_ast_visitor.utils":["ASTUtils"]},"classes":{"PythonASTVisitor":{"name":"PythonASTVisitor","docstring":"Visitor for traversing Python's AST and extracting code elements.\n\nThis class visits AST nodes and extracts information about classes, functions,\nmethods, and other code elements.","bases":["ast.NodeVisitor"],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the AST visitor.\n\nArgs:\n    file_path: Path to the file being analyzed\n    module_name: Name of the module (optional)","params":["file_path: str","module_name: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"_get_next_id":{"name":"_get_next_id","docstring":"Get the next unique ID.\n\nReturns:\n    A unique ID string","params":[],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_add_child_relationship":{"name":"_add_child_relationship","docstring":"Add a parent-child relationship.\n\nArgs:\n    parent_id: ID of the parent element\n    child_id: ID of the child element","params":["parent_id: str","child_id: str"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_get_qualified_name":{"name":"_get_qualified_name","docstring":"Get a qualified name including module and class.\n\nArgs:\n    name: The base name\n    \nReturns:\n    The qualified name","params":["name: str"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"_get_visibility":{"name":"_get_visibility","docstring":"Determine visibility from name based on Python conventions.\n\nArgs:\n    name: The name to check\n    \nReturns:\n    The visibility level","params":["name: str"],"return_type":"Visibility","is_async":false,"calls":[],"decorators":[]},"visit_Module":{"name":"visit_Module","docstring":"Visit a module node.\n\nArgs:\n    node: The module node","params":["node: ast.Module"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_ClassDef":{"name":"visit_ClassDef","docstring":"Visit a class definition.\n\nArgs:\n    node: The class definition node","params":["node: ast.ClassDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_FunctionDef":{"name":"visit_FunctionDef","docstring":"Visit a function definition.\n\nArgs:\n    node: The function definition node","params":["node: ast.FunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_AsyncFunctionDef":{"name":"visit_AsyncFunctionDef","docstring":"Visit an async function definition.\n\nArgs:\n    node: The async function definition node","params":["node: ast.AsyncFunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_Import":{"name":"visit_Import","docstring":"Visit an import statement.\n\nArgs:\n    node: The import statement node","params":["node: ast.Import"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_ImportFrom":{"name":"visit_ImportFrom","docstring":"Visit an import from statement.\n\nArgs:\n    node: The import from statement node","params":["node: ast.ImportFrom"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_Assign":{"name":"visit_Assign","docstring":"Visit an assignment statement.\n\nArgs:\n    node: The assignment statement node","params":["node: ast.Assign"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"visit_AnnAssign":{"name":"visit_AnnAssign","docstring":"Visit an annotated assignment statement.\n\nArgs:\n    node: The annotated assignment statement node","params":["node: ast.AnnAssign"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation","proj_mapper.analyzers.code.python_ast_visitor.node_processors","proj_mapper.analyzers.code.python_ast_visitor.node_processors","proj_mapper.analyzers.code.python_ast_visitor.node_processors"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.code.python_ast_visitor.utils":{"path":"utils.py","docstring":"Python AST utilities.\n\nThis module contains utility functions for working with Python's AST.","imports":{"ast":"ast"},"from_imports":{"typing":["Optional","Any"]},"classes":{"ASTUtils":{"name":"ASTUtils","docstring":"Utility functions for working with Python's AST.\n\nThis class provides utility functions for extracting information\nfrom AST nodes and converting them to string representations.","bases":[],"methods":{"extract_annotation":{"name":"extract_annotation","docstring":"Extract a type annotation as a string.\n\nArgs:\n    annotation: The annotation AST node\n    \nReturns:\n    The annotation as a string, or None if no annotation","params":["annotation: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"base_to_str":{"name":"base_to_str","docstring":"Convert a base class AST node to a string.\n\nArgs:\n    node: The AST node for a base class\n    \nReturns:\n    String representation of the base class","params":["node: ast.AST"],"return_type":"str","is_async":false,"calls":[],"decorators":[]},"node_to_str":{"name":"node_to_str","docstring":"Convert an AST node to a string representation.\n\nArgs:\n    node: The AST node to convert\n    \nReturns:\n    String representation of the node, or None if node is None","params":["node: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_full_name":{"name":"get_full_name","docstring":"Get the full name of an attribute or name node.\n\nArgs:\n    node: The AST node\n    \nReturns:\n    The full name as a string","params":["node: ast.AST"],"return_type":"str","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":[],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.code.python_ast_visitor.metadata":{"path":"metadata.py","docstring":"Python AST metadata extraction.\n\nThis module contains utilities for extracting metadata from AST nodes,\nsuch as docstrings and location information.","imports":{"ast":"ast"},"from_imports":{"typing":["Optional","Union","TYPE_CHECKING"],"proj_mapper.models.code":["Location","LocationModel"]},"classes":{"MetadataExtractor":{"name":"MetadataExtractor","docstring":"Extractor for metadata from AST nodes.\n\nThis class provides utilities for extracting metadata like docstrings\nand location information from AST nodes.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the metadata extractor.\n\nArgs:\n    visitor: The AST visitor that will use this extractor","params":["visitor: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"get_docstring":{"name":"get_docstring","docstring":"Extract docstring from a node.\n\nArgs:\n    node: The AST node\n    \nReturns:\n    The docstring, or None if no docstring found","params":["node: Unknown"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"get_location":{"name":"get_location","docstring":"Get a LocationModel object for an AST node.\n\nArgs:\n    node: The AST node\n    \nReturns:\n    A LocationModel object","params":["node: ast.AST"],"return_type":"LocationModel","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":[],"is_entry_point":false},"proj_mapper.analyzers.code.python_ast_visitor.node_processors":{"path":"node_processors.py","docstring":"Python AST node processors.\n\nThis module contains processors for different AST node types.","imports":{"ast":"ast"},"from_imports":{"typing":["Dict","List","Optional","Any","Union","TYPE_CHECKING"],"proj_mapper.models.code":["CodeElement","CodeElementType","Location","Visibility"]},"classes":{"NodeProcessors":{"name":"NodeProcessors","docstring":"Processors for different AST node types.\n\nThis class contains methods for processing different types of AST nodes\nand extracting code elements from them.","bases":[],"methods":{"__init__":{"name":"__init__","docstring":"Initialize the node processors.\n\nArgs:\n    visitor: The AST visitor that will use these processors","params":["visitor: Unknown"],"return_type":null,"is_async":false,"calls":[],"decorators":[]},"process_class_def":{"name":"process_class_def","docstring":"Process a class definition.\n\nArgs:\n    node: The class definition node","params":["node: ast.ClassDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_function_def":{"name":"process_function_def","docstring":"Process a function definition.\n\nArgs:\n    node: The function definition node","params":["node: ast.FunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_async_function_def":{"name":"process_async_function_def","docstring":"Process an async function definition.\n\nArgs:\n    node: The async function definition node","params":["node: ast.AsyncFunctionDef"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"_process_function":{"name":"_process_function","docstring":"Process a function or method definition.\n\nArgs:\n    node: The function definition node\n    is_async: Whether this is an async function","params":["node: Unknown","is_async: bool"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_import":{"name":"process_import","docstring":"Process an import statement.\n\nArgs:\n    node: The import statement node","params":["node: ast.Import"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_import_from":{"name":"process_import_from","docstring":"Process an import from statement.\n\nArgs:\n    node: The import from statement node","params":["node: ast.ImportFrom"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_assign":{"name":"process_assign","docstring":"Process an assignment statement.\n\nArgs:\n    node: The assignment statement node","params":["node: ast.Assign"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]},"process_ann_assign":{"name":"process_ann_assign","docstring":"Process an annotated assignment statement.\n\nArgs:\n    node: The annotated assignment statement node","params":["node: ast.AnnAssign"],"return_type":"Unknown","is_async":false,"calls":[],"decorators":[]}},"properties":[],"class_attrs":{},"decorators":[]}},"functions":{},"constants":{},"dependencies":["proj_mapper.models.documentation"],"imported_by":["proj_mapper.analyzers.code.python_ast_visitor","proj_mapper.analyzers.code.python_ast_visitor.visitor","proj_mapper.analyzers.code.python_ast_visitor.visitor","proj_mapper.analyzers.code.python_ast_visitor.visitor"],"is_entry_point":false}},
  "entry_points": ["proj_mapper","proj_mapper.cli","proj_mapper.version","proj_mapper.__main__","proj_mapper.web","proj_mapper.web.app","proj_mapper.core","proj_mapper.core.pipeline","proj_mapper.core.config","proj_mapper.core.mapping","proj_mapper.core.file_discovery","proj_mapper.core.project_manager","proj_mapper.core.discovery","proj_mapper.core.serialization","proj_mapper.core.analysis","proj_mapper.output","proj_mapper.output.ai_optimization","proj_mapper.output.config","proj_mapper.output.storage","proj_mapper.output.chunking","proj_mapper.output.pipeline_stages","proj_mapper.output.generator","proj_mapper.output.visualization","proj_mapper.output.adapters","proj_mapper.output.adapters.markdown_adapter","proj_mapper.output.adapters.json_adapter","proj_mapper.output.templates.project_overview","proj_mapper.stages.project_discovery","proj_mapper.pipeline","proj_mapper.pipeline.base","proj_mapper.utils.json_encoder","proj_mapper.relationship","proj_mapper.relationship.mapper","proj_mapper.relationship.cross_ref","proj_mapper.relationship.pipeline_stage","proj_mapper.relationship.detector","proj_mapper.relationship.graph","proj_mapper.relationship.pipeline_stages","proj_mapper.relationship.function_analyzer","proj_mapper.relationship.scoring","proj_mapper.relationship.graph.node","proj_mapper.relationship.graph.graph","proj_mapper.relationship.graph.edge","proj_mapper.cli.main","proj_mapper.cli.interactive","proj_mapper.cli.progress","proj_mapper.cli.config_handler","proj_mapper.cli.commands.relationship","proj_mapper.cli.commands.output","proj_mapper.storage","proj_mapper.storage.map_storage","proj_mapper.models","proj_mapper.models.file","proj_mapper.models.base","proj_mapper.models.relationship","proj_mapper.models.analysis","proj_mapper.models.code","proj_mapper.models.project","proj_mapper.models.documentation","proj_mapper.analyzers","proj_mapper.analyzers.pipeline","proj_mapper.analyzers.base","proj_mapper.analyzers.factory","proj_mapper.analyzers.pipeline_stages","proj_mapper.analyzers.documentation","proj_mapper.analyzers.documentation.pipeline","proj_mapper.analyzers.documentation.markdown","proj_mapper.analyzers.code","proj_mapper.analyzers.code.python_ast_visitor","proj_mapper.analyzers.code.python","proj_mapper.analyzers.code.python_ast_visitor.visitor","proj_mapper.analyzers.code.python_ast_visitor.utils","proj_mapper.analyzers.code.python_ast_visitor.metadata","proj_mapper.analyzers.code.python_ast_visitor.node_processors"],
  "core_modules": ["proj_mapper.core","proj_mapper.core.pipeline","proj_mapper.core.config","proj_mapper.core.mapping","proj_mapper.core.file_discovery","proj_mapper.core.project_manager","proj_mapper.core.discovery","proj_mapper.core.serialization","proj_mapper.core.analysis","proj_mapper.output.adapters","proj_mapper.models.documentation"],
  "utility_modules": ["proj_mapper.utils.json_encoder","proj_mapper.analyzers.code.python_ast_visitor.utils"],
  "circular_dependencies": [["proj_mapper.analyzers.code","proj_mapper.analyzers.code.python","proj_mapper.analyzers.code"]],
  "project_patterns": {"mvc":["proj_mapper.output.templates.project_overview","proj_mapper.models","proj_mapper.models.file","proj_mapper.models.base","proj_mapper.models.relationship","proj_mapper.models.analysis","proj_mapper.models.code","proj_mapper.models.project","proj_mapper.models.documentation"],"factory":["proj_mapper.analyzers.factory","proj_mapper.analyzers.base:AnalyzerFactory","proj_mapper.analyzers.factory:AnalyzerFactory"],"strategy":["proj_mapper.output.chunking:ChunkingStrategy","proj_mapper.output.chunking:HierarchicalChunkingStrategy","proj_mapper.relationship.scoring:ScoringStrategy"]},
  "ai_usage_hints": {"entry_points":"Start examining these files to understand the main functionality and CLI interface","core_modules":"These modules are central to the project and import widely","utility_modules":"These modules provide helper functions used throughout the project","circular_dependencies":"These modules have circular dependencies which may indicate tight coupling","project_patterns":"These architectural patterns were detected in the project"},
  "summary": {"num_modules":74,"num_classes":119,"num_functions":47},
  "created_at": "2025-03-26T02:44:45.072517"
}