---
description: MUST encrypt secrets WHEN storing configurations TO protect sensitive information.
globs: ["**/*", "**/handling/**", "**/*secret*/**", "**/*handling*/**", "**/secret/**"]
---
# secret-handling

<version>1.0.0</version>

## Metadata
{
  "rule_id": "3304-secret-handling",
  "taxonomy": {
    "category": "Configuration Management",
    "parent": "Configuration ManagementRule",
    "ancestors": [
      "Rule",
      "Configuration ManagementRule"
    ],
    "children": [
      "3305-environment-variables",
      "3306-password-storage"
    ]
  },
  "tags": [
    "secret-management",
    "configuration-security",
    "best-practices"
  ],
  "priority": "20",
  "inherits": [
    "000-context-awareness",
    "001-ai-operating-rules"
  ]
}

## Overview
{
  "purpose": "MUST ensure that all sensitive information, including passwords and API keys, is encrypted before being stored in configuration files to prevent unauthorized access.",
  "application": "This rule SHOULD be applied during the configuration management process, specifically when saving or updating configuration files that contain sensitive information. Developers MUST implement encryption methods that are industry-standard and adequately secure the stored secrets.",
  "importance": "This rule matters because unencrypted secrets can lead to significant security breaches, exposing critical system vulnerabilities. By enforcing encryption, organizations protect their assets and maintain compliance with data protection regulations, ultimately safeguarding user trust and system integrity."
}

## encryption_requirements

{
  "description": "This section outlines the requirements for encrypting secrets before storage.",
  "requirements": [
    "MUST use a secure encryption algorithm such as AES-256 when encrypting secrets.",
    "MUST store encryption keys separately from the encrypted data to prevent unauthorized access.",
    "SHOULD implement access controls on encrypted secrets to limit visibility to authorized personnel only."
  ]
}

## decryption_procedures

{
  "description": "This section details the procedures for securely decrypting secrets when needed.",
  "requirements": [
    "MUST ensure that decryption keys are only accessible in secure environments during runtime.",
    "MUST log all access to decryption processes to maintain an audit trail.",
    "SHOULD implement time-limited access to decrypted secrets to minimize exposure."
  ]
}

## best_practices

{
  "description": "This section provides best practices for managing secrets in configurations.",
  "requirements": [
    "NEVER hard-code secrets directly into source code or configuration files.",
    "MUST use environment variables or secure secret management tools to handle sensitive information.",
    "SHOULD regularly review and rotate secrets to mitigate risks associated with potential leaks."
  ]
}

<example>
secret-handling Example

```python
# Example for secret-handling
def example():
    # Implement according to standards
    pass
```

This example demonstrates how to implement secret-handling according to the standards.
</example>

<danger>
{
  "critical_violations": [
    "NEVER store plaintext secrets in configuration files under any circumstances.",
    "NEVER share unencrypted secrets through version control systems, including public repositories.",
    "NEVER use weak or outdated encryption algorithms for secret storage.",
    "NEVER fail to separate encryption keys from the encrypted secrets in the same storage location.",
    "NEVER ignore access control measures for sensitive configurations containing secrets."
  ],
  "specific_risks": [
    "Unauthorized access to plaintext secrets can lead to data breaches, exposing user data and sensitive organizational information.",
    "Storing unencrypted secrets in version control increases the risk of accidental exposure to the public, leading to potential exploitation.",
    "Using weak encryption algorithms may result in easily compromised secrets, allowing attackers to gain unauthorized access.",
    "If encryption keys are stored alongside the encrypted secrets, a breach could allow attackers to decrypt sensitive information effortlessly.",
    "Lack of access controls may enable unauthorized personnel to view or misuse sensitive configurations, resulting in security vulnerabilities."
  ]
}
</danger>
