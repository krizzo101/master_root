---
description: WHEN writing commit messages TO maintain clear project history you MUST follow THESE message formatting standards
globs: **/*
alwaysApply: false
---

<!-- Line count: 95 -->


{
"sections": {
"overview": "12-15",
"message_structure": "17-45",
"templates": "47-75",
"type_definitions": "77-95"
},
"key_elements": {
"validation_patterns": "20-35",
"message_templates": "47-65",
"type_requirements": "77-90"
},
"ai_instructions": "Process sections in order: message_structure -> validation_patterns -> specific template. Always validate against type_definitions before proceeding."
}

{
"rule_name": "Git Commit Message Standards",
"version": "1.0.0",
"ai_processing_priority": "high",
"enhanced_metadata": {
"activation_context": [
"writing commit messages",
"documenting code changes",
"maintaining git history",
"reviewing commits"
],
"priority": 4,
"domain": "version-control"
},

"overview": {
"description": "Defines comprehensive standards for writing clear and informative commit messages",
"importance": "Commit messages serve as permanent documentation of code changes and project history"
},

"message_structure": {
"format": {
"template": "<type>(<scope>): <subject>\n\n<body>\n\n<footer>",
"validation": {
"type": "^(feat|fix|docs|style|refactor|test|chore|ai-gen)$",
"scope": "^[a-z][a-z0-9-]*$",
"subject": {
"pattern": "^[a-z]a-z0-9\\s\\-\*]\*[a-z0-9]$",
"max_length": 72,
"end_char": "^[^\\.]$"
},
"body": {
"required": false,
"wrap_length": 72,
"paragraphs": true
},
"footer": {
"required": false,
"format": "^(Closes|Fixes|Related to) #\\d+$"
}
}
},

"templates": {
"feature": {
"pattern": "feat(<scope>): implement <feature-description>\n\n<implementation-details>\n\nCloses #<issue-number>",
"example": "feat(auth): implement OAuth2 login flow\n\nAdd OAuth2 authentication support with Google provider.\nImplement secure token storage and refresh mechanism.\n\nCloses #123"
},
"bugfix": {
"pattern": "fix(<scope>): resolve <bug-description>\n\n<fix-details>\n\nFixes #<issue-number>",
"example": "fix(api): resolve null pointer in user validation\n\nAdd null checks for user input fields.\nUpdate error handling to provide better feedback.\n\nFixes #456"
},
"ai_generated": {
"pattern": "ai-gen(<scope>): <description>\n\n<ai-details>\n\nGenerated by: <ai-system>\nReviewed by: <developer>",
"example": "ai-gen(utils): implement string formatting utilities\n\nAdd robust string manipulation functions with validation.\n\nGenerated by: Claude\nReviewed by: @dev-name"
},
"refactor": {
"pattern": "refactor(<scope>): <description>\n\n<motivation>\n<approach>",
"example": "refactor(database): optimize query performance\n\nPrevious queries were causing N+1 problems.\nImplemented eager loading and query caching."
}
},

"type_definitions": {
"feat": {
"description": "New feature or significant enhancement",
"requires_body": true,
"requires_issue": true
},
"fix": {
"description": "Bug fix",
"requires_body": true,
"requires_issue": true
},
"docs": {
"description": "Documentation changes",
"requires_body": false,
"requires_issue": false
},
"style": {
"description": "Code style/formatting changes",
"requires_body": false,
"requires_issue": false
},
"refactor": {
"description": "Code refactoring without behavior change",
"requires_body": true,
"requires_issue": false
},
"test": {
"description": "Adding or modifying tests",
"requires_body": false,
"requires_issue": false
},
"chore": {
"description": "Maintenance tasks and tooling changes",
"requires_body": false,
"requires_issue": false
},
"ai-gen": {
"description": "AI-generated code changes",
"requires_body": true,
"requires_review": true,
"requires_system": true
}
},

"scope*guidelines": {
"format": {
"pattern": "^[a-z][a-z0-9-]*$",
"max_length": 20
},
"common_scopes": [
"api",
"auth",
"core",
"db",
"ui",
"utils",
"tests",
"docs",
"deps",
"config"
],
"validation": {
"required": true,
"allow_custom": true,
"custom_pattern": "^[a-z][a-z0-9-]_$"
}
},

"ai_requirements": {
"commit_prefix": "ai-gen",
"review_required": true,
"metadata": {
"required_fields": [
"Generated by",
"Reviewed by"
],
"optional_fields": [
"Generation parameters",
"Model version",
"Confidence score"
]
},
"validation": {
"prefix_pattern": "^ai-gen\\([a-z0-9-]+\\): ",
"reviewer_pattern": "^Reviewed by: @[a-z0-9-]+$",
"generator_pattern": "^Generated by: [A-Za-z0-9-]+$"
}
},

"verification": {
"pre_commit_checks": [
"Message follows template",
"Type is valid",
"Scope is valid",
"Subject meets length requirements",
"Body format is correct (if present)",
"Footer format is correct (if present)",
"AI metadata present (if ai-gen)"
],
"validation_rules": {
"subject": {
"case": "lower",
"end_punctuation": false,
"max_length": 72,
"min_length": 10
},
"body": {
"wrap": 72,
"blank_lines": {
"after_subject": 1,
"before_footer": 1
},
"paragraphs": true
},
"metadata": {
"issue_reference": {
"pattern": "#\\d+",
"required_for": ["feat", "fix"]
},
"ai_review": {
"pattern": "@[a-z0-9-]+",
"required_for": ["ai-gen"]
}
}
}
},

"danger": {
"critical_violations": [
"NEVER use vague messages like 'fix bug' or 'update code'",
"NEVER omit scope for changes affecting multiple components",
"NEVER exceed subject line length limit",
"NEVER mix multiple unrelated changes in one commit",
"NEVER skip AI review metadata for ai-gen commits",
"NEVER use future tense in commit messages",
"NEVER include sensitive information or credentials",
"NEVER omit issue references for features and bugs"
],
"validation_rules": {
"vague_messages": {
"pattern": "^(fix|update|change|modify|improve)\\s+\\w+$",
"allowed": false
},
"scope_required": {
"pattern": "^[^(]+:",
"allowed": false
},
"subject_length": {
"max": 72,
"enforced": true
},
"mixed_changes": {
"max_files": 10,
"max_types": 1
},
"ai_metadata": {
"required_for": "^ai-gen",
"fields": ["Generated by", "Reviewed by"]
},
"future_tense": {
"pattern": "will|going to",
"allowed": false
},
"sensitive_data": {
"pattern": "(password|secret|key|token)\\s*[:=]\\s*[\"']?[A-Za-z0-9]+[\"']?",
"allowed": false
}
}
}
}
