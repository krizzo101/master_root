{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/base.py","name":"Analyzer","data":{"name":"Analyzer","file_path":"src/proj_mapper/analyzers/base.py","lineno":160,"bases":["ABC"],"methods":[{"name":"can_analyze","lineno":168,"docstring":"Check if this analyzer can analyze the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this analyzer can handle the file"},{"name":"get_file_filter","lineno":179,"docstring":"Get file patterns for selecting files for this analyzer.\n\nReturns:\n    List of glob patterns for files this analyzer can handle"}],"docstring":"Base class for all analyzers.\n\nAn analyzer is responsible for analyzing a specific type of file,\nsuch as Python code, JavaScript code, Markdown documentation, etc.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/base.py","name":"AnalyzerRegistry","data":{"name":"AnalyzerRegistry","file_path":"src/proj_mapper/analyzers/base.py","lineno":190,"bases":[],"methods":[{"name":"__init__","lineno":196,"docstring":"Initialize an empty analyzer registry."},{"name":"register_analyzer","lineno":200,"docstring":"Register an analyzer class.\n\nArgs:\n    analyzer_class: The analyzer class to register"},{"name":"get_analyzer","lineno":210,"docstring":"Get an analyzer class by name.\n\nArgs:\n    name: Name of the analyzer to get\n    \nReturns:\n    The analyzer class, or None if not found"},{"name":"get_analyzer_for_file","lineno":221,"docstring":"Get an analyzer for the specified file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer that can analyze the file, or None if not found"}],"docstring":"Registry for analyzer classes.\n\nThis class provides a way to register and retrieve analyzers.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/base.py","name":"AnalyzerFactory","data":{"name":"AnalyzerFactory","file_path":"src/proj_mapper/analyzers/base.py","lineno":241,"bases":[],"methods":[{"name":"__init__","lineno":247,"docstring":"Initialize an analyzer factory.\n\nArgs:\n    registry: Optional analyzer registry to use (creates a new one if None)"},{"name":"get_analyzer_for_file","lineno":258,"docstring":"Get an appropriate analyzer for the given file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer instance if a suitable analyzer is found, None otherwise"}],"docstring":"Factory for creating appropriate analyzers.\n\nThis class provides a way to create analyzers for specific files.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/code/python.py","name":"PythonAnalyzer","data":{"name":"PythonAnalyzer","file_path":"src/proj_mapper/analyzers/code/python.py","lineno":131,"bases":["Analyzer"],"methods":[{"name":"can_analyze","lineno":134,"docstring":"Check if this analyzer can handle the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this analyzer can handle the file"},{"name":"get_file_filter","lineno":145,"docstring":"Get file patterns for selecting Python files.\n\nReturns:\n    List of glob patterns for Python files"},{"name":"analyze_file","lineno":153,"docstring":"Analyze a Python file and extract code elements.\n\nArgs:\n    file_path: Path to the file\n    content: File content\n    \nReturns:\n    List of extracted code elements"},{"name":"analyze","lineno":182,"docstring":"Analyze a Python file.\n\nArgs:\n    file: The file to analyze\n    \nReturns:\n    Analysis results or None if analysis failed"}],"docstring":"Analyzer for Python files.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/code/python_ast_visitor/node_processors.py","name":"NodeProcessors","data":{"name":"NodeProcessors","file_path":"src/proj_mapper/analyzers/code/python_ast_visitor/node_processors.py","lineno":16,"bases":[],"methods":[{"name":"__init__","lineno":23,"docstring":"Initialize the node processors.\n\nArgs:\n    visitor: The AST visitor that will use these processors"},{"name":"process_class_def","lineno":31,"docstring":"Process a class definition.\n\nArgs:\n    node: The class definition node"},{"name":"process_function_def","lineno":84,"docstring":"Process a function definition.\n\nArgs:\n    node: The function definition node"},{"name":"process_async_function_def","lineno":92,"docstring":"Process an async function definition.\n\nArgs:\n    node: The async function definition node"},{"name":"_process_function","lineno":100,"docstring":"Process a function or method definition.\n\nArgs:\n    node: The function definition node\n    is_async: Whether this is an async function"},{"name":"process_import","lineno":196,"docstring":"Process an import statement.\n\nArgs:\n    node: The import statement node"},{"name":"process_import_from","lineno":212,"docstring":"Process an import from statement.\n\nArgs:\n    node: The import from statement node"},{"name":"process_assign","lineno":229,"docstring":"Process an assignment statement.\n\nArgs:\n    node: The assignment statement node"},{"name":"process_ann_assign","lineno":279,"docstring":"Process an annotated assignment statement.\n\nArgs:\n    node: The annotated assignment statement node"}],"docstring":"Processors for different AST node types.\n\nThis class contains methods for processing different types of AST nodes\nand extracting code elements from them.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/documentation/markdown/analyzer.py","name":"MarkdownAnalyzer","data":{"name":"MarkdownAnalyzer","file_path":"src/proj_mapper/analyzers/documentation/markdown/analyzer.py","lineno":23,"bases":["Analyzer"],"methods":[{"name":"__init__","lineno":33,"docstring":"Initialize the Markdown analyzer."},{"name":"can_analyze","lineno":37,"docstring":"Check if this analyzer can analyze the given file.\n\nArgs:\n    file: The file to check\n    \nReturns:\n    True if this is a Markdown file, False otherwise"},{"name":"get_file_filter","lineno":48,"docstring":"Get file patterns for selecting Markdown files.\n\nReturns:\n    List of glob patterns for Markdown files"},{"name":"analyze_file","lineno":56,"docstring":"Analyze a Markdown file and extract documentation elements.\n\nArgs:\n    file_path: Path to the file\n    content: File content\n    \nReturns:\n    List of extracted documentation elements"},{"name":"analyze","lineno":85,"docstring":"Analyze a Markdown file and extract document structure.\n\nArgs:\n    file: The file to analyze\n    content: Optional file content (if already loaded)\n    \nReturns:\n    Analysis results with extracted documentation elements\n    \nRaises:\n    ValueError: If the file cannot be analyzed"},{"name":"_analyze_references","lineno":164,"docstring":"Analyze elements to detect references.\n\nArgs:\n    elements: List of documentation elements to analyze"}],"docstring":"Analyzer for Markdown documentation files.\n\nThis class analyzes Markdown files and extracts document structure elements\nlike headings, sections, code blocks, and references.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/analyzers/factory.py","name":"AnalyzerFactory","data":{"name":"AnalyzerFactory","file_path":"src/proj_mapper/analyzers/factory.py","lineno":24,"bases":[],"methods":[{"name":"__init__","lineno":30,"docstring":"Initialize the analyzer factory."},{"name":"_register_analyzers","lineno":39,"docstring":"Register all available analyzers."},{"name":"get_analyzer_for_file","lineno":63,"docstring":"Get an appropriate analyzer for the given file.\n\nArgs:\n    file: The file to get an analyzer for\n    \nReturns:\n    An analyzer instance or None if no suitable analyzer is found"},{"name":"create_analyzer","lineno":93,"docstring":"Create an analyzer by name.\n\nArgs:\n    analyzer_name: The name of the analyzer to create (e.g., 'python', 'markdown')\n    \nReturns:\n    An analyzer instance or None if no suitable analyzer is found"}],"docstring":"Factory for creating analyzers.\n\nThis class is responsible for creating the appropriate analyzer for a given file.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/core/project_manager.py","name":"ProjectManager","data":{"name":"ProjectManager","file_path":"src/proj_mapper/core/project_manager.py","lineno":84,"bases":[],"methods":[{"name":"__init__","lineno":90,"docstring":"Initialize the project manager.\n\nArgs:\n    config: Optional configuration object"},{"name":"analyze_project","lineno":103,"docstring":"Analyze a project and generate a project map.\n\nArgs:\n    project_path: Path to the project root\n\nReturns:\n    Generated project map\n\nRaises:\n    ValueError: If project path is invalid"},{"name":"update_map","lineno":153,"docstring":"Update an existing project map.\n\nArgs:\n    project_path: Path to the project root\n\nReturns:\n    Updated project map\n\nRaises:\n    ValueError: If project path is invalid"},{"name":"update_project","lineno":189,"docstring":"Update an existing project map.\n\nArgs:\n    project_path: Path to the project root\n    full: If True, perform a full re-analysis of the project\n\nReturns:\n    Updated project map"},{"name":"_create_pipeline","lineno":203,"docstring":"Create the analysis pipeline.\n\nReturns:\n    Configured pipeline instance"}],"docstring":"Main entry point for the Project Mapper system.\n\nThe ProjectManager coordinates the analysis process and manages the overall workflow.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/models/analysis.py","name":"AnalysisResult","data":{"name":"AnalysisResult","file_path":"src/proj_mapper/models/analysis.py","lineno":17,"bases":["BaseModel"],"methods":[],"docstring":"Base class for all analysis results.\n\nAnalysis results contain the extracted information from a file.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/models/analysis.py","name":"CodeAnalysisResult","data":{"name":"CodeAnalysisResult","file_path":"src/proj_mapper/models/analysis.py","lineno":29,"bases":["AnalysisResult"],"methods":[{"name":"add_element","lineno":41,"docstring":"Add a code element to the result.\n\nArgs:\n    element: The code element to add"},{"name":"get_elements_by_type","lineno":49,"docstring":"Get elements of a specific type.\n\nArgs:\n    element_type: The element type to filter by\n    \nReturns:\n    List of elements matching the type"},{"name":"add_import","lineno":62,"docstring":"Add an import statement to the result.\n\nArgs:\n    import_from: Module imported from (None for direct imports)\n    import_what: What was imported\n    alias: Optional alias for the import"}],"docstring":"Analysis result for code files.\n\nContains extracted code elements from a file.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/models/analysis.py","name":"DocumentationAnalysisResult","data":{"name":"DocumentationAnalysisResult","file_path":"src/proj_mapper/models/analysis.py","lineno":77,"bases":["AnalysisResult"],"methods":[{"name":"add_element","lineno":89,"docstring":"Add a documentation element to the result.\n\nArgs:\n    element: The documentation element to add"},{"name":"get_elements_by_type","lineno":97,"docstring":"Get elements of a specific type.\n\nArgs:\n    element_type: The element type to filter by\n    \nReturns:\n    List of elements matching the type"},{"name":"get_sections","lineno":112,"docstring":"Get all section elements.\n\nReturns:\n    List of section elements"}],"docstring":"Analysis result for documentation files.\n\nContains extracted documentation elements from a file.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/models/code/legacy.py","name":"CodeElement","data":{"name":"CodeElement","file_path":"src/proj_mapper/models/code/legacy.py","lineno":14,"bases":[],"methods":[{"name":"add_child","lineno":32,"docstring":"Add a child element to this element.\n\nArgs:\n    child_id: Identifier of the child element"},{"name":"add_reference","lineno":41,"docstring":"Add a reference to another element.\n\nArgs:\n    reference_type: Type of the reference (code, doc, external)\n    reference_id: Identifier of the referenced element\n    location: Location information for the reference (optional)\n    context: Context around the reference (optional)\n    confidence: Confidence score for this reference\n    metadata: Additional metadata for the reference (optional)"}],"docstring":"A code element found in the codebase.\n\nThis is a legacy dataclass version maintained for backward compatibility.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/output/ai_optimization.py","name":"TokenizationEstimator","data":{"name":"TokenizationEstimator","file_path":"src/proj_mapper/output/ai_optimization.py","lineno":18,"bases":[],"methods":[{"name":"__init__","lineno":25,"docstring":"Initialize the token estimator.\n\nArgs:\n    chars_per_token: Average characters per token (GPT models average ~4)"},{"name":"estimate_tokens","lineno":33,"docstring":"Estimate the number of tokens in the data.\n\nArgs:\n    data: The data to estimate tokens for\n    \nReturns:\n    Estimated token count"},{"name":"_estimate_string_tokens","lineno":57,"docstring":"Estimate the number of tokens in a string.\n\nArgs:\n    text: The string to estimate tokens for\n    \nReturns:\n    Estimated token count"},{"name":"_estimate_dict_tokens","lineno":84,"docstring":"Estimate the number of tokens in a dictionary.\n\nArgs:\n    data: The dictionary to estimate tokens for\n    \nReturns:\n    Estimated token count"},{"name":"_estimate_sequence_tokens","lineno":105,"docstring":"Estimate the number of tokens in a sequence.\n\nArgs:\n    data: The sequence to estimate tokens for\n    \nReturns:\n    Estimated token count"}],"docstring":"Estimator for token counts in AI models.\n\nThis class provides methods for estimating the number of tokens that\ndifferent data structures will consume in AI models.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/output/ai_optimization.py","name":"AIOptimizer","data":{"name":"AIOptimizer","file_path":"src/proj_mapper/output/ai_optimization.py","lineno":124,"bases":[],"methods":[{"name":"__init__","lineno":131,"docstring":"Initialize the AI optimizer.\n\nArgs:\n    config: The generator configuration"},{"name":"optimize_map","lineno":140,"docstring":"Optimize a map structure for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure"},{"name":"_optimize_code_elements","lineno":179,"docstring":"Optimize code elements for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure"},{"name":"_optimize_documentation_elements","lineno":228,"docstring":"Optimize documentation elements for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure"},{"name":"_optimize_relationships","lineno":276,"docstring":"Optimize relationships for AI consumption.\n\nArgs:\n    map_structure: The map structure to optimize\n    \nReturns:\n    The optimized map structure"},{"name":"_add_ai_metadata","lineno":317,"docstring":"Add AI-specific metadata to the map.\n\nArgs:\n    map_structure: The map structure to augment\n    \nReturns:\n    The augmented map structure"}],"docstring":"Optimizer for AI model consumption.\n\nThis class provides methods for optimizing map structures to be more\nefficiently consumed by AI models.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/output/config.py","name":"GeneratorConfig","data":{"name":"GeneratorConfig","file_path":"src/proj_mapper/output/config.py","lineno":25,"bases":[],"methods":[{"name":"to_dict","lineno":46,"docstring":"Convert the config to a serializable dictionary.\n\nReturns:\n    A dictionary representation of this config"}],"docstring":"Configuration for map generation.\n\nAttributes:\n    include_code: Whether to include code elements in the map\n    include_documentation: Whether to include documentation elements in the map\n    include_metadata: Whether to include metadata in the map\n    enable_chunking: Whether to enable chunking for large maps\n    max_tokens: Maximum token estimate (0 for no limit)\n    ai_optimize: Whether to apply AI optimization\n    format_type: The format type for the map","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/relationship/detector/detector.py","name":"RelationshipDetector","data":{"name":"RelationshipDetector","file_path":"src/proj_mapper/relationship/detector/detector.py","lineno":26,"bases":[],"methods":[{"name":"__init__","lineno":33,"docstring":"Initialize the relationship detector with default rules.\n\nArgs:\n    config_manager: Optional configuration manager"},{"name":"add_rule","lineno":51,"docstring":"Add a relationship detection rule.\n\nArgs:\n    rule: The rule to add"},{"name":"detect_relationships","lineno":60,"docstring":"Detect relationships between a source element and multiple target elements.\n\nArgs:\n    source_element: The source element\n    target_elements: List of potential target elements\n    \nReturns:\n    List of detected relationships"},{"name":"detect_all_relationships","lineno":91,"docstring":"Detect all relationships between the given code and documentation elements.\n\nArgs:\n    code_elements: List of code elements\n    doc_elements: List of documentation elements\n    \nReturns:\n    List of all detected relationships"}],"docstring":"Main component for detecting relationships between elements.\n\nThis detector manages a set of relationship rules and applies them to detect\nrelationships between code and documentation elements.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/relationship/function_analyzer.py","name":"FunctionCallAnalyzer","data":{"name":"FunctionCallAnalyzer","file_path":"src/proj_mapper/relationship/function_analyzer.py","lineno":33,"bases":["ast.NodeVisitor"],"methods":[{"name":"__init__","lineno":36,"docstring":"Initialize the analyzer.\n\nArgs:\n    code: Python source code to analyze"},{"name":"analyze","lineno":48,"docstring":"Analyze the code and return found function calls.\n\nReturns:\n    List of CallContext objects representing function calls"},{"name":"visit_FunctionDef","lineno":65,"docstring":"Visit a function definition node.\n\nArgs:\n    node: AST node for function definition"},{"name":"visit_Call","lineno":84,"docstring":"Visit a function call node.\n\nArgs:\n    node: AST node for function call"},{"name":"visit_Import","lineno":99,"docstring":"Visit an import node.\n\nArgs:\n    node: AST node for import statement"},{"name":"visit_ImportFrom","lineno":109,"docstring":"Visit an import from node.\n\nArgs:\n    node: AST node for import from statement"},{"name":"_analyze_call","lineno":122,"docstring":"Analyze a function call node.\n\nArgs:\n    node: AST node for function call\n    \nReturns:\n    CallContext if a valid function call is found, None otherwise"},{"name":"_analyze_attribute_call","lineno":143,"docstring":"Analyze an attribute-based function call.\n\nArgs:\n    node: AST attribute node representing the function call\n    \nReturns:\n    CallContext if a valid method call is found, None otherwise"},{"name":"_create_call_context","lineno":182,"docstring":"Create a call context object.\n\nArgs:\n    callee_name: Name of the called function\n    line_number: Line number of the call\n    confidence: Confidence score for the call\n    is_method_call: Whether this is a method call\n    qualifier: Qualifier for method calls (e.g., object name)\n    \nReturns:\n    CallContext object with call information"},{"name":"_get_line_context","lineno":212,"docstring":"Get context lines around a specific line.\n\nArgs:\n    line_number: Target line number\n    before: Whether to get context before (True) or after (False)\n    context_lines: Number of context lines to include\n    \nReturns:\n    String containing the context lines"},{"name":"_get_attribute_chain","lineno":233,"docstring":"Get the full chain of attributes.\n\nArgs:\n    node: AST attribute node\n    \nReturns:\n    String representing the attribute chain"},{"name":"_is_method","lineno":251,"docstring":"Check if a function definition is a method.\n\nArgs:\n    node: AST function definition node\n    \nReturns:\n    True if the function is a method, False otherwise"},{"name":"_is_classmethod","lineno":262,"docstring":"Check if a function definition is a classmethod.\n\nArgs:\n    node: AST function definition node\n    \nReturns:\n    True if the function is a classmethod, False otherwise"}],"docstring":"AST visitor for analyzing function calls in Python code.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"src/proj_mapper/relationship/scoring.py","name":"ConfidenceScorer","data":{"name":"ConfidenceScorer","file_path":"src/proj_mapper/relationship/scoring.py","lineno":171,"bases":[],"methods":[{"name":"__init__","lineno":178,"docstring":"Initialize with default scoring strategies."},{"name":"add_strategy","lineno":186,"docstring":"Add a scoring strategy.\n\nArgs:\n    strategy: The strategy to add"},{"name":"score_relationship","lineno":195,"docstring":"Score a single relationship using all strategies.\n\nArgs:\n    relationship: The relationship to score\n    \nReturns:\n    The relationship with updated confidence score"},{"name":"score_relationships","lineno":232,"docstring":"Score a list of relationships.\n\nArgs:\n    relationships: The relationships to score\n    \nReturns:\n    The relationships with updated confidence scores"},{"name":"get_explanation","lineno":250,"docstring":"Get a human-readable explanation of the scoring.\n\nArgs:\n    relationship: The relationship to explain\n    \nReturns:\n    A string explaining how the confidence was calculated"}],"docstring":"Main component for scoring relationship confidence.\n\nThis scorer manages a set of scoring strategies and applies them to adjust\nthe confidence scores of relationships.","agent_type":"general"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/code/test_python_analyzer.py","name":"TestPythonAnalyzer","data":{"name":"TestPythonAnalyzer","file_path":"tests/analyzers/code/test_python_analyzer.py","lineno":16,"bases":["unittest.TestCase"],"methods":[{"name":"setUp","lineno":19,"docstring":"Set up for the tests."},{"name":"tearDown","lineno":62,"docstring":"Clean up after the tests."},{"name":"test_can_analyze","lineno":66,"docstring":"Test the can_analyze method."},{"name":"test_analyze","lineno":92,"docstring":"Test the analyze method."},{"name":"test_analyze_with_syntax_error","lineno":115,"docstring":"Test analyzing a file with a syntax error."},{"name":"test_analyze_with_nonexistent_file","lineno":134,"docstring":"Test analyzing a nonexistent file."},{"name":"test_analyze_with_content","lineno":149,"docstring":"Test analyzing with provided content."}],"docstring":"Tests for the PythonAnalyzer class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/documentation/test_markdown_analyzer.py","name":"TestMarkdownAnalyzer","data":{"name":"TestMarkdownAnalyzer","file_path":"tests/analyzers/documentation/test_markdown_analyzer.py","lineno":13,"bases":["unittest.TestCase"],"methods":[{"name":"setUp","lineno":16,"docstring":"Set up for the tests."},{"name":"tearDown","lineno":66,"docstring":"Clean up after the tests."},{"name":"test_can_analyze","lineno":70,"docstring":"Test the can_analyze method."},{"name":"test_analyze","lineno":96,"docstring":"Test the analyze method."},{"name":"test_analyze_with_errors","lineno":157,"docstring":"Test analyzing a nonexistent file."},{"name":"test_extract_front_matter","lineno":173,"docstring":"Test the front matter extraction."}],"docstring":"Tests for the MarkdownAnalyzer class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/test_base.py","name":"MockAnalyzer","data":{"name":"MockAnalyzer","file_path":"tests/analyzers/test_base.py","lineno":32,"bases":["Analyzer"],"methods":[{"name":"can_analyze","lineno":35,"docstring":"Check if this analyzer can analyze the given file."},{"name":"analyze","lineno":39,"docstring":"Analyze a file."}],"docstring":"Mock analyzer for testing.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/test_base.py","name":"TestAnalyzer","data":{"name":"TestAnalyzer","file_path":"tests/analyzers/test_base.py","lineno":44,"bases":["unittest.TestCase"],"methods":[{"name":"test_can_analyze_abstract","lineno":47,"docstring":"Test that can_analyze is abstract."},{"name":"test_analyze_abstract","lineno":52,"docstring":"Test that analyze is abstract."}],"docstring":"Tests for the Analyzer base class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/test_base.py","name":"TestAnalyzerRegistry","data":{"name":"TestAnalyzerRegistry","file_path":"tests/analyzers/test_base.py","lineno":64,"bases":["unittest.TestCase"],"methods":[{"name":"test_register","lineno":67,"docstring":"Test registering analyzers."},{"name":"test_register_duplicate","lineno":76,"docstring":"Test registering the same analyzer twice."},{"name":"test_unregister","lineno":85,"docstring":"Test unregistering analyzers."},{"name":"test_unregister_nonexistent","lineno":99,"docstring":"Test unregistering an analyzer that wasn't registered."}],"docstring":"Tests for the AnalyzerRegistry class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/test_base.py","name":"PartialAnalyzer","data":{"name":"PartialAnalyzer","file_path":"tests/analyzers/test_base.py","lineno":55,"bases":["Analyzer"],"methods":[{"name":"can_analyze","lineno":56,"docstring":null}],"docstring":null,"agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/analyzers/test_factory.py","name":"TestAnalyzerFactory","data":{"name":"TestAnalyzerFactory","file_path":"tests/analyzers/test_factory.py","lineno":13,"bases":["unittest.TestCase"],"methods":[{"name":"setUp","lineno":16,"docstring":"Set up for the tests."},{"name":"test_init","lineno":20,"docstring":"Test the initialization of the factory."},{"name":"test_get_analyzer_for_file","lineno":27,"docstring":"Test getting an analyzer for a file."},{"name":"test_create_analyzer","lineno":48,"docstring":"Test creating an analyzer based on file type."}],"docstring":"Tests for the AnalyzerFactory class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/integration/test_documentation_analyzer_pipeline.py","name":"TestDocumentationAnalyzerPipeline","data":{"name":"TestDocumentationAnalyzerPipeline","file_path":"tests/integration/test_documentation_analyzer_pipeline.py","lineno":74,"bases":[],"methods":[{"name":"test_documentation_analyzer_pipeline","lineno":77,"docstring":"Test that the Documentation analyzer works correctly within a pipeline."}],"docstring":"Integration tests for the Documentation analyzer pipeline.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/integration/test_python_analyzer_pipeline.py","name":"TestPythonAnalyzerPipeline","data":{"name":"TestPythonAnalyzerPipeline","file_path":"tests/integration/test_python_analyzer_pipeline.py","lineno":146,"bases":[],"methods":[{"name":"test_python_analyzer_pipeline","lineno":149,"docstring":"Test that the Python analyzer works correctly within a pipeline."}],"docstring":"Integration tests for the Python analyzer pipeline.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/unit/analyzers/documentation/test_markdown_analyzer.py","name":"TestMarkdownAnalyzer","data":{"name":"TestMarkdownAnalyzer","file_path":"tests/unit/analyzers/documentation/test_markdown_analyzer.py","lineno":53,"bases":[],"methods":[{"name":"test_initialization","lineno":56,"docstring":"Test analyzer initialization."},{"name":"test_can_analyze","lineno":62,"docstring":"Test the can_analyze method."},{"name":"test_analyze","lineno":82,"docstring":"Test the analyze method."},{"name":"test_extract_front_matter","lineno":124,"docstring":"Test extracting front matter from Markdown content."},{"name":"test_detect_code_references","lineno":151,"docstring":"Test detecting code references in Markdown content."}],"docstring":"Tests for the MarkdownAnalyzer class.","agent_type":"analyzer"},"valid":true}
{"type":"collector_item","parent_collector":"AgentArchitectureCollector","item_type":"agent_class","file_path":"tests/unit/core/test_pipeline.py","name":"ErrorStage","data":{"name":"ErrorStage","file_path":"tests/unit/core/test_pipeline.py","lineno":102,"bases":["PipelineStage"],"methods":[{"name":"process","lineno":105,"docstring":"Raise an error during processing."}],"docstring":"A pipeline stage that raises an error for testing.","agent_type":"general"},"valid":true}
