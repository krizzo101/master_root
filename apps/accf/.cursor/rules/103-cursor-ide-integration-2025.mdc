---
description: "use when CONFIGURING CURSOR IDE to OPTIMIZE AI-POWERED DEVELOPMENT for MAXIMUM PRODUCTIVITY"
globs:
alwaysApply: false
---

# CURSOR IDE INTEGRATION 2025

**Validation**: "Rule 103 Protocol Active"

## AI Development Landscape (July 2025)

**Triggers**: IDE configuration, AI assistant integration, development workflow, competitive tooling
**Principles**: Multi-tool ecosystem, terminal-first trends, vibe coding, agentic AI workflows
**Signatures**: Cursor vs Claude Code, Amazon Kiro competition, hybrid development approaches
**Validation**: Tool selection optimization, workflow effectiveness, productivity metrics
**Integration**: Terminal-based tools, traditional IDEs, collaborative workflows

## Current AI Model Selection

**Cursor Configuration** (July 2025 Models):
```json
{
  "cursor.ai.primaryModel": "claude-sonnet-4",      // Most powerful
  "cursor.ai.reasoningModel": "o3-mini",           // Complex planning
  "cursor.ai.speedModel": "gpt-4.1-mini",          // Fast responses
  "cursor.ai.codingModel": "claude-opus-4"         // Advanced coding
}
```

**Model Strategy**:
- **claude-sonnet-4**: Complex analysis, architecture decisions
- **claude-opus-4**: Advanced coding, system integration
- **o3-mini**: Reasoning, planning, problem-solving
- **gpt-4o**: Multimodal tasks, image/document analysis
- **gpt-4.1-mini**: Fast coding, routine tasks

## Competitive Landscape

**Claude Code Integration**:
- Terminal-based AI development
- Direct file system access
- Contextual code understanding
- Rapid iteration cycles

**Amazon Kiro (AWS AI IDE)**:
- Cloud-native development
- AWS service integration
- Specification-driven development
- Enterprise deployment focus

**Cursor Advantages**:
- Visual interface familiarity
- VSCode compatibility
- Rule-based customization
- Team collaboration features

## Modern Toolchain Integration

**Python Ecosystem** (July 2025):
```json
{
  "python.packageManager": "uv",          // Modern package manager
  "python.formatter": "ruff",             // Fast formatting
  "python.typeChecker": "ty",             // Astral type checker
  "python.testRunner": "pytest"
}
```

**Development Workflow**:
```bash
# Integrated terminal commands
uv sync && uv run ruff format . && uv run pytest
```

## Vibe Coding Patterns

**Conversational Development**:
- Natural language specifications
- Iterative refinement
- AI-guided architecture
- Context-aware suggestions

**Hybrid Approaches**:
- Cursor for visual tasks
- Terminal for system operations
- Claude Code for deep exploration
- Collaborative switching

## Success Indicators

- ✅ **Current AI models** configured correctly
- ✅ **Modern toolchain** integration active
- ✅ **Competitive awareness** driving tool selection
- ✅ **Hybrid workflows** optimized for task type
- ✅ **Vibe coding** practices implemented

[cursor-integration-patterns.md](mdc:.cursor/templates/cursor-integration-patterns.md)
