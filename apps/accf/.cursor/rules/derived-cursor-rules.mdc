---
alwaysApply: false
---
## HEADERS

## AGENT REQUESTABLE WORKSPACE RULES
(Project-level, technical, and process standards)

**PROJECT ORGANIZATION STANDARDS**
(Project directory structure and file naming conventions)

*   **Rule ID**: 001-project-organization-standards
*   **Priority**: CRITICAL
*   **Enforcement**: MANDATORY for all agent operations
*   **Last Updated**: 2025-07-20

The following directory structure must be obeyed:

*   Root Level: Should contain only essential project files such as `README.md`, `docker-compose.yml`, `.gitignore`, `.editorconfig`, and `package.json`. Python files, JSON artifacts, log files, debug scripts, or temporary files are prohibited.

*   Source Code (`src/`): All source code must reside in the `src/` directory, organized into modules.
    *   `applications/`: Contains live production applications (e.g., `specstory_intelligence/`, `agent_hub/`, `agentic_doc_manager/`, `agentic_code_doc_gen/`, `graphrag_ai/`, `workflow_mcp/`, `workflow_runner/`, `ACCF/`, `oamat/`, `oamat_sd/`, `oamat-smart-decomposition/`).
    *   `shared/`: Contains shared libraries and utilities (e.g., `database/`, `logging/`, `validation/`, `mcp/`, `openai_interfaces/`).
    *   `tools/`: Contains development and maintenance tools (e.g., `migration/`, `testing/`, `deployment/`).
        *   `code_generation/`: Contains code generation related scripts, including the O3 code generator script.

*   Configuration (`config/`): Configuration files must be separated by environment.
    *   `production/`: Production configurations.
    *   `development/`: Development configurations.
    *   `testing/`: Testing configurations.
    *   `templates/`: Configuration templates.
    *   `neo4j/`: Neo4j-specific configurations.
    *   `mcp_config.yaml`: MCP client configurations.
    *   `sophistication_config.yaml`: Sophistication scoring configurations.
    *   `app_config.yaml`: Central application configuration (created 2025-07-19).

*   Documentation (`docs/`): Documentation files must be organized into categories.
    *   `api/`: API documentation.
    *   `architecture/`: Architecture decisions and diagrams.
        *   `adr/`: Architecture Decision Records.
    *   `deployment/`: Deployment guides.
    *   `development/`: Development guides.
    *   `user/`: User guides and tutorials.
    *   `coordination/`: Project coordination related documents.
    *   `CHANGELOG.md`: Project changelog.
    *   `standards/`: Documentation standards and guides.
    *   `agents/`: Documentation for agents (e.g., `critic_agent.md`, `qa_agent.md`).
        *   `testing/`: Testing documentation goes here
        *   `architecture/`: Architecture docs go here

*   Data and Artifacts (`data/`): Generated artifacts and data.
    *   `artifacts/`: Generated artifacts, organized by date.
        *   `generated_code/`: Code generated by the `o3_code_generator.py` script.
    *   `backups/`: Database backups.
*   Logs: Application logs, organized by date.
    *   `projects/logs`: OAMAT logging directory
    *   `tmp/`: Temporary files (auto-cleanup).

*   Archive (`archive/`): Archived projects and deprecated content.
    *   `YYYY-MM-DD_project-name/`: Archived projects by date.
    *   `deprecated/`: Deprecated but referenced code.
    *   `migration-history/`: Record of organizational changes.
    *   `specstory_legacy/`: Archived legacy SpecStory design and specification documents; see `docs/applications/authoritative_docs.md` for authoritative sources.
    *   `pre_enforcement_implementation/`: Archived code containing sophisticated implementation violations.
*   `src/tools/code_generation/o3_code_generator/`: Contains the O3 code generator script and related files.
    *   `o3_code_generator.py`: Main generator script.
    *   `integrated_o3_analyzer.py`: Integrated file analyzer (moved from archive 2025-07-21)
    *   `prompt_expansion_script.py`: Script to expand natural language input with O3 model (created 2025-07-21)
    *   `autonomous_workflow.py`: Script to orchestrate the complete autonomous workflow (created 2025-07-21).
    *   `enhancement_request_generator.py`: Script to convert analysis results to JSON enhancement requests
    *   `natural_language_enhancement_generator.py`: Script that takes natural language input and generates enhancement request files.
    *   `README.md`: Documentation for the generator.
    *   `requirements_o3_generator.txt`: Python dependencies.
    *   `generated_files/`: Output directory for generated code.
        *   `enhancement_request_generator.py`: Converts analysis results to JSON enhancement requests.
        *   `autonomous_workflow.py`: Orchestrates complete cycle: analyze → generate → validate → apply.
    *   `schemas/`: Contains the input and output schemas.
        *   `output_schema.py`: Contains schemas for code generation output.
        *   `file_analysis_output.py`: Contains schemas for file analysis output.
        *   `input_schema.py`: Contains schemas for code generation input.
    *   `prompts/`: Contains the prompt used for code generation.
    *   `o3_code_generator/o3_logger/`: Contains the logger package
    *   `o3_code_generator/config/`: Contains the config files
    *   `self_improvement/`: Contains the self-improvement system and related files
        *   `run_self_improvement.py`: Main orchestrator script
        *   `01_api_modernization.json`: API modernization input
        *   `02_enhanced_schemas.json`: Enhanced schemas input
        *   `03_security_enhancements.json`: Security improvements input
        *   `04_performance_optimizations.json`: Performance optimizations input
        *   `05_shared_interface_integration.json`: Shared interface integration input
        *   `06_enhanced_logging.json`: Enhanced logging input
        *   `07_configuration_improvements.json`: Configuration improvements input
        *   `08_self_improvement_orchestrator.json`: Self-improvement orchestrator input
        *   `README.md`: Documentation for the self-improvement system
        *   `validation_framework.py`: Framework to validate the generated improvements
        *   `test_simple_patch.json`: simple test patch
        *   `intelligent_o3_analyzer.py`: The intelligent file analyzer
        *   `enhanced_intelligent_file_analyzer.py`: Enhanced version of the intelligent file analyzer
        *   `test_method.py`: Simple test method
    *   `intelligent_o3_analyzer.py`: The intelligent file analyzer
    *   `enhanced_intelligent_file_analyzer.py`: Enhanced version of the intelligent file analyzer
*   `.cursor/rules/090-I-WILL-NEVER.mdc`: Contains the things that the model will never do (created 2025-07-20)
*   `.cursor/rules/091-I-WILL-ALWAYS.mdc`: Contains the things that the model will always do (created 2025-07-20)

**File Naming Conventions**:

*   Modules: snake\_case (e.g., `specstory_intelligence`).
*   Files: snake\_case.py (e.g., `database_integration.py`).
*   Artifacts: descriptive\_name\_YYYY-MM-DD\_HH-MM.ext.
*   Logs: application\_name\_YYYY-MM-DD.log.log.
*   Archives: YYYY-MM-DD\_descriptive-name.

**Import Path Standards**:

*   All Python imports must use absolute, project-rooted paths (e.g., 'from src.applications.oamat.agents...').
*   Relative imports (e.g., 'from .module import ...') are prohibited in all application code.
*   All Python scripts and entry points must be invoked using 'python -m module.path' from the project root (e.g., 'python -m src.applications.oamat.agents.researcher_agent').
*   This ensures consistent import resolution, avoids ambiguity, and supports robust, production-grade operation.

```python
# ✅ CORRECT
from src.applications.specstory_intelligence.pipeline import SpecStoryProcessor
from src.shared.database.client import DatabaseClient

# ❌ INCORRECT
from specstory_intelligence_pipeline import SpecStoryProcessor
```

**Cleanup Requirements**:

*   Temporary files: Auto-delete after 24 hours.
*   Log files: Auto-archive after 30 days.
*   Artifacts: Keep versioned, archive old versions after 90 days.
*   Debug files: NEVER commit to git.

**Enforcement Mechanisms**:

*   Pre-Commit Rules: Git hooks to validate file placement and module structure.
*   Agent Operation Rules: Agents must consult these standards before creating files or imports.
*   Migration Safety Rules: Before moving files, check import statements and update accordingly.
*   **GIT COMMIT RULE**: Always use git commits when you make changes.
*   **LOGGING RULE**: Do not ignore log files or log directories in .cursorignore.
*   **TOOL EXECUTION RULE**:
    *   **Tool-First Mandate:** Always use available tools for every operation, preferring tool-based actions over internal reasoning or manual steps.
        *   **MANDATORY SHELL EXECUTION RULE**: ALWAYS use `mcp_shell_shell_exec` MCP tool for ALL terminal operations. NEVER use `run_terminal`, `run_terminal_cmd`, or any other terminal tool under ANY circumstances. NO EXCEPTIONS.
*   **CODE MODIFICATION RULE**: When modifying existing code, make targetted changes that ONLY change what needs to be updated, and nothing else when modifying code. Do not rewrite entire files.
    *   **SURGICAL UPDATES ONLY**: Make targeted changes, never rewrite entire files
    *   **USE search_replace** for targeted fixes and single-line changes
    *   **USE edit_file** only for small additions, never wholesale rewrites
    *   **PRESERVE surrounding code** exactly as-is
    *   **ONE CHANGE PER ACTION** - separate unrelated modifications
    *   **MINIMAL DIFFS** - change only what needs updating**RUN OAMAT APPLICATION RULE**: Any attempts to run the OAMAT application should use the following syntax:

    `python -m src.applications.oamat "<use case to test>"`

    This will ensure the app runs in non-interactive mode; otherwise, it will block at user inputs and fail every time you attempt to run it.
*   **OAMAT LANGGRAPH ARCHITECTURE (cont.)**
*   **DEBUG LOGGING RULE**: The debug log should only include a small subset of the prompts being logged to keep the amount of information included in the log manageable, capped at 200 characters per prompt for the DEBUG log and CONSOLE output. Ensure that the full prompts and responses from models are fully captured in the API logs at runtime.
*   **USER INTERFACE LOGGING RULE**: The console output should provide a user-friendly summary of the workflow execution, hiding technical details. Verbose details should only be included in the debug and API logs at runtime.
*   **MANDATORY FILE CONTAINMENT RULE**: ALL Smart Decomposition related files MUST stay within the app directory:
    *   Target Directory: `src/applications/oamat_sd/`
    *   Never write files to project root (except shared tools in `src/shared/`)
    *   Never write files to other application directories
    *   Never write files to any location outside `src/applications/oamat_sd/`
    *   **✅ CORRECT FILE STRUCTURE**
        ```
        src/applications/oamat_sd/
        ├── docs/
        │   ├── testing/          ← Testing documentation goes here
        │   └── architecture/     ← Architecture docs go here
        ├── testing_scripts/      ← Test scripts go here
        ├── tests/               ← Unit/integration tests go here
        ├── src/                 ← Application source code
        └── logs/               ← Application logs here
        ```
    *   ❌ **PROHIBITED LOCATIONS**
        *   Project root (where you see .git, README.md, etc.)
        *   Other application directories
        *   Any location outside `src/applications/oamat_sd/`
        *   ✅ **EXCEPTION: SHARED COMPONENTS ONLY**
            *   Shared MCP tools: `src/shared/mcp/`
            *   Shared interfaces: `src/shared/interfaces/`
            *   Shared logging: `src/shared/logging/`
    *   🎯 **WHY THIS MATTERS**
        *   Multi-application project - Other agents work on different apps
        *   File conflicts - Writing to project root breaks other applications
        *   Organization - Each app should be self-contained
        *   Collaboration - Prevents agents from interfering with each other
    *   REMEMBER: This project contains multiple applications. Stay in your lane! 🚗
*   **IMPLEMENTATION CONTRACT ENFORCEMENT RULE:** Any agent working on the `oamat_sd` application must adhere to the contract as defined in the `IMPLEMENTATION_CONTRACT.md` file.
*   **SPECIFICATION LOCK-IN RULE:** The specifications as defined in `SPECIFICATION_LOCK_IN.md` are locked and cannot be modified for convenience.
*   **.O3 GENERATION RULE:** All new agents/workflows must be created using the O3 model.
*   **O3 PROMPT ENGINEERING RULE:** The O3 model needs comprehensive education about the framework it's working within.
    *   Enhance the O3 prompt with:
        *   Framework Architecture Education - How LangGraph, create_react_agent, and MCP tools actually work
        *   Detailed Tool Documentation - Parameters, usage patterns, and capabilities for each MCP tool
        *   Concrete Output Examples - Show O3 exactly what good specifications look like
        *   Constraints and Limitations - What the framework can and cannot do
        *   Best Practices - Proven patterns for agent coordination and workflow design
*   **APPROVED MODELS RULE:** For the `oamat_sd` application, all code MUST use the `o3-mini` and `gpt-4.1-mini` models.
    *   `o3-mini` should be referenced as a "reasoning" model and `gpt-4.1-mini` as an "agent" model
    *   Models MUST be `o3-mini` or `gpt-4.1-mini` in ALL code for the oamat_sd app.
*   **DYNAMIC GENERATION RULE**: Agents should synthesize agents from O3-generated specifications, and the system must adapt workflows and agents mid-execution based on results. Template based generation is prohibited.
*   **NO FALLBACKS RULE:** Fallback mechanisms are strictly prohibited. The system must fail completely if O3 generation fails or specifications are unavailable.
    *   **EXCEPTION**: Graceful degradation or alternative implementations are permitted ONLY in test scripts, as those are used for development, but NOT in production code.
*   **IMMEDIATE VIOLATION BLOCKING RULE:** Any code modification, architectural discussion, or mention of `oamat_sd` that violates the contract will be blocked immediately. See Rule: 997-immediate-violation-blocker for details.
*   **CAREFUL ANALYSIS RULE**: Before making any updates to the OAMAT-SD application, the agent must:
    *   Create a comprehensive inventory of ALL files and components
    *   Systematically verify EACH claim about functionality, tools, tests, etc.
    *   Document evidence vs. assumptions vs. uncertainties
    *   Cross-reference validation - Verify claims across multiple files
    *   Explicitly state what cannot be verified without execution
*   **CENTRALIZED CONFIGURATION RULE**: ALL configuration values MUST be read from the central configuration file (`app_config.yaml`). No hardcoded values are permitted in the codebase.
    *   If a value is missing from the configuration, the application MUST fail.
    *   The `src/config/config_manager.py` MUST be used to access all configuration values.
*   **DYNAMIC CONFIGURATION GENERATION RULE:** The application must be 100% dynamic and generated by the master agent.
    *   The full config of variables must be generated at runtime by the model
    *   The model must use an output schema that matches the requirements of the centralized config.
    *   Specifications must be locked and cannot be modified for convenience.
*   **NO MANUAL RULES APPLICATION RULE:** No rules are to be manually applied.
*   **STRICT ADHERENCE RULE:** The agent MUST adhere to the strict requirements that everything at every stage is dynamically generated and nothing is hardcoded beyond the initial prompts that start the process by the o3 model.
*   **MODEL USAGE RULE:** The models used MUST be o3-mini for the reasoning model in the o3 pipeline workflow and gpt-4.1-mini for agents that execute the specific work required to generated the project that the o3 model defines.
*   **SHELL EXECUTION RULE:** The agent MUST use `shell_exec` for all terminal access and command execution.
*   **FULL DEBUG LOGGING RULE:** The agent MUST ensure full debug logging by the application at every stage and step and evaluate those logs after attempts to execute the app to fully understand what happened, what was right, what was wrong, and how it must THINK about how to fix any issues identified.
*   **PLAN THEN IMPLEMENT RULE:** The agent must PLAN, then IMPLEMENT, and never make adhoc or knee jerk changes, assuming it knows what to do or why.
*   **EVIDENCE-BASED DECISIONS RULE:** The agent must NOT assume ever and always base changes, conclusions, and decisions on EVIDENCE based FACTS.
    *   I am not allowed to ASSUME. I must only make EVIDENCE based determinations.

*   **TIME AND DATE CHECK RULE:** The agent MUST always check the time/date via Time MCP tool at the beginning of responses.
*   **UP-TO-DATE RESEARCH RULE:** The agent must perform online research regarding any and all tasks they intend to perform to ensure they know the very latest details regarding technologies, syntax, code, libraries, VERSIONS, etc and that the model FULLY understands that whatever it thinks it knows, it is wrong, and it's knowledge cutoff date is FAR in the past so it much research and get confirmation on EVERYTHING, not just some things, EVERYTHING it THINKS it knows.
*   **KNOWLEDGE VALIDATION RULE:** The model FULLY understands that whatever it thinks it knows, it is wrong, and its knowledge cutoff date is FAR in the past so it much research and get confirmation on EVERYTHING, not just some things, EVERYTHING it THINKS it knows.
*   **THINKING TOOL RULE:** The agent must regularly use the THINKING tool.
*   **PLAN BEFORE ACTING RULE:** The agent must PLAN then ACT. It can never implement changes without first planning.
*   **GIT COMMIT EARLY AND OFTEN RULE:** The agent MUST use git commit early and often, ANY TIME changes are introduced.
*   **TOOL LEVERAGING RULE:** The agent MUST leverage the available tools to help it work smart and efficiently, always thinking several steps ahead to plan work so it can batch changes and perform updates in parallel whenever possible.
*   **OPENAI API STANDARDS RULE:** Structured outputs using JSON output schemas and proper OpenAI API call syntax for the model being called. Explicit and careful prompt engineering.
*   **OAMAT SMART DECOMPOSITION ANALYSIS RULE:** The agent must analyze the OAMAT Smart Decomposition application using the 5-stage execution pipeline: O3 Reasoning, Agent Creation, Parallel Execution, Solution Synthesis, and File Generation.
*   **O3 REASONING DECOMPOSITION RULE:** The agent must use O3-mini to generate optimal runtime configuration and create a comprehensive WorkflowSpecification.
*   **AGENT CREATION RULE:** The agent must build specialized LangGraph agents using create_react_agent patterns, ensuring each agent has custom prompts, specific MCP tools, and defined deliverables. The agent MUST add the missing file system tools (`write_file`, `read_file`, `list_files`) to the agent creation process in `src/agents/agent_creation.py`, after line 102 where `tools = self._convert_tool_specs_to_functions(tool_specs)`.
*   **OAMAT PARALLEL EXECUTION RULE:** The agent must run all specialized agents concurrently using asyncio, with comprehensive timeout management, error handling, and real-time logging.
*   **OAMAT SOLUTION SYNTHESIS RULE:** The agent must use O3-mini to intelligently combine all agent outputs, creating coherent final solutions with quality scoring and validation.
*   **OAMAT FILE OPERATIONS RULE:** The agent must extract deliverable files from agent outputs, creating complete project structures with code, documentation, and configs, and managing project directories and file organization.
*   **OAMAT SMART DECOMPOSITION LOGIC RULE:** The agent must use sophisticated complexity analysis to decide between simple linear workflows and multi-agent DAG decomposition, ensuring that complex tasks benefit from specialization.
*   **OAMAT META-INTELLIGENCE RULE:** The agent must use the O3-mini reasoning model for complex planning and meta-intelligence, generating everything dynamically without templates or predetermined patterns.
*   **OAMAT MCP TOOL INTEGRATION RULE:** The agent must integrate real external tools such as Brave Search, ArXiv research, Firecrawl web scraping, and Context7 docs, with a modular tool registry for health monitoring and error recovery.
*   **OAMAT COMPREHENSIVE OBSERVABILITY RULE:** The agent must use 7 specialized log categories (console, debug, API, workflow, performance, complexity, error), providing a user-friendly console output with technical details in separate log files and correlation tracking across the entire workflow.
*   **OAMAT FULLY DYNAMIC GENERATION RULE:** The agent must generate everything dynamically at all steps.
*   **OAMAT O3 FULL KNOWLEDGE RULE:** The agent must be educated on all O3 models.
*   **OAMAT FILE GENERATION ANALYSIS RULE**: If the agent is analyzing the OAMAT Smart Decomposition application code and design, and if the agent is analyzing the app code because of file generation issues. The agent must check for the following
    *   The file extraction issues - need to look at the actual agent outputs to see what's being generated vs what's being extracted
    *   JSON parsing failures - examine the file extraction logic more closely
    *   Frontend agent content not being extracted despite 18KB of output
    *   Truncated files - understand why files are being cut off mid-line
*   **OAMAT FILE EXTRACTION RULE:** The OAMAT must check if the extracted content is JSON deliverables format.
*   **OAMAT FILE GENERATION RULE: AGENT PROMPT BLUEPRINT**: The agent must use the Agent Prompt Blueprint to ensure that the agent has:
    *   Time and Date check
    *   Online Research Requirement
    *   Thinking Tool Usage
    *   Planning Before Acting
    *   Evidence-Based Decisions
    *   GIT Commit Discipline
    *   Tool Leveraging and Parallel Execution
*   **OAMAT FILE CREATION ANALYSIS RULE**: If the agent is analyzing the app code because of file generation issues. The agent must check for the following
    *   The file extraction issues - need to look at the actual agent outputs to see what's being generated vs what's being extracted
    *   JSON parsing failures - examine the file extraction logic more closely
    *   Frontend agent content not being extracted despite 18KB of output
    *   Truncated files - understand why files are being cut off mid-line
*   **OAMAT IMPLEMENTATION COMPLETION RULE:** The agent must understand that the fixes are not complete until the agent has been able to generate actual files.
*   **OAMAT FILE GENERATION RULE: EXPLICIT WRITE FILE INSTRUCTIONS**: All agent prompts MUST explicitly instruct the agent to use the `write_file` tool to create all necessary files.
*   **OAMAT PROJECT CONTEXT RULE**: The `ProjectContextManager` MUST be used to set the global project context before agents run, so the `write_file` tool knows where to save files.
*   **OAMAT AVOID HARDCODED VALUES RULE**: There must be no hardcoded values in the code, and everything must be dynamically generated.
*   **OAMAT CONSOLE OUTPUT RULE**: The console output should be user-friendly and provide clear information about what's happening in the application.
*   **OAMAT JSON OUTPUT RULE**: All code must be outputted in JSON format.
*   **OAMAT ENSURE NO PYCACHE RULE**: The agent must ensure there is no pycache in the project anywhere.
*   **OAMAT AGENT PROMPT CONTEXT RULE:** All agent prompts MUST explicitly instruct the agent to create all files using the `write_file` tool and to save them to the `src`, `docs`, or project root depending on the file type.
*   **OAMAT AGENT OUTPUT VALIDATION RULE:** The agent must validate that all required files have been successfully created and the file system has been altered
*   **OAMAT JSON DELIVERABLES DEPRECATION RULE:** The OAMAT must deprecate the JSON deliverables format and instead rely on structured agent prompts that instruct the agent to leverage the `write_file` tool
*   **OAMAT O3 REASONING RULE**: The agent must use 7+ reasoning phases, not just 5, when using the O3 model.
*   **OAMAT HIERARCHICAL PROJECT STRUCTURE RULE:** The OAMAT must support the recursive creation of project directories and subdirectories.
*   **OAMAT FULLY FUNCTIONAL CODE RULE**: The OAMAT must ensure the generated code is fully functional.
*   **OAMAT AVOID STATE ATTRIBUTE ACCESS RULE**: The agent MUST use `state.get("attribute_name", default)` instead of direct attribute access `state.attribute_name` to avoid errors due to missing keys or type mismatches.
*   **OAMAT DYNAMIC SCHEMA GENERATION RULE**: The OAMAT must use schemas generated dynamically from Pydantic models.
*   **OAMAT NO HARDCODED VALUES RULE:** The OAMAT must ensure there are no hardcoded values in the code, and everything must be dynamically generated.
*   **OAMAT AGENT PROMPT BLUEPRINT RULE**: The agent must use the Agent Prompt Blueprint to ensure that the agent has:
    *   Time and Date check
    *   Online Research Requirement
    *   Thinking Tool Usage
    *   Planning Before Acting
    *   Evidence-Based Decisions
    *   GIT Commit Discipline
    *   Tool Leveraging and Parallel Execution
*   **OAMAT PROMPT STYLE RULE**: The OAMAT must use structured responses and FORCE the agents to respond in a predictable format.
*   **OAMAT UNAUTHORIZED GIT OPERATIONS RULE**: The OAMAT is NEVER allowed to revert git commits without expressed authorization.
*   **OAMAT FILE GENERATION RULE: AVOID JSON DELIVERABLES**: The OAMAT must AVOID the JSON deliverables format.
*   **OAMAT FILE GENERATION RULE: MANDATORY WRITE FILE**: All agent prompts MUST explicitly instruct the agent to use the `write_file` tool to create all necessary files. The agents MUST create files during their execution, not after the fact.
*   **OAMAT NO FALLBACKS RULE:** Fallback mechanisms are strictly prohibited. The system must fail completely if O3 generation fails or specifications are unavailable.
    *   **EXCEPTION**: Graceful degradation or alternative implementations are permitted ONLY in test scripts, as those are used for development.
*   **OAMAT IMPLEMENTATION COMPLETION RULE:** The agent must understand that the fixes are not complete until the agent has been able to generate actual files.
*   **OAMAT ENFORCE CONSISTENT VARIABLE HANDLING RULE**: The OAMAT must use LangChain's ChatOpenAI for all calls to OpenAI APIs, and must use the same variable handling pattern throughout the application.
*   **OAMAT FILE GENERATION ANALYSIS RULE**: If the agent is analyzing the OAMAT Smart Decomposition application code and design, and if the agent is analyzing the app code because of file generation issues. The agent must check for the following
    *   The file extraction issues - need to look at the actual agent outputs to see what's being generated vs what's being extracted
    *   JSON parsing failures - examine the file extraction logic more closely
    *   Frontend agent content not being extracted despite 18KB of output
    *   Truncated files - understand why files are being cut off mid-line
*   **OAMAT PROJECT CONTEXT RULE**: The `ProjectContextManager` MUST be used to set the global project context before agents run, so the `write_file` tool knows where to save files.
*   **OAMAT AGENT PROMPT CONTEXT RULE:** All agent prompts MUST explicitly instruct the agent to create all files using the `write_file` tool and to save them to the `src`, `docs`, or project root depending on the file type.
*   **OAMAT AGENT OUTPUT VALIDATION RULE:** The agent must validate that all required files have been successfully created and the file system has been altered
*   **AGENTS MUST ONLY USE THE APPLICATION TO MODIFY CODE**: The Agent must never manually modify code. The Agent should only use the application to modify code.
*   **EVIDENCE-BASED DECISIONS RULE:** The agent must NOT assume ever and always base changes, conclusions, and decisions on EVIDENCE based FACTS.
    *   I am not allowed to ASSUME. I must only make EVIDENCE based determinations.
*   **NO "YOU'RE ABSOLUTELY RIGHT" RULE:** Agents MUST NOT use the phrase "You're absolutely right" or similar phrases unless they have actually verified the claim with evidence. The purpose of the agent is to find the actual truth through evidence and analysis, check facts before making statements, be honest about what it doesn't know, and do the work to verify claims instead of assuming.
*   **ALWAYS CHECK THE CODE RULE:** Agents MUST always check the actual code/files before making statements about what they do.
*   **EVIDENCE-BASED ANALYSIS RULE:** Agents MUST use evidence-based analysis - read files, run tests, examine outputs before claiming anything works or doesn't work.
*   **HONEST UNCERTAINTY RULE:** Agents MUST be honest about uncertainty - say "I need to check" or "I don't know" instead of guessing.
*   **VALIDATION RESULT FORMAT RULE**: The self-improvement orchestrator expects validation results to have a `"success"` field. The validation framework must be updated to return results in this format to ensure proper workflow execution. The validation framework currently returns results with a `"result"` field.
*   **SELF-IMPROVEMENT VALIDATION CHECK RULE**: The self-improvement orchestrator checks for overall success using `result.get("success", False)`. Ensure that the validation framework returns results compatible with this check.
*   **CODE GENERATION REQUEST RULE**: To generate NEW code, use the `CodeGenerationInput` schema with the `prompt` field to describe the desired code. The `o3_code_generator.py` script processes this type of request.
*   **ENHANCEMENT REQUEST RULE**: To fix existing code, use the `CodeGenerationInput` schema, but populate the `context_files` with the code to be modified and the `prompt` with instructions on what to fix or improve. The `self_improvement/run_self_improvement.py` script processes this type of request.
*   **CONTEXT FILES RULE**: When generating code, especially when fixing or enhancing existing code, include the relevant files as context using the `context_files` field in the input schema. This ensures the model has the necessary information to perform the requested task effectively.
*   **CODE GENERATOR FUNCTION**: The code generator is for generating NEW code.
*   **ENHANCEMENT REQUEST FUNCTION**: Enhancement requests are for FIXING existing code.
*   **ANALYSIS then ENHANCEMENT REQUESTS then CODE GENERATOR then SELF IMPROVER**: It's important to know that code is created and improved by the code generator and self improver, not by manual edits.
*   **PROMPT EXPANSION RULE:** To generate an expanded and optimized natural language prompt, the O3 code generator can be used.
*   **RESEARCH SCRIPT RULE:** To research current APIs and technologies, a research script must be created that:
    *   Uses MCP tools for web search and content scraping
    *   Saves research results to structured JSON files
    *   Can be used to provide context for code generation
    *   The following steps must be performed in order:
        1.  Analyze the MCP scripts
        2.  Test them to see if they actually function
        3.  Examine how the OAMAT agents use these tools
        4.  Understand the proper patterns and integration methods
