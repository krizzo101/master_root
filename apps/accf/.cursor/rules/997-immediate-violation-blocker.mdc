---
description: "IMMEDIATE VIOLATION DETECTION to BLOCK RESPONSES for CONTRACT ENFORCEMENT"
globs:
alwaysApply: false
---

# IMMEDIATE VIOLATION BLOCKER

**Validation**: "Rule 997 Violation Blocker Active"

## INSTANT VIOLATION DETECTION

**Triggers**: ANY mention of oamat_sd, ANY code modification, ANY architectural discussion, ANY model references
**Principles**: Real-time violation detection, immediate response blocking, zero tolerance enforcement
**Signatures**: Automatic violation scanning, response prevention, mandatory fix enforcement
**Validation**: Pattern detection, contract verification, compliance confirmation, model constraint enforcement
**Integration**: Universal application, real-time monitoring, automatic enforcement, model usage surveillance

## BLOCKING CONDITIONS

**RESPONSE IMMEDIATELY BLOCKED IF**:

### üö® **MODEL CONSTRAINT VIOLATIONS (ZERO TOLERANCE)**
- ANY mention of GPT-4O models (`gpt-4o`, `gpt-4o-mini`, `gpt-4o-2024-*`)
- ANY mention of Claude models (`claude-*`, `anthropic/*`)
- ANY mention of Gemini models (`gemini-*`, `google/*`)
- ANY attempt to change approved models from `o3-mini` or `gpt-4.1-mini`
- ANY suggestion to use alternative models for "compatibility"
- ANY model table, list, or configuration containing unauthorized models
- ANY code examples showing unauthorized model usage
- ANY "model comparison" or "model selection" discussions with unauthorized models
- ANY fallback or backup model configurations using unauthorized models
- ANY structured output examples using unauthorized models

**APPROVED MODELS ONLY**:
- `o3-mini` (reasoning model)
- `o3` (advanced reasoning)
- `gpt-4.1-mini` (agent execution model)
- `gpt-4.1` (advanced agent execution)
- `gpt-4.1-nano` (fast responses)

### üö® **CODE VIOLATIONS**
- `asyncio.gather` usage anywhere in oamat_sd
- Missing `from langgraph.constants import Send`
- No Send API implementation in execution
- Command routing objects missing

### üö® **ARCHITECTURAL VIOLATIONS**
- Template-based agent creation
- Manual node creation without create_react_agent
- Sequential execution without Send API
- Predefined workflow selection

### üö® **ENFORCEMENT VIOLATIONS**
- Bypassing validation requirements
- Ignoring specification lock-in
- Reverting to simplified patterns
- Contract requirement violations

## AUTOMATIC VIOLATION RESPONSE

**WHEN VIOLATIONS DETECTED**:

```
üö® CRITICAL CONTRACT VIOLATION DETECTED

‚ùå VIOLATION TYPE: [specific violation]
‚ùå LOCATION: [file/line if applicable]
‚ùå REQUIREMENT: [specific requirement violated]

üîí RESPONSE BLOCKED - IMMEDIATE ACTION REQUIRED

MANDATORY FIXES:
1. [Specific fix 1]
2. [Specific fix 2]
3. [Specific fix 3]

‚úÖ RESOLUTION REQUIRED BEFORE ANY RESPONSE
‚úÖ COMPLIANCE VERIFICATION MANDATORY
```

**FOR MODEL CONSTRAINT VIOLATIONS**:

```
üö® UNAUTHORIZED MODEL DETECTED - RESPONSE BLOCKED

‚ùå VIOLATION: Unauthorized model referenced
‚ùå DETECTED MODEL: [unauthorized model name]
‚ùå LOCATION: [specific context/file if applicable]

üîí MODEL CONSTRAINT ENFORCEMENT ACTIVE

APPROVED MODELS ONLY:
‚úÖ o3-mini (reasoning)
‚úÖ o3 (advanced reasoning)
‚úÖ gpt-4.1-mini (agent execution)
‚úÖ gpt-4.1 (advanced agent execution)
‚úÖ gpt-4.1-nano (fast responses)

‚ùå PROHIBITED MODELS:
‚ùå ANY GPT-4O variants
‚ùå ANY Claude models
‚ùå ANY Gemini models
‚ùå ANY other model families

IMMEDIATE ACTIONS REQUIRED:
1. Remove ALL unauthorized model references
2. Replace with approved models ONLY
3. Verify model constraints in all code/config
4. Document approved model usage rationale

üîê NO EXCEPTIONS - NO OVERRIDES - NO COMPATIBILITY EXCUSES
```

## VIOLATION DETECTION PATTERNS

### **Send API Compliance**
```python
# VIOLATION SCAN
if "asyncio.gather" in code and "oamat_sd" in file_path:
    BLOCK_RESPONSE("asyncio.gather forbidden - must use Send API")

if "Send(" not in execution_code:
    BLOCK_RESPONSE("Send API missing from execution engine")
```

### **Command Routing Compliance**
```python
# COMMAND OBJECT SCAN
if "HandoffCommand" not in models and oamat_sd_modified:
    BLOCK_RESPONSE("Command routing objects required")
```

### **LangGraph Compliance**
```python
# CREATE_REACT_AGENT SCAN
if "create_react_agent" not in agent_creation_code:
    BLOCK_RESPONSE("create_react_agent mandatory for all agents")
```

## ESCALATION PROTOCOL

**Level 1**: Immediate block + specific violation report
**Level 2**: Specification re-education required
**Level 3**: Complete reimplementation from contract
**Level 4**: Project compliance failure declaration

## RESOLUTION REQUIREMENTS

**TO UNBLOCK RESPONSE**:
1. **FIX** all detected violations
2. **VALIDATE** with enforcement guards
3. **CONFIRM** Send API implementation
4. **VERIFY** command routing exists
5. **ACKNOWLEDGE** compliance restoration

## COMPLIANCE VERIFICATION

```bash
# REQUIRED VERIFICATION SCRIPT
python -c "
violations = []
import os

# Check execution engine
if os.path.exists('src/applications/oamat_sd/src/execution/execution_engine.py'):
    with open('src/applications/oamat_sd/src/execution/execution_engine.py') as f:
        content = f.read()
        if 'asyncio.gather' in content:
            violations.append('asyncio.gather in execution engine')
        if 'from langgraph.constants import Send' not in content:
            violations.append('Send API import missing')

if violations:
    print('üö® VIOLATIONS:', violations)
    exit(1)
print('‚úÖ COMPLIANCE VERIFIED')
"
```

## SUCCESS CRITERIA

**RESPONSE PERMITTED ONLY WHEN**:
- ‚úÖ Zero violations detected
- ‚úÖ Send API properly implemented
- ‚úÖ Command routing in place
- ‚úÖ LangGraph compliance confirmed
- ‚úÖ Enforcement validation passes

**ABSOLUTE ZERO TOLERANCE FOR VIOLATIONS**

```
