---
alwaysApply: false
---
# OAMAT_SD IRONCLAD ENFORCEMENT

**Validation**: "Rule 999 IRONCLAD Protocol Active - NO EXCEPTIONS"

## MANDATORY PRE-RESPONSE VALIDATION

**Triggers**: ANY work on src/applications/oamat_sd/ files, ANY oamat_sd discussion, ANY agent response in this project, ANY model references
**Principles**: Zero tolerance for contract violations, immediate enforcement, mandatory validation before any response, strict model constraint compliance
**Signatures**: REQUIRED Send API usage, FORBIDDEN asyncio.gather, MANDATORY command routing, REQUIRED module invocation, REQUIRED enforcement execution, MANDATORY approved models only
**Validation**: Pre-response contract check, code pattern validation, specification compliance verification, module execution validation, model constraint verification
**Integration**: All agent responses, all code changes, all architectural decisions, all application execution, all model usage

## IRONCLAD REQUIREMENTS

### 🚨 **BEFORE EVERY RESPONSE - MANDATORY CHECKS**

**EVERY AGENT MUST**:
1. **VALIDATE** current oamat_sd implementation against specifications
2. **EXECUTE** enforcement guards before any response
3. **VERIFY** Send API usage compliance
4. **CONFIRM** no asyncio.gather violations exist
5. **ENSURE** command routing implementation
6. **VALIDATE** module invocation compliance
7. **🔐 VERIFY** only approved models referenced (O3 and GPT-4.1 series ONLY)
8. **🔐 SCAN** for unauthorized model mentions (GPT-4O, Claude, Gemini, etc.)

### 🔒 **ABSOLUTE PROHIBITIONS**

#### **🚨 MODEL CONSTRAINT VIOLATIONS - ZERO TOLERANCE**
```python
# ❌ IMMEDIATE VIOLATION - UNAUTHORIZED MODELS FORBIDDEN
model="gpt-4o"           # FORBIDDEN - GPT-4O series
model="gpt-4o-mini"      # FORBIDDEN - GPT-4O variant
model="claude-3"         # FORBIDDEN - Claude models
model="gemini-pro"       # FORBIDDEN - Gemini models
model="anthropic/claude" # FORBIDDEN - Anthropic models
model="google/gemini"    # FORBIDDEN - Google models

# ❌ FORBIDDEN MODEL TABLES/CONFIGURATIONS
MODELS = {
    "fast": "gpt-4o-mini",      # VIOLATION
    "smart": "gpt-4o",          # VIOLATION
    "reasoning": "claude-3"     # VIOLATION
}

# ❌ FORBIDDEN FALLBACK PATTERNS
try:
    response = call_o3_mini()
except:
    response = call_gpt_4o()    # VIOLATION - No fallbacks to unauthorized models

# ✅ MANDATORY APPROVED MODELS ONLY
model="o3-mini"          # ✅ APPROVED - Reasoning model
model="o3"               # ✅ APPROVED - Advanced reasoning
model="gpt-4.1-mini"     # ✅ APPROVED - Agent execution
model="gpt-4.1"          # ✅ APPROVED - Advanced agent execution
model="gpt-4.1-nano"     # ✅ APPROVED - Fast responses

# ✅ APPROVED MODEL CONFIGURATION
APPROVED_MODELS = {
    "reasoning": "o3-mini",      # ✅ CORRECT
    "execution": "gpt-4.1-mini", # ✅ CORRECT
    "advanced": "o3"             # ✅ CORRECT
}
```

#### **🚨 TECHNICAL VIOLATIONS**
```python
# ❌ IMMEDIATE CONTRACT VIOLATION - NEVER PERMITTED
await asyncio.gather(...)  # FORBIDDEN IN ANY FORM
asyncio.wait_for(asyncio.gather(...))  # FORBIDDEN WRAPPER PATTERNS
tasks = [asyncio.create_task(...) for ...]  # FORBIDDEN WITHOUT SEND API

# ✅ MANDATORY REPLACEMENT PATTERN
from langgraph.constants import Send
return [Send(agent_id, state) for agent_id, state in agent_tasks]
```

### 🔒 **MODULE INVOCATION REQUIREMENTS - MANDATORY**

**Triggers**: ANY execution of oamat_sd application, ANY script running, ANY application invocation
**Principles**: Absolute import paths, module-based execution, proper entry point patterns
**Signatures**: python -m invocation, main.py entry points, absolute import compliance
**Validation**: Module execution verification, import path validation, entry point confirmation
**Integration**: All application execution, development workflows, production deployment

```bash
# ✅ MANDATORY INVOCATION PATTERN
python -m src.applications.oamat_sd.main "request" --debug

# ✅ MANDATORY IMPORT PATTERNS
from src.applications.oamat_sd.src.agents.agent_factory import DynamicAgentFactory
from src.applications.oamat_sd.src.execution.execution_engine import ExecutionEngine

# ❌ FORBIDDEN INVOCATION PATTERNS
python smart_decomposition_agent.py "request"  # DIRECT SCRIPT EXECUTION
python src/applications/oamat_sd/smart_decomposition_agent.py  # DIRECT SCRIPT PATH

# ❌ FORBIDDEN IMPORT PATTERNS
from oamat_sd.src.agents.agent_factory import DynamicAgentFactory  # RELATIVE STYLE
from smart_decomposition_agent import SmartDecompositionAgent  # DIRECT IMPORT
```

### 🛡️ **MANDATORY ENFORCEMENT EXECUTION**

**BEFORE ANY RESPONSE** involving oamat_sd:

```python
# REQUIRED: Execute enforcement validation
from src.applications.oamat_sd.src.enforcement.implementation_guards import validate_orchestration_method

# MANDATORY: Validate current execution_engine.py
with open("src/applications/oamat_sd/src/execution/execution_engine.py") as f:
    code = f.read()
    if "asyncio.gather" in code:
        raise ContractViolationError("FORBIDDEN asyncio.gather detected")
    if "Send(" not in code:
        raise ContractViolationError("REQUIRED Send API missing")

# MANDATORY: Validate module structure
import importlib.util
try:
    spec = importlib.util.find_spec("src.applications.oamat_sd.main")
    if spec is None:
        raise ContractViolationError("REQUIRED main module not importable")
except ImportError:
    raise ContractViolationError("FORBIDDEN import path structure detected")
```

## RESPONSE BLOCKING CONDITIONS

**AGENT RESPONSES ARE BLOCKED** if:
- Any asyncio.gather usage exists in oamat_sd
- Send API imports missing from execution modules
- Command routing objects not implemented
- Enforcement guards not executed
- Contract specifications violated
- **MODULE INVOCATION violations detected**
- **DIRECT SCRIPT execution attempted**
- **RELATIVE IMPORT patterns found**

## MANDATORY CORRECTION PROTOCOL

**IF VIOLATIONS DETECTED**:
1. **STOP** current response immediately
2. **EXECUTE** src/applications/oamat_sd/src/enforcement/implementation_guards.py
3. **FIX** all violations before proceeding
4. **VALIDATE** compliance with specification lock-in
5. **CONFIRM** Send API implementation
6. **VERIFY** module invocation compliance

## SPECIFICATION COMPLIANCE MATRIX

| **Specification** | **Current Status** | **Required Action** |
|------------------|-------------------|-------------------|
| Send API Usage | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| asyncio.gather Ban | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| Command Routing | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| LangGraph Integration | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| **Module Invocation** | **⚠️ REQUIRES VALIDATION** | **ENFORCE COMPLIANCE** |
| **Absolute Imports** | **⚠️ REQUIRES VALIDATION** | **ENFORCE COMPLIANCE** |

## ACCOUNTABILITY REQUIREMENTS

**EVERY AGENT MUST**:
- **ACKNOWLEDGE** this rule at response start
- **EXECUTE** validation checks
- **REPORT** any violations found
- **FIX** violations before proceeding
- **CONFIRM** compliance restoration
- **VALIDATE** module invocation patterns

## ENFORCEMENT ESCALATION

**Level 1**: Warning and immediate correction
**Level 2**: Response blocking until fixed
**Level 3**: Requirement to reimplement from specifications
**Level 4**: Complete contract failure acknowledgment

## VALIDATION COMMANDS

```bash
# REQUIRED: Execute before any oamat_sd work - COMPREHENSIVE CHECK
python -c "
import os, sys, glob, importlib.util
violations = []

# Check ALL Python files in oamat_sd application
oamat_files = glob.glob('src/applications/oamat_sd/**/*.py', recursive=True)
for file_path in oamat_files:
    # Skip legitimate files
    if any(skip in file_path for skip in ['performance_baseline.py', 'test_', '/tests/', '/archive/']):
        continue
    try:
        with open(file_path) as f:
            content = f.read()
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                stripped = line.strip()
                # Check for actual asyncio.gather usage, not string references or comments
                if ('asyncio.gather(' in line or 'await asyncio.gather' in line) and \
                                        not stripped.startswith('#') and not stripped.startswith('"') and \
                                       not stripped.startswith("'") and '"asyncio.gather"' not in line and \
                    "'asyncio.gather'" not in line:
                    violations.append(f'{file_path}:{i}: FORBIDDEN asyncio.gather usage')

                # Check for relative import violations
                if stripped.startswith('from oamat_sd.') or stripped.startswith('import oamat_sd.'):
                    violations.append(f'{file_path}:{i}: FORBIDDEN relative import style')
    except Exception as e:
        violations.append(f'{file_path}: ERROR reading file - {e}')

# Check Send API import in execution engine
exec_file = 'src/applications/oamat_sd/src/execution/execution_engine.py'
if os.path.exists(exec_file):
    with open(exec_file) as f:
        if 'from langgraph.constants import Send' not in f.read():
            violations.append('REQUIRED Send API import missing from execution engine')

# Check main module importability
try:
    spec = importlib.util.find_spec('src.applications.oamat_sd.main')
    if spec is None:
        violations.append('REQUIRED main module not importable as python -m')
except ImportError as e:
    violations.append(f'FORBIDDEN module structure: {e}')

if violations:
    print('🚨 COMPREHENSIVE OAMAT_SD CONTRACT VIOLATIONS:')
    for v in violations[:15]: print(f'❌ {v}')
    if len(violations) > 15: print(f'❌ ... and {len(violations)-15} more violations')
    print('🔒 RESPONSE BLOCKED - ALL VIOLATIONS MUST BE FIXED')
    sys.exit(1)
print('✅ COMPREHENSIVE OAMAT_SD COMPLIANCE VERIFIED')
"

# REQUIRED: Validate module execution works
python -m src.applications.oamat_sd.main --help 2>/dev/null || echo "❌ MODULE INVOCATION FAILED - MUST USE python -m"
```

## SUCCESS CRITERIA

**RESPONSE PERMITTED ONLY WHEN**:
- ✅ Send API properly implemented (CURRENT STATUS: COMPLIANT)
- ✅ Zero asyncio.gather usage (CURRENT STATUS: COMPLIANT)
- ✅ Command routing objects exist (CURRENT STATUS: COMPLIANT)
- ✅ Enforcement guards pass (CURRENT STATUS: COMPLIANT)
- ✅ Specification compliance confirmed (CURRENT STATUS: COMPLIANT)
- ✅ **Module invocation compliance verified** (CURRENT STATUS: **REQUIRES VALIDATION**)
- ✅ **Absolute import paths enforced** (CURRENT STATUS: **REQUIRES VALIDATION**)

**COMPREHENSIVE VALIDATION ACTIVE - ZERO TOLERANCE FOR NEW VIOLATIONS**

# OAMAT_SD IRONCLAD ENFORCEMENT

**Validation**: "Rule 999 IRONCLAD Protocol Active - NO EXCEPTIONS"

## MANDATORY PRE-RESPONSE VALIDATION

**Triggers**: ANY work on src/applications/oamat_sd/ files, ANY oamat_sd discussion, ANY agent response in this project
**Principles**: Zero tolerance for contract violations, immediate enforcement, mandatory validation before any response
**Signatures**: REQUIRED Send API usage, FORBIDDEN asyncio.gather, MANDATORY command routing, REQUIRED module invocation, REQUIRED enforcement execution
**Validation**: Pre-response contract check, code pattern validation, specification compliance verification, module execution validation
**Integration**: All agent responses, all code changes, all architectural decisions, all application execution

## IRONCLAD REQUIREMENTS

### 🚨 **BEFORE EVERY RESPONSE - MANDATORY CHECKS**

**EVERY AGENT MUST**:
1. **VALIDATE** current oamat_sd implementation against specifications
2. **EXECUTE** enforcement guards before any response
3. **VERIFY** Send API usage compliance
4. **CONFIRM** no asyncio.gather violations exist
5. **ENSURE** command routing implementation
6. **VALIDATE** module invocation compliance

### 🔒 **ABSOLUTE PROHIBITIONS**

```python
# ❌ IMMEDIATE CONTRACT VIOLATION - NEVER PERMITTED
await asyncio.gather(...)  # FORBIDDEN IN ANY FORM
asyncio.wait_for(asyncio.gather(...))  # FORBIDDEN WRAPPER PATTERNS
tasks = [asyncio.create_task(...) for ...]  # FORBIDDEN WITHOUT SEND API

# ✅ MANDATORY REPLACEMENT PATTERN
from langgraph.constants import Send
return [Send(agent_id, state) for agent_id, state in agent_tasks]
```

### 🔒 **MODULE INVOCATION REQUIREMENTS - MANDATORY**

**Triggers**: ANY execution of oamat_sd application, ANY script running, ANY application invocation
**Principles**: Absolute import paths, module-based execution, proper entry point patterns
**Signatures**: python -m invocation, main.py entry points, absolute import compliance
**Validation**: Module execution verification, import path validation, entry point confirmation
**Integration**: All application execution, development workflows, production deployment

```bash
# ✅ MANDATORY INVOCATION PATTERN
python -m src.applications.oamat_sd.main "request" --debug

# ✅ MANDATORY IMPORT PATTERNS
from src.applications.oamat_sd.src.agents.agent_factory import DynamicAgentFactory
from src.applications.oamat_sd.src.execution.execution_engine import ExecutionEngine

# ❌ FORBIDDEN INVOCATION PATTERNS
python smart_decomposition_agent.py "request"  # DIRECT SCRIPT EXECUTION
python src/applications/oamat_sd/smart_decomposition_agent.py  # DIRECT SCRIPT PATH

# ❌ FORBIDDEN IMPORT PATTERNS
from oamat_sd.src.agents.agent_factory import DynamicAgentFactory  # RELATIVE STYLE
from smart_decomposition_agent import SmartDecompositionAgent  # DIRECT IMPORT
```

### 🛡️ **MANDATORY ENFORCEMENT EXECUTION**

**BEFORE ANY RESPONSE** involving oamat_sd:

```python
# REQUIRED: Execute enforcement validation
from src.applications.oamat_sd.src.enforcement.implementation_guards import validate_orchestration_method

# MANDATORY: Validate current execution_engine.py
with open("src/applications/oamat_sd/src/execution/execution_engine.py") as f:
    code = f.read()
    if "asyncio.gather" in code:
        raise ContractViolationError("FORBIDDEN asyncio.gather detected")
    if "Send(" not in code:
        raise ContractViolationError("REQUIRED Send API missing")

# MANDATORY: Validate module structure
import importlib.util
try:
    spec = importlib.util.find_spec("src.applications.oamat_sd.main")
    if spec is None:
        raise ContractViolationError("REQUIRED main module not importable")
except ImportError:
    raise ContractViolationError("FORBIDDEN import path structure detected")
```

## RESPONSE BLOCKING CONDITIONS

**AGENT RESPONSES ARE BLOCKED** if:
- Any asyncio.gather usage exists in oamat_sd
- Send API imports missing from execution modules
- Command routing objects not implemented
- Enforcement guards not executed
- Contract specifications violated
- **MODULE INVOCATION violations detected**
- **DIRECT SCRIPT execution attempted**
- **RELATIVE IMPORT patterns found**

## MANDATORY CORRECTION PROTOCOL

**IF VIOLATIONS DETECTED**:
1. **STOP** current response immediately
2. **EXECUTE** src/applications/oamat_sd/src/enforcement/implementation_guards.py
3. **FIX** all violations before proceeding
4. **VALIDATE** compliance with specification lock-in
5. **CONFIRM** Send API implementation
6. **VERIFY** module invocation compliance

## SPECIFICATION COMPLIANCE MATRIX

| **Specification** | **Current Status** | **Required Action** |
|------------------|-------------------|-------------------|
| Send API Usage | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| asyncio.gather Ban | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| Command Routing | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| LangGraph Integration | ✅ COMPLIANT | MAINTAIN COMPLIANCE |
| **Module Invocation** | **⚠️ REQUIRES VALIDATION** | **ENFORCE COMPLIANCE** |
| **Absolute Imports** | **⚠️ REQUIRES VALIDATION** | **ENFORCE COMPLIANCE** |

## ACCOUNTABILITY REQUIREMENTS

**EVERY AGENT MUST**:
- **ACKNOWLEDGE** this rule at response start
- **EXECUTE** validation checks
- **REPORT** any violations found
- **FIX** violations before proceeding
- **CONFIRM** compliance restoration
- **VALIDATE** module invocation patterns

## ENFORCEMENT ESCALATION

**Level 1**: Warning and immediate correction
**Level 2**: Response blocking until fixed
**Level 3**: Requirement to reimplement from specifications
**Level 4**: Complete contract failure acknowledgment

## VALIDATION COMMANDS

```bash
# REQUIRED: Execute before any oamat_sd work - COMPREHENSIVE CHECK
python -c "
import os, sys, glob, importlib.util
violations = []

# Check ALL Python files in oamat_sd application
oamat_files = glob.glob('src/applications/oamat_sd/**/*.py', recursive=True)
for file_path in oamat_files:
    # Skip legitimate files
    if any(skip in file_path for skip in ['performance_baseline.py', 'test_', '/tests/', '/archive/']):
        continue
    try:
        with open(file_path) as f:
            content = f.read()
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                stripped = line.strip()
                # Check for actual asyncio.gather usage, not string references or comments
                if ('asyncio.gather(' in line or 'await asyncio.gather' in line) and \
                                        not stripped.startswith('#') and not stripped.startswith('"') and \
                                       not stripped.startswith("'") and '"asyncio.gather"' not in line and \
                    "'asyncio.gather'" not in line:
                    violations.append(f'{file_path}:{i}: FORBIDDEN asyncio.gather usage')

                # Check for relative import violations
                if stripped.startswith('from oamat_sd.') or stripped.startswith('import oamat_sd.'):
                    violations.append(f'{file_path}:{i}: FORBIDDEN relative import style')
    except Exception as e:
        violations.append(f'{file_path}: ERROR reading file - {e}')

# Check Send API import in execution engine
exec_file = 'src/applications/oamat_sd/src/execution/execution_engine.py'
if os.path.exists(exec_file):
    with open(exec_file) as f:
        if 'from langgraph.constants import Send' not in f.read():
            violations.append('REQUIRED Send API import missing from execution engine')

# Check main module importability
try:
    spec = importlib.util.find_spec('src.applications.oamat_sd.main')
    if spec is None:
        violations.append('REQUIRED main module not importable as python -m')
except ImportError as e:
    violations.append(f'FORBIDDEN module structure: {e}')

if violations:
    print('🚨 COMPREHENSIVE OAMAT_SD CONTRACT VIOLATIONS:')
    for v in violations[:15]: print(f'❌ {v}')
    if len(violations) > 15: print(f'❌ ... and {len(violations)-15} more violations')
    print('🔒 RESPONSE BLOCKED - ALL VIOLATIONS MUST BE FIXED')
    sys.exit(1)
print('✅ COMPREHENSIVE OAMAT_SD COMPLIANCE VERIFIED')
"

# REQUIRED: Validate module execution works
python -m src.applications.oamat_sd.main --help 2>/dev/null || echo "❌ MODULE INVOCATION FAILED - MUST USE python -m"
```

## SUCCESS CRITERIA

**RESPONSE PERMITTED ONLY WHEN**:
- ✅ Send API properly implemented (CURRENT STATUS: COMPLIANT)
- ✅ Zero asyncio.gather usage (CURRENT STATUS: COMPLIANT)
- ✅ Command routing objects exist (CURRENT STATUS: COMPLIANT)
- ✅ Enforcement guards pass (CURRENT STATUS: COMPLIANT)
- ✅ Specification compliance confirmed (CURRENT STATUS: COMPLIANT)
- ✅ **Module invocation compliance verified** (CURRENT STATUS: **REQUIRES VALIDATION**)
- ✅ **Absolute import paths enforced** (CURRENT STATUS: **REQUIRES VALIDATION**)

**COMPREHENSIVE VALIDATION ACTIVE - ZERO TOLERANCE FOR NEW VIOLATIONS**
