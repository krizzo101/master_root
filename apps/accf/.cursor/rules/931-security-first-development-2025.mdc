---
description: "use when IMPLEMENTING SECURITY MEASURES to ENFORCE VULNERABILITY PREVENTION for SECURE AI APPLICATIONS"
globs:
alwaysApply: false
---

# SECURITY-FIRST DEVELOPMENT 2025

**Validation**: "Rule 931 Protocol Active"

## Zero-Trust Security Model

**Triggers**: Code development, dependency management, vulnerability assessment, production deployment
**Principles**: Automated scanning, dependency auditing, code analysis, continuous monitoring
**Signatures**: Bandit integration, pip-audit enforcement, secret detection, security automation
**Validation**: No high-severity vulnerabilities, clean dependency audit, secure coding patterns
**Integration**: Pre-commit hooks, CI/CD pipelines, development workflow, team standards

## Multi-Layer Security Scanning

**Code Vulnerability Detection**:
```bash
# Bandit - Static Application Security Testing
bandit -r src/ --severity-level high

# pip-audit - Comprehensive dependency scanning
pip-audit --desc --format=json

# detect-secrets - Prevent credential leaks
detect-secrets scan --all-files --baseline .secrets.baseline
```

## Automated Security Integration

**Pre-commit Security Pipeline**:
```yaml
repos:
  - repo: https://github.com/PyCQA/bandit
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
  - repo: https://github.com/pypa/pip-audit
    hooks:
      - id: pip-audit
        args: [--desc]
  - repo: https://github.com/Yelp/detect-secrets
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
```

## AI Application Security

**Secure Patterns**:
```python
# ✅ CORRECT - Environment variables
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("API key required")

# ✅ CORRECT - Input validation
def validate_user_input(user_input: str) -> str:
    if len(user_input) > MAX_INPUT_LENGTH:
        raise ValueError("Input too long")
    return user_input.strip()
```

## Vulnerability Response Protocol

**High-Severity Issues**:
1. **Immediate**: Stop development, assess impact
2. **Fix**: Apply security patches immediately
3. **Deploy**: Emergency security release if needed

**Development Workflow**:
```bash
make security    # Run all security scans
pre-commit run --all-files    # Before commits
```

## Success Indicators

- ✅ **Zero high-severity** vulnerabilities in production
- ✅ **Automated scanning** on every commit
- ✅ **Up-to-date dependencies** with security patches
- ✅ **No secrets** in version control
- ✅ **Security-aware** development practices

[security-patterns.md](mdc:.cursor/templates/security-patterns.md)
