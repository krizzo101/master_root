---
description: "use when CREATING OR MODIFYING CURSOR RULES to ENSURE PROPER ARCHITECTURE for PATTERN CONSISTENCY"
globs:
alwaysApply: false
---

# CURSOR RULES GENERATION PROTOCOL

**Validation**: "Rule 101 Protocol Active"

## Rule Generation Patterns

**Triggers**: Creating or modifying .cursor rules for autonomous agents
**Principles**: Token efficiency, pattern recognition, three-tier architecture, autonomous compatibility
**Signatures**: Agent-requested rules with `{{trigger}} to {{action}} for {{outcome}}` descriptions
**Validation**: Pattern effectiveness, token consumption optimization, autonomous decision support
**Integration**: Three-tier ecosystem, template references, validation frameworks

## Token-Optimized Frontmatter

```yaml
# RECOMMENDED: Agent Requested (autonomous decision-making)

---
description: "use when {{trigger}} to {{action}} for {{outcome}}"
globs:
alwaysApply: false
---
# Auto Attached (file-specific ONLY)
---
description: ""
globs: ["src/**/*.ts", "**/*.test.*"]
alwaysApply: false
---
# Always Apply (universal standards ONLY)
---
description: ""
globs:
alwaysApply: true
---
```

## Content Architecture Framework

**Pattern Structure**:
```markdown
## Pattern Name

**Triggers**: Activation conditions for autonomous agents
**Principles**: Core recognition patterns and behavioral guidelines
**Signatures**: Implementation markers and validation points
**Validation**: Success indicators and quality metrics
**Integration**: System connections and ecosystem harmony
```

**Design Philosophy**: Encyclopedia patterns over command sequences for autonomous decision-making
**Token Efficiency**: <100 lines per rule for optimal cognitive load
**Reference Protocol**: `[filename.md](mdc:.cursor/templates/filename.md)` format exclusively

## Description Pattern

**Template**:
```yaml
description: "use when {{trigger}} to {{action}} for {{outcome}}"
```

**Examples**:
- `"use when GENERATING DOCUMENTATION to ENFORCE STANDARDS for CONTENT CONSISTENCY"`
- `"use when EXECUTING DATABASE OPERATIONS to VALIDATE QUERIES for SILENT FAILURE PREVENTION"`
- `"use when IMPLEMENTING PRODUCTION SYSTEMS to DEPLOY MONITORING for OPERATIONAL READINESS"`

**Capitalization**: Only capitalize the variable content (TRIGGER, ACTION, OUTCOME)
**Tags**: `{{trigger}}`, `{{action}}`, `{{outcome}}`

## Glob Pattern Rules

**Agent Requested**: `globs:` (empty - no brackets)
**File-Specific**: `globs: ["src/**/*.ts"]` (ONLY for file-related rules)
**Universal**: `globs:` (empty - no brackets)
**NEVER use**: `globs: []` or `**/*` unless file-specific

## Safe Workflow

```bash
# Extract → Modify → Replace → Cleanup
cp .cursor/rules/name.mdc .cursor/temp-rules/name.md
# Edit .md file
mv .cursor/temp-rules/name.md .cursor/rules/name.mdc
```

## Validation Framework

**Tests**: Pattern recognition, content effectiveness, token efficiency, integration harmony
**Confirmation**: Include validation phrases
**Metrics**: Outcome quality per token consumed

## Anti-Patterns

- Always-apply for workflows (token waste)
- Command-style instructions (autonomous agents prefer patterns)
- Redundancy across tiers
- Direct .mdc editing (corruption risk)

## ASEA Integration

**ArangoDB**: Database operation patterns → Context-Aware
**Research**: Validation workflows → Agent Requested
**Autonomous Systems**: Orchestration patterns → Agent Requested
**Production**: Deployment standards → Context-Aware

## Reference Protocol

**Format**: `[name.md](mdc:.cursor/templates/name.md)`
**Requirement**: Create template before referencing
**Validation**: File exists and accessible in Cursor
**Prohibited**: @filename.ext format (deprecated)

## Template References

[rule-template.md](mdc:.cursor/templates/rule-template.md)
[pattern-examples.md](mdc:.cursor/templates/pattern-examples.md)
