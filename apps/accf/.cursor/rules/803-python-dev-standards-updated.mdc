---
description: "use when DEVELOPING PYTHON CODE to ENFORCE 2025 STANDARDS for MAINTAINABLE, HIGH-PERFORMANCE SOFTWARE"
globs:
alwaysApply: false
---

# PYTHON DEVELOPMENT STANDARDS - 2025 EDITION

**Validation**: "Rule 803 Updated Protocol Active"

## Modern Toolchain Standards

**Triggers**: Python development, code quality, type safety, security implementation
**Principles**: uv ecosystem, ruff formatting, ty type checking, automated quality
**Signatures**: Modern toolchain adoption, zero-config setup, performance optimization
**Validation**: Quality gates passed, security standards met, performance benchmarks
**Integration**: CI/CD pipelines, pre-commit hooks, IDE configuration

## Core Tools (July 2025)

**Package Management**: `uv` (replaces pip/poetry)
**Formatting & Linting**: `ruff` (replaces black/flake8/isort)
**Type Checking**: `ty` (Astral's modern type checker)
**Testing**: `pytest` with coverage

**Quick Setup**:
```bash
uv init project && uv add fastapi pydantic
uv add --dev pytest ruff ty bandit pre-commit
```

## Code Quality Standards

**Formatting**: PEP 8 compliance via ruff, 88-char line length
**Imports**: Absolute imports, organized sections, no unused imports
**Type Hints**: Full typing for all public APIs and complex functions
**Docstrings**: Google style for all public modules, classes, functions

## Security Requirements

**Environment Variables**: All secrets from env vars, never hardcoded
**Input Validation**: Pydantic models for all external data
**File Operations**: pathlib.Path, proper error handling
**Dependencies**: Regular security scanning with bandit

## Project Structure

**Standard Layout**:
```
project/
├── src/package/          # Source code
├── tests/               # Test files
├── scripts/             # Development tools
├── pyproject.toml       # Configuration
└── README.md           # Documentation
```

## Testing Standards

**Coverage**: Minimum 80% test coverage
**Types**: Unit, integration, and end-to-end tests
**Fixtures**: Shared test fixtures in conftest.py
**Mocking**: Mock external dependencies appropriately

## Performance Guidelines

**Async/Await**: Use for I/O bound operations
**Type Checking**: Static analysis prevents runtime errors
**Dependencies**: Minimal, well-maintained packages only
**Profiling**: Regular performance monitoring in production

## Error Handling

**Custom Exceptions**: Domain-specific exception classes
**Logging**: Structured logging with appropriate levels
**Validation**: Early validation of inputs and configuration
**Graceful Degradation**: Fallback strategies for failures

## Success Indicators

- ✅ **Modern toolchain** (uv + ruff + ty) configured
- ✅ **Quality gates** (formatting, linting, typing) passing
- ✅ **Security standards** implemented and verified
- ✅ **Test coverage** meeting minimum thresholds
- ✅ **Performance benchmarks** within acceptable ranges

[python-standards-patterns.md](mdc:.cursor/templates/python-standards-patterns.md)
