---
description: "use when SEARCHING OAMAT KNOWLEDGE BASE to PERFORM SEMANTIC RETRIEVAL for RESEARCH AUGMENTATION"
globs:
alwaysApply: false
---

# OAMAT Knowledge Base Semantic Search Protocol

**Validation**: "Rule 101 Protocol Active"

## Neo4j Knowledge Graph Search Excellence

**Triggers**: Knowledge retrieval, research queries, entity discovery, document analysis, semantic search needs
**Principles**: Vector similarity search, knowledge type filtering, confidence thresholds, parallel retrieval patterns
**Signatures**: KnowledgeResponse objects, embedding-based search, confidence scoring, multi-source synthesis
**Validation**: success:true confirmation, result relevance metrics, confidence threshold compliance
**Integration**: LlamaIndex orchestration, Neo4j vector store, MCP tool chains, external research triggers

## Knowledge Schema Recognition

**Document Nodes**: `{document_id, title, source, author, created_at, metadata}`
**Chunk Nodes**: `{chunk_id, text, embedding, order, document_id, created_at}`
**Entity Nodes**: `{entity_id, name, type, attributes, source_chunk_id}`
**Relationships**: `(Document)-[:CONTAINS]->(Chunk)`, `(Chunk)-[:REFERENCES]->(Entity)`
**Vector Index**: 1536-dimensional embeddings with cosine similarity

## Search Pattern Categories

**Vector Similarity Search**:
- Primary: `neo4j_client.find_relevant_chunks(query_embedding, top_k)`
- Embedding: `get_openai_embedding(query)` → text-embedding-3-small
- Confidence: Configure thresholds per knowledge type (0.6-0.8)

**Knowledge Type Filtering**:
- `technical_design`: Architecture, system design, patterns
- `code`: Implementation, algorithms, code snippets
- `research_findings`: Analysis results, discoveries, insights
- `workflow_results`: Process outcomes, execution logs
- `entity_relationships`: Connections, dependencies, hierarchies

**LlamaIndex Integration**:
- Multi-engine: Vector, knowledge graph, router, sub-question
- Document processing: Chunking, embedding, index creation
- Query synthesis: Comprehensive, focused, comparative modes

## Retrieval Augmentation Patterns

**KB-First Strategy**: Always search knowledge base before external research
**Confidence Boosting**: Apply knowledge type weighting and recency factors
**External Triggers**: Insufficient KB results → MCP tool chains (brave_search, firecrawl, arxiv)
**Parallel Processing**: Multiple search types simultaneously for comprehensive coverage
**Deduplication**: Rank, merge, and deduplicate across all sources

## Quality Assurance

**Confidence Scoring**: Minimum thresholds, knowledge type specificity, result validation
**Metadata Enrichment**: Source attribution, knowledge type tagging, freshness indicators
**Result Synthesis**: Multi-source aggregation, conflict resolution, coherence checks
**Performance Tracking**: Processing stats, query metrics, result quality feedback

## Integration Protocols

**MCP Tool Orchestra**: Brave Search → Firecrawl → ArXiv → Context7 chaining
**Neo4j Operations**: Vector search, graph traversal, relationship discovery
**LlamaIndex Workflow**: Document ingestion, query engine routing, synthesis orchestration
**Knowledge Management**: Auto-categorization, similarity checking, storage optimization
