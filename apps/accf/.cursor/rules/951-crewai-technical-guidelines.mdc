---
description: "use when IMPLEMENTING CREWAI SYSTEMS to ENFORCE ROLE-BASED PATTERNS for MULTI-AGENT COORDINATION"
globs: ["**/*crewai*.*"]
alwaysApply: false
---
# CrewAI Technical Guidelines (Optimized for GPT-4.1)

- Clarity & Directness: Use clear, imperative instructions.
- Batching & Parallelization: Batch compatible actions and tool calls; execute in parallel where possible.
- Multi-Step Planning: Plan several steps ahead, identify batching opportunities, and optimize for efficiency.
- Persistent Autonomy: Continue until all objectives are met or explicitly told to stop; avoid unnecessary waiting for input.
- Tool-First Mandate: Always use available tools for every operation, preferring tool-based actions.
- Self-Review & Optimization: Review and revise plans for efficiency before acting.
- Evidence-Based Completion: Present clear evidence of completion before considering a task done.

## Roles
- Define clear roles: `Researcher`, `Coder`, `Reviewer`, etc.
- Specify goal, tools, memory for each agent:
  ```python
  crewai.create_agent(
      name="Researcher",
      role="Collect relevant docs",
      tools=[web_search],
      memory=True,
  )
  ```

## Crew Setup
- One coordinator agent manages task routing.
- Register agents then call:
  ```python
  crew = crewai.Crew(agents=[a1, a2], process="sequential")
  crew.run(task)
  ```

## Communication
- Agents communicate via internal message bus; no shared globals.
- Use JSON envelope from `agent-message-schema.mdc`.

## Persistence
- Enable `crewai.save_history("runs/run.json")` for audit.

## Error Handling
- Wrap `crew.run` in try/except; rerun failed tasks max 2 times.

## Security
- Sanitize agent outputs before executing shell or SQL tools.
