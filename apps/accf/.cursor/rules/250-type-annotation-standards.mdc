---
description: "use when WRITING PYTHON CODE to ENFORCE MODERN TYPE ANNOTATIONS for CODE QUALITY"
globs:
alwaysApply: false
---

# Type Annotation Standards

**Triggers**: Writing Python functions, classes, or type definitions
**Principles**: Modern Python type syntax, explicit typing, importable annotations
**Signatures**: `X | None` patterns, comprehensive type coverage, validation-ready
**Validation**: Type checker compliance, import verification, annotation completeness
**Integration**: IDE support, documentation generation, static analysis tools

## Mandatory Requirements

### Modern Type Syntax
```python
# ✅ CORRECT - Modern Python 3.10+ syntax
def process_data(data: dict[str, Any] | None = None) -> list[str] | None:
    pass

def handle_response(response: str | bytes) -> dict[str, Any]:
    pass

# ❌ INCORRECT - Deprecated syntax
def process_data(data: Optional[Dict[str, Any]] = None) -> Optional[List[str]]:
    pass

def handle_response(response: Union[str, bytes]) -> Dict[str, Any]:
    pass
```

### Complete Type Coverage
- **MANDATORY**: All function parameters must have type annotations
- **REQUIRED**: All function return types must be specified
- **PROHIBITED**: Missing type annotations on public APIs
- **VALIDATION**: All annotations must be importable and valid

### Import Requirements
```python
# ✅ CORRECT - Import typing constructs
from typing import Any, Callable, Dict, List, Union

# Use modern syntax even with imports
def handler(data: dict[str, Any] | None) -> list[str]:
    pass

# ❌ INCORRECT - Using deprecated constructs
from typing import Optional, Union
def handler(data: Optional[Dict[str, Any]]) -> List[str]:
    pass
```

## Validation Framework

### Type Checker Compliance
- **mypy**: Must pass with no errors
- **pyright**: Must pass with no errors
- **ruff**: Must pass type annotation checks
- **IDE**: Must provide proper autocomplete and validation

### Import Verification
- **REQUIRED**: All type annotations must be importable
- **VALIDATION**: Test imports in isolation
- **ERROR HANDLING**: Fail fast on import errors

## Anti-Patterns

### Prohibited Patterns
```python
# ❌ NEVER USE
Optional[X]           # Use X | None
Union[X, Y]           # Use X | Y
List[X]               # Use list[X] (lowercase)
Dict[X, Y]            # Use dict[X, Y] (lowercase)
Tuple[X, Y]           # Use tuple[X, Y] (lowercase)
```

### Common Mistakes
- Using `Any` when specific types are known
- Missing return type annotations
- Inconsistent type usage across similar functions
- Overly complex union types that could be simplified

## Success Indicators

- **100% type coverage** on all public APIs
- **Zero mypy errors** for type annotations
- **Consistent modern syntax** throughout codebase
- **IDE autocomplete** working correctly
- **Documentation generation** includes types
