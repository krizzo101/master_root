---
description: "use when DEVELOPING PYTHON CODE to LEVERAGE 2025 TOOLCHAIN for MAXIMUM PERFORMANCE AND QUALITY"
globs:
alwaysApply: false
---

# MODERN PYTHON TOOLCHAIN 2025

**Validation**: "Rule 804 Protocol Active"

## Astral Ecosystem Supremacy

**Triggers**: Python development, package management, code formatting, type checking, quality assurance
**Principles**: Rust-based toolchain, unified ecosystem, zero-configuration, extreme performance
**Signatures**: uv package management, ruff formatting, ty type checking, automated workflows
**Validation**: 100x+ performance gains, single vendor consistency, production readiness
**Integration**: pyproject.toml centralization, integrated workflow, CI/CD optimization

## Core Tools (July 2025)

**1. uv - THE Modern Package Manager**
```bash
# Install uv (replaces pip, poetry, pipenv)
curl -sSfL https://astral.sh/install.sh | sh

# Project initialization
uv init my-project
uv add fastapi pydantic pytest --dev

# Development workflow
uv sync          # Install/update dependencies
uv run pytest   # Execute in virtual environment
```

**2. ruff - Universal Linting & Formatting**
```bash
# Single tool replaces: black, flake8, isort, pyupgrade
ruff format src/        # Format code
ruff check src/ --fix   # Lint and auto-fix
```

**3. ty - Modern Type Checker**
```bash
# New Astral type checker (early 2025)
ty check src/           # Fast type checking
ty --strict src/        # Production mode
```

## Performance Revolution

**Speed Comparison** (1000+ files):
```bash
# LEGACY TOOLCHAIN
pip install requirements.txt  # 45-120s
poetry install               # 30-90s
black + flake8 + isort      # 90s total
mypy                        # 25s

# MODERN 2025 TOOLCHAIN
uv sync                     # 2-5s (20x faster)
ruff format + check         # 0.8s (100x faster)
ty check                    # 1.5s (15x faster)
```

## Unified Workflow

**Single Configuration**: `pyproject.toml`
```toml
[project]
name = "my-project"
dependencies = ["fastapi", "pydantic"]

[tool.uv]
dev-dependencies = ["pytest", "ruff", "ty"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ty]
strict = true
```

**Development Commands**:
```bash
uv run ruff format .        # Format
uv run ruff check . --fix   # Lint
uv run ty check .           # Type check
uv run pytest              # Test
```

## Makefile Integration

```makefile
.PHONY: format lint type test all

format:
	uv run ruff format .

lint:
	uv run ruff check . --fix

type:
	uv run ty check .

test:
	uv run pytest

all: format lint type test
```

## Success Indicators

- ✅ **uv ecosystem** adoption over pip/poetry
- ✅ **Sub-second** development cycles
- ✅ **Unified toolchain** from single vendor
- ✅ **Production-grade** performance and reliability
- ✅ **Zero-config** setup with smart defaults

[modern-toolchain-patterns.md](mdc:.cursor/templates/modern-toolchain-patterns.md)
