---
description: "use when BUILDING AI APPLICATIONS to LEVERAGE LANGGRAPH PATTERNS for MODERN AGENT ORCHESTRATION"
globs:
alwaysApply: false
---

# AI DEVELOPMENT 2025

**Validation**: "Rule 956 Protocol Active"

## Modern Agent Architecture

**Triggers**: AI agent development, LLM applications, stateful workflows, tool integration, vibe coding
**Principles**: LangGraph-first approach, create_react_agent patterns, agentic AI workflows, terminal-based development
**Signatures**: Agent factories, checkpointers, tool binding, Claude Code integration
**Validation**: Working agent creation, tool integration success, state management
**Integration**: Model initialization, memory systems, production deployment

## Current AI Model Landscape (July 2025)

**OpenAI Models**:
```python
from langchain.chat_models import init_chat_model

# Reasoning models for complex planning
model = init_chat_model("o3-mini")  # Reasoning optimization
model = init_chat_model("o4-mini")  # Speed + reasoning balance

# Production agent models
model = init_chat_model("gpt-4o")    # Multimodal standard
model = init_chat_model("gpt-4.1-mini")  # Efficient agents
```

**Anthropic Models**:
```python
# Latest Claude models (July 2025)
model = init_chat_model("claude-sonnet-4")  # Most powerful
model = init_chat_model("claude-opus-4")    # Advanced coding
model = init_chat_model("claude-3.7-sonnet") # Enhanced context
```

## LangGraph Platform Integration

**AWS Marketplace Deployment** (Available July 2025):
```python
from langgraph.platform import LangGraphPlatform

# Enterprise-ready deployment
platform = LangGraphPlatform(
    deployment="aws-marketplace",
    scaling="auto",
    state_persistence=True
)
```

**Agentic Workflows**:
```python
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

# Modern agentic AI patterns
model = init_chat_model("o3-mini")
agent = create_react_agent(
    model=model,
    tools=[your_tools],
    checkpointer=InMemorySaver()
)
```

## Terminal-First Development (2025 Trend)

**Claude Code Integration**:
- Terminal-based AI development
- Direct system integration
- File system awareness
- Contextual code understanding

**Vibe Coding Patterns**:
- Conversational development
- Iterative refinement
- AI-guided architecture
- Dynamic tool selection

## Tool Integration Excellence

**Function to Tool Conversion**:
```python
def analyze_data(filepath: str, format: str = "json") -> dict:
    """Analyze data file and return insights."""
    # Tool automatically bound to agent
    return {"insights": "processed", "format": format}

agent = create_react_agent(model, [analyze_data], prompt)
```

## Production Readiness

**Model Selection Strategy**:
- **o3-mini**: Complex reasoning, planning, architecture decisions
- **gpt-4o**: Multimodal tasks, image/audio processing
- **claude-opus-4**: Advanced coding, system integration
- **gpt-4.1-mini**: Fast agent responses, routine tasks

**Safety Patterns**:
```python
agent = create_react_agent(model, tools).with_config(
    recursion_limit=10,
    timeout=30
)
```

## Success Indicators

- ✅ **Current model integration** (July 2025 releases)
- ✅ **Terminal-first workflows** with Claude Code
- ✅ **LangGraph Platform** deployment ready
- ✅ **Agentic AI patterns** implementation
- ✅ **Vibe coding** development cycles

[ai-development-patterns.md](mdc:.cursor/templates/ai-development-patterns.md)
