---
alwaysApply: false
---
# CODE VALIDATION MANDATORY

**Validation**: "Rule 100 Code Validation Active"

## Pattern Recognition

**Triggers**: Any code modification, function call, variable usage, import statement, class instantiation
**Principles**: Zero-tolerance for guessing, mandatory validation before changes, AST-based verification, cross-reference validation
**Signatures**: Function signature validation, variable existence checking, import availability verification, parameter matching
**Validation**: Successful tool execution, accurate function calls, correct variable usage, valid imports
**Integration**: Code mapping system, dev agent validator, AST analysis, pre-commit hooks

## Mandatory Validation Workflow

**Before ANY Code Change**:
1. **Function Calls**: Search and validate signatures
2. **Variable Usage**: Check existence and scope
3. **Import Statements**: Verify module availability
4. **Class Usage**: Validate methods and attributes
5. **Parameter Names**: Use exact names from signatures

## Tool Integration Patterns

**Code Mapper Analysis**:
```bash
# Generate comprehensive code map
python tools/code_mapper.py analyze

# Search for functions by keyword
python tools/code_mapper.py search --query "function_keyword"

# Validate function calls
python tools/code_mapper.py validate --function "function_name" --parameters "param1" "param2"
```

**Dev Agent Validator**:
```bash
# Mandatory function validation
python tools/dev_agent_validator.py check-before-change --function "function_name" --parameters "param1" "param2"

# Search for correct function names
python tools/dev_agent_validator.py search-function --query "search_term"

# Get complete function signatures
python tools/dev_agent_validator.py get-signature --function "function_name"

# Validate variable usage
python tools/dev_agent_validator.py enforce --operation "variable_usage" --variable "variable_name"

# Validate import availability
python tools/dev_agent_validator.py validate-import --module "module_name"
```

## Anti-Pattern Detection

**Prohibited Behaviors**:
- ‚ùå Guessing function names without searching
- ‚ùå Assuming parameter names without validation
- ‚ùå Using variables without existence checking
- ‚ùå Importing modules without availability verification
- ‚ùå Making changes based on assumptions

**Required Behaviors**:
- ‚úÖ Search for functions before using them
- ‚úÖ Get exact signatures before implementation
- ‚úÖ Validate all function calls before coding
- ‚úÖ Check variable existence before usage
- ‚úÖ Verify import availability before importing

## Success Indicators

**Validation Metrics**:
- Function signature accuracy: 100%
- Variable existence verification: 100%
- Import availability confirmation: 100%
- Parameter name correctness: 100%
- Error reduction from guessing: 100%

**Quality Gates**:
- All function calls validated before implementation
- All variables checked for existence
- All imports verified for availability
- All parameter names match signatures exactly
- Zero changes requiring fixes due to wrong names

## Integration Framework

**Pre-commit Integration**:
```yaml
- repo: local
  hooks:
    - id: code-validation-mandatory
      name: "üîç Code Validation Mandatory"
      entry: python tools/dev_agent_validator.py enforce --operation function_call
      language: system
      types: [python]
```

**CI/CD Pipeline**:
```yaml
- name: Mandatory Code Validation
  run: |
    python tools/code_mapper.py analyze
    python tools/dev_agent_validator.py enforce --operation function_call
```

**IDE Integration**:
```bash
alias validate="python tools/dev_agent_validator.py"
validate check-before-change --function "function_name" --parameters "param1" "param2"
```

## Reference Protocol

[code-mapping-system.md](mdc:src/applications/oamat_sd/docs/code_mapping_system.md)
[code-mapping-solution.md](mdc:src/applications/oamat_sd/docs/code_mapping_solution.md)
[dev-agent-validator.py](mdc:src/applications/oamat_sd/tools/dev_agent_validator.py)
[code-mapper.py](mdc:src/applications/oamat_sd/tools/code_mapper.py)

## Enforcement Escalation

**Level 1**: Warning and immediate correction
**Level 2**: Code change blocking until validation
**Level 3**: Mandatory tool usage requirement
**Level 4**: Complete workflow enforcement

## Token Efficiency

**Pattern Recognition**: <100 lines for optimal cognitive load
**Encyclopedia Style**: Pattern recognition over command sequences
**Autonomous Compatibility**: Self-directed validation workflows
**Integration Harmony**: Seamless tool ecosystem integration

**Encyclopedia Style**: Pattern recognition over command sequences
**Autonomous Compatibility**: Self-directed validation workflows
**Integration Harmony**: Seamless tool ecosystem integration


**Encyclopedia Style**: Pattern recognition over command sequences
**Autonomous Compatibility**: Self-directed validation workflows
**Integration Harmony**: Seamless tool ecosystem integration
