# DEVELOPMENT BEST PRACTICES

**Validation**: "Rule 200 Development Standards Active"

## Code Quality Pattern Recognition

**DRY Implementation Triggers**:

- Repeated code patterns detected
- Similar logic across multiple functions
- Configuration values hardcoded in multiple places

**Quality Signatures**:

- Reusable utilities extracted
- Shared configuration systems
- Inheritance for similar classes
- Documented public interfaces

**Validation Indicators**:

- Test coverage >80%
- Documentation complete
- CI/CD pipeline passing
- Security review completed

## Surgical Code Modification Excellence

**Triggers**: Modifying existing code, fixing bugs, adding features, refactoring
**Principles**: Minimal change surface area, precision targeting, context preservation
**Signatures**: search_replace for targeted edits, edit_file for small changes, avoid wholesale rewrites
**Validation**: Only necessary lines changed, surrounding code untouched, functionality preserved
**Integration**: Version control best practices, code review readiness, testing validation

**MANDATORY CODE MODIFICATION PATTERNS**:

**✅ SURGICAL CHANGES (PREFERRED)**:
- **Target Specific Lines**: Change only what needs modification
- **Preserve Context**: Keep surrounding code exactly as-is
- **Minimal Scope**: Single responsibility per change
- **Tool Selection**: `search_replace` for targeted fixes, `edit_file` for small additions

**❌ WHOLESALE REWRITES (PROHIBITED)**:
- Rewriting entire files for minor changes
- Modifying unrelated code during focused fixes
- Changing formatting/style in functional updates
- Creating large diffs for simple modifications

**Tool Usage Patterns**:
```yaml
✅ PREFERRED APPROACH:
  - search_replace: Fix specific import statement
  - search_replace: Update single function parameter
  - edit_file: Add single new method to class
  - search_replace: Change specific variable name

❌ ANTI-PATTERNS:
  - edit_file: Rewrite entire file to fix import
  - edit_file: Recreate whole class to add method
  - Multiple overlapping changes to same file
  - Changing code style during bug fixes
```

**Change Validation Framework**:
- **Diff Review**: Changes should be minimal and focused
- **Context Preservation**: No unintended modifications to working code
- **Single Purpose**: Each change addresses one specific issue
- **Testability**: Changes can be validated independently

**Examples of Surgical Changes**:
```python
# ✅ SURGICAL: Fix single import
search_replace:
  old: "from module import old_function"
  new: "from module import new_function"

# ✅ SURGICAL: Add single parameter
search_replace:
  old: "def process_data(data):"
  new: "def process_data(data, validate=True):"

# ❌ ANTI-PATTERN: Rewrite entire file
edit_file: "Complete rewrite of 200-line file to fix import"
```

**ENFORCEMENT REQUIREMENTS**:
- All code modifications MUST use surgical approach unless file is being created
- Changes MUST be reviewable and understandable in isolation
- Multiple related changes MUST be broken into separate, targeted modifications
- Tool selection MUST prioritize minimal change impact

## File Organization Patterns

**MANDATORY**: All agents MUST follow the Project Organization Standards defined in rule 001-project-organization-standards.md

**Project Structure Recognition**:

```
src/
├── applications/          # Live production applications
│   ├── specstory_intelligence/  # SpecStory processing system
│   └── agent_hub/         # Agent hub system
├── shared/                # Shared libraries and utilities
└── tools/                 # Development and maintenance tools

config/                    # Configuration management
data/                      # Data and artifacts (NEVER in src/)
docs/                      # Documentation (organized by type)
archive/                   # Archived projects by date
```

**CRITICAL RULES**:
- ❌ NEVER place Python files in root directory
- ❌ NEVER mix source code with artifacts/logs
- ✅ ALWAYS use proper module structure with __init__.py
- ✅ ALWAYS place artifacts in data/artifacts/YYYY-MM-DD/
- ✅ ALWAYS use import paths relative to src/

**Naming Conventions**:
- Python: snake_case functions, PascalCase classes
- Modules: snake_case (e.g., specstory_intelligence)
- Files: snake_case.py (e.g., database_integration.py)
- Artifacts: descriptive_name_YYYY-MM-DD_HH-MM.ext
- Archives: YYYY-MM-DD_descriptive-name

## Security Implementation Patterns

**Database Security Signatures**:

- Environment variables for credentials
- Input validation at all boundaries
- Proper error handling without information disclosure
- Security event logging

**Code Security Indicators**:

- Path validation for file operations
- Input sanitization implemented
- Dependencies scanned for vulnerabilities
- Secure error messaging patterns

## Performance Optimization Recognition

**Database Performance Triggers**:

- Query result sets >1000 records without LIMIT
- Missing indexes on filtered columns
- Multiple sequential database calls

**Optimization Signatures**:

- Indexed query patterns
- Batch operation implementation
- Caching for repeated operations
- Profiled bottleneck resolution

## Quality Validation Framework

**Deployment Readiness Checklist**:

- ✓ Tests passing (unit + integration)
- ✓ Documentation current
- ✓ Security practices implemented
- ✓ Performance benchmarks met
- ✓ Backup/rollback plan ready

**Integration Points**:

- Version control workflow
- CI/CD pipeline integration
- Security scanning automation
- Performance monitoring systems

[development-checklists.md](mdc:.cursor/templates/development-checklists.md)

## CORE DEVELOPMENT STANDARDS

**CONTEXT**: Writing, modifying, or reviewing any code in the Agent-IDE system
**ENFORCEMENT**: MANDATORY for all development activities

### AGENT-IDE DATABASE COMPATIBILITY (CRITICAL)

**REQUIRED**: ALL database operations MUST use Agent-IDE compatible patterns

```yaml
✅ SUPPORTED PATTERNS:
  search_types: [content, type, tags, date_range, id, recent]
  collections: [research_docs, heuristics, metrics, rules, modules, tasks, branches, ide_state, user_prefs]
  tools: [mcp_cognitive_tools_arango_search, mcp_cognitive_tools_arango_modify, mcp_cognitive_tools_arango_manage]

❌ PROHIBITED PATTERNS:
  search_types: [content, tags, date_range, type, recent, id]
  parameters: [document_type, min_quality, quality_field, reference_id]
  tools: [mcp_multi_modal_db_*]
```

**VALIDATION REQUIRED**: Test database operations in runtime context, not just syntax validation

### CODE QUALITY STANDARDS

**SECURITY REQUIREMENTS**:
- Input validation for all external data
- Parameterized queries for database operations
- Secrets management through environment variables
- Error handling without information disclosure

**PERFORMANCE STANDARDS**:
- Database operations optimized for Agent-IDE capabilities
- Parallel tool execution where possible
- Memory-efficient data processing
- Caching strategies for repeated operations

**TESTING REQUIREMENTS**:
- Unit tests for all business logic
- Integration tests for database operations
- End-to-end workflow testing
- Performance regression testing

**DOCUMENTATION STANDARDS**:
- Code comments for complex logic
- API documentation for public interfaces
- Database schema documentation
- Deployment and configuration guides

### AGENT-IDE INTEGRATION PATTERNS

**WORKFLOW DEVELOPMENT**:
- Use supported search_type values only
- Incorporate filtering into content strings instead of separate parameters
- Validate workflow files against Agent-IDE compatibility protocol
- Test complete workflow execution, not just individual operations

**DATABASE OPERATIONS**:
- Prefer content-based searches with descriptive keywords
- Use appropriate collections based on data type and purpose
- Implement proper error handling for database failures
- Track operation metrics for performance monitoring

**KNOWLEDGE MANAGEMENT**:
- Store structured data with content_type field instead of document_type
- Use semantic tagging through content keywords
- Implement relationship tracking through content references
- Maintain data quality through validation protocols

### COMPLIANCE VERIFICATION

**PRE-DEPLOYMENT CHECKLIST**:
- [ ] All database operations use Agent-IDE compatible patterns
- [ ] No deprecated tool references in code
- [ ] Workflow files validated against compatibility protocol
- [ ] Runtime testing completed successfully

**CONTINUOUS MONITORING**:
- Database operation success rates
- Agent startup workflow completion rates
- Performance metrics for database queries
- Error patterns and resolution tracking

This rule ensures Agent-IDE compatibility while maintaining high development standards for security, performance, and maintainability.

# Development Best Practices

- Clarity & Directness: Use clear, imperative instructions.
- Batching & Parallelization: Batch compatible best practice steps; execute in parallel where possible.
- Multi-Step Planning: Plan several steps ahead, identify batching opportunities, and optimize for efficiency.
- Persistent Autonomy: Continue until all objectives are met or explicitly told to stop; avoid unnecessary waiting for input.
- Tool-First Mandate: Always use available tools for every operation, preferring tool-based actions.
- Self-Review & Optimization: Review and revise plans for efficiency before acting.
- Evidence-Based Completion: Present clear evidence of completion before considering a task done.
