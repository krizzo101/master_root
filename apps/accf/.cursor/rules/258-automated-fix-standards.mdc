---
description: "use when FIXING LINTING ISSUES to APPLY AUTOMATED FIXES for EFFICIENCY"
globs:
alwaysApply: false
---

# Automated Fix Standards

**Triggers**: Linting errors, code quality issues, pre-commit failures
**Principles**: Automated fixes first, manual review required, systematic approach
**Signatures**: Fix script execution, validation verification, change review
**Validation**: Fix effectiveness, change safety, quality improvement
**Integration**: Development workflow, CI/CD pipeline, quality tools

## Mandatory Requirements

### Automated Fix Execution
```bash
# ✅ CORRECT - Systematic fix approach
# 1. Run automated fixes
python run_all_linting_fixes.py

# 2. Review changes
git diff

# 3. Verify fixes
ruff check src/
mypy src/

# 4. Commit if successful
git add .
git commit -m "Fix: Apply automated linting fixes"
```

### Fix Priority Order
1. **AUTOMATED**: Use `ruff --fix` for auto-fixable issues
2. **SCRIPTS**: Run custom fix scripts for common patterns
3. **MANUAL**: Address remaining issues manually
4. **VERIFICATION**: Re-run validation after all fixes

### Change Review Process
```bash
# ✅ CORRECT - Review automated changes
git diff --cached  # Review staged changes
git diff HEAD~1    # Review all changes since last commit

# Verify no functionality broken
pytest tests/
```

## Validation Framework

### Fix Effectiveness Assessment
- **REDUCTION**: Significant reduction in linting errors
- **SAFETY**: No functionality broken by fixes
- **QUALITY**: Code quality improved, not degraded
- **COVERAGE**: All fixable issues addressed

### Change Safety Verification
1. **REVIEW**: Examine all automated changes
2. **TEST**: Run tests to verify functionality
3. **VALIDATE**: Re-run linting to confirm fixes
4. **DOCUMENT**: Note any non-standard fixes

## Anti-Patterns

### Prohibited Patterns
```bash
# ❌ NEVER USE
# Blind application without review
python fix_script.py && git commit  # No review

# Skip verification
ruff --fix && git commit  # No testing

# Ignore manual issues
git commit -m "Fix linting"  # With remaining errors
```

### Common Mistakes
- Applying fixes without review
- Not testing after automated fixes
- Ignoring manual fixes needed
- Committing with remaining errors
- Not documenting non-standard fixes

## Success Indicators

- **90%+ error reduction** from automated fixes
- **Zero functionality regressions** after fixes
- **Faster development cycles** with fewer interruptions
- **Consistent code quality** improvements
- **Reduced manual fix effort** required
