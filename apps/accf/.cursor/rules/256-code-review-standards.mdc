---
description: "use when REVIEWING CODE to ENFORCE QUALITY STANDARDS for MAINTAINABILITY"
globs:
alwaysApply: false
---

# Code Review Standards

**Triggers**: Code reviews, pull requests, merge requests
**Principles**: Self-review first, comprehensive validation, quality assurance
**Signatures**: Review checklist compliance, validation verification, quality metrics
**Validation**: Review completeness, issue resolution, standards compliance
**Integration**: Development workflow, team collaboration, quality gates

## Mandatory Requirements

### Self-Review Process
```bash
# ✅ CORRECT - Comprehensive self-review
# 1. Review own changes
git diff HEAD~1

# 2. Run validation locally
ruff check src/
mypy src/

# 3. Test functionality
pytest tests/

# 4. Request review only after self-review
git push origin feature-branch
```

### Review Checklist
- **MANDATORY**: All linting errors resolved
- **REQUIRED**: Type annotations complete and correct
- **PROHIBITED**: Unused imports or variables
- **VALIDATION**: Exception handling follows standards
- **VERIFICATION**: Code structure optimized

### Validation Before Review
```python
# ✅ CORRECT - Validate before requesting review
def new_function(data: dict[str, Any]) -> list[str]:
    """Process data and return results."""
    if not data:
        return []

    results = []
    for item in data.values():
        if isinstance(item, str):
            results.append(item.upper())

    return results

# ❌ INCORRECT - Request review without validation
def new_function(data):  # Missing type annotations
    results = []
    for item in data.values():
        results.append(item)  # No validation
    return results
```

## Validation Framework

### Review Quality Assessment
- **COMPLETENESS**: All changes reviewed
- **STANDARDS**: Code follows all standards
- **FUNCTIONALITY**: Code works as intended
- **MAINTAINABILITY**: Code is readable and maintainable
- **TESTING**: Adequate test coverage

### Issue Resolution Process
1. **IDENTIFY**: Find all issues during self-review
2. **FIX**: Address all identified issues
3. **VERIFY**: Re-run validation after fixes
4. **DOCUMENT**: Note any non-standard decisions
5. **REQUEST**: Only request review when ready

## Anti-Patterns

### Prohibited Patterns
```bash
# ❌ NEVER USE
# Request review without self-review
git push origin feature-branch  # No validation

# Ignore linting errors
git commit -m "Fix feature"  # With known errors

# Skip testing
git push  # Without running tests
```

### Common Mistakes
- Requesting review without self-review
- Ignoring validation errors
- Not testing functionality
- Rushing through review process
- Not documenting non-standard decisions

## Success Indicators

- **100% self-review completion** before requesting review
- **Zero validation errors** in reviewed code
- **Faster review cycles** with fewer iterations
- **Higher code quality** across team
- **Reduced technical debt** accumulation
