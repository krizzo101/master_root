# AI SDLC Code Generation Workflow

expectation: validated_application_code_and_artifacts
completion: application_code_and_artifacts_in_standard_locations

directives:
  - "This workflow is an explicit order. All steps must be executed as written. Do not improvise, skip, or treat steps as optional."
  - "The time call is required to ensure the agent is aware of the real current date/time, not its model cutoff."
  - "Load all relevant rules, standards, and compliance requirements before proceeding."

references:
  Profile: .cursor/profiles/ai_sdlc_code_generation_agent_profile.yml
  Output_Template: .cursor/templates/ai_sdlc_code_generation_output_template.yml
  Documentation: [docs/standards/ai_sdlc_code_generation_workflow.md]

phases:
  profile_initialization:
    description: "Load the agent profile, perform a time check, and load foundational rules and standards."
    tools: [read_file, fetch_rules, mcp_time_current_time]
    steps:
      - tool: mcp_time_current_time
        validation: time_checked
      - tool: read_file
        params:
          target_file: .cursor/profiles/ai_sdlc_code_generation_agent_profile.yml
        validation: agent_profile_loaded
      - tool: fetch_rules
        params:
          rule_names: ["002-tool-usage-and-optimize", "200-project-design-and-dev-process", "501-tool-operation-validation", "800-development-best-practices", "300-documentation-standards"]
        validation: foundational_rules_loaded
    gates: [time_checked, agent_profile_loaded, foundational_rules_loaded]

  requirements:
    description: "Capture and clarify user prompt, gather requirements, and define acceptance criteria."
    tools: [prompt_user, edit_file]
    steps:
      - prompt_intake → requirements_clarification → requirements_documented
      - acceptance_criteria_definition → criteria_documented
    gates: [requirements_documented, criteria_documented]

  design:
    description: "Generate technical and functional design, including architecture, interfaces, and data models."
    tools: [edit_file, create_diagram]
    steps:
      - design_spec_drafting → design_spec_created
      - architecture_diagram_generation → diagrams_created
      - interface_and_data_model_definition → interfaces_documented
    gates: [design_spec_created, diagrams_created, interfaces_documented]

  implementation:
    description: "Generate application code, configuration, and supporting scripts."
    tools: [edit_file]
    steps:
      - code_generation → code_created
      - config_and_script_generation → config_and_scripts_created
    gates: [code_created, config_and_scripts_created]

  testing:
    description: "Generate and execute tests (unit, integration, end-to-end). Validate code quality and coverage."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - test_code_generation → tests_created
      - test_execution → tests_executed
      - coverage_and_quality_validation → tests_validated
    gates: [tests_created, tests_executed, tests_validated]

  security_and_review:
    description: "Perform security analysis, code review, and standards compliance checks."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - static_analysis_and_linting → static_analysis_passed
      - security_scan → security_scan_passed
      - code_review → review_completed
    gates: [static_analysis_passed, security_scan_passed, review_completed]

  deployment:
    description: "Package and deploy the application to the target environment."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - packaging_and_artifact_generation → artifacts_created
      - deployment_execution → deployment_completed
    gates: [artifacts_created, deployment_completed]

  monitoring_and_iteration:
    description: "Set up monitoring, collect feedback, and iterate for improvements."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - monitoring_setup → monitoring_enabled
      - feedback_collection → feedback_documented
      - iteration_and_improvement → iteration_completed
    gates: [monitoring_enabled, feedback_documented, iteration_completed]

  documentation:
    description: "Document the workflow, agent profile, and all generated artifacts. Commit all changes to git."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - tool: edit_file
        params:
          target_file: docs/standards/ai_sdlc_code_generation_workflow.md
          code_edit: generated_workflow_doc_from_template
        validation: workflow_doc_created
      - tool: run_terminal_cmd
        params:
          command: "git add . && git commit -m 'Add AI SDLC code generation workflow, agent profile, templates, and documentation.'"
          is_background: false
        validation: git_commit_successful
    gates: [workflow_doc_created, git_commit_successful]

failure_prevention:
  avoid:
    - unclear_purpose
    - missing_phases
    - incomplete_validation
    - undocumented_workflow
    - standards_noncompliance
    - vague_queries
    - ambiguous_paths
    - uncommitted_changes
    - skipped_steps
    - missing_time_call
    - insufficient_iteration
  require:
    - purpose_clearly_defined
    - phases_and_steps_mapped
    - validation_criteria_explicit
    - workflow_documented
    - standards_compliance
    - actionable_queries
    - explicit_paths
    - git_commit_successful
    - workflow_refined_to_point_of_diminishing_returns

success_validation:
  before_completion:
    - requirements_documented
    - design_spec_created
    - code_created
    - tests_validated
    - static_analysis_passed
    - security_scan_passed
    - deployment_completed
    - monitoring_enabled
    - workflow_doc_created
    - git_commit_successful
  output_requirements: application_code_and_artifacts_in_standard_locations
