# PYTHON INTERFACE GENERATION WORKFLOW

expectation: validated_python_interface_generation_workflow_and_outputs
autonomous_mode: true
max_parallelism: true
batching_enabled: true
plan_ahead: true
combine_and_chain_steps: true
completion: workflow_yaml_profile_templates_and_documentation_in_standard_locations

references:
  Agent_Profile: .cursor/profiles/python_interface_generation_agent_profile.yml
  Output_Template: .cursor/templates/python_interface_generation_output_template.yml
  Documentation: docs/standards/python_interface_generation_workflow.md
  Generation_Report: docs/standards/python_interface_generation_generation_report.md

phases:
  profile_initialization:
    description: "Load and assume the agent profile, check time, and load foundational rules."
    tools: [read_file, fetch_rules, mcp_time_current_time]
    steps:
      - parallel_batch:
          - tool: mcp_time_current_time
            validation: time_checked
          - tool: read_file
            params:
              target_file: .cursor/profiles/python_interface_generation_agent_profile.yml
            validation: agent_profile_loaded
          - tool: fetch_rules
            params:
              rule_names:
                - "002-tool-usage-and-optimize"
                - "200-project-design-and-dev-process"
                - "501-tool-operation-validation"
                - "800-development-best-practices"
                - "300-documentation-standards"
            validation: foundational_rules_loaded
    gates:
      - time_checked
      - agent_profile_loaded
      - foundational_rules_loaded

  intake:
    description: "Capture the purpose, scope, and requirements for Python interface generation from API specs."
    tools: [fetch_rules]
    steps:
      - batch:
          - intention_analysis → workflow_request → workflow_purpose_identified
          - context_capture → use_case_analysis → requirements_documented
    gates:
      - workflow_purpose_identified
      - requirements_documented

  research:
    description: |
      Batch research on:
        1. Python API client/interface generation best practices (OpenAPI, GraphQL, REST)
        2. Type safety and type hinting in Python interfaces
        3. Interface design for multi-agent/multi-app systems
        4. Error handling and input validation in Python clients
        5. Sync/async interface patterns
        6. Dependency injection/adapters for HTTP clients
        7. Documentation and testing standards for Python interfaces
      Run parallel web searches, scrape up to 3 high-value URLs per topic, check tech docs/research papers, synthesize findings into a research reference.
    tools: [mcp_web_search_brave_web_search, mcp_web_scraping_firecrawl_scrape, tech_docs, research_papers, read_file, edit_file]
    steps:
      - batch_parallel_web_searches_and_scraping → all_sources_scraped
      - batch_tech_docs_and_papers_if_needed → docs_and_papers_retrieved
      - synthesize_and_document_research_results_in_one_step → comprehensive_reference_document_created
      - tool: read_file
        params:
          target_file: .cursor/templates/research_reference_template.md
        validation: research_reference_template_loaded
      - tool: edit_file
        params:
          target_file: docs/research/python_interface_generation_research_reference.md
          code_edit: generated_research_reference_doc_based_on_template
        validation: research_reference_doc_saved
    gates:
      - all_sources_scraped
      - docs_and_papers_retrieved
      - comprehensive_reference_document_created
      - research_reference_template_loaded
      - research_reference_doc_saved

  design:
    description: "Map out workflow phases for: spec parsing, interface drafting, validation, testing, documentation. Define validation gates."
    tools: [fetch_rules, edit_file]
    steps:
      - batch:
          - workflow_mapping → phases_and_steps_defined
          - validation_criteria → gates_and_success_conditions_defined
          - create_agent_profile_for_workflow → agent_profile_created
    gates:
      - phases_defined
      - validation_criteria_defined
      - agent_profile_created

  drafting:
    description: "Draft and save the agent profile, workflow YAML, and output template in standard locations."
    tools: [edit_file, read_file]
    steps:
      - batch_parallel_file_creations_and_validations:
          - tool: edit_file
            params:
              target_file: .cursor/profiles/python_interface_generation_agent_profile.yml
              code_edit: generated_agent_profile_yaml
            validation: agent_profile_created
          - tool: read_file
            params:
              target_file: .cursor/templates/python_interface_generation_output_template.yml
            validation: workflow_output_template_loaded
          - tool: edit_file
            params:
              target_file: .cursor/workflows/python_interface_generation.yml
              code_edit: generated_workflow_yaml_from_template_with_agent_profile_reference
            validation: workflow_yaml_created
          - tool: edit_file
            params:
              target_file: .cursor/templates/python_interface_generation_output_template.yml
              code_edit: generated_output_template
            validation: output_template_created
          - tool: read_file
            params:
              target_file: .cursor/workflows/python_interface_generation.yml
            validation: workflow_yaml_loaded_for_reference_check
          - validate_agent_profile_reference_in_workflow_yaml → agent_profile_reference_validated
    gates:
      - agent_profile_created
      - workflow_output_template_loaded
      - workflow_yaml_created
      - output_template_created
      - agent_profile_reference_validated

  review:
    description: "Batch review for completeness, clarity, and standards compliance."
    tools: [read_file, fetch_rules]
    steps:
      - batch:
          - tool: read_file
            params:
              target_file: .cursor/workflows/python_interface_generation.yml
            validation: workflow_reviewed
          - checklist_review:
              - phases_present
              - validation_gates
              - actionable_steps
              - template_used
              - standards_referenced
            validation: compliance_confirmed
    gates:
      - workflow_reviewed
      - compliance_confirmed

  iterative_refinement:
    description: "Iteratively review and refine the workflow until only minimal improvements remain. Document rationale for stopping."
    tools: [read_file, edit_file]
    steps:
      - batch_review_and_update_until_diminishing_returns → workflow_refined_to_point_of_diminishing_returns
    gates:
      - workflow_refined_to_point_of_diminishing_returns

  linting:
    description: "Batch lint/validate YAML, Python, Markdown, and JSON files with auto-fix where possible."
    tools: [run_terminal_cmd]
    steps:
      - batch_lint_and_autofix_all_files
    gates:
      - yaml_linting_passed
      - markdown_linting_passed
      - python_linting_passed
      - shell_linting_passed
      - json_linting_passed

  documentation:
    description: "Generate workflow documentation in docs/standards/, commit all changes to git."
    tools: [edit_file, run_terminal_cmd, fetch_rules]
    steps:
      - batch:
          - tool: edit_file
            params:
              target_file: docs/standards/python_interface_generation_workflow.md
              code_edit: generated_workflow_doc_from_template
            validation: workflow_doc_created
          - tool: run_terminal_cmd
            params:
              command: "git add . && git commit -m 'Add new/updated Python interface generation workflow, agent profile, templates, and documentation.'"
              is_background: false
            validation: git_commit_successful
    gates:
      - workflow_doc_created
      - git_commit_successful

  generation_report:
    description: "Generate a Markdown report summarizing the workflow, generated files, and a Mermaid diagram of the workflow structure."
    tools: [edit_file]
    steps:
      - tool: edit_file
        params:
          target_file: docs/standards/python_interface_generation_generation_report.md
          code_edit: generated_report_content_based_on_template
        validation: generation_report_saved
    gates:
      - generation_report_saved

failure_prevention:
  avoid:
    - unclear_purpose
    - missing_phases
    - incomplete_validation
    - undocumented_workflow
    - standards_noncompliance
    - vague_queries
    - ambiguous_paths
    - uncommitted_changes
    - skipped_steps
    - missing_time_call
    - insufficient_iteration
  require:
    - purpose_clearly_defined
    - phases_and_steps_mapped
    - validation_criteria_explicit
    - workflow_documented
    - standards_compliance
    - actionable_queries
    - explicit_paths
    - git_commit_successful
    - workflow_refined_to_point_of_diminishing_returns

success_validation:
  before_completion:
    - workflow_yaml_created
    - workflow_doc_created
    - agent_profile_created
    - output_template_created
    - compliance_confirmed
    - workflow_refined_to_point_of_diminishing_returns
    - git_commit_successful
    - generation_report_saved
  output_requirements: workflow_yaml_profile_templates_and_documentation_in_standard_locations
