# PYTHON SOLUTION GENERATION WORKFLOW

expectation: validated_python_solution_generation_workflow
completion: workflow_yaml_profile_templates_and_documentation_in_standard_locations

directives:
  - "This workflow is an explicit order. All steps must be executed as written. Do not improvise, skip, or treat steps as optional."
  - "The time call is required to ensure the agent is aware of the real current date/time, not its model cutoff."
  - "Load all relevant rules, standards, and compliance requirements before proceeding."

references:
  Profile: .cursor/profiles/python_solution_generation_agent_profile.yml
  Output_Template: .cursor/templates/python_solution_generation_output_template.yml
  Research_Reference_Template: .cursor/templates/research_reference_template.md
  Documentation: docs/standards/python_solution_generation_workflow.md
  Standards: [PEP8, PEP257, PEP484, flake8, black, mypy, pytest, Sphinx, GitHub Actions]

phases:
  profile_initialization:
    description: "Load the workflow agent profile, perform a time check, and foundational rules for Python development."
    tools: [read_file, fetch_rules, mcp_time_current_time]
    steps:
      - tool: mcp_time_current_time
        validation: time_checked
      - tool: read_file
        params:
          target_file: .cursor/profiles/python_solution_generation_agent_profile.yml
        validation: agent_profile_loaded
      - tool: fetch_rules
        params:
          rule_names: [800-development-best-practices, 803-python-dev-standards, 300-documentation-standards, 501-tool-operation-validation]
        validation: foundational_rules_loaded
    gates: [time_checked, agent_profile_loaded, foundational_rules_loaded]

  intake:
    description: "Capture the project_name and requirements for random and custom Python solution generation."
    tools: [prompt_user]
    steps:
      - intention_analysis → workflow_request → workflow_purpose_identified
      - context_capture → use_case_analysis → requirements_documented
      - prompt_for_project_name → project_name_captured
    gates: [workflow_purpose_identified, requirements_documented, project_name_captured]

  solution_generation:
    description: "Generate a random and custom Python-based solution in src/applications/<project_name>."
    tools: [edit_file, random, custom_logic_generator]
    steps:
      - generate_random_python_logic → random_logic_generated
      - generate_custom_python_logic → custom_logic_generated
      - tool: edit_file
        params:
          target_file: src/applications/<project_name>/main.py
          code_edit: generated_random_and_custom_python_solution
        validation: python_solution_saved
    gates: [random_logic_generated, custom_logic_generated, python_solution_saved]

  quality_assurance:
    description: "Lint, type-check, and test the generated Python solution."
    tools: [run_terminal_cmd]
    steps:
      - run: black src/applications/<project_name>/main.py
      - run: flake8 src/applications/<project_name>/main.py
      - run: mypy src/applications/<project_name>/main.py
      - run: pytest src/applications/<project_name>/
    gates: [python_linting_passed, type_checking_passed, tests_passed]

  documentation:
    description: "Generate and save documentation for the generated Python solution."
    tools: [edit_file, sphinx]
    steps:
      - tool: edit_file
        params:
          target_file: src/applications/<project_name>/README.md
          code_edit: generated_solution_documentation
        validation: documentation_saved
      - run: sphinx-build -b html docs/source docs/build
    gates: [documentation_saved, docs_built]

  git_commit:
    description: "Commit all new and modified files to git."
    tools: [run_terminal_cmd]
    steps:
      - tool: run_terminal_cmd
        params:
          command: "git add . && git commit -m 'Add random and custom Python solution for <project_name>.'"
          is_background: false
        validation: git_commit_successful
    gates: [git_commit_successful]

failure_prevention:
  avoid:
    - unclear_purpose
    - missing_phases
    - incomplete_validation
    - undocumented_workflow
    - standards_noncompliance
    - vague_queries
    - ambiguous_paths
    - uncommitted_changes
    - skipped_steps
    - missing_time_call
    - insufficient_iteration
  require:
    - purpose_clearly_defined
    - phases_and_steps_mapped
    - validation_criteria_explicit
    - workflow_documented
    - standards_compliance
    - actionable_queries
    - explicit_paths
    - git_commit_successful
    - workflow_refined_to_point_of_diminishing_returns

success_validation:
  before_completion:
    - workflow_yaml_created
    - workflow_doc_created
    - agent_profile_created
    - output_template_created
    - compliance_confirmed
    - workflow_refined_to_point_of_diminishing_returns
    - git_commit_successful
    - generation_report_saved
  output_requirements: workflow_yaml_profile_templates_and_documentation_in_standard_locations
