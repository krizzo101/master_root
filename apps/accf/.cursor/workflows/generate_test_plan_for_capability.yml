# GENERATE TEST PLAN FOR CAPABILITY WORKFLOW

expectation: test_plan_generated_and_saved_in_standard_format
completion: test_plan_file_created_and_committed

directives:
  - "This workflow must be followed exactly. Do not skip or improvise steps."
  - "The agent must operate in fully autonomous, persistent mode."
  - "All outputs must follow test plan documentation standards and be saved in /home/opsvi/agent_world/docs/applications/ACCF/testing/."
  - "Validate all operations and document every major capability or feature."

references:
  Profile: .cursor/profiles/generate_test_plan_for_capability_agent_profile.yml
  Output_Template: .cursor/templates/generate_test_plan_for_capability_output_template.yml
  Standards: [https://www.qatouch.com/blog/software-test-plan-template/]

phases:
  profile_initialization:
    description: "Load the agent profile, perform a time check, and load foundational rules."
    tools: [read_file, fetch_rules, mcp_time_current_time]
    steps:
      - tool: mcp_time_current_time
        validation: time_checked
      - tool: read_file
        params:
          target_file: .cursor/profiles/generate_test_plan_for_capability_agent_profile.yml
        validation: agent_profile_loaded
      - tool: fetch_rules
        params:
          rule_names:
            - "002-tool-usage-and-optimize"
            - "200-project-design-and-dev-process"
            - "501-tool-operation-validation"
            - "300-documentation-standards"
        validation: foundational_rules_loaded
    gates: [time_checked, agent_profile_loaded, foundational_rules_loaded]

  intake:
    description: "Capture the capability or feature spec and intended output filename."
    tools: [prompt_user]
    steps:
      - intention_analysis → test_plan_request → test_plan_context_identified
      - context_capture → filename_analysis → test_plan_filename_confirmed
    gates: [test_plan_context_identified, test_plan_filename_confirmed]

  input_validation:
    description: "Validate the capability/feature spec and filename."
    tools: [prompt_user]
    steps:
      - validate_context_completeness → context_validated
      - validate_filename_format → filename_validated
    gates: [context_validated, filename_validated]

  test_plan_generation:
    description: "Generate the structured test plan using the output template."
    tools: [edit_file, read_file]
    steps:
      - tool: read_file
        params:
          target_file: .cursor/templates/generate_test_plan_for_capability_output_template.yml
        validation: output_template_loaded
      - populate_template_with_context → test_plan_draft_created
      - tool: edit_file
        params:
          target_file: /home/opsvi/agent_world/docs/applications/ACCF/testing/[test_plan_filename].md
          code_edit: generated_test_plan_content
        validation: test_plan_file_created
    gates: [output_template_loaded, test_plan_draft_created, test_plan_file_created]

  review:
    description: "Review the generated test plan for completeness, standards compliance, and accuracy."
    tools: [read_file, fetch_rules]
    steps:
      - tool: read_file
        params:
          target_file: /home/opsvi/agent_world/docs/applications/ACCF/testing/[test_plan_filename].md
        validation: test_plan_reviewed
      - checklist_review:
          - standard_format
          - required_sections_present
          - actionable_test_cases_and_gates
          - coverage_and_risks
        validation: compliance_confirmed
    gates: [test_plan_reviewed, compliance_confirmed]

  linting:
    description: "Lint and auto-fix the test plan markdown file."
    tools: [run_terminal_cmd]
    steps:
      - tool: run_terminal_cmd
        params:
          command: "markdownlint-cli2 --fix /home/opsvi/agent_world/docs/applications/ACCF/testing/[test_plan_filename].md"
          is_background: false
        validation: linting_passed
    gates: [linting_passed]

  documentation:
    description: "Document the workflow execution and commit the test plan."
    tools: [edit_file, run_terminal_cmd]
    steps:
      - tool: edit_file
        params:
          target_file: docs/applications/ACCF/standards/generate_test_plan_for_capability_workflow.md
          code_edit: generated_workflow_documentation
        validation: workflow_doc_created
      - tool: run_terminal_cmd
        params:
          command: "git add . && git commit -m 'Add/update test plan: [test_plan_filename]'"
          is_background: false
        validation: git_commit_successful
    gates: [workflow_doc_created, git_commit_successful]
