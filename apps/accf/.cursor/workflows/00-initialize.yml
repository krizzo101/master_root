# COMPREHENSIVE STARTUP WORKFLOW - REFINED CORE

trigger_keywords: [startup, initialize]

phases:
  multi_agent_coordination:
    description: "Multi-agent coordination and session registration"
    operations:
      - tool: "read_file"
        target_file: ".cursor/ACTIVE_CHANGES.md"
        start_line_one_indexed: 1
        end_line_one_indexed: 50
        should_read_entire_file: false
        explanation: "Load active changes to coordinate with ongoing work"

      - tool: "read_file"
        target_file: ".cursor/ACTIVE_AGENTS.yml"
        start_line_one_indexed: 1
        end_line_one_indexed: 50
        should_read_entire_file: false
        explanation: "Check for active agent sessions to prevent conflicts"

      - tool: "mcp_cognitive_tools_arango_modify"
        operation: "insert"
        collection: "ide_state"
        document:
          type: "agent_session_registration"
          coordination_status: "active_changes_loaded"
          session_context: "startup workflow execution"
        explanation: "Register agent session for multi-agent coordination"

  environment_assessment:
    description: "Parallel environment discovery and system validation"
    operations:
      - tool: "list_dir"
        path: "."

      - command: "pwd && git log --oneline -5 && git status --porcelain && git diff --name-only"
        explanation: "MANDATORY git safety assessment before any operations - multi-agent conflict detection"
        safety_validation_required:
          - "Check git status --porcelain for uncommitted changes from other agents"
          - "Identify modified files via git diff --name-only"
          - "Document findings before any file operations"
          - "NEVER auto-commit - assessment and documentation only"

      - tool: "mcp_cognitive_tools_arango_manage"
        action: "health"

      - tool: "mcp_time_current_time"
        format: "YYYY-MM-DD HH:mm:ss"

      - command: "python scripts/dependency_mapper.py --format summary --quiet"
        explanation: "Validate all file references and protocol dependencies"

  external_tools_integration:
    description: "Conditional integration of external analysis tools"
    operations:
      - command: "if command -v semgrep >/dev/null 2>&1; then echo '✅ semgrep available'; semgrep --config=auto --severity=ERROR --quiet . || true; else echo '⚠️ semgrep not available, skipping security analysis'; fi"
        explanation: "Conditional security analysis with semgrep"

      - command: "if command -v madge >/dev/null 2>&1; then echo '✅ madge available'; madge --circular . || true; else echo '⚠️ madge not available, skipping circular dependency check'; fi"
        explanation: "Conditional circular dependency detection"

      - command: "if command -v depcruise >/dev/null 2>&1; then echo '✅ dependency-cruiser available'; depcruise --validate . || true; else echo '⚠️ dependency-cruiser not available, skipping advanced validation'; fi"
        explanation: "Conditional advanced dependency validation"

      - command: "if command -v skott >/dev/null 2>&1; then echo '✅ skott available'; skott --no-open . || true; else echo '⚠️ skott not available, skipping dependency graph'; fi"
        explanation: "Conditional dependency graph analysis"

  critical_knowledge_loading:
    description: "Parallel knowledge ecosystem loading"
    operations:
      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "rules"
        content: "workflow enforcement mandatory"
        limit: 8

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "research_docs"
        content: "trigger system analysis framework"
        limit: 12

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "research_docs"
        content: "analysis synthesis framework"
        limit: 6

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "recent"
        collection: "ide_state"
        hours: 48
        limit: 6

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "research_docs"
        content: "documentation reference guide"
        limit: 8

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "heuristics"
        content: "operational pattern"
        limit: 5

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "research_docs"
        content: "protocol"
        limit: 5

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "heuristics"
        content: "analysis"
        limit: 3

  project_context_loading:
    description: "Parallel project specifications and current state"
    operations:
      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "research_docs"
        content: "specification"
        limit: 4

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "recent"
        collection: "metrics"
        hours: 168
        limit: 5

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "modules"
        content: "analysis"
        limit: 4

      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "tasks"
        content: "priority analysis"
        limit: 3

  fix_history_analysis:
    description: "Check for recurring issues and trigger root cause analysis if needed"
    operations:
      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "recent"
        collection: "metrics"
        hours: 720
        limit: 10

  operational_intelligence_generation:
    description: "Process loaded knowledge into operational awareness"
    operations:
      - tool: "mcp_cognitive_tools_arango_modify"
        operation: "insert"
        collection: "ide_state"
        document:
          type: "agent_operational_intelligence"
          session_id: "startup_session"
          dynamic_knowledge_analysis:
            critical_priority_items: "extracted from loaded knowledge"
            behavioral_patterns_discovered: "NEVER|ALWAYS|IMMEDIATELY|STOP patterns and triggers"
            high_relevance_items: "content matches identified"
            validation_required_items: "test|verify|check|validate patterns"
            knowledge_gaps_identified: "missing areas detected"
          operational_readiness_derived:
            capabilities_inferred: "extracted from loaded knowledge"
            constraints_identified: "extracted from loaded knowledge"
            protocols_activated: "protocol names extracted"
          agent_self_awareness_directives:
            immediate_behavioral_changes: "must|required|protocol|directive patterns"
            continuous_monitoring_requirements: "monitoring patterns extracted"

  error_issue_reporting:
    description: "Comprehensive error, concern, and issue reporting during startup"
    operations:
      - command: "python scripts/dependency_mapper.py --format summary --quiet"
        explanation: "Check for inconsistencies in documentation, code, and configuration"

      - tool: "mcp_cognitive_tools_arango_modify"
        operation: "insert"
        collection: "metrics"
        document:
          type: "startup_error_report"
          session_id: "startup_session"
          error_analysis:
            critical_errors: "listed and categorized"
            high_priority_concerns: "identified and documented"
            medium_priority_issues: "cataloged for attention"
            configuration_inconsistencies: "detected and reported"
            broken_references: "found and flagged"
            deprecated_patterns_found: "identified for updating"
            recurring_issue_alerts: "detected for root cause analysis"
          recommendations:
            immediate_actions_required: "generated from analysis"
            root_cause_investigations_needed: "identified from patterns"
            preventive_measures_suggested: "recommended improvements"
            monitoring_requirements: "ongoing surveillance needs"

  readiness_validation:
    description: "Final session initialization and validation"
    operations:
      - tool: "mcp_cognitive_tools_arango_search"
        search_type: "content"
        collection: "rules"
        content: "validation startup ready"
        limit: 3

      - tool: "mcp_cognitive_tools_arango_modify"
        operation: "insert"
        collection: "ide_state"
        document:
          type: "startup_complete"
          session_id: "startup_session"
          comprehensive_preparation: true
          operational_intelligence_generated: true
          agent_ide_compatible: true
          ready_for_autonomous_operation: true
          dependency_validation_passed: true
          error_reporting_completed: true

# Protocol enforcement activation
protocol_enforcement_activation:
  description: "Load and activate operational enforcement protocols for systematic behavior"
  steps:
    - load_protocol: ".cursor/protocols/operational-enforcement.md"
      purpose: "Establish systematic KB maintenance and protocol compliance"
      validation: enforcement_patterns_loaded
    - load_protocol: ".cursor/protocols/knowledge-capture.md"
      purpose: "Enable systematic knowledge capture and correction"
      validation: knowledge_management_active
    - load_protocol: ".cursor/protocols/root-cause-analysis.md"
      purpose: "Enable systematic root cause analysis for recurring issues"
      validation: root_cause_analysis_active

# Dependency validation system
dependency_validation:
  description: "Comprehensive dependency scanning and validation"
  steps:
    - scan_file_references:
        patterns: [".cursor/protocols/*", ".cursor/rules/*", ".cursor/workflows/*"]
        validate_existence: true
    - check_protocol_references:
        workflow_files: ".cursor/workflows/*.yml"
        protocol_files: ".cursor/protocols/*.md"
    - validate_rule_references:
        check_fetch_rules_compatibility: true
        scan_for_broken_references: true
    - check_capability_consistency:
        compare_documentation_vs_implementation: true
        flag_conflicting_claims: true
    - generate_dependency_map:
        output_location: ".cursor/dependency_map.json"
        include_reverse_dependencies: true

success_criteria:
  - database_health_acceptable
  - enforcement_protocols_active
  - knowledge_context_loaded
  - operational_intelligence_generated
  - dependency_validation_passed
  - error_reporting_completed
  - no_critical_errors_blocking_operation

output_requirements:
  - agent_ready_with_systematic_enforcement_knowledge_context_operational_intelligence
  - comprehensive_error_and_issue_report_generated
  - dependency_validation_completed
  - recurring_issue_analysis_completed
