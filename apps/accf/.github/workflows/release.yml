name: Release Management

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install python-semantic-release
          pip install -r requirements.txt

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual release with specified type
            semantic-release publish --build-metadata ${{ github.run_id }} --prerelease
          else
            # Automatic release based on commit messages
            semantic-release publish --build-metadata ${{ github.run_id }}
          fi

      - name: Get Release Version
        id: get_version
        run: |
          VERSION=$(semantic-release print-version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Build and Push Docker Image
        if: steps.get_version.outputs.version != ''
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          # Build multi-platform image
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ github.repository }}:$VERSION \
            --tag ghcr.io/${{ github.repository }}:latest \
            --push .

          echo "Docker image pushed: ghcr.io/${{ github.repository }}:$VERSION"

      - name: Create Release Notes
        if: steps.get_version.outputs.version != ''
        run: |
          VERSION=${{ steps.get_version.outputs.version }}

          # Generate release notes
          cat > RELEASE_NOTES.md << EOF
          # Release Notes - v$VERSION

          ## 🚀 What's New

          ### Features
          - List new features here

          ### Improvements
          - List improvements here

          ### Bug Fixes
          - List bug fixes here

          ## 🔧 Technical Details

          ### Performance
          - Test Coverage: TBD%
          - Mutation Score: TBD%
          - Response Time: P95 < 250ms @ 250 RPS

          ### Security
          - No critical vulnerabilities
          - All security scans passed

          ## 🚀 Deployment

          ### Docker Image
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`

          ### Environment Variables
          \`\`\`env
          # Update your .env file with any new variables
          \`\`\`

          ## 📊 Metrics

          - **Build Time**: ${{ github.run_duration }} seconds
          - **Quality Gates**: ✅ All passed
          - **Security Scan**: ✅ No critical issues
          - **Test Coverage**: TBD%

          ## 🔄 Migration Guide

          ### Breaking Changes
          - None in this release

          ### Upgrade Steps
          1. Pull the latest Docker image
          2. Update environment variables if needed
          3. Restart the application

          ## 📞 Support

          - **Documentation**: [Read the Docs](https://accf-research-agent.readthedocs.io/)
          - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - **Discussions**: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)

          ---

          Generated automatically on $(date)
          EOF

      - name: Create GitHub Release
        if: steps.get_version.outputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Deploy to Production
        if: steps.get_version.outputs.version != ''
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Deploying version $VERSION to production..."

          # Add deployment logic here
          # This could be:
          # - AWS ECS deployment
          # - Kubernetes deployment
          # - Cloud Run deployment
          # - Custom deployment script

          echo "Deployment completed successfully"

      - name: Notify Team
        if: always()
        run: |
          if [ "${{ steps.get_version.outputs.version }}" != "" ]; then
            echo "✅ Release v${{ steps.get_version.outputs.version }} completed successfully"
          else
            echo "ℹ️  No new release created"
          fi

          # Add notification logic here (Slack, Discord, etc.)

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [semantic-release]

    steps:
      - name: Rollback Deployment
        run: |
          echo "🚨 Release failed - initiating rollback..."

          # Add rollback logic here
          # This could be:
          # - Revert to previous Docker image
          # - Restore from backup
          # - Manual intervention required

          echo "Rollback completed"

      - name: Notify Rollback
        run: |
          echo "🚨 Release rollback completed - manual review required"
          # Add notification logic here