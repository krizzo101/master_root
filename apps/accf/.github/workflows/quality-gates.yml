name: Quality Gates

on:
  workflow_run:
    workflows: ["Research Agent CI/CD"]
    types: [completed]

jobs:
  quality-assessment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./test-results

      - name: Quality Gate Analysis
        run: |
          echo "=== Quality Gate Assessment ==="

          # Check if test results exist
          if [ ! -f "./test-results/coverage.xml" ]; then
            echo "❌ Coverage report not found"
            exit 1
          fi

          # Coverage threshold check (minimum 60%)
          COVERAGE=$(grep -o 'TOTAL.*[0-9]*%' ./test-results/coverage.xml | grep -o '[0-9]*%' | sed 's/%//')
          echo "📊 Test Coverage: $COVERAGE%"

          if [ "$COVERAGE" -lt 60 ]; then
            echo "❌ Quality Gate Failed: Coverage below 60% threshold"
            exit 1
          fi

          # Security check
          if [ -f "./test-results/safety-report.json" ]; then
            CRITICAL_ISSUES=$(jq '.vulnerabilities[] | select(.severity == "CRITICAL") | .id' ./test-results/safety-report.json | wc -l)
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "❌ Quality Gate Failed: Critical security vulnerabilities found"
              exit 1
            fi
          fi

          # Performance check (if applicable)
          if [ -f "./test-results/performance.json" ]; then
            RESPONSE_TIME=$(jq '.p95_response_time' ./test-results/performance.json)
            if (( $(echo "$RESPONSE_TIME > 250" | bc -l) )); then
              echo "⚠️  Warning: P95 response time exceeds 250ms: ${RESPONSE_TIME}ms"
            fi
          fi

          echo "✅ All quality gates passed"
          echo "📈 Coverage: $COVERAGE%"
          echo "🔒 Security: No critical vulnerabilities"
          echo "⚡ Performance: Within acceptable limits"

      - name: Create Quality Report
        run: |
          cat > quality-report.md << EOF
          # Quality Gate Report

          ## Summary
          - **Status**: ✅ PASSED
          - **Coverage**: $COVERAGE%
          - **Security**: ✅ No critical issues
          - **Performance**: ✅ Within limits

          ## Details
          - Test coverage meets minimum threshold of 60%
          - No critical security vulnerabilities detected
          - All quality gates successfully passed

          Generated: $(date)
          EOF

      - name: Upload Quality Report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.md

  notify-team:
    runs-on: ubuntu-latest
    needs: [quality-assessment]
    if: always()

    steps:
      - name: Quality Gate Status
        run: |
          if [ "${{ needs.quality-assessment.result }}" == "success" ]; then
            echo "✅ Quality gates passed successfully"
          else
            echo "❌ Quality gates failed"
          fi

      # Add Slack/Discord notifications here if needed
      - name: Notify on Failure
        if: needs.quality-assessment.result == 'failure'
        run: |
          echo "Quality gates failed - manual review required"
          # Add notification logic here