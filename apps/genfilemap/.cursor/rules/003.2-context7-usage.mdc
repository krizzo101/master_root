---
description:
globs:
alwaysApply: true
---
# Context7 Documentation Usage - v1.0

## Purpose &Importance

Context7 provides access to current library documentation, which is essential due to:

- Training data cutoff limitations
- Frequent API changes and deprecations
- New features and best practices
- Security updates and vulnerability mitigations

Documentation consultation through Context7 is MANDATORY before:

- Writing code using external libraries
- Answering questions about library capabilities
- Recommending implementation approaches
- Troubleshooting library-related issues

## Available Tools

The Context7 MCP server provides two primary tools:

1. **resolve-library-id**

   - Translates general library names to Context7-compatible IDs
   - Must be called first before retrieving documentation
   - Example: "react" â†’ "vercel/nextjs"

2. **get-library-docs**
   - Retrieves current documentation for a specific library
   - Requires the Context7-compatible ID from resolve-library-id
   - Can focus on specific topics through parameters
   - Allows controlling token usage through parameters

## Implementation Process

### 1. Library Resolution

ALWAYS begin by resolving the library name:

```
mcp_context7_resolve-library-id(
    libraryName: "library-name"
)
```

Key considerations:

- Use generic names (e.g., "react", "express", "mongodb")
- Check if the returned library ID matches your expected library
- If the resolution fails, try alternative names or formats
- Document the library ID for future reference

### 2. Documentation Retrieval

AFTER resolving the library ID, retrieve documentation:

```
mcp_context7_get-library-docs(
    context7CompatibleLibraryID: "resolved-library-id",
    topic: "optional-specific-topic",
    tokens: appropriate-token-count
)
```

Token considerations:

- Default: 5000 tokens (sufficient for basic documentation)
- Complex libraries: 8000-10000 tokens
- Specific features: 3000-5000 tokens with focused topic
- Balance comprehensive documentation with token efficiency

### 3. Documentation Analysis

AFTER retrieving documentation:

- SCAN for current API signatures and parameters
- IDENTIFY deprecated features and alternatives
- NOTE version-specific information
- EXTRACT relevant code examples
- VERIFY compatibility with project requirements

### 4. Implementation Integration

WHILE implementing solutions:

- REFERENCE documentation for correct parameter order and types
- FOLLOW current best practices identified in documentation
- IMPLEMENT recommended error handling approaches
- UTILIZE documented performance optimizations
- AVOID deprecated or discouraged patterns

## Common Failure Points

1. **Resolution Failures**

   - PROBLEM: Library name not recognized
   - SOLUTION: Try alternative names, check for typos, or use web search to find the correct name

2. **Insufficient Documentation**

   - PROBLEM: Retrieved documentation lacks necessary details
   - SOLUTION: Increase token limit, refine topic focus, or make multiple targeted requests

3. **Version Mismatches**

   - PROBLEM: Documentation may cover multiple versions
   - SOLUTION: Pay attention to version indicators and compatibility notes

4. **Implementation Gaps**
   - PROBLEM: Documentation explains "what" but not "how"
   - SOLUTION: Look for examples section or make additional requests focused on examples

## Specific Library Types

### React/Frontend Libraries

- FOCUS on hooks usage and functional components
- VERIFY prop types and component interfaces
- CHECK for Server Components vs. Client Components distinctions
- IDENTIFY hydration requirements

### Backend/Server Libraries

- VERIFY middleware organization and execution order
- CHECK authentication and security best practices
- NOTE performance considerations and scaling guidance
- IDENTIFY database interaction patterns

### Database Libraries

- FOCUS on connection management
- VERIFY transaction handling
- CHECK query building and execution
- NOTE indexing and performance recommendations

### DevOps/Infrastructure Libraries

- VERIFY configuration options and formats
- CHECK for secrets management guidance
- NOTE compatibility with cloud providers
- IDENTIFY security hardening recommendations

## Best Practices

1. **Sequential Documentation Building**

   - Start with general documentation
   - Follow up with specific topic requests
   - Build a comprehensive understanding across multiple requests

2. **Documentation Verification**

   - Cross-check unclear points with web searches
   - Verify critical implementation details with multiple sources
   - Test example code to confirm understanding

3. **Version Awareness**

   - Note which version of the library the documentation covers
   - Check for breaking changes between versions
   - Ensure compatibility with other project dependencies

4. **Knowledge Persistence**

   - Store valuable documentation insights in memory
   - Reference documentation source in implementation comments
   - Document version-specific decisions

5. **Token Optimization**
   - Request only necessary documentation
   - Use focused topics for specific questions
   - Make multiple targeted requests rather than one large request

## Example Usage Patterns

### Basic Library Documentation

```
// Resolve React library ID
const reactLibraryId = await mcp_context7_resolve-library-id({
    libraryName: "react"
});

// Get general React documentation
const reactDocs = await mcp_context7_get-library-docs({
    context7CompatibleLibraryID: reactLibraryId,
    tokens: 8000
});

// Analyze documentation before implementation
```

### Focused Feature Documentation

```
// Resolve Express library ID
const expressLibraryId = await mcp_context7_resolve-library-id({
    libraryName: "express"
});

// Get specific middleware documentation
const middlewareDocs = await mcp_context7_get-library-docs({
    context7CompatibleLibraryID: expressLibraryId,
    topic: "middleware",
    tokens: 4000
});

// Implement middleware based on current best practices
```

### Troubleshooting Problems

```
// Resolve MongoDB library ID
const mongodbLibraryId = await mcp_context7_resolve-library-id({
    libraryName: "mongodb"
});

// Get connection error handling documentation
const connectionDocs = await mcp_context7_get-library-docs({
    context7CompatibleLibraryID: mongodbLibraryId,
    topic: "connection errors",
    tokens: 3000
});

// Implement robust error handling based on documentation
```

Always consider documentation retrieval an essential first step, not an optional enhancement. Current documentation is the foundation of correct, maintainable, and secure implementations.
