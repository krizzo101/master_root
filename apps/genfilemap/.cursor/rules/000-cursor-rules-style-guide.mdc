---
description: WHEN creating Cursor rule files TO ensure standardization and effectiveness YOU MUST follow this style guide
globs:
alwaysApply: false
---

{
"title": "Cursor IDE Rules Style Guide - AI-Optimized Format",
"sections": {
"core_rule_structure": {
"depth": 1,
"trigger": "rule-creation",
"rules": [
{"name": "Mandatory Rule Format","when": "creating or modifying any rule file","to": "ensure machine parseability and consistent enforcement","you_must": "structure each rule using a JSON object with explicit fields for 'when', 'to', 'you_must', and 'validation_criteria'","validation_criteria": ["Each rule must be a valid JSON object","Each rule must contain the fields: 'when', 'to', 'you_must', and 'validation_criteria' in this order","Field names must be lowercase and use underscores","JSON must be syntactically valid and machine-parseable","This format applies only to the content portion of the file, not the YAML frontmatter"],"compliant_example": {"when": "writing React components","to": "ensure readability","you_must": "use functional component syntax","validation_criteria": ["Component must be a function","No use of class syntax"]},"non_compliant_example": "React components should use functional syntax for better readability","dependencies": []},
{"name": "Rule Reference Format","when": "referencing other rule files in markdown","to": "ensure agents and the IDE can follow rule links correctly","you_must": "always use the [filename](mdc:...) markdown link format, not @filename, when referencing rules in prose or validation criteria","validation_criteria": ["All rule references in markdown use the [filename](mdc:...) format","No @filename references are present in rule files"],"compliant_example": "[000-core-rule-creation-process.mdc](mdc:.cursor/rules/000-core-rule-creation-process.mdc)","non_compliant_example": "@000-core-rule-creation-process.mdc","dependencies": []}
]
},
"file_structure_rules": {
"depth": 1,
"trigger": "file-creation",
"rules": [
{"name": "File Naming Convention","when": "creating new rule files","to": "maintain consistent organization and priority hierarchy","you_must": "follow these requirements: 1. Use kebab-case for filenames 2. Prefix with three-digit number indicating priority (lower number = higher priority) 3. Use .mdc.json.txt extension 4. Ensure filename describes rule purpose","validation_criteria": ["Pattern match: `[0-9]{3}-[a-z0-9-]+\\.mdc(\\.json\\.txt)?`","Priority ranges: 000-099 (core rules), 100-199 (language rules), 200+ (project-specific)"],"compliant_examples": ["001-typescript-standards.mdc.json.txt","042-react-component-structure.mdc.json.txt"],"non_compliant_examples": ["typescript_standards.mdc.json.txt // Missing priority prefix, uses underscore","01-react-rules.mdc.json.txt // Insufficient digits in prefix","200-JavaScriptGuidelines.mdc // Uses camelCase instead of kebab-case, incorrect extension"],"dependencies": []},
{"name": "Frontmatter Structure","when": "creating rule files","to": "enable proper machine parsing and rule application","you_must": "include properly formatted YAML frontmatter with required fields at the top of the file","validation_criteria": ["Must begin with `---` on the first line and end with `---` on a separate line after the frontmatter content","Must place each required field (description, globs, alwaysApply) on its own line between the opening and closing `---` markers","Must contain these fields: description, globs, alwaysApply","Must be followed by a valid JSON object containing the rule content","Must not include quotes in glob patterns"],"machine_readable_schema": {"type": "object","required": ["description", "globs", "alwaysApply"],"properties": {"description": { "type": "string", "minLength": 10, "maxLength": 120 },"globs": { "type": "string", "pattern": "^[^\\[\\]\"']_$" },"alwaysApply": { "type": "boolean" }}},"compliant_example": "---\ndescription: WHEN creating Cursor rule files TO ensure standardization and effectiveness YOU MUST follow this style guide\nglobs: .cursor/temp-rules/_.mdc.json.txt\nalwaysApply: false\n---\n{\n \"title\": \"Rule Content as JSON\"\n}","non_compliant_examples": ["---\ndescription:\nglobs: [\"src/**/*.ts\"]\n---"],"dependencies": []}
]
},
"content_structuring_rules": {
"depth": 2,
"trigger": "content-organization",
"rules": [
{"name": "Hierarchical Organization","when": "organizing rule content","to": "ensure machine parseability and logical structure","you_must": "use nested JSON objects and arrays to represent categories, subcategories, and individual rules","validation_criteria": ["Top-level keys for major categories","Arrays for lists of rules within categories","No skipped hierarchy levels"],"compliant_structure": {"category": {"subcategory": [{ "rule": "Specific Rule Name" }]}},"dependencies": ["Mandatory Rule Format"]},
{"name": "Rule Identification","when": "defining individual rules","to": "enable precise reference and enforcement","you_must": "provide each rule with a unique 'name' field and descriptive content","validation_criteria": ["Field: 'name' must be descriptive and unique within the file"],"compliant_example": { "name": "Component Prop Validation" },"dependencies": ["Hierarchical Organization"]},
{"name": "DEPTH Indicators","when": "organizing rule content","to": "clarify implementation priority and required depth","you_must": "add explicit 'depth' fields to all major sections","validation_criteria": ["Must use standardized depth indicators: 1, 2, 3, etc.","Must align depth level with implementation importance","Lower depth numbers (1) indicate higher priority and critical rules","Higher depth numbers (3+) indicate more detailed or specialized rules"],"compliant_examples": [{ "category": "MEMORY ARCHITECTURE", "depth": 3 },{ "category": "ERROR HANDLING", "depth": 2 }],"non_compliant_examples": [{ "category": "Memory Architecture", "depth": "depth 3" }],"dependencies": ["Hierarchical Organization"]},
{"name": "TRIGGER Annotations","when": "defining context-specific rule activation","to": "improve rule activation in appropriate scenarios","you_must": "add context-specific 'trigger' fields to relevant sections","validation_criteria": ["Must use standardized trigger format: 'event-name'","Must use descriptive trigger names that clearly indicate activation context","Triggers apply to rules within an already activated rules file, not for activating the file itself"],"compliant_examples": [{ "name": "mcp_context7 (Documentation)", "trigger": "library-implementation" },{ "name": "Error Handling", "depth": 2, "trigger": "error-encountered" }],"non_compliant_examples": [{ "name": "mcp_context7 (Documentation)", "trigger": "Triggers on library implementation" }],"dependencies": ["Hierarchical Organization", "DEPTH Indicators"]},
{"name": "Visual Organization","when": "structuring rule document content","to": "improve readability and information hierarchy","you_must": "implement consistent JSON structure and formatting","validation_criteria": ["Must use consistent object structures throughout","Must use arrays for lists of related items","Must apply consistent formatting for similar elements","Must use standardized property naming conventions","Must collapse complex rule lines into a single line to reduce total line count when possible"],"compliant_examples": [{"feature_comparison": [{"feature": "Feature A", "basic_usage": "Simple implementation", "advanced_usage": "Complex integration"}]}],"dependencies": ["Hierarchical Organization"]},
{"name": "Single-Line Rule Format","when": "writing rule definitions and objects","to": "optimize for machine parsing and reduce visual complexity","you_must": "collapse all rule definitions and complex objects to single lines","validation_criteria": ["Must write each rule as a single line without line breaks","Must maintain JSON validity despite line length","Must not split JSON objects across multiple lines","Must ensure proper comma usage and object closure on a single line","All section content must follow single-line pattern"],"compliant_example": {"name": "Example Rule","when": "creating rules","to": "ensure consistency","you_must": "use single line format","validation_criteria": ["Criterion 1", "Criterion 2"]},"non_compliant_example": "{\n \"name\": \"Example Rule\",\n \"when\": \"creating rules\",\n \"to\": \"ensure consistency\",\n \"you_must\": \"use single line format\"\n}","dependencies": ["Visual Organization"]}
]
},
"rule_validation_criteria": {
"depth": 2,
"trigger": "rule-definition",
"rules": [
{"name": "Explicit Validation Requirements","when": "defining any rule","to": "enable programmatic validation and enforcement","you_must": "include explicit 'validation_criteria' arrays with each rule","validation_criteria": ["Each rule must include a 'validation_criteria' array","Must provide machine-checkable criteria where possible","Should include regex patterns, schemas, or explicit constraints"],"compliant_example": {"validation_criteria": ["Function names must match pattern: ^[a-z][a-zA-Z0-9]_$","Maximum function length: 50 lines","Must include JSDoc comments for public functions"]},"dependencies": ["Rule Identification"]},
{"name": "Example Inclusion","when": "defining rules","to": "clarify expected implementation","you_must": "provide both 'compliant_example' and 'non_compliant_example' fields for each rule","validation_criteria": ["Each rule must include at least one compliant example","Each rule must include at least one non-compliant example","Examples must be properly formatted JSON objects or string literals"],"compliant_structure": {"compliant_example": {"function": "validateUser","parameters": ["user"],"return_type": "boolean"},"non_compliant_example": {"function": "ValidateUser","parameters": ["u"]}},"dependencies": ["Explicit Validation Requirements"]},
{"name": "Decision Matrices","when": "providing guidance for complex selections","to": "offer clear direction for tool/approach selection","you_must": "include structured decision matrices for complex decision points","validation_criteria": ["Must structure as JSON arrays with consistent object structure","Must include clear decision factors and options","Must clearly indicate recommended choices for different scenarios"],"compliant_example": {"server_decision_matrix": [{"task_type": "Documentation", "first_choice": "context7", "second_choice": "web search", "avoid": "N/A"},{"task_type": "Current events", "first_choice": "web search", "second_choice": "N/A", "avoid": "context7"},{"task_type": "Complex reasoning", "first_choice": "sequential thinking", "second_choice": "N/A", "avoid": "N/A"},{"task_type": "Web automation", "first_choice": "playwright", "second_choice": "puppeteer", "avoid": "N/A"}]},"non_compliant_example": "For documentation, use context7. For current events, use web search.","dependencies": ["Visual Organization"]},
{"name": "Anti-Pattern Documentation","when": "defining rules with potential for misuse","to": "prevent critical errors in implementation","you_must": "include explicit 'danger' sections with prohibited actions","validation_criteria": ["Must include a 'danger' object with 'critical_violations' array","Each item in the array must start with 'NEVER' and clearly describe the prohibited action","Must include specific consequences or reasons for avoiding the pattern"],"compliant_example": {"danger": {"critical_violations": ["NEVER skip frontmatter","NEVER use quotes in globs","NEVER omit file map","NEVER skip validation","NEVER mix formats","NEVER ignore structure"],"consequences": ["Rule will not be correctly applied","Excessive parsing overhead","Potential misinterpretation by AI agents"]}},"non_compliant_example": "Avoid poor formatting and inconsistent structure.","dependencies": ["Explicit Validation Requirements"]}
]
},
"rule_relationships": {
"depth": 2,
"trigger": "rule-interconnection",
"rules": [
{"name": "Dependency Declaration","when": "a rule depends on another rule","to": "establish clear rule relationships and enforcement order","you_must": "explicitly declare dependencies using a 'dependencies' array","validation_criteria": ["Must specify exact rule identifier","Must be listed in a 'dependencies' array","Should include reason for dependency where appropriate"],"compliant_example": {"dependencies": ["File Naming Convention"]},"dependencies": ["Rule Identification"]},
{"name": "Cross-Reference System","when": "referring to content in other rules","to": "reduce redundancy and improve rule cohesion","you_must": "implement a standardized cross-reference system using reference objects","validation_criteria": ["Must use consistent reference format: { 'ref': 'rule-name/section' }","References must point to existing rule files or sections","Must include brief contextual description of the referenced content"],"compliant_examples": [{ "ref": "common-requirements/agent-self-identification", "description": "For identification requirements" },{ "ref": "memory-management/persistence-strategies", "description": "For related guidance" }],"non_compliant_examples": ["See the common requirements document","Look at the memory management rules"],"dependencies": []},
{"name": "Sequential Patterns","when": "defining complex multi-step workflows","to": "provide clear step-by-step guidance","you_must": "document explicit operation sequences as structured arrays","validation_criteria": ["Must present steps in clear numerical sequence","Must indicate dependencies between steps","Must specify expected outcomes for each step","Must describe error handling for step failures"],"compliant_example": {"workflow": "Documentation Integration","steps": [{"phase": "Research Phase","actions": ["Call context7 resolve-library-id with library name","Validate returned library ID"]},{"phase": "Retrieval Phase","actions": ["Call get-library-docs with resolved ID","Process and store returned documentation"]},{"phase": "Implementation Phase","actions": ["Reference documentation for implementation details","Verify implementation against documentation"]}]},"non_compliant_example": "Use context7 to get documentation, then implement based on that documentation.","dependencies": ["Visual Organization"]}
]
},
"tool_integration_rules": {
"depth": 2,
"trigger": "tool-usage",
"rules": [
{"name": "Tool Documentation Requirements","when": "rules involve external tool usage","to": "ensure proper tool integration","you_must": "include comprehensive tool documentation within the rule","validation_criteria": ["Must specify exact tool name (e.g., 'mcp_context7_resolve-library-id')","Must document all required parameters and their formats","Must include usage examples with correct syntax","Must specify when to use the tool and any alternatives"],"compliant_example": {"tool": "mcp_context7_get-library-docs","description": "Retrieves current documentation for specified library","parameters": [{"name": "context7CompatibleLibraryID", "type": "string", "required": true, "description": "ID from resolve-library-id"},{"name": "tokens", "type": "number", "required": false, "description": "Maximum tokens to retrieve (default: 5000)"}],"usage_example": "mcp_context7_get-library-docs({context7CompatibleLibraryID: \"react/hooks\", tokens: 3000})","when_to_use": "Before implementing library-specific code to ensure correct API usage"},"non_compliant_example": "Use context7 to get documentation about React","dependencies": []},
{"name": "Integration Pattern Documentation","when": "defining multi-tool workflows","to": "ensure proper sequencing of tool operations","you_must": "document the integration pattern between multiple tools","validation_criteria": ["Must define the correct sequence of tool calls","Must specify data flow between tools","Must include error handling and fallback approaches","Must document expected outputs"],"compliant_example": {"workflow": "Library Documentation Integration","sequence": [{"step": 1, "tool": "mcp_context7_resolve-library-id", "input": "library name", "output": "libraryID"},{"step": 2, "tool": "mcp_context7_get-library-docs", "input": "libraryID from step 1", "output": "documentation"},{"step": 3, "condition": "If documentation unclear", "tool": "mcp_Web-Search_search", "input": "specific query based on documentation gap"}],"error_handling": [{"error": "Library not found", "action": "Try alternative library names or use web search"},{"error": "Insufficient documentation", "action": "Supplement with web search results"}]},"non_compliant_example": "First use resolve-library-id, then get the docs","dependencies": ["Tool Documentation Requirements"]}
]
},
"state_requirements_rules": {
"depth": 1,
"trigger": "state-declaration",
"rules": [
{"name": "Rule State Declaration","when": "creating any rule file","to": "define how the rule is activated and applied","you_must": "explicitly declare the intended state in the YAML frontmatter","validation_criteria": ["Must set alwaysApply to true or false","Must define appropriate glob patterns when alwaysApply is false","Must ensure globs properly target intended file types","Must validate that the description accurately reflects the rule's purpose"],"compliant_examples": [{"always_apply_rule": "---\ndescription: WHEN writing code TO ensure consistency YOU MUST follow standard conventions\nglobs: _\nalwaysApply: true\n---"},{"file_specific_rule": "---\ndescription: WHEN writing Python code TO ensure standardization YOU MUST follow PEP8\nglobs: \*_/_.py\nalwaysApply: false\n---"}],"non_compliant_examples": ["---\ndescription: Python rules\nglobs: [\"*.py\"]\n---"],"dependencies": []},
{"name": "State-Specific Requirements","when": "configuring rule activation state","to": "ensure appropriate rule application","you_must": "follow requirements specific to the chosen activation state","validation_criteria": ["For Always Rules (alwaysApply: true): Must consider global impact and validate core behavior","For Auto-Attached Rules (alwaysApply: false with globs): Must define precise glob patterns and validate file matching","For Agent Requested Rules (manual): Must use WHEN-TO-MUST format and ensure discoverability","For Manual Rules: Must document attachment process and define user control points"],"compliant_example": {"state_requirements": {"always_rules": ["Set alwaysApply: true", "Consider global impact", "Validate core behavior"],"auto_attached_rules": ["Define precise glob patterns", "Validate file matching", "Consider scope impact"],"agent_requested_rules": ["Use WHEN-TO-MUST format", "Ensure discoverability", "Provide clear examples"],"manual_rules": ["Minimize configuration", "Document attachment", "Define user control"]}},"non_compliant_example": "This rule applies to Python files","dependencies": ["Rule State Declaration"]}
]
},
"rule_application_decision_matrix": {
"depth": 3,
"matrix": [
{"rule_type": "Structure Rules", "when_to_apply": "File creation", "priority": "Critical", "validation_approach": "Automated pattern matching"},
{"rule_type": "Content Rules", "when_to_apply": "Content organization", "priority": "High", "validation_approach": "Manual review + partial automation"},
{"rule_type": "Validation Rules", "when_to_apply": "Rule definition", "priority": "High", "validation_approach": "Checklist verification"},
{"rule_type": "Relationship Rules", "when_to_apply": "Multiple rules interaction", "priority": "Medium", "validation_approach": "Cross-reference validation"}
]
},
"machine_readable_summary": {
"depth": 1,
"rules": [
{"rule_id": "001", "rule_name": "Mandatory Rule Format", "category": "Core Structure", "priority": "Critical", "dependencies": [], "status": "Required"},
{"rule_id": "002", "rule_name": "Rule Context Headers", "category": "Core Structure", "priority": "Critical", "dependencies": ["001"], "status": "Required"},
{"rule_id": "003", "rule_name": "File Naming Convention", "category": "File Structure", "priority": "Critical", "dependencies": [], "status": "Required"},
{"rule_id": "004", "rule_name": "Frontmatter Structure", "category": "File Structure", "priority": "Critical", "dependencies": [], "status": "Required"},
{"rule_id": "005", "rule_name": "Hierarchical Organization", "category": "Content", "priority": "High", "dependencies": ["001"], "status": "Required"},
{"rule_id": "006", "rule_name": "Rule Identification", "category": "Content", "priority": "High", "dependencies": ["005"], "status": "Required"},
{"rule_id": "007", "rule_name": "DEPTH Indicators", "category": "Content", "priority": "High", "dependencies": ["005"], "status": "Required"},
{"rule_id": "008", "rule_name": "TRIGGER Annotations", "category": "Content", "priority": "Medium", "dependencies": ["005", "007"], "status": "Required"},
{"rule_id": "009", "rule_name": "Visual Organization", "category": "Content", "priority": "Medium", "dependencies": ["005"], "status": "Required"},
{"rule_id": "010", "rule_name": "Explicit Validation Requirements", "category": "Validation", "priority": "High", "dependencies": ["006"], "status": "Required"},
{"rule_id": "011", "rule_name": "Example Inclusion", "category": "Validation", "priority": "Medium", "dependencies": ["010"], "status": "Required"},
{"rule_id": "012", "rule_name": "Decision Matrices", "category": "Validation", "priority": "Medium", "dependencies": ["009"], "status": "Required"},
{"rule_id": "013", "rule_name": "Anti-Pattern Documentation", "category": "Validation", "priority": "High", "dependencies": ["010"], "status": "Required"},
{"rule_id": "014", "rule_name": "Dependency Declaration", "category": "Relationships", "priority": "Medium", "dependencies": ["006"], "status": "Required"},
{"rule_id": "015", "rule_name": "Cross-Reference System", "category": "Relationships", "priority": "Medium", "dependencies": [], "status": "Required"},
{"rule_id": "016", "rule_name": "Sequential Patterns", "category": "Relationships", "priority": "Medium", "dependencies": ["009"], "status": "Required"},
{"rule_id": "017", "rule_name": "Tool Documentation Requirements", "category": "Tool Integration", "priority": "High", "dependencies": [], "status": "Required"},
{"rule_id": "018", "rule_name": "Integration Pattern Documentation", "category": "Tool Integration", "priority": "Medium", "dependencies": ["017"], "status": "Required"},
{"rule_id": "019", "rule_name": "Rule State Declaration", "category": "State Requirements", "priority": "Critical", "dependencies": [], "status": "Required"},
{"rule_id": "020", "rule_name": "State-Specific Requirements", "category": "State Requirements", "priority": "High", "dependencies": ["019"], "status": "Required"},
{"rule_id": "021", "rule_name": "Single-Line Rule Format", "category": "Content", "priority": "High", "dependencies": ["009"], "status": "Required"}
]
},
"implementation_verification": {"depth": 1,"trigger": "verification","when": "implementing this style guide","to": "verify proper AI agent understanding","you_must": "execute a self-check to confirm style guide structure is properly parsed","verification_steps": ["Parse all rule sections in this document","Validate that rules follow the JSON format","Confirm all required elements (validation_criteria, examples) are present","Verify rule ID sequence in summary table","Report compliance status: [COMPLIANT/NON-COMPLIANT]"]},
"implementation_workflow": {"depth": 2,"phases": [{"name": "Preparation Phase","steps": ["Review existing rules files for patterns","Identify organization needs","Determine appropriate depth indicators"]},{"name": "Structure Phase","steps": ["Create file with proper naming","Add required frontmatter","Set up hierarchical JSON structure"]},{"name": "Content Phase","steps": ["Define individual rules with required format","Add depth indicators and triggers","Implement validation criteria","Provide compliant and non-compliant examples"]},{"name": "Verification Phase","steps": ["Verify all rules follow required format","Check all sections have appropriate depth indicators","Validate relationships and dependencies","Confirm machine-readable summary accuracy"]}]}
}
}
