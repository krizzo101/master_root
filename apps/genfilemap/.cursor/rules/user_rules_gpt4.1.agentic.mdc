---
description:
globs:
alwaysApply: false
---

{
"title": "User Rules for GPT-4.1 Agentic Workflows",
"depth": 1,
"rules": [
{"name": "Persist Until Resolution", "when": "operating as an agent", "to": "ensure tasks are fully resolved", "you_must": "persist and not yield control until the task is explicitly ended", "validation_criteria": ["Agent does not stop until user confirms task is complete", "No partial or half-answers"]},
{"name": "Tool-First Approach", "when": "information is missing or uncertain", "to": "minimize hallucinations and maximize IDE leverage", "you_must": "call an available Cursor tool before guessing; if info is missing, ask the user", "validation_criteria": ["Tool is called before making assumptions", "User is prompted for missing info if needed"]},
{"name": "Plan-Act-Reflect Cycle", "when": "solving any non-trivial task", "to": "improve solution quality and traceability", "you_must": "emit an explicit plan, reference each tool call, and reflect on outcomes after each step", "validation_criteria": ["Plan is stated before action", "Reflection follows each tool call"]},
{"name": "Instruction Repetition for Long Prompts", "when": "prompt exceeds 2k tokens", "to": "maintain instruction salience in long contexts", "you_must": "repeat high-level instructions at both the top and bottom of the prompt", "validation_criteria": ["Instructions appear at both start and end of long prompts"]},
{"name": "Step-by-Step Chain-of-Thought", "when": "task is not pure retrieval", "to": "improve correctness and transparency", "you_must": "use step-by-step chain-of-thought reasoning", "validation_criteria": ["Reasoning is broken into explicit steps", "No single-step answers for complex tasks"]},
{"name": "Parallel Tool Call Caution", "when": "ambiguity exists in tool call sequence", "to": "avoid race conditions and errors", "you_must": "ask before making parallel tool calls; set parallel_tool_calls=false if race-condition errors occur", "validation_criteria": ["User is asked before parallel tool calls if ambiguity exists", "parallel_tool_calls=false is set when needed"]},
{"name": "V4A Patch Format for Diffs", "when": "generating code diffs", "to": "ensure reliable patch application in Cursor IDE", "you_must": "generate diffs in the V4A 'apply_patch' format with Begin/End Patch and +/- markers, no line numbers", "validation_criteria": ["Diffs use V4A format", "No line numbers in patch"]},
{"name": "Standard Agentic Workflow", "when": "solving any agentic task", "to": "ensure robust, testable, and iterative solutions", "you_must": "follow: 1. Understand the problem deeply; 2. Investigate; 3. Develop a concrete plan; 4. Implement incrementally; 5. Debug root causes; 6. Test frequently; 7. Reflect & verify", "validation_criteria": ["All workflow steps are followed in order", "Reflection and verification are explicit"]},
{"name": "Tool Usage Standards", "when": "defining or using Cursor tools", "to": "ensure clarity and reliability in tool invocation", "you_must": "define each tool via the tools field, give each a clear name, description, and strict JSON schema; add # Examples section for sample calls; always include a footer: 'If you're unsure which tool to call, ask the user for the missing info. After each tool call, reflect on the result before choosing the next action.'", "validation_criteria": ["Tools are defined in the tools field", "Footer is present in prompts using tools"]},
{"name": "Long-Context Guidance", "when": "adding large corpora or long context", "to": "maintain retrieval quality and instruction clarity", "you_must": "prefer XML or pipe format for large corpora, avoid giant JSON arrays, keep instructions visually distinct, repeat critical instructions above and below long context", "validation_criteria": ["Large corpora use XML or pipe format", "Instructions are visually distinct and repeated as needed"]},
{"name": "Prompt & Delimiter Conventions", "when": "structuring prompts for agents", "to": "ensure clarity and parsing reliability", "you_must": "default to Markdown, use backticks for code, use XML delimiters if markdown-heavy context, follow the provided section order for prompts", "validation_criteria": ["Markdown is default format", "Section order is followed", "Delimiters are used appropriately"]},
{"name": "Diff & Patch Rules", "when": "generating patches for code changes", "to": "ensure compatibility with Cursor's apply_patch system", "you_must": "wrap every patch as specified, provide at least 3 lines of context, use relative file paths", "validation_criteria": ["Patch format matches V4A spec", "â‰¥3 lines of context", "Relative file paths only"]},
{"name": "Failure-Mode Mitigations", "when": "handling common agentic failure scenarios", "to": "reduce errors and improve reliability", "you_must": "apply scenario-specific mitigations as listed (e.g., ask-for-info-first, vary wording, cap narrative, output full list, deduplicate conflicting rules)", "validation_criteria": ["Mitigations are applied for each scenario as listed"]},
{"name": "Quick-Reference Snippets", "when": "writing agent prompts or responses", "to": "ensure consistency and clarity", "you_must": "use the provided persistence header, planning trigger, reflection trigger, and CoT footer as appropriate", "validation_criteria": ["Snippets are present in relevant prompts and responses"]}
]
}
