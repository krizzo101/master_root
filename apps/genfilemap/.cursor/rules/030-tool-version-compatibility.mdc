---
description: WHEN configuring development tools and Python versions TO ensure compatibility and prevent version conflicts YOU MUST verify tool support before upgrading language versions
globs:
alwaysApply: false
---

# Tool Version Compatibility Standards

## Purpose

This rule ensures that development tools are compatible with the Python version being used, preventing configuration conflicts and build failures that can occur when tools don't support newer language versions.

## Scope

This rule applies to all Python projects using development tools like Black, Ruff, mypy, pre-commit, and other linting/formatting tools.

## Requirements

### Version Compatibility Verification

1. **Pre-Upgrade Verification**
   - VERIFY tool support for target Python version before upgrading
   - CHECK tool documentation for supported Python versions
   - TEST tools with new Python version in isolated environment
   - MAINTAIN compatibility matrix for all project tools

2. **Tool Configuration Management**
   - CONFIGURE tools to use compatible Python version targets
   - SET target-version in pyproject.toml to supported version
   - ALIGN all tool configurations to use same Python target
   - DOCUMENT version constraints in project documentation

### Implementation Standards

1. **pyproject.toml Configuration**
   ```toml
   [tool.black]
   target-version = ['py312']  # Use highest supported version

   [tool.ruff]
   target-version = "py312"    # Match Black target

   [tool.mypy]
   python_version = "3.12"     # Match other tools
   ```

2. **Pre-commit Configuration**
   ```yaml
   repos:
     - repo: https://github.com/psf/black
       rev: 23.12.1  # Use version that supports target Python
       hooks:
         - id: black
           language_version: python3.12  # Match project target
   ```

3. **Compatibility Checking Process**
   - CREATE compatibility verification script
   - RUN verification before any Python version upgrades
   - MAINTAIN tool version matrix
   - UPDATE tools incrementally as support becomes available

### Error Prevention

1. **Common Compatibility Issues**
   - Black/Ruff not supporting latest Python version
   - mypy type checking incompatibilities
   - Pre-commit hook failures with newer Python
   - CI/CD pipeline tool version mismatches

2. **Mitigation Strategies**
   - USE conservative Python version targets
   - IMPLEMENT gradual tool upgrade process
   - MAINTAIN fallback configurations
   - TEST all tools before committing to new Python version

## Validation Criteria

- [ ] All tools support configured Python target version
- [ ] Tool configurations use consistent Python version targets
- [ ] Compatibility verification script exists and passes
- [ ] Documentation includes version compatibility matrix
- [ ] CI/CD uses compatible tool versions

## Examples

### Compliant Example
```python
# compatibility_check.py
import subprocess
import sys
from typing import Dict, List, Tuple

def check_tool_compatibility() -> Dict[str, bool]:
    """Check if all tools support current Python version."""
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}"

    tools = {
        'black': ['black', '--version'],
        'ruff': ['ruff', '--version'],
        'mypy': ['mypy', '--version']
    }

    results = {}
    for tool_name, cmd in tools.items():
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            results[tool_name] = result.returncode == 0
        except FileNotFoundError:
            results[tool_name] = False

    return results

if __name__ == "__main__":
    results = check_tool_compatibility()
    if all(results.values()):
        print("✅ All tools compatible")
        sys.exit(0)
    else:
        print("❌ Tool compatibility issues found")
        for tool, compatible in results.items():
            status = "✅" if compatible else "❌"
            print(f"  {status} {tool}")
        sys.exit(1)
```

### Non-Compliant Example
```toml
# pyproject.toml - Inconsistent versions
[tool.black]
target-version = ['py313']  # Not supported yet

[tool.ruff]
target-version = "py312"    # Different from Black

[tool.mypy]
python_version = "3.11"     # Different from others
```