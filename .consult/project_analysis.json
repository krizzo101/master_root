{
  "metadata": {
    "build_time_ms": 0.0057220458984375,
    "project_path": "/home/opsvi/master_root",
    "builder_type": "DefaultPackageBuilder",
    "build_timestamp": "2025-08-06T01:31:24.446523",
    "package_type": "default",
    "collector_count": 5,
    "total_data_size": 7729
  },
  "collectors": [
    {
      "collector": "DevelopmentStateCollector",
      "schema_version": "1.0.0",
      "timestamp": "2025-08-05T21:31:24.305557",
      "data": {
        "git_repository": true,
        "current_branch": "fix/storage-api",
        "remote_url": "https://github.com/krizzo101/master_root.git",
        "active_branches": 4,
        "branch_names": [
          "AUTOSAVE",
          "feat/workspace-optimization",
          "fix/storage-api",
          "main"
        ],
        "has_uncommitted_changes": true,
        "staged_files_count": 1,
        "unstaged_files_count": 6,
        "untracked_files_count": 6,
        "ci_status": {
          "has_ci": true,
          "ci_provider": "GitHub Actions",
          "last_build_status": null,
          "last_build_time": null,
          "build_count": 0
        },
        "issue_tracking": {
          "has_issue_tracking": false,
          "issue_provider": null,
          "open_issues": 0,
          "closed_issues": 0,
          "recent_activity": false
        },
        "recent_activity": {
          "last_commit_days_ago": 0,
          "commits_last_week": 19,
          "commits_last_month": 19,
          "active_contributors": 0,
          "recent_branches": [
            "AUTOSAVE",
            "feat/workspace-optimization",
            "fix/storage-api",
            "main"
          ]
        },
        "project_structure": {
          "has_tests": true,
          "has_docs": true,
          "has_ci": false,
          "has_docker": false,
          "has_requirements": false,
          "main_language": null,
          "file_count": 72
        },
        "development_state": "active_development"
      }
    },
    {
      "collector": "ProjectPurposeCollector",
      "schema_version": "1.0.0",
      "timestamp": "2025-08-05T21:31:24.306263",
      "data": {
        "project_name": "OPSVI Master Workspace",
        "description": "[![CI](https://github.com/opsvi/master-workspace/actions/workflows/ci.yml/badge.svg)](https://github.com/opsvi/master-workspace/actions/workflows/ci.yml) A comprehensive monorepo for AI/ML Operations with built-in observability, RAG capabilities, and MCP integration. This workspace has been optimized with:",
        "key_features": [
          "**Worktrees**: Use `scripts/new_agent_worktree.sh` for feature development"
        ]
      }
    },
    {
      "collector": "ConstraintsCollector",
      "schema_version": "1.0.0",
      "timestamp": "2025-08-05T21:31:24.341488",
      "data": {
        "technical_constraints": {
          "performance_constraints": [],
          "security_constraints": [],
          "scalability_constraints": [],
          "compatibility_constraints": [],
          "resource_constraints": [],
          "dependency_constraints": [],
          "general_constraints": []
        },
        "business_rules": {
          "validation_rules": [
            "- \u2705 **Phase 1**: Linting & Type Checking (ruff, black, mypy)",
            "uv run ruff check",
            "- **mypy**: Static type checking",
            "- **mypy**: Static type checking with strict configuration",
            "- **Pre-commit Hooks**: Automatic quality checks on commit"
          ],
          "business_logic": [],
          "compliance_requirements": [
            "- **Package Structure**: Standardized Python package layout"
          ],
          "data_rules": [
            "uv run ruff format",
            "- **ruff**: Fast Python linter and formatter",
            "- **black**: Code formatting",
            "just fmt         # Run formatting",
            "- **black**: Consistent code formatting"
          ],
          "workflow_rules": [
            "[![CI](https://github.com/opsvi/master-workspace/actions/workflows/ci.yml/badge.svg)](https://github.com/opsvi/master-workspace/actions/workflows/ci.yml)",
            "- \u2705 **Phase 4**: Workflow Automation (pre-commit hooks)",
            "- **CI/CD**: GitHub Actions workflow for automated testing",
            "- **README Updates**: Comprehensive documentation of new tools and processes",
            "- **Workflow Documentation**: Clear development workflow instructions"
          ]
        },
        "limitations": {
          "known_issues": [],
          "performance_limitations": [],
          "feature_limitations": [],
          "compatibility_limitations": [],
          "scalability_limitations": []
        },
        "constraint_summary": {
          "total_constraints": 16,
          "constraint_types": [
            "validation_rules",
            "compliance_requirements",
            "data_rules",
            "workflow_rules"
          ],
          "critical_constraints": [],
          "constraint_impact": "medium"
        }
      }
    },
    {
      "collector": "WorkflowCollector",
      "schema_version": "1.0.0",
      "timestamp": "2025-08-05T21:31:24.361355",
      "data": {
        "branching_strategy": {
          "branching_model": "simple",
          "main_branch": "main",
          "development_branch": null,
          "feature_branch_pattern": "feature/*",
          "release_branch_pattern": "release/*",
          "hotfix_branch_pattern": null,
          "total_branches": 4,
          "branch_names": [
            "AUTOSAVE",
            "feat/workspace-optimization",
            "fix/storage-api",
            "main"
          ]
        },
        "ci_workflow": {
          "has_ci": true,
          "ci_provider": "GitHub Actions",
          "workflow_files": [
            {
              "name": "Workspace CI",
              "on": {},
              "jobs": [
                "test"
              ],
              "runs_on": [
                "ubuntu-latest"
              ],
              "steps": [
                "unnamed",
                "unnamed",
                "unnamed",
                "uv sync",
                "uv run pytest"
              ]
            }
          ],
          "stages": [],
          "triggers": [],
          "environments": []
        },
        "coding_standards": {
          "has_linting": true,
          "has_formatting": true,
          "has_type_checking": true,
          "has_testing": true,
          "tools": [
            {
              "name": "flake8",
              "category": "linting"
            },
            {
              "name": "black",
              "category": "formatting"
            },
            {
              "name": "isort",
              "category": "formatting"
            },
            {
              "name": "mypy",
              "category": "type_checking"
            },
            {
              "name": "pytest",
              "category": "testing"
            },
            {
              "name": "coverage",
              "category": "testing"
            },
            {
              "name": "black",
              "category": "configuration"
            },
            {
              "name": "mypy",
              "category": "configuration"
            },
            {
              "name": "pytest",
              "category": "configuration"
            }
          ]
        },
        "development_process": {
          "has_code_review": false,
          "has_automated_testing": true,
          "has_automated_deployment": false,
          "has_documentation_workflow": true,
          "has_version_management": false,
          "development_phases": [
            "testing",
            "documentation"
          ]
        },
        "workflow_maturity": "established"
      }
    },
    {
      "collector": "AgentArchitectureCollector",
      "schema_version": "1.0.0",
      "timestamp": "2025-08-05T21:31:24.446084",
      "data": {
        "agent_classes": [
          {
            "name": "CrewAdapter",
            "file_path": "libs/opsvi-agents/src/opsvi/agents/crew_adapter.py",
            "lineno": 6,
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "lineno": 9,
                "docstring": "Initialize the CrewAI adapter."
              },
              {
                "name": "create_crew",
                "lineno": 14,
                "docstring": "Create a crew with agents and tasks."
              }
            ],
            "docstring": "Adapter for CrewAI agent framework.",
            "agent_type": "general"
          },
          {
            "name": "GraphAdapter",
            "file_path": "libs/opsvi-agents/src/opsvi/agents/graph_adapter.py",
            "lineno": 6,
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "lineno": 9,
                "docstring": "Initialize the LangGraph adapter."
              },
              {
                "name": "create_graph",
                "lineno": 14,
                "docstring": "Create a graph with nodes and edges."
              }
            ],
            "docstring": "Adapter for LangGraph agent framework.",
            "agent_type": "general"
          },
          {
            "name": "ConfigurationError",
            "file_path": "libs/opsvi-core/src/opsvi_core/exceptions.py",
            "lineno": 13,
            "bases": [
              "OPSVIError"
            ],
            "methods": [],
            "docstring": "Raised when there's a configuration error.",
            "agent_type": "general"
          },
          {
            "name": "ValidationError",
            "file_path": "libs/opsvi-core/src/opsvi_core/exceptions.py",
            "lineno": 19,
            "bases": [
              "OPSVIError"
            ],
            "methods": [],
            "docstring": "Raised when data validation fails.",
            "agent_type": "general"
          },
          {
            "name": "ConnectionError",
            "file_path": "libs/opsvi-core/src/opsvi_core/exceptions.py",
            "lineno": 25,
            "bases": [
              "OPSVIError"
            ],
            "methods": [],
            "docstring": "Raised when connection to external services fails.",
            "agent_type": "general"
          },
          {
            "name": "TimeoutError",
            "file_path": "libs/opsvi-core/src/opsvi_core/exceptions.py",
            "lineno": 31,
            "bases": [
              "OPSVIError"
            ],
            "methods": [],
            "docstring": "Raised when operations timeout.",
            "agent_type": "general"
          }
        ],
        "agent_count": 6,
        "communication": {
          "has_messaging": false,
          "has_event_system": false,
          "has_rpc": false,
          "has_grpc": false,
          "has_websockets": false,
          "has_queues": false,
          "protocols": [],
          "message_types": []
        },
        "orchestration": {
          "has_orchestrator": false,
          "has_scheduler": false,
          "has_workflow": false,
          "has_task_queue": false,
          "orchestration_pattern": "unknown",
          "coordination_mechanism": "unknown"
        },
        "configuration": {
          "has_agent_config": false,
          "config_files": [],
          "agent_settings": {},
          "environment_variables": [
            "MCP_REGISTRY_URL=https://mcp.opsvi.ai",
            "MCP_PUBLIC_URL=https://public-mcp.opsvi.ai",
            "MCP_GIT_BRANCH=main",
            "# OpenAI Configuration",
            "OPENAI_API_KEY=your_openai_api_key",
            "OPENAI_MODEL=gpt-4",
            "OPENAI_BASE_URL=https://api.openai.com/v1"
          ]
        },
        "architecture_pattern": "distributed",
        "agent_types": [
          "general"
        ],
        "has_multi_agent_system": true
      }
    }
  ],
  "timestamp": "2025-08-06 01:31:24.446600",
  "schema_version": "1.1.0"
}