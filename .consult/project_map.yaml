# PROJECT MAP - AI AGENT OPTIMIZED
# ===============================
# Comprehensive project analysis for AI agents
# Generated by genfilemap utility
#
# AGENT USAGE:
# - project_structure: File organization and type distribution
# - entry_points: Application entry points and CLI interface
# - statistics: Overall code metrics and statistics
# - dependency_analysis: Import relationships and dependency mapping
# - workflow_analysis: Execution paths and workflow diagrams
# - files: Detailed analysis of each file in the project
#
# KEY INSIGHTS:
# - Find entry points in entry_points section
# - Understand dependencies in dependency_analysis section
# - Trace execution flows in workflow_analysis section
# - Navigate codebase using files section
#
# Generated: 2025-08-04T20:08:26+00:00
# Tool: genfilemap --project-map-in-memory

project_name: master_root
base_path: /home/opsvi/master_root
generated_at: '2025-08-04T20:08:26+00:00'
# Module organization and file type distribution
project_structure:
  file_type_distribution:
    python_files: 172
    config_files: 7
    total_files: 172
  module_structure:
    tools:
      files:
      - tools/rag_init.py
      total_lines: 127
      total_functions: 2
      total_classes: 0
    libs:
      files:
      - libs/opsvi-rag/src/opsvi_rag/__init__.py
      - libs/opsvi-rag/src/opsvi_rag/embeddings.py
      - libs/opsvi-rag/src/opsvi_rag/client.py
      - libs/opsvi-rag/src/opsvi_rag/search.py
      - libs/opsvi-llm/src/opsvi/__init__.py
      - libs/opsvi-llm/src/opsvi/llm/__init__.py
      - libs/opsvi-llm/src/opsvi/llm/client.py
      - libs/opsvi-core/src/opsvi_core/__init__.py
      - libs/opsvi-core/src/opsvi_core/exceptions.py
      - libs/opsvi-core/src/opsvi_core/config.py
      - libs/opsvi-core/src/opsvi_core/logging.py
      - libs/opsvi-agents/src/opsvi/__init__.py
      - libs/opsvi-agents/src/opsvi/agents/__init__.py
      - libs/opsvi-agents/src/opsvi/agents/crew_adapter.py
      - libs/opsvi-agents/src/opsvi/agents/graph_adapter.py
      total_lines: 319
      total_functions: 5
      total_classes: 10
    .archive:
      files:
      - .archive/genfilemap/setup.py
      - .archive/accf/__init__.py
      - .archive/accf/test_new_structure.py
      - .archive/accf/demo_comprehensive_research.py
      - .archive/accf/mcp_agent_server.py
      - .archive/accf/schemas.py
      - .archive/accf/test_context7_integration.py
      - .archive/accf/model_selection_engine.py
      - .archive/accf/model_comparison_test.py
      - .archive/accf/collect_project_info.py
      - .archive/accf/performance_test.py
      - .archive/accf/test_server.py
      - .archive/accf/demo_simple_research.py
      - .archive/accf/real_model_comparison_test.py
      - .archive/accf/agent_api.py
      - .archive/accf/demo_enhanced_research_agent.py
      - .archive/accf/demo_research_agent_showcase.py
      - .archive/accf/setup.py
      - .archive/accf/model_selection_test.py
      - .archive/accf/quick_model_test.py
      - .archive/accf/demo_vector_search.py
      - .archive/accf/extract_project_summary.py
      - .archive/accf/model_selection_demo.py
      - .archive/project-intel/src/project_intel/__init__.py
      - .archive/project-intel/src/project_intel/cli.py
      - .archive/genfilemap/scripts/file_watcher.py
      - .archive/genfilemap/scripts/init_config.py
      - .archive/genfilemap/scripts/cat_files_with_headers.py
      - .archive/genfilemap/scripts/genfilemap_runner.py
      - .archive/genfilemap/tests/__init__.py
      - .archive/genfilemap/tests/test_code_elements.py
      - .archive/genfilemap/tests/test_extract.py
      - .archive/genfilemap/tests/test_multiprocessing.py
      - .archive/genfilemap/tests/test_directory_hash.py
      - .archive/genfilemap/tests/run_tests.py
      - .archive/genfilemap/tests/test_quiet_mode.py
      - .archive/genfilemap/tests/test_final_quiet.py
      - .archive/genfilemap/tests/test_model_enforcement.py
      - .archive/genfilemap/tests/config_test.py
      - .archive/genfilemap/tests/test_basic.py
      - .archive/genfilemap/tests/test_config.py
      - .archive/genfilemap/tests/test_files/test_single_file.py
      - .archive/genfilemap/src/genfilemap/__init__.py
      - .archive/genfilemap/src/genfilemap/cli.py
      - .archive/genfilemap/src/genfilemap/core.py
      - .archive/genfilemap/src/genfilemap/config.py
      - .archive/genfilemap/src/genfilemap/file_watcher.py
      - .archive/genfilemap/src/genfilemap/init_config.py
      - .archive/genfilemap/src/genfilemap/logging_utils.py
      - .archive/genfilemap/src/genfilemap/__main__.py
      - .archive/genfilemap/src/genfilemap/core/__init__.py
      - .archive/genfilemap/src/genfilemap/core/core.py
      - .archive/genfilemap/src/genfilemap/core/reporting.py
      - .archive/genfilemap/src/genfilemap/core/config.py
      - .archive/genfilemap/src/genfilemap/core/project_map.py
      - .archive/genfilemap/src/genfilemap/core/cleaning.py
      - .archive/genfilemap/src/genfilemap/core/processing.py
      - .archive/genfilemap/src/genfilemap/core/directory_hash.py
      - .archive/genfilemap/src/genfilemap/core/directory_hash_processing.py
      - .archive/genfilemap/src/genfilemap/core/file_operations.py
      - .archive/genfilemap/src/genfilemap/core/validation.py
      - .archive/genfilemap/src/genfilemap/prompting/__init__.py
      - .archive/genfilemap/src/genfilemap/prompting/prompts.py
      - .archive/genfilemap/src/genfilemap/utils/__init__.py
      - .archive/genfilemap/src/genfilemap/utils/template_utils.py
      - .archive/genfilemap/src/genfilemap/utils/file_utils.py
      - .archive/genfilemap/src/genfilemap/utils/api_utils.py
      - .archive/genfilemap/src/genfilemap/api/__init__.py
      - .archive/genfilemap/src/genfilemap/api/base.py
      - .archive/genfilemap/src/genfilemap/api/openai.py
      - .archive/genfilemap/src/genfilemap/templates/__init__.py
      - .archive/genfilemap/src/genfilemap/models/__init__.py
      - .archive/genfilemap/src/genfilemap/models/schemas.py
      - .archive/genfilemap/src/genfilemap/processors/__init__.py
      - .archive/genfilemap/src/genfilemap/processors/code_processor.py
      - .archive/genfilemap/src/genfilemap/processors/base.py
      - .archive/genfilemap/src/genfilemap/processors/doc_processor.py
      - .archive/accf/orchestrator/__init__.py
      - .archive/accf/orchestrator/task_market.py
      - .archive/accf/orchestrator/subscription_engine.py
      - .archive/accf/orchestrator/orchestrator.py
      - .archive/accf/agent_base/__init__.py
      - .archive/accf/agent_base/agent_base.py
      - .archive/accf/accf_agents/__init__.py
      - .archive/accf/tests/test_capabilities.py
      - .archive/accf/tests/__init__.py
      - .archive/accf/tests/test_orchestrator.py
      - .archive/accf/tests/test_consult_agent_model_validation.py
      - .archive/accf/tests/test_consult_agent_design.py
      - .archive/accf/tests/test_new_agents.py
      - .archive/accf/tests/test_async_endpoints.py
      - .archive/accf/tests/test_registry.py
      - .archive/accf/tests/test_agents.py
      - .archive/accf/tests/test_documentation_bundle_agent.py
      - .archive/accf/tests/test_agent_base.py
      - .archive/accf/tests/test_neo4j_knowledge_graph.py
      - .archive/accf/tests/test_end_to_end.py
      - .archive/accf/capabilities/__init__.py
      - .archive/accf/capabilities/consult_agent.py
      - .archive/accf/capabilities/self_reflection_agent.py
      - .archive/accf/capabilities/testing_agent.py
      - .archive/accf/capabilities/knowledge_agent.py
      - .archive/accf/capabilities/neo4j_knowledge_graph.py
      - .archive/accf/capabilities/execution_agent.py
      - .archive/accf/capabilities/security_agent.py
      - .archive/accf/capabilities/critique_agent.py
      - .archive/accf/capabilities/challenge_agent.py
      - .archive/accf/capabilities/synthesis_agent.py
      - .archive/accf/capabilities/documentation_bundle_agent.py
      - .archive/accf/capabilities/critic_agent.py
      - .archive/accf/capabilities/collaboration_agent.py
      - .archive/accf/capabilities/documentation_agent.py
      - .archive/accf/capabilities/feedback_agent.py
      - .archive/accf/capabilities/check_me_agent.py
      - .archive/accf/capabilities/research_agent.py
      - .archive/accf/capabilities/memory_agent.py
      - .archive/accf/registry/__init__.py
      - .archive/accf/registry/registry.py
      - .archive/accf/shared/__init__.py
      - .archive/accf/accf_agents/core/neo4j_vector.py
      - .archive/accf/accf_agents/core/settings.py
      - .archive/accf/accf_agents/core/orchestrator.py
      - .archive/accf/accf_agents/utils/__init__.py
      - .archive/accf/accf_agents/utils/logging.py
      - .archive/accf/accf_agents/utils/security.py
      - .archive/accf/accf_agents/utils/validation.py
      - .archive/accf/accf_agents/api/__init__.py
      - .archive/accf/accf_agents/api/app.py
      - .archive/accf/accf_agents/agents/__init__.py
      - .archive/accf/accf_agents/agents/consult_agent.py
      - .archive/accf/accf_agents/agents/base.py
      - .archive/accf/accf_agents/agents/knowledge_agent.py
      - .archive/accf/accf_agents/agents/collaboration_agent.py
      - .archive/accf/accf_agents/agents/memory_agent.py
      - .archive/accf/accf_agents/api/endpoints/__init__.py
      - .archive/accf/accf_agents/api/endpoints/agents.py
      - .archive/accf/accf_agents/api/endpoints/health.py
      - .archive/accf/accf_agents/api/endpoints/tasks.py
      - .archive/accf/.cursor/templates/INTERFACE_SCRIPT_TEMPLATE.py
      - .archive/accf/capabilities/core/monitoring.py
      - .archive/accf/capabilities/api/health.py
      - .archive/accf/capabilities/tools/firecrawl_tool.py
      - .archive/accf/capabilities/tools/context7_tool.py
      - .archive/accf/capabilities/tools/arxiv_tool.py
      - .archive/accf/capabilities/tools/brave_search_tool.py
      - .archive/accf/shared/mcp/arxiv_mcp_client.py
      - .archive/accf/shared/mcp/__init__.py
      - .archive/accf/shared/mcp/context7_mcp_client.py
      - .archive/accf/shared/mcp/brave_mcp_search.py
      - .archive/accf/shared/mcp/mcp_server_template.py
      - .archive/accf/shared/mcp/firecrawl_mcp_client.py
      - .archive/accf/shared/openai_interfaces/__init__.py
      - .archive/accf/shared/openai_interfaces/base.py
      - .archive/accf/shared/openai_interfaces/files_interface.py
      - .archive/accf/shared/openai_interfaces/responses_interface.py
      - .archive/accf/shared/openai_interfaces/assistants_interface.py
      total_lines: 28400
      total_functions: 276
      total_classes: 165
# Application entry points and CLI interface
entry_points:
  cli:
    file: .archive/genfilemap/src/genfilemap/cli.py
    type: command_line_interface
    main_functions:
    - main
    - async_main
    cli_options:
      mode_flags: []
      processing_options: []
      output_options: []
      performance_options: []
    workflow_triggers: []
  core:
    file: .archive/genfilemap/src/genfilemap/core/core.py
    type: core_processor
    main_functions:
    - run_process
    description: Main processing workflow coordinator
  main:
    file: .archive/genfilemap/src/genfilemap/__main__.py
    type: module_entry
    main_functions:
    - main
    description: Module entry point when run as python -m
# Overall code metrics and statistics
statistics:
  total_functions: 283
  total_classes: 175
  total_imports: 854
  total_lines: 28846
  external_dependencies: []
# Import relationships and dependency mapping between files
dependency_analysis:
  most_imported_files:
  - file_path: libs/opsvi-core/src/opsvi_core/logging.py
    imported_by_count: 49
    imported_by:
    - libs/opsvi-core/src/opsvi_core/__init__.py
    - .archive/accf/demo_comprehensive_research.py
    - .archive/accf/mcp_agent_server.py
    - .archive/accf/test_context7_integration.py
    - .archive/accf/model_selection_engine.py
    - .archive/accf/demo_enhanced_research_agent.py
    - .archive/genfilemap/scripts/file_watcher.py
    - .archive/genfilemap/src/genfilemap/config.py
    - .archive/genfilemap/src/genfilemap/file_watcher.py
    - .archive/genfilemap/src/genfilemap/init_config.py
    - .archive/genfilemap/src/genfilemap/logging_utils.py
    - .archive/accf/orchestrator/orchestrator.py
    - .archive/accf/agent_base/agent_base.py
    - .archive/accf/tests/test_documentation_bundle_agent.py
    - .archive/accf/capabilities/consult_agent.py
    - .archive/accf/capabilities/self_reflection_agent.py
    - .archive/accf/capabilities/testing_agent.py
    - .archive/accf/capabilities/neo4j_knowledge_graph.py
    - .archive/accf/capabilities/execution_agent.py
    - .archive/accf/capabilities/critique_agent.py
    - .archive/accf/capabilities/synthesis_agent.py
    - .archive/accf/capabilities/documentation_bundle_agent.py
    - .archive/accf/capabilities/critic_agent.py
    - .archive/accf/capabilities/collaboration_agent.py
    - .archive/accf/capabilities/documentation_agent.py
    - .archive/accf/capabilities/check_me_agent.py
    - .archive/accf/capabilities/research_agent.py
    - .archive/accf/registry/registry.py
    - .archive/accf/accf_agents/core/neo4j_vector.py
    - .archive/accf/accf_agents/core/orchestrator.py
    - .archive/accf/accf_agents/utils/__init__.py
    - .archive/accf/accf_agents/utils/logging.py
    - .archive/accf/accf_agents/utils/security.py
    - .archive/accf/accf_agents/api/app.py
    - .archive/accf/accf_agents/agents/consult_agent.py
    - .archive/accf/accf_agents/agents/base.py
    - .archive/accf/capabilities/core/monitoring.py
    - .archive/accf/capabilities/api/health.py
    - .archive/accf/capabilities/tools/firecrawl_tool.py
    - .archive/accf/capabilities/tools/context7_tool.py
    - .archive/accf/capabilities/tools/arxiv_tool.py
    - .archive/accf/capabilities/tools/brave_search_tool.py
    - .archive/accf/shared/mcp/arxiv_mcp_client.py
    - .archive/accf/shared/mcp/context7_mcp_client.py
    - .archive/accf/shared/mcp/brave_mcp_search.py
    - .archive/accf/shared/mcp/mcp_server_template.py
    - .archive/accf/shared/mcp/firecrawl_mcp_client.py
    - .archive/accf/shared/openai_interfaces/base.py
    - .archive/accf/shared/openai_interfaces/responses_interface.py
  - file_path: libs/opsvi-core/src/opsvi_core/config.py
    imported_by_count: 24
    imported_by:
    - libs/opsvi-core/src/opsvi_core/__init__.py
    - .archive/genfilemap/scripts/init_config.py
    - .archive/genfilemap/tests/test_quiet_mode.py
    - .archive/genfilemap/tests/test_final_quiet.py
    - .archive/genfilemap/tests/test_model_enforcement.py
    - .archive/genfilemap/tests/config_test.py
    - .archive/genfilemap/tests/test_basic.py
    - .archive/genfilemap/tests/test_config.py
    - .archive/genfilemap/src/genfilemap/__init__.py
    - .archive/genfilemap/src/genfilemap/cli.py
    - .archive/genfilemap/src/genfilemap/core.py
    - .archive/genfilemap/src/genfilemap/file_watcher.py
    - .archive/genfilemap/src/genfilemap/init_config.py
    - .archive/genfilemap/src/genfilemap/__main__.py
    - .archive/genfilemap/src/genfilemap/core/core.py
    - .archive/genfilemap/src/genfilemap/core/project_map.py
    - .archive/genfilemap/src/genfilemap/core/cleaning.py
    - .archive/genfilemap/src/genfilemap/core/processing.py
    - .archive/genfilemap/src/genfilemap/core/directory_hash_processing.py
    - .archive/genfilemap/src/genfilemap/core/validation.py
    - .archive/genfilemap/src/genfilemap/prompting/prompts.py
    - .archive/genfilemap/src/genfilemap/utils/api_utils.py
    - .archive/genfilemap/src/genfilemap/api/openai.py
    - .archive/genfilemap/src/genfilemap/processors/base.py
  - file_path: .archive/genfilemap/src/genfilemap/api/base.py
    imported_by_count: 17
    imported_by:
    - .archive/genfilemap/src/genfilemap/api/__init__.py
    - .archive/genfilemap/src/genfilemap/api/openai.py
    - .archive/genfilemap/src/genfilemap/processors/__init__.py
    - .archive/genfilemap/src/genfilemap/processors/code_processor.py
    - .archive/genfilemap/src/genfilemap/processors/base.py
    - .archive/genfilemap/src/genfilemap/processors/doc_processor.py
    - .archive/accf/tests/test_consult_agent_model_validation.py
    - .archive/accf/tests/test_consult_agent_design.py
    - .archive/accf/accf_agents/core/orchestrator.py
    - .archive/accf/accf_agents/agents/__init__.py
    - .archive/accf/accf_agents/agents/consult_agent.py
    - .archive/accf/accf_agents/agents/knowledge_agent.py
    - .archive/accf/accf_agents/agents/collaboration_agent.py
    - .archive/accf/accf_agents/agents/memory_agent.py
    - .archive/accf/shared/openai_interfaces/files_interface.py
    - .archive/accf/shared/openai_interfaces/responses_interface.py
    - .archive/accf/shared/openai_interfaces/assistants_interface.py
  - file_path: .archive/genfilemap/src/genfilemap/logging_utils.py
    imported_by_count: 16
    imported_by:
    - .archive/genfilemap/src/genfilemap/cli.py
    - .archive/genfilemap/src/genfilemap/core.py
    - .archive/genfilemap/src/genfilemap/core/__init__.py
    - .archive/genfilemap/src/genfilemap/core/core.py
    - .archive/genfilemap/src/genfilemap/core/reporting.py
    - .archive/genfilemap/src/genfilemap/core/project_map.py
    - .archive/genfilemap/src/genfilemap/core/cleaning.py
    - .archive/genfilemap/src/genfilemap/core/processing.py
    - .archive/genfilemap/src/genfilemap/core/directory_hash.py
    - .archive/genfilemap/src/genfilemap/core/directory_hash_processing.py
    - .archive/genfilemap/src/genfilemap/core/file_operations.py
    - .archive/genfilemap/src/genfilemap/core/validation.py
    - .archive/genfilemap/src/genfilemap/utils/file_utils.py
    - .archive/genfilemap/src/genfilemap/api/openai.py
    - .archive/genfilemap/src/genfilemap/models/schemas.py
    - .archive/genfilemap/src/genfilemap/processors/base.py
  - file_path: .archive/accf/capabilities/research_agent.py
    imported_by_count: 7
    imported_by:
    - .archive/accf/demo_comprehensive_research.py
    - .archive/accf/mcp_agent_server.py
    - .archive/accf/test_context7_integration.py
    - .archive/accf/demo_simple_research.py
    - .archive/accf/demo_enhanced_research_agent.py
    - .archive/accf/tests/test_capabilities.py
    - .archive/accf/tests/test_end_to_end.py
  - file_path: .archive/genfilemap/src/genfilemap/utils/file_utils.py
    imported_by_count: 7
    imported_by:
    - .archive/genfilemap/tests/test_extract.py
    - .archive/genfilemap/src/genfilemap/core/project_map.py
    - .archive/genfilemap/src/genfilemap/utils/__init__.py
    - .archive/genfilemap/src/genfilemap/models/schemas.py
    - .archive/genfilemap/src/genfilemap/processors/code_processor.py
    - .archive/genfilemap/src/genfilemap/processors/base.py
    - .archive/genfilemap/src/genfilemap/processors/doc_processor.py
  - file_path: .archive/accf/orchestrator/orchestrator.py
    imported_by_count: 7
    imported_by:
    - .archive/accf/accf_agents/__init__.py
    - .archive/accf/tests/test_orchestrator.py
    - .archive/accf/tests/test_end_to_end.py
    - .archive/accf/accf_agents/api/app.py
    - .archive/accf/accf_agents/api/endpoints/agents.py
    - .archive/accf/accf_agents/api/endpoints/health.py
    - .archive/accf/accf_agents/api/endpoints/tasks.py
  - file_path: .archive/accf/accf_agents/api/app.py
    imported_by_count: 6
    imported_by:
    - .archive/accf/test_server.py
    - .archive/accf/tests/test_async_endpoints.py
    - .archive/accf/accf_agents/api/__init__.py
    - .archive/accf/accf_agents/api/endpoints/agents.py
    - .archive/accf/accf_agents/api/endpoints/health.py
    - .archive/accf/accf_agents/api/endpoints/tasks.py
  - file_path: .archive/accf/agent_base/agent_base.py
    imported_by_count: 6
    imported_by:
    - .archive/accf/tests/test_agent_base.py
    - .archive/accf/capabilities/consult_agent.py
    - .archive/accf/capabilities/knowledge_agent.py
    - .archive/accf/capabilities/critic_agent.py
    - .archive/accf/capabilities/check_me_agent.py
    - .archive/accf/capabilities/memory_agent.py
  - file_path: .archive/accf/capabilities/knowledge_agent.py
    imported_by_count: 5
    imported_by:
    - .archive/accf/mcp_agent_server.py
    - .archive/accf/tests/test_capabilities.py
    - .archive/accf/tests/test_end_to_end.py
    - .archive/accf/capabilities/collaboration_agent.py
    - .archive/accf/accf_agents/agents/__init__.py
  circular_dependencies:
  - cycle:
    - .archive/genfilemap/src/genfilemap/api/openai.py
    severity: high
# Execution paths and workflow diagrams
workflow_analysis:
  workflow_paths: {}
  conditional_branches: []
  function_calls: {}
  workflow_diagram: "graph TD\n    A[Entry Point] --> B{Parse Arguments}\n    B --> C{Check Flags}\n\n    C -->|Flags Found| D[Process Flags]\n    C -->|No Flags| E[Default Processing]\n\n    D --> F[Execute Workflow]\n    E --> F\n\n    F --> G[Complete]\n\n    style A fill:#e1f5fe\n    style G fill:#c8e6c9\n    style C fill:#fff3e0\n    style F fill:#f3e5f5\n"
# Detailed analysis of each file in the project
files:
- path: tools/rag_init.py
  line_count: 127
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rag_init.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "init_rag_system", "line": 22, "parameters": [{"name": "collection_name", "type": "str = \"global__demo\"", "default": "global__demo"}], "is_async": true, "return_type": "None", "description": "Asynchronously initializes the RAG system with the specified collection name.", "signature": "async init_rag_system(collection_name: str = \"global__demo\" = global__demo) -> None"}, {"name": "main", "line": 112, "parameters": [], "is_async": false, "description": "Entry point of the program that runs the main logic.", "signature": "main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 6, "statement": "import asyncio"}, {"module": "sys", "alias": null, "line": 7, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 8, "statement": "from pathlib import Path"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import get_logger"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import setup_logging"}, {"module": "qdrant_client", "alias": null, "line": 16, "statement": "from qdrant_client import QdrantClient"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import Distance"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import VectorParams"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 6}, {"name": "sys", "type": "import", "line": 7}, {"name": "from pathlib import Path", "type": "import", "line": 8}, {"name": "from opsvi_core import get_logger", "type": "import", "line": 15}, {"name": "from opsvi_core import setup_logging", "type": "import", "line": 15}, {"name": "from qdrant_client import QdrantClient", "type": "import", "line": 16}, {"name": "from qdrant_client.models import Distance", "type": "import", "line": 17}, {"name": "from qdrant_client.models import VectorParams", "type": "import", "line": 17}, {"name": "init_rag_system", "type": "function", "line": 22}, {"name": "main", "type": "function", "line": 112}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 6, "line_end": 17}, {"name": "init_rag_system Function", "description": "Function init_rag_system implementation.", "line_start": 22, "line_end": 111}, {"name": "main Function", "description": "Function main implementation.", "line_start": 112, "line_end": 117}], "content_hash": "17b822ac399831f2d65044d9d45b458d"}'
- path: libs/opsvi-rag/src/opsvi_rag/__init__.py
  line_count: 15
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "client", "alias": null, "line": 9, "statement": "from client import QdrantClient"}, {"module": "embeddings", "alias": null, "line": 10, "statement": "from embeddings import EmbeddingModel"}, {"module": "search", "alias": null, "line": 11, "statement": "from search import SearchEngine"}], "constants": []}, "key_elements": [{"name": "from client import QdrantClient", "type": "import", "line": 9}, {"name": "from embeddings import EmbeddingModel", "type": "import", "line": 10}, {"name": "from search import SearchEngine", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "94e707dc780b7c0536f7474ec9367530"}'
- path: libs/opsvi-rag/src/opsvi_rag/embeddings.py
  line_count: 8
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "embeddings.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_embeddings", "line": 7, "parameters": [{"name": "texts", "type": "list[str]"}], "is_async": false, "return_type": "list[list[float]]", "description": "Generate vector embeddings for a list of input texts.", "signature": "get_embeddings(texts: list[str]) -> list[list[float]]"}], "classes": [], "imports": [], "constants": []}, "key_elements": [{"name": "get_embeddings", "type": "function", "line": 7}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "get_embeddings Function", "description": "Function get_embeddings implementation.", "line_start": 7, "line_end": 12}], "content_hash": "6367131e9324aac5c6cf724d029653e8"}'
- path: libs/opsvi-rag/src/opsvi_rag/client.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "client.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "RAGClient", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the RAG client.", "signature": "__init__(self) -> None"}, {"name": "search", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, limit: int = 10"}, {"name": "limit", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Search for documents.", "signature": "search(self, query: str, limit: int = 10, limit: int = 10 = 10) -> list[dict[str, Any]]"}], "properties": [], "description": "Client class for Retrieval-Augmented Generation, combining retrieval and generation capabilities."}], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "RAGClient", "type": "class", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "RAGClient Class", "description": "Class RAGClient definition and methods.", "line_start": 8, "line_end": 19}], "content_hash": "e35ae653c6717944b1e72b62b47d526f"}'
- path: libs/opsvi-rag/src/opsvi_rag/search.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "search.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "search_documents", "line": 8, "parameters": [{"name": "query", "type": "str"}, {"name": "collection", "type": "str"}, {"name": "limit", "type": "int", "default": "10"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Searches for documents in a specified collection matching the query and returns a list of results.", "signature": "search_documents(query: str, collection: str, limit: int = 10) -> list[dict[str, Any]]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "search_documents", "type": "function", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 11}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "search_documents Function", "description": "Function search_documents implementation.", "line_start": 8, "line_end": 13}], "content_hash": "060e86690fd0693ecf53f12d574078cd"}'
- path: libs/opsvi-llm/src/opsvi/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "2a35222043dd8c22b1c74cc97aeffcaa"}'
- path: libs/opsvi-llm/src/opsvi/llm/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "client", "alias": null, "line": 5, "statement": "from client import call"}], "constants": []}, "key_elements": [{"name": "from client import call", "type": "import", "line": 5}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}], "content_hash": "9f81acd101b728b8e160bdd535094860"}'
- path: libs/opsvi-llm/src/opsvi/llm/client.py
  line_count: 28
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "client.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "call", "line": 8, "parameters": [{"name": "model", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Executes the specified model and returns the result as a dictionary.", "signature": "call(model: str) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "call", "type": "function", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 14}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "call Function", "description": "Function call implementation.", "line_start": 8, "line_end": 13}], "content_hash": "f2f318569567704c205c563c540b7e1d"}'
- path: libs/opsvi-core/src/opsvi_core/__init__.py
  line_count: 19
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import Config"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import ConfigManager"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ConfigurationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import OPSVIError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ValidationError"}, {"module": "logging", "alias": null, "line": 11, "statement": "from logging import get_logger"}, {"module": "logging", "alias": null, "line": 11, "statement": "from logging import setup_logging"}], "constants": []}, "key_elements": [{"name": "from config import Config", "type": "import", "line": 9}, {"name": "from config import ConfigManager", "type": "import", "line": 9}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 10}, {"name": "from exceptions import OPSVIError", "type": "import", "line": 10}, {"name": "from exceptions import ValidationError", "type": "import", "line": 10}, {"name": "from logging import get_logger", "type": "import", "line": 11}, {"name": "from logging import setup_logging", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "326b440bcc9e4fccf4ece5504ab93c4e"}'
- path: libs/opsvi-core/src/opsvi_core/exceptions.py
  line_count: 34
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OPSVIError", "line": 6, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 9, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "dict | None", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: dict | None = None)"}], "properties": [], "description": "Base exception class for OPSVI-related errors."}, {"name": "ConfigurationError", "line": 15, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related issues."}, {"name": "ValidationError", "line": 21, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised when validation of data fails."}, {"name": "ConnectionError", "line": 27, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised for connection-related problems."}, {"name": "TimeoutError", "line": 33, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised when an operation times out."}], "imports": [], "constants": []}, "key_elements": [{"name": "OPSVIError", "type": "class", "line": 6}, {"name": "ConfigurationError", "type": "class", "line": 15}, {"name": "ValidationError", "type": "class", "line": 21}, {"name": "ConnectionError", "type": "class", "line": 27}, {"name": "TimeoutError", "type": "class", "line": 33}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "OPSVIError Class", "description": "Class OPSVIError definition and methods.", "line_start": 6, "line_end": 12}, {"name": "ConfigurationError Class", "description": "Class ConfigurationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "ConnectionError Class", "description": "Class ConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "TimeoutError Class", "description": "Class TimeoutError definition and methods.", "line_start": 33, "line_end": 43}], "content_hash": "c8d70126b2ff92f0990f78b78b4ed33c"}'
- path: libs/opsvi-core/src/opsvi_core/config.py
  line_count: 79
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "Config", "line": 17, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents configuration settings with no additional methods."}, {"name": "ConfigManager", "line": 30, "inherits_from": [], "methods": [{"name": "__init__", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "config_class", "type": "type[Config]", "default": "Config):"}], "is_async": false, "signature": "__init__(self, config_class: type[Config] = Config):)"}, {"name": "load_from_env", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "env_file", "type": "Path | None = None", "default": "None"}], "is_async": false, "return_type": "Config", "description": "Load configuration from environment variables and optional .env file.", "signature": "load_from_env(self, env_file: Path | None = None = None) -> Config"}, {"name": "_load_env_file", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "env_file", "type": "Path"}], "is_async": false, "return_type": "None", "description": "Load environment variables from .env file.", "signature": "_load_env_file(self, env_file: Path) -> None"}, {"name": "config", "line": 71, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Config", "description": "Get the current configuration.", "signature": "config(self) -> Config"}, {"name": "get", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Get a configuration value.", "signature": "get(self, key: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Manages configuration operations including loading, saving, updating, and validating configurations."}], "imports": [{"module": "os", "alias": null, "line": 5, "statement": "import os"}, {"module": "structlog", "alias": null, "line": 9, "statement": "import structlog"}, {"module": "pathlib", "alias": null, "line": 6, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 7, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "exceptions", "alias": null, "line": 12, "statement": "from exceptions import ConfigurationError"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 5}, {"name": "structlog", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 6}, {"name": "from typing import Any", "type": "import", "line": 7}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 12}, {"name": "Config", "type": "class", "line": 17}, {"name": "ConfigManager", "type": "class", "line": 30}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 18}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 12}, {"name": "Config Class", "description": "Class Config definition and methods.", "line_start": 17, "line_end": 27}, {"name": "ConfigManager Class", "description": "Class ConfigManager definition and methods.", "line_start": 30, "line_end": 82}], "content_hash": "86bed1166db1bdc68af7df87bc8a0550"}'
- path: libs/opsvi-core/src/opsvi_core/logging.py
  line_count: 63
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 10, "parameters": [{"name": "level", "type": "str", "default": "INFO"}, {"name": "format", "type": "str", "default": "json"}, {"name": "include_timestamp", "type": "bool", "default": "True"}, {"name": "include_process", "type": "bool", "default": "True"}, {"name": "include_thread", "type": "bool", "default": "True"}], "is_async": false, "return_type": "None", "description": "Configures the logging system with specified level, format, and optional inclusion of timestamp, process, and thread information.", "signature": "setup_logging(level: str = INFO, format: str = json, include_timestamp: bool = True, include_process: bool = True, include_thread: bool = True) -> None"}, {"name": "get_logger", "line": 63, "parameters": [{"name": "name", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "structlog.BoundLogger", "description": "Retrieves a structlog logger instance optionally bound to a given name.", "signature": "get_logger(name: str | None = None = None) -> structlog.BoundLogger"}], "classes": [], "imports": [{"module": "sys", "alias": null, "line": 5, "statement": "import sys"}, {"module": "structlog", "alias": null, "line": 7, "statement": "import structlog"}], "constants": []}, "key_elements": [{"name": "sys", "type": "import", "line": 5}, {"name": "structlog", "type": "import", "line": 7}, {"name": "setup_logging", "type": "function", "line": 10}, {"name": "get_logger", "type": "function", "line": 63}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 7}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 10, "line_end": 62}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 63, "line_end": 68}], "content_hash": "5d061a67fba4627a0caa16a1bb452560"}'
- path: libs/opsvi-agents/src/opsvi/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "2a35222043dd8c22b1c74cc97aeffcaa"}'
- path: libs/opsvi-agents/src/opsvi/agents/__init__.py
  line_count: 6
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "crew_adapter", "alias": null, "line": 5, "statement": "from crew_adapter import CrewAdapter"}, {"module": "graph_adapter", "alias": null, "line": 6, "statement": "from graph_adapter import GraphAdapter"}], "constants": []}, "key_elements": [{"name": "from crew_adapter import CrewAdapter", "type": "import", "line": 5}, {"name": "from graph_adapter import GraphAdapter", "type": "import", "line": 6}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 6}], "content_hash": "a4e41f15112783048c0cee9e4b8eb8de"}'
- path: libs/opsvi-agents/src/opsvi/agents/crew_adapter.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "crew_adapter.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CrewAdapter", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the CrewAI adapter.", "signature": "__init__(self) -> None"}, {"name": "create_crew", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "agents", "type": "Any, tasks: Any"}, {"name": "tasks", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Create a crew with agents and tasks.", "signature": "create_crew(self, agents: Any, tasks: Any, tasks: Any) -> dict[str, Any]"}], "properties": [], "description": "Adapter class to manage and bind crew member data to views."}], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "CrewAdapter", "type": "class", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "CrewAdapter Class", "description": "Class CrewAdapter definition and methods.", "line_start": 8, "line_end": 19}], "content_hash": "3df954d155323de4992d7cfc8bf95ef8"}'
- path: libs/opsvi-agents/src/opsvi/agents/graph_adapter.py
  line_count: 15
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "graph_adapter.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "GraphAdapter", "line": 6, "inherits_from": [], "methods": [{"name": "__init__", "line": 9, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the LangGraph adapter.", "signature": "__init__(self) -> None"}, {"name": "create_graph", "line": 14, "parameters": [{"name": "self", "type": "self"}, {"name": "nodes", "type": "Any, edges: Any"}, {"name": "edges", "type": "Any"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Create a graph with nodes and edges.", "signature": "create_graph(self, nodes: Any, edges: Any, edges: Any) -> Dict[str, Any]"}], "properties": [], "description": "Adapter class to interface with different graph data structures, providing methods for graph manipulation and querying."}], "imports": [], "constants": []}, "key_elements": [{"name": "GraphAdapter", "type": "class", "line": 6}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "GraphAdapter Class", "description": "Class GraphAdapter definition and methods.", "line_start": 6, "line_end": 17}], "content_hash": "40b8bc83e30a559b837f29342704e6bc"}'
- path: .archive/genfilemap/setup.py
  line_count: 59
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "setup.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "setuptools", "alias": null, "line": 8, "statement": "from setuptools import find_packages"}, {"module": "setuptools", "alias": null, "line": 8, "statement": "from setuptools import setup"}], "constants": []}, "key_elements": [{"name": "from setuptools import find_packages", "type": "import", "line": 8}, {"name": "from setuptools import setup", "type": "import", "line": 8}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 8}], "content_hash": "2a55e0cc6a0307aab2d1ccc2d9e08d25"}'
- path: .archive/accf/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/accf/test_new_structure.py
  line_count: 105
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_new_structure.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_orchestrator", "line": 32, "parameters": [], "is_async": true, "signature": "async test_orchestrator()", "description": "Asynchronously tests the orchestrator''s workflow and behavior."}, {"name": "test_task_creation", "line": 48, "parameters": [], "is_async": false, "signature": "test_task_creation()", "description": "Tests the creation and initialization of task objects."}, {"name": "test_result_creation", "line": 59, "parameters": [], "is_async": false, "signature": "test_result_creation()", "description": "Tests the creation and validation of result objects."}, {"name": "main", "line": 71, "parameters": [], "is_async": true, "signature": "async main()", "description": "Asynchronous entry point to execute the main program logic."}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 8, "statement": "import asyncio"}, {"module": "sys", "alias": null, "line": 9, "statement": "import sys"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 8}, {"name": "sys", "type": "import", "line": 9}, {"name": "test_orchestrator", "type": "function", "line": 32}, {"name": "test_task_creation", "type": "function", "line": 48}, {"name": "test_result_creation", "type": "function", "line": 59}, {"name": "main", "type": "function", "line": 71}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 9}, {"name": "test_orchestrator Function", "description": "Function test_orchestrator implementation.", "line_start": 32, "line_end": 47}, {"name": "test_task_creation Function", "description": "Function test_task_creation implementation.", "line_start": 48, "line_end": 58}, {"name": "test_result_creation Function", "description": "Function test_result_creation implementation.", "line_start": 59, "line_end": 70}, {"name": "main Function", "description": "Function main implementation.", "line_start": 71, "line_end": 76}], "content_hash": "f02d25bd531622a1add4d39d61cc5671"}'
- path: .archive/accf/demo_comprehensive_research.py
  line_count: 215
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "demo_comprehensive_research.py", "description": "Python module with 6 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "print_separator", "line": 44, "parameters": [{"name": "title", "type": "str, char: str = \"=\""}, {"name": "char", "type": "str = \"=\"", "default": "="}], "is_async": false, "return_type": "None", "description": "Prints a formatted separator line with an optional title and character.", "signature": "print_separator(title: str, char: str = \"=\", char: str = \"=\" = =) -> None"}, {"name": "print_research_result", "line": 51, "parameters": [{"name": "result", "type": "dict[str, Any], question: str"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "None", "description": "Displays the research result along with the associated question.", "signature": "print_research_result(result: dict[str, Any], question: str, question: str) -> None"}, {"name": "print_pipeline_status", "line": 67, "parameters": [{"name": "agent", "type": "ResearchAgent, phase: str"}, {"name": "phase", "type": "str"}], "is_async": false, "return_type": "None", "description": "Outputs the current status of the research pipeline for a given agent and phase.", "signature": "print_pipeline_status(agent: ResearchAgent, phase: str, phase: str) -> None"}, {"name": "demonstrate_comprehensive_research", "line": 74, "parameters": [], "is_async": true, "return_type": "None", "description": "Asynchronously demonstrates the full research process using the research agent.", "signature": "async demonstrate_comprehensive_research() -> None"}, {"name": "demonstrate_individual_capabilities", "line": 162, "parameters": [], "is_async": false, "return_type": "None", "description": "Demonstrates the individual capabilities of the research agent components.", "signature": "demonstrate_individual_capabilities() -> None"}, {"name": "main", "line": 188, "parameters": [], "is_async": false, "return_type": "None", "description": "Entry point of the program that orchestrates demonstrations and research processes.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 19, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 20, "statement": "import logging"}, {"module": "os", "alias": null, "line": 21, "statement": "import os"}, {"module": "sys", "alias": null, "line": 22, "statement": "import sys"}, {"module": "datetime", "alias": null, "line": 23, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 24, "statement": "from typing import Any"}, {"module": "capabilities.research_agent", "alias": null, "line": 29, "statement": "from capabilities.research_agent import ResearchAgent"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 19}, {"name": "logging", "type": "import", "line": 20}, {"name": "os", "type": "import", "line": 21}, {"name": "sys", "type": "import", "line": 22}, {"name": "from datetime import datetime", "type": "import", "line": 23}, {"name": "from typing import Any", "type": "import", "line": 24}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 29}, {"name": "print_separator", "type": "function", "line": 44}, {"name": "print_research_result", "type": "function", "line": 51}, {"name": "print_pipeline_status", "type": "function", "line": 67}, {"name": "demonstrate_comprehensive_research", "type": "function", "line": 74}, {"name": "demonstrate_individual_capabilities", "type": "function", "line": 162}, {"name": "main", "type": "function", "line": 188}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 29}, {"name": "print_separator Function", "description": "Function print_separator implementation.", "line_start": 44, "line_end": 50}, {"name": "print_research_result Function", "description": "Function print_research_result implementation.", "line_start": 51, "line_end": 66}, {"name": "print_pipeline_status Function", "description": "Function print_pipeline_status implementation.", "line_start": 67, "line_end": 73}, {"name": "demonstrate_comprehensive_research Function", "description": "Function demonstrate_comprehensive_research implementation.", "line_start": 74, "line_end": 161}, {"name": "demonstrate_individual_capabilities Function", "description": "Function demonstrate_individual_capabilities implementation.", "line_start": 162, "line_end": 187}, {"name": "main Function", "description": "Function main implementation.", "line_start": 188, "line_end": 193}], "content_hash": "61ff42ff6ab198bfba2f87e6f738fbb4"}'
- path: .archive/accf/mcp_agent_server.py
  line_count: 393
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "mcp_agent_server.py", "description": "Python module with 1 functions and 12 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 385, "parameters": [], "is_async": true, "signature": "async main()", "description": "Asynchronous entry point that orchestrates the execution flow of the program."}], "classes": [{"name": "MemoryAgentTool", "line": 31, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 32, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Manages and utilizes memory-related functionalities within the agent system."}, {"name": "KnowledgeAgentTool", "line": 52, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Handles knowledge acquisition and retrieval processes for the agent."}, {"name": "TestingAgentTool", "line": 73, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Facilitates testing operations and validation procedures for the agent''s outputs."}, {"name": "ResearchAgentTool", "line": 94, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 95, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Conducts research tasks and information gathering to support agent decisions."}, {"name": "DocumentationAgentTool", "line": 116, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 117, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Generates and manages documentation related to the agent''s activities."}, {"name": "ConsultAgentTool", "line": 137, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 138, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 199, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "description": "\n        Execute Architect agent for generating detailed, actionable prompts for GPT-4.1 development agents.\n        Analyzes user requests and creates comprehensive prompts optimized for GPT-4.1''s capabilities and limitations.\n        Supports file analysis and maintains session context for ongoing prompt engineering discussions.\n        ", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Provides consultation capabilities by interfacing with external or internal resources."}, {"name": "ChallengeAgentTool", "line": 234, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 247, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Implements mechanisms to challenge assumptions and improve agent reasoning."}, {"name": "CritiqueAgentTool", "line": 252, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 253, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Offers critique and feedback to refine the agent''s performance and outputs."}, {"name": "CheckMeAgentTool", "line": 270, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 271, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 286, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "description": "\n        Execute CheckMeAgent with session support. If session_id is not provided, use ''default''.\n        ", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Performs self-checks and verification to ensure agent reliability and correctness."}, {"name": "CollaborationAgentTool", "line": 296, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 297, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 309, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Enables collaborative interactions between multiple agents or users."}, {"name": "SelfReflectionAgentTool", "line": 314, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 315, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 327, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Supports self-reflection processes to enhance agent self-awareness and learning."}, {"name": "DocsBundleAgentTool", "line": 332, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 333, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 348, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Bundles and organizes documentation assets for efficient access and distribution."}], "imports": [{"module": "asyncio", "alias": null, "line": 3, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 4, "statement": "import logging"}, {"module": "os", "alias": null, "line": 358, "statement": "import os"}, {"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}, {"module": "capabilities.challenge_agent", "alias": null, "line": 7, "statement": "from capabilities.challenge_agent import ChallengeAgent"}, {"module": "capabilities.check_me_agent", "alias": null, "line": 8, "statement": "from capabilities.check_me_agent import CheckMeAgent"}, {"module": "capabilities.collaboration_agent", "alias": null, "line": 9, "statement": "from capabilities.collaboration_agent import CollaborationAgent"}, {"module": "capabilities.consult_agent", "alias": null, "line": 10, "statement": "from capabilities.consult_agent import ConsultAgent"}, {"module": "capabilities.critique_agent", "alias": null, "line": 11, "statement": "from capabilities.critique_agent import CritiqueAgent"}, {"module": "capabilities.documentation_agent", "alias": null, "line": 12, "statement": "from capabilities.documentation_agent import DocumentationAgent"}, {"module": "capabilities.documentation_bundle_agent", "alias": null, "line": 13, "statement": "from capabilities.documentation_bundle_agent import DocumentationBundleAgent"}, {"module": "capabilities.knowledge_agent", "alias": null, "line": 16, "statement": "from capabilities.knowledge_agent import KnowledgeAgent"}, {"module": "capabilities.memory_agent", "alias": null, "line": 17, "statement": "from capabilities.memory_agent import MemoryAgent"}, {"module": "capabilities.research_agent", "alias": null, "line": 18, "statement": "from capabilities.research_agent import ResearchAgent"}, {"module": "capabilities.self_reflection_agent", "alias": null, "line": 19, "statement": "from capabilities.self_reflection_agent import SelfReflectionAgent"}, {"module": "capabilities.testing_agent", "alias": null, "line": 20, "statement": "from capabilities.testing_agent import TestingAgent"}, {"module": "shared.mcp.mcp_server_template", "alias": null, "line": 21, "statement": "from shared.mcp.mcp_server_template import BaseTool"}, {"module": "shared.mcp.mcp_server_template", "alias": null, "line": 21, "statement": "from shared.mcp.mcp_server_template import MCPServerTemplate"}, {"module": "shared.mcp.mcp_server_template", "alias": null, "line": 21, "statement": "from shared.mcp.mcp_server_template import TextContent"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 3}, {"name": "logging", "type": "import", "line": 4}, {"name": "os", "type": "import", "line": 358}, {"name": "from typing import Any", "type": "import", "line": 5}, {"name": "from capabilities.challenge_agent import ChallengeAgent", "type": "import", "line": 7}, {"name": "from capabilities.check_me_agent import CheckMeAgent", "type": "import", "line": 8}, {"name": "from capabilities.collaboration_agent import CollaborationAgent", "type": "import", "line": 9}, {"name": "from capabilities.consult_agent import ConsultAgent", "type": "import", "line": 10}, {"name": "from capabilities.critique_agent import CritiqueAgent", "type": "import", "line": 11}, {"name": "from capabilities.documentation_agent import DocumentationAgent", "type": "import", "line": 12}, {"name": "from capabilities.documentation_bundle_agent import DocumentationBundleAgent", "type": "import", "line": 13}, {"name": "from capabilities.knowledge_agent import KnowledgeAgent", "type": "import", "line": 16}, {"name": "from capabilities.memory_agent import MemoryAgent", "type": "import", "line": 17}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 18}, {"name": "from capabilities.self_reflection_agent import SelfReflectionAgent", "type": "import", "line": 19}, {"name": "from capabilities.testing_agent import TestingAgent", "type": "import", "line": 20}, {"name": "from shared.mcp.mcp_server_template import BaseTool", "type": "import", "line": 21}, {"name": "from shared.mcp.mcp_server_template import MCPServerTemplate", "type": "import", "line": 21}, {"name": "from shared.mcp.mcp_server_template import TextContent", "type": "import", "line": 21}, {"name": "MemoryAgentTool", "type": "class", "line": 31}, {"name": "KnowledgeAgentTool", "type": "class", "line": 52}, {"name": "TestingAgentTool", "type": "class", "line": 73}, {"name": "ResearchAgentTool", "type": "class", "line": 94}, {"name": "DocumentationAgentTool", "type": "class", "line": 116}, {"name": "ConsultAgentTool", "type": "class", "line": 137}, {"name": "ChallengeAgentTool", "type": "class", "line": 234}, {"name": "CritiqueAgentTool", "type": "class", "line": 252}, {"name": "CheckMeAgentTool", "type": "class", "line": 270}, {"name": "CollaborationAgentTool", "type": "class", "line": 296}, {"name": "SelfReflectionAgentTool", "type": "class", "line": 314}, {"name": "DocsBundleAgentTool", "type": "class", "line": 332}, {"name": "main", "type": "function", "line": 385}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 358}, {"name": "main Function", "description": "Function main implementation.", "line_start": 385, "line_end": 390}, {"name": "MemoryAgentTool Class", "description": "Class MemoryAgentTool definition and methods.", "line_start": 31, "line_end": 47}, {"name": "KnowledgeAgentTool Class", "description": "Class KnowledgeAgentTool definition and methods.", "line_start": 52, "line_end": 68}, {"name": "TestingAgentTool Class", "description": "Class TestingAgentTool definition and methods.", "line_start": 73, "line_end": 89}, {"name": "ResearchAgentTool Class", "description": "Class ResearchAgentTool definition and methods.", "line_start": 94, "line_end": 110}, {"name": "DocumentationAgentTool Class", "description": "Class DocumentationAgentTool definition and methods.", "line_start": 116, "line_end": 132}, {"name": "ConsultAgentTool Class", "description": "Class ConsultAgentTool definition and methods.", "line_start": 137, "line_end": 202}, {"name": "ChallengeAgentTool Class", "description": "Class ChallengeAgentTool definition and methods.", "line_start": 234, "line_end": 250}, {"name": "CritiqueAgentTool Class", "description": "Class CritiqueAgentTool definition and methods.", "line_start": 252, "line_end": 268}, {"name": "CheckMeAgentTool Class", "description": "Class CheckMeAgentTool definition and methods.", "line_start": 270, "line_end": 289}, {"name": "CollaborationAgentTool Class", "description": "Class CollaborationAgentTool definition and methods.", "line_start": 296, "line_end": 312}, {"name": "SelfReflectionAgentTool Class", "description": "Class SelfReflectionAgentTool definition and methods.", "line_start": 314, "line_end": 330}, {"name": "DocsBundleAgentTool Class", "description": "Class DocsBundleAgentTool definition and methods.", "line_start": 332, "line_end": 351}], "content_hash": "78a510926168eebea0299681da751b27"}'
- path: .archive/accf/schemas.py
  line_count: 121
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "schemas.py", "description": "Python module with 0 functions and 23 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryAgentInput", "line": 7, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Memory Agent."}, {"name": "MemoryAgentOutput", "line": 11, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Memory Agent."}, {"name": "KnowledgeAgentInput", "line": 16, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Knowledge Agent."}, {"name": "KnowledgeAgentOutput", "line": 20, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Knowledge Agent."}, {"name": "TestingAgentInput", "line": 25, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Testing Agent."}, {"name": "TestingAgentOutput", "line": 29, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Testing Agent."}, {"name": "ResearchAgentInput", "line": 34, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Research Agent."}, {"name": "ResearchAgentOutput", "line": 38, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Research Agent."}, {"name": "DocumentationAgentInput", "line": 43, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Documentation Agent."}, {"name": "DocumentationAgentOutput", "line": 47, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Documentation Agent."}, {"name": "ConsultAgentInput", "line": 52, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Consult Agent."}, {"name": "ConsultAgentOutput", "line": 59, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Consult Agent."}, {"name": "ChallengeAgentInput", "line": 68, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Challenge Agent."}, {"name": "ChallengeAgentOutput", "line": 72, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Challenge Agent."}, {"name": "CritiqueAgentInput", "line": 77, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the Critique Agent."}, {"name": "CritiqueAgentOutput", "line": 81, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the Critique Agent."}, {"name": "CheckMeAgentInput", "line": 86, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the input data structure for the CheckMe Agent."}, {"name": "CheckMeAgentOutput", "line": 90, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the output data structure from the CheckMe Agent."}, {"name": "RequirementsDoc", "line": 95, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the requirements documentation for a project."}, {"name": "DesignDoc", "line": 101, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the design documentation for a project."}, {"name": "SpecsDoc", "line": 108, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the specifications documentation for a project."}, {"name": "TestPlanDoc", "line": 114, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the test plan documentation for a project."}, {"name": "DocsBundle", "line": 119, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Aggregates multiple documentation types into a single bundle."}], "imports": [{"module": "pydantic", "alias": null, "line": 4, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from pydantic import BaseModel", "type": "import", "line": 4}, {"name": "MemoryAgentInput", "type": "class", "line": 7}, {"name": "MemoryAgentOutput", "type": "class", "line": 11}, {"name": "KnowledgeAgentInput", "type": "class", "line": 16}, {"name": "KnowledgeAgentOutput", "type": "class", "line": 20}, {"name": "TestingAgentInput", "type": "class", "line": 25}, {"name": "TestingAgentOutput", "type": "class", "line": 29}, {"name": "ResearchAgentInput", "type": "class", "line": 34}, {"name": "ResearchAgentOutput", "type": "class", "line": 38}, {"name": "DocumentationAgentInput", "type": "class", "line": 43}, {"name": "DocumentationAgentOutput", "type": "class", "line": 47}, {"name": "ConsultAgentInput", "type": "class", "line": 52}, {"name": "ConsultAgentOutput", "type": "class", "line": 59}, {"name": "ChallengeAgentInput", "type": "class", "line": 68}, {"name": "ChallengeAgentOutput", "type": "class", "line": 72}, {"name": "CritiqueAgentInput", "type": "class", "line": 77}, {"name": "CritiqueAgentOutput", "type": "class", "line": 81}, {"name": "CheckMeAgentInput", "type": "class", "line": 86}, {"name": "CheckMeAgentOutput", "type": "class", "line": 90}, {"name": "RequirementsDoc", "type": "class", "line": 95}, {"name": "DesignDoc", "type": "class", "line": 101}, {"name": "SpecsDoc", "type": "class", "line": 108}, {"name": "TestPlanDoc", "type": "class", "line": 114}, {"name": "DocsBundle", "type": "class", "line": 119}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 4, "line_end": 4}, {"name": "MemoryAgentInput Class", "description": "Class MemoryAgentInput definition and methods.", "line_start": 7, "line_end": 17}, {"name": "MemoryAgentOutput Class", "description": "Class MemoryAgentOutput definition and methods.", "line_start": 11, "line_end": 21}, {"name": "KnowledgeAgentInput Class", "description": "Class KnowledgeAgentInput definition and methods.", "line_start": 16, "line_end": 26}, {"name": "KnowledgeAgentOutput Class", "description": "Class KnowledgeAgentOutput definition and methods.", "line_start": 20, "line_end": 30}, {"name": "TestingAgentInput Class", "description": "Class TestingAgentInput definition and methods.", "line_start": 25, "line_end": 35}, {"name": "TestingAgentOutput Class", "description": "Class TestingAgentOutput definition and methods.", "line_start": 29, "line_end": 39}, {"name": "ResearchAgentInput Class", "description": "Class ResearchAgentInput definition and methods.", "line_start": 34, "line_end": 44}, {"name": "ResearchAgentOutput Class", "description": "Class ResearchAgentOutput definition and methods.", "line_start": 38, "line_end": 48}, {"name": "DocumentationAgentInput Class", "description": "Class DocumentationAgentInput definition and methods.", "line_start": 43, "line_end": 53}, {"name": "DocumentationAgentOutput Class", "description": "Class DocumentationAgentOutput definition and methods.", "line_start": 47, "line_end": 57}, {"name": "ConsultAgentInput Class", "description": "Class ConsultAgentInput definition and methods.", "line_start": 52, "line_end": 62}, {"name": "ConsultAgentOutput Class", "description": "Class ConsultAgentOutput definition and methods.", "line_start": 59, "line_end": 69}, {"name": "ChallengeAgentInput Class", "description": "Class ChallengeAgentInput definition and methods.", "line_start": 68, "line_end": 78}, {"name": "ChallengeAgentOutput Class", "description": "Class ChallengeAgentOutput definition and methods.", "line_start": 72, "line_end": 82}, {"name": "CritiqueAgentInput Class", "description": "Class CritiqueAgentInput definition and methods.", "line_start": 77, "line_end": 87}, {"name": "CritiqueAgentOutput Class", "description": "Class CritiqueAgentOutput definition and methods.", "line_start": 81, "line_end": 91}, {"name": "CheckMeAgentInput Class", "description": "Class CheckMeAgentInput definition and methods.", "line_start": 86, "line_end": 96}, {"name": "CheckMeAgentOutput Class", "description": "Class CheckMeAgentOutput definition and methods.", "line_start": 90, "line_end": 100}, {"name": "RequirementsDoc Class", "description": "Class RequirementsDoc definition and methods.", "line_start": 95, "line_end": 105}, {"name": "DesignDoc Class", "description": "Class DesignDoc definition and methods.", "line_start": 101, "line_end": 111}, {"name": "SpecsDoc Class", "description": "Class SpecsDoc definition and methods.", "line_start": 108, "line_end": 118}, {"name": "TestPlanDoc Class", "description": "Class TestPlanDoc definition and methods.", "line_start": 114, "line_end": 124}, {"name": "DocsBundle Class", "description": "Class DocsBundle definition and methods.", "line_start": 119, "line_end": 129}], "content_hash": "f7c00cde83c48a39fa91e8776d825ca5"}'
- path: .archive/accf/test_context7_integration.py
  line_count: 140
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_context7_integration.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_context7_direct", "line": 19, "parameters": [], "is_async": true, "description": "Asynchronously tests the direct context7 functionality.", "signature": "async test_context7_direct()"}, {"name": "test_research_agent_query_generation", "line": 43, "parameters": [], "is_async": false, "description": "Tests the query generation process of the research agent.", "signature": "test_research_agent_query_generation()"}, {"name": "test_full_research_pipeline", "line": 97, "parameters": [], "is_async": true, "description": "Asynchronously tests the entire research pipeline from start to finish.", "signature": "async test_full_research_pipeline()"}, {"name": "main", "line": 123, "parameters": [], "is_async": false, "description": "Entry point function to execute the main program logic.", "signature": "main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 8, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "capabilities.research_agent", "alias": null, "line": 11, "statement": "from capabilities.research_agent import ResearchAgent"}, {"module": "capabilities.tools.context7_tool", "alias": null, "line": 12, "statement": "from capabilities.tools.context7_tool import Context7Tool"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 8}, {"name": "logging", "type": "import", "line": 9}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 11}, {"name": "from capabilities.tools.context7_tool import Context7Tool", "type": "import", "line": 12}, {"name": "test_context7_direct", "type": "function", "line": 19}, {"name": "test_research_agent_query_generation", "type": "function", "line": 43}, {"name": "test_full_research_pipeline", "type": "function", "line": 97}, {"name": "main", "type": "function", "line": 123}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 12}, {"name": "test_context7_direct Function", "description": "Function test_context7_direct implementation.", "line_start": 19, "line_end": 42}, {"name": "test_research_agent_query_generation Function", "description": "Function test_research_agent_query_generation implementation.", "line_start": 43, "line_end": 96}, {"name": "test_full_research_pipeline Function", "description": "Function test_full_research_pipeline implementation.", "line_start": 97, "line_end": 122}, {"name": "main Function", "description": "Function main implementation.", "line_start": 123, "line_end": 128}], "content_hash": "c7d1fd9e9d9712ca0b57799a7644726e"}'
- path: .archive/accf/model_selection_engine.py
  line_count: 585
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "model_selection_engine.py", "description": "Python module with 2 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_task_context", "line": 496, "parameters": [{"name": "prompt_text", "type": "str"}, {"name": "task_type", "type": "str | None", "default": "None"}, {"name": "time_constraint", "type": "str | None", "default": "None"}, {"name": "quality_requirement", "type": "str | None", "default": "None"}, {"name": "complexity_level", "type": "str | None", "default": "None"}, {"name": "user_override", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "TaskContext", "description": "Generates a TaskContext object encapsulating details about the task based on provided parameters.", "signature": "create_task_context(prompt_text: str, task_type: str | None = None, time_constraint: str | None = None, quality_requirement: str | None = None, complexity_level: str | None = None, user_override: str | None = None) -> TaskContext"}, {"name": "select_optimal_model", "line": 538, "parameters": [{"name": "prompt_text", "type": "str"}, {"name": "task_type", "type": "str | None", "default": "None"}, {"name": "time_constraint", "type": "str | None", "default": "None"}, {"name": "quality_requirement", "type": "str | None", "default": "None"}, {"name": "complexity_level", "type": "str | None", "default": "None"}, {"name": "user_override", "type": "str | None", "default": "None"}, {"name": "config_path", "type": "str", "default": "model_selection_config.json"}], "is_async": false, "return_type": "ModelDecision", "description": "Determines and returns the best model to use for a given task considering various constraints and configurations.", "signature": "select_optimal_model(prompt_text: str, task_type: str | None = None, time_constraint: str | None = None, quality_requirement: str | None = None, complexity_level: str | None = None, user_override: str | None = None, config_path: str = model_selection_config.json) -> ModelDecision"}], "classes": [{"name": "TaskContext", "line": 28, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the contextual information and parameters related to a specific task."}, {"name": "ModelDecision", "line": 40, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the decision details regarding the selected model for a task."}, {"name": "ModelSelectionEngine", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "config_path", "type": "str", "default": "model_selection_config.json"}], "is_async": false, "description": "Initialize the model selection engine with configuration.", "signature": "__init__(self, config_path: str = model_selection_config.json)"}, {"name": "_load_config", "line": 72, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Load the model selection configuration from JSON file.", "signature": "_load_config(self) -> dict[str, Any]"}, {"name": "analyze_prompt", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt_text", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Analyze the prompt text to determine task characteristics.\n\n        Args:\n            prompt_text: The user''s prompt text\n\n        Returns:\n            Dictionary containing task analysis results\n        ", "signature": "analyze_prompt(self, prompt_text: str) -> dict[str, Any]"}, {"name": "select_model", "line": 323, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "TaskContext"}], "is_async": false, "return_type": "ModelDecision", "description": "\n        Select the optimal model based on task context.\n\n        Args:\n            context: TaskContext object containing decision parameters\n\n        Returns:\n            ModelDecision object with selected model and reasoning\n        ", "signature": "select_model(self, context: TaskContext) -> ModelDecision"}, {"name": "_get_alternatives", "line": 405, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "TaskContext"}], "is_async": false, "return_type": "list[str]", "description": "Get alternative models based on context.", "signature": "_get_alternatives(self, context: TaskContext) -> list[str]"}, {"name": "_calculate_confidence", "line": 425, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "TaskContext"}], "is_async": false, "return_type": "float", "description": "Calculate confidence score for the model selection.", "signature": "_calculate_confidence(self, context: TaskContext) -> float"}, {"name": "_generate_reasoning", "line": 451, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "TaskContext, selected_model: str"}, {"name": "selected_model", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate human-readable reasoning for the model selection.", "signature": "_generate_reasoning(self, context: TaskContext, selected_model: str, selected_model: str) -> str"}, {"name": "get_model_info", "line": 480, "parameters": [{"name": "self", "type": "self"}, {"name": "model_name", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get detailed information about a specific model.", "signature": "get_model_info(self, model_name: str) -> dict[str, Any]"}, {"name": "list_available_models", "line": 487, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List all available models.", "signature": "list_available_models(self) -> list[str]"}, {"name": "get_task_types", "line": 491, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List all available task types.", "signature": "get_task_types(self) -> list[str]"}], "properties": [], "description": "Manages the logic and processes involved in selecting the most appropriate model for tasks."}], "imports": [{"module": "json", "alias": null, "line": 16, "statement": "import json"}, {"module": "logging", "alias": null, "line": 17, "statement": "import logging"}, {"module": "dataclasses", "alias": null, "line": 18, "statement": "from dataclasses import dataclass"}, {"module": "pathlib", "alias": null, "line": 19, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 16}, {"name": "logging", "type": "import", "line": 17}, {"name": "from dataclasses import dataclass", "type": "import", "line": 18}, {"name": "from pathlib import Path", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "TaskContext", "type": "class", "line": 28}, {"name": "ModelDecision", "type": "class", "line": 40}, {"name": "ModelSelectionEngine", "type": "class", "line": 50}, {"name": "create_task_context", "type": "function", "line": 496}, {"name": "select_optimal_model", "type": "function", "line": 538}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 16, "line_end": 20}, {"name": "create_task_context Function", "description": "Function create_task_context implementation.", "line_start": 496, "line_end": 537}, {"name": "select_optimal_model Function", "description": "Function select_optimal_model implementation.", "line_start": 538, "line_end": 543}, {"name": "TaskContext Class", "description": "Class TaskContext definition and methods.", "line_start": 28, "line_end": 38}, {"name": "ModelDecision Class", "description": "Class ModelDecision definition and methods.", "line_start": 40, "line_end": 50}, {"name": "ModelSelectionEngine Class", "description": "Class ModelSelectionEngine definition and methods.", "line_start": 50, "line_end": 494}], "content_hash": "daaf87ac3df54af17310a6d6f750d790"}'
- path: .archive/accf/model_comparison_test.py
  line_count: 584
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "model_comparison_test.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 564, "parameters": [], "is_async": true, "description": "Asynchronous entry point to execute the primary workflow.", "signature": "async main()"}], "classes": [{"name": "ModelComparisonTester", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "test_model", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Test a single model with the o3_agent tool.", "signature": "async test_model(self, model: str) -> dict[str, Any]"}, {"name": "_generate_mock_response", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate mock responses to simulate different model characteristics.", "signature": "_generate_mock_response(self, model: str) -> str"}, {"name": "_analyze_response", "line": 292, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Analyze response characteristics and quality metrics.", "signature": "_analyze_response(self, response: str) -> dict[str, Any]"}, {"name": "_calculate_technical_depth", "line": 310, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate technical depth score (0-10).", "signature": "_calculate_technical_depth(self, response: str) -> float"}, {"name": "_calculate_structure_score", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate structure and organization score (0-10).", "signature": "_calculate_structure_score(self, response: str) -> float"}, {"name": "_calculate_completeness_score", "line": 353, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate completeness score based on required sections (0-10).", "signature": "_calculate_completeness_score(self, response: str) -> float"}, {"name": "run_comparison", "line": 371, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Run comparison tests for all models.", "signature": "async run_comparison(self) -> dict[str, Any]"}, {"name": "_generate_comparison_report", "line": 395, "parameters": [{"name": "self", "type": "self"}, {"name": "total_time", "type": "float"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Generate comprehensive comparison report.", "signature": "_generate_comparison_report(self, total_time: float) -> dict[str, Any]"}, {"name": "_analyze_model_differences", "line": 445, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]):"}], "is_async": false, "description": "Analyze differences between models.", "signature": "_analyze_model_differences(self, report: dict[str, Any]):)"}, {"name": "_generate_recommendations", "line": 507, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]):"}], "is_async": false, "description": "Generate recommendations based on model characteristics.", "signature": "_generate_recommendations(self, report: dict[str, Any]):)"}, {"name": "save_report", "line": 555, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]"}, {"name": "filename", "type": "str", "default": "model_comparison_report.json"}], "is_async": false, "description": "Save the comparison report to a JSON file.", "signature": "save_report(self, report: dict[str, Any], filename: str = model_comparison_report.json)"}], "properties": [], "description": "Handles testing and comparison of different machine learning models."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}], "constants": [{"name": "TEST_PROMPT", "line": 17, "value": "\nYou are a senior software architect tasked with designing a scalable microservices architecture for a new e-commerce platform. The platform needs to handle:\n\n1. 100,000+ concurrent users\n2. Real-time inventory management\n3. Payment processing with multiple providers\n4. Order fulfillment and shipping\n5. Customer analytics and personalization\n6. Multi-tenant support for different storefronts\n\nRequirements:\n- 99.9% uptime SLA\n- Sub-second response times for critical operations\n- GDPR compliance for EU customers\n- PCI DSS compliance for payment processing\n- Horizontal scalability for peak shopping seasons\n\nPlease provide:\n1. A high-level architecture diagram description\n2. Service decomposition with clear boundaries\n3. Data flow patterns for key operations\n4. Technology stack recommendations\n5. Security considerations and implementation\n6. Monitoring and observability strategy\n7. Deployment and scaling approach\n8. Potential challenges and mitigation strategies\n\nFocus on practical, production-ready solutions with specific implementation details.\n", "type": "str"}, {"name": "APPROVED_MODELS", "line": 47, "value": "[]", "type": "list"}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "TEST_PROMPT", "type": "constant", "line": 17}, {"name": "APPROVED_MODELS", "type": "constant", "line": 47}, {"name": "ModelComparisonTester", "type": "class", "line": 50}, {"name": "main", "type": "function", "line": 564}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "main Function", "description": "Function main implementation.", "line_start": 564, "line_end": 569}, {"name": "ModelComparisonTester Class", "description": "Class ModelComparisonTester definition and methods.", "line_start": 50, "line_end": 558}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 17, "line_end": 47}], "content_hash": "8547f900f9e35fb6cc45ee35f3e615df"}'
- path: .archive/accf/collect_project_info.py
  line_count: 77
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "collect_project_info.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 17, "parameters": [], "is_async": false, "description": "Entry point of the program that executes the primary workflow.", "signature": "main()"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "subprocess", "alias": null, "line": 12, "statement": "import subprocess"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 14, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 11}, {"name": "subprocess", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "from pathlib import Path", "type": "import", "line": 14}, {"name": "main", "type": "function", "line": 17}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 14}, {"name": "main Function", "description": "Function main implementation.", "line_start": 17, "line_end": 22}], "content_hash": "8b08fb1e81edaddad675143f19d72b92"}'
- path: .archive/accf/performance_test.py
  line_count: 200
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "performance_test.py", "description": "Python module with 1 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 180, "parameters": [], "is_async": true, "description": "Asynchronous entry point that orchestrates the execution of the performance testing workflow.", "signature": "async main()"}], "classes": [{"name": "PerformanceResult", "line": 20, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the outcome of a performance test, including metrics and results."}, {"name": "PerformanceTester", "line": 36, "inherits_from": [], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "base_url", "type": "str", "default": "http://localhost:8000"}], "is_async": false, "signature": "__init__(self, base_url: str = http://localhost:8000)"}, {"name": "test_endpoint", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "endpoint", "type": "str"}, {"name": "num_requests", "type": "int", "default": "100"}, {"name": "concurrent", "type": "int", "default": "10"}], "is_async": true, "return_type": "PerformanceResult", "description": "Test a single endpoint with specified parameters.", "signature": "async test_endpoint(self, endpoint: str, num_requests: int = 100, concurrent: int = 10) -> PerformanceResult"}, {"name": "print_results", "line": 118, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Print formatted performance test results.", "signature": "print_results(self)"}, {"name": "save_results", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "filename", "type": "str", "default": "performance_results.json"}], "is_async": false, "description": "Save results to JSON file.", "signature": "save_results(self, filename: str = performance_results.json)"}], "properties": [], "description": "Manages and executes performance tests, providing methods to run tests, collect results, and analyze performance."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "statistics", "alias": null, "line": 12, "statement": "import statistics"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "aiohttp", "alias": null, "line": 16, "statement": "import aiohttp"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "statistics", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "aiohttp", "type": "import", "line": 16}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "PerformanceResult", "type": "class", "line": 20}, {"name": "PerformanceTester", "type": "class", "line": 36}, {"name": "main", "type": "function", "line": 180}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "main Function", "description": "Function main implementation.", "line_start": 180, "line_end": 185}, {"name": "PerformanceResult Class", "description": "Class PerformanceResult definition and methods.", "line_start": 20, "line_end": 30}, {"name": "PerformanceTester Class", "description": "Class PerformanceTester definition and methods.", "line_start": 36, "line_end": 157}], "content_hash": "e6eba2b4132754382eb596ee6be72234"}'
- path: .archive/accf/test_server.py
  line_count: 16
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_server.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 11, "parameters": [], "is_async": false, "description": "Entry point of the program that executes the primary workflow.", "signature": "main()"}], "classes": [], "imports": [{"module": "uvicorn", "alias": null, "line": 7, "statement": "import uvicorn"}, {"module": "accf_agents.api.app", "alias": null, "line": 8, "statement": "from accf_agents.api.app import app"}], "constants": []}, "key_elements": [{"name": "uvicorn", "type": "import", "line": 7}, {"name": "from accf_agents.api.app import app", "type": "import", "line": 8}, {"name": "main", "type": "function", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 8}, {"name": "main Function", "description": "Function main implementation.", "line_start": 11, "line_end": 16}], "content_hash": "7bf09858861a4266c21d69dba3324e32"}'
- path: .archive/accf/demo_simple_research.py
  line_count: 190
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "demo_simple_research.py", "description": "Python module with 5 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "print_separator", "line": 22, "parameters": [{"name": "title", "type": "str, char: str = \"=\""}, {"name": "char", "type": "str = \"=\"", "default": "="}], "is_async": false, "return_type": "None", "description": "Prints a separator line with an optional title and character.", "signature": "print_separator(title: str, char: str = \"=\", char: str = \"=\" = =) -> None"}, {"name": "demonstrate_basic_capabilities", "line": 29, "parameters": [], "is_async": false, "return_type": "None", "description": "Demonstrates the basic capabilities of the system.", "signature": "demonstrate_basic_capabilities() -> None"}, {"name": "demonstrate_comprehensive_research", "line": 61, "parameters": [], "is_async": false, "return_type": "None", "description": "Demonstrates the comprehensive research features.", "signature": "demonstrate_comprehensive_research() -> None"}, {"name": "demonstrate_agent_architecture", "line": 121, "parameters": [], "is_async": false, "return_type": "None", "description": "Demonstrates the agent architecture components.", "signature": "demonstrate_agent_architecture() -> None"}, {"name": "main", "line": 157, "parameters": [], "is_async": false, "return_type": "None", "description": "Main function to execute the demonstration sequence.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "capabilities.research_agent", "alias": null, "line": 19, "statement": "from capabilities.research_agent import ResearchAgent"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 19}, {"name": "print_separator", "type": "function", "line": 22}, {"name": "demonstrate_basic_capabilities", "type": "function", "line": 29}, {"name": "demonstrate_comprehensive_research", "type": "function", "line": 61}, {"name": "demonstrate_agent_architecture", "type": "function", "line": 121}, {"name": "main", "type": "function", "line": 157}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 12, "line_end": 19}, {"name": "print_separator Function", "description": "Function print_separator implementation.", "line_start": 22, "line_end": 28}, {"name": "demonstrate_basic_capabilities Function", "description": "Function demonstrate_basic_capabilities implementation.", "line_start": 29, "line_end": 60}, {"name": "demonstrate_comprehensive_research Function", "description": "Function demonstrate_comprehensive_research implementation.", "line_start": 61, "line_end": 120}, {"name": "demonstrate_agent_architecture Function", "description": "Function demonstrate_agent_architecture implementation.", "line_start": 121, "line_end": 156}, {"name": "main Function", "description": "Function main implementation.", "line_start": 157, "line_end": 162}], "content_hash": "4ac0b63e4fb17ff57d506a692f91a995"}'
- path: .archive/accf/real_model_comparison_test.py
  line_count: 529
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "real_model_comparison_test.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 498, "parameters": [], "is_async": true, "description": "Asynchronous entry point that orchestrates the execution of the program.", "signature": "async main()"}], "classes": [{"name": "RealModelComparisonTester", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "test_model_with_o3_agent", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Test a single model using the actual o3_agent tool.", "signature": "async test_model_with_o3_agent(self, model: str) -> dict[str, Any]"}, {"name": "_analyze_response", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Analyze response characteristics and quality metrics.", "signature": "_analyze_response(self, response: str) -> dict[str, Any]"}, {"name": "_calculate_technical_depth", "line": 151, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate technical depth score (0-10).", "signature": "_calculate_technical_depth(self, response: str) -> float"}, {"name": "_calculate_structure_score", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate structure and organization score (0-10).", "signature": "_calculate_structure_score(self, response: str) -> float"}, {"name": "_calculate_completeness_score", "line": 194, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "float", "description": "Calculate completeness score based on required sections (0-10).", "signature": "_calculate_completeness_score(self, response: str) -> float"}, {"name": "run_comparison", "line": 212, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Run comparison tests for all models.", "signature": "async run_comparison(self) -> dict[str, Any]"}, {"name": "_generate_comparison_report", "line": 237, "parameters": [{"name": "self", "type": "self"}, {"name": "total_time", "type": "float"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Generate comprehensive comparison report.", "signature": "_generate_comparison_report(self, total_time: float) -> dict[str, Any]"}, {"name": "_analyze_model_differences", "line": 299, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]"}, {"name": "successful_models", "type": "list[str]"}], "is_async": false, "description": "Analyze differences between models.", "signature": "_analyze_model_differences(self, report: dict[str, Any], successful_models: list[str])"}, {"name": "_generate_recommendations", "line": 363, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]"}, {"name": "successful_models", "type": "list[str]"}], "is_async": false, "description": "Generate recommendations based on model characteristics.", "signature": "_generate_recommendations(self, report: dict[str, Any], successful_models: list[str])"}, {"name": "save_report", "line": 451, "parameters": [{"name": "self", "type": "self"}, {"name": "report", "type": "dict[str, Any]"}, {"name": "filename", "type": "str", "default": "real_model_comparison_report.json"}], "is_async": false, "description": "Save the comparison report to a JSON file.", "signature": "save_report(self, report: dict[str, Any], filename: str = real_model_comparison_report.json)"}, {"name": "save_responses", "line": 461, "parameters": [{"name": "self", "type": "self"}, {"name": "filename", "type": "str", "default": "model_responses.md"}], "is_async": false, "description": "Save individual model responses to a markdown file for easy comparison.", "signature": "save_responses(self, filename: str = model_responses.md)"}], "properties": [], "description": "Class responsible for testing and comparing real-world model performances across multiple scenarios."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}], "constants": [{"name": "TEST_PROMPT", "line": 17, "value": "\nYou are a senior software architect tasked with designing a scalable microservices architecture for a new e-commerce platform. The platform needs to handle:\n\n1. 100,000+ concurrent users\n2. Real-time inventory management\n3. Payment processing with multiple providers\n4. Order fulfillment and shipping\n5. Customer analytics and personalization\n6. Multi-tenant support for different storefronts\n\nRequirements:\n- 99.9% uptime SLA\n- Sub-second response times for critical operations\n- GDPR compliance for EU customers\n- PCI DSS compliance for payment processing\n- Horizontal scalability for peak shopping seasons\n\nPlease provide:\n1. A high-level architecture diagram description\n2. Service decomposition with clear boundaries\n3. Data flow patterns for key operations\n4. Technology stack recommendations\n5. Security considerations and implementation\n6. Monitoring and observability strategy\n7. Deployment and scaling approach\n8. Potential challenges and mitigation strategies\n\nFocus on practical, production-ready solutions with specific implementation details.\n", "type": "str"}, {"name": "APPROVED_MODELS", "line": 47, "value": "[]", "type": "list"}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "TEST_PROMPT", "type": "constant", "line": 17}, {"name": "APPROVED_MODELS", "type": "constant", "line": 47}, {"name": "RealModelComparisonTester", "type": "class", "line": 50}, {"name": "main", "type": "function", "line": 498}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "main Function", "description": "Function main implementation.", "line_start": 498, "line_end": 503}, {"name": "RealModelComparisonTester Class", "description": "Class RealModelComparisonTester definition and methods.", "line_start": 50, "line_end": 464}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 17, "line_end": 47}], "content_hash": "9ca270f2d23659d516f58c6affb1fc8f"}'
- path: .archive/accf/agent_api.py
  line_count: 22
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "agent_api.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "AgentAPI", "line": 7, "inherits_from": [], "methods": [{"name": "__init__", "line": 8, "parameters": [{"name": "self", "type": "self"}, {"name": "intent_bus", "type": "unknown"}, {"name": "event_router", "type": "unknown"}, {"name": "task_market", "type": "unknown"}, {"name": "knowledge_graph", "type": "unknown"}], "is_async": false, "signature": "__init__(self, intent_bus, event_router, task_market, knowledge_graph)"}, {"name": "publish_intent", "line": 14, "parameters": [{"name": "self", "type": "self"}, {"name": "intent_type", "type": "str"}, {"name": "payload", "type": "dict[str, Any]):"}], "is_async": true, "signature": "async publish_intent(self, intent_type: str, payload: dict[str, Any]):)"}, {"name": "subscribe_to_intent", "line": 17, "parameters": [{"name": "self", "type": "self"}, {"name": "intent_type", "type": "str"}, {"name": "callback", "type": "Callable):"}], "is_async": false, "signature": "subscribe_to_intent(self, intent_type: str, callback: Callable):)"}, {"name": "claim_task", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str):"}], "is_async": true, "signature": "async claim_task(self, agent_id: str):)"}, {"name": "update_knowledge", "line": 23, "parameters": [{"name": "self", "type": "self"}, {"name": "fact", "type": "dict[str, Any]"}, {"name": "provenance", "type": "dict[str, Any]", "default": "None"}], "is_async": false, "signature": "update_knowledge(self, fact: dict[str, Any], provenance: dict[str, Any] = None)"}], "properties": [], "description": "Provides an interface for interacting with and managing agent operations."}], "imports": [{"module": "collections.abc", "alias": null, "line": 3, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 4, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from collections.abc import Callable", "type": "import", "line": 3}, {"name": "from typing import Any", "type": "import", "line": 4}, {"name": "AgentAPI", "type": "class", "line": 7}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 4}, {"name": "AgentAPI Class", "description": "Class AgentAPI definition and methods.", "line_start": 7, "line_end": 26}], "content_hash": "adf047da51d0818e5087aef86f976d60"}'
- path: .archive/accf/demo_enhanced_research_agent.py
  line_count: 256
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "demo_enhanced_research_agent.py", "description": "Python module with 6 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 22, "parameters": [], "is_async": false, "description": "Configures the logging settings for the application.", "signature": "setup_logging()"}, {"name": "print_section", "line": 34, "parameters": [{"name": "title", "type": "str"}, {"name": "content", "type": "Any"}, {"name": "separator", "type": "bool", "default": "True"}], "is_async": false, "description": "Prints a formatted section with a title and content, optionally separated by a line.", "signature": "print_section(title: str, content: Any, separator: bool = True)"}, {"name": "demo_research_workflow", "line": 62, "parameters": [], "is_async": false, "description": "Demonstrates the research workflow process with example data.", "signature": "demo_research_workflow()"}, {"name": "demo_intelligent_query_generation", "line": 146, "parameters": [], "is_async": false, "description": "Shows how intelligent query generation can be performed.", "signature": "demo_intelligent_query_generation()"}, {"name": "demo_context7_integration", "line": 197, "parameters": [], "is_async": false, "description": "Demonstrates integration with the Context7 system.", "signature": "demo_context7_integration()"}, {"name": "main", "line": 225, "parameters": [], "is_async": false, "description": "Entry point of the program that runs the main application logic.", "signature": "main()"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 15, "statement": "import logging"}, {"module": "sys", "alias": null, "line": 16, "statement": "import sys"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "capabilities.research_agent", "alias": null, "line": 19, "statement": "from capabilities.research_agent import ResearchAgent"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 15}, {"name": "sys", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 19}, {"name": "setup_logging", "type": "function", "line": 22}, {"name": "print_section", "type": "function", "line": 34}, {"name": "demo_research_workflow", "type": "function", "line": 62}, {"name": "demo_intelligent_query_generation", "type": "function", "line": 146}, {"name": "demo_context7_integration", "type": "function", "line": 197}, {"name": "main", "type": "function", "line": 225}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 19}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 22, "line_end": 33}, {"name": "print_section Function", "description": "Function print_section implementation.", "line_start": 34, "line_end": 61}, {"name": "demo_research_workflow Function", "description": "Function demo_research_workflow implementation.", "line_start": 62, "line_end": 145}, {"name": "demo_intelligent_query_generation Function", "description": "Function demo_intelligent_query_generation implementation.", "line_start": 146, "line_end": 196}, {"name": "demo_context7_integration Function", "description": "Function demo_context7_integration implementation.", "line_start": 197, "line_end": 224}, {"name": "main Function", "description": "Function main implementation.", "line_start": 225, "line_end": 230}], "content_hash": "4bbd5045010cea20f92c57cd8e3cdc95"}'
- path: .archive/accf/demo_research_agent_showcase.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "demo_research_agent_showcase.py", "description": "Python module with 9 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "print_separator", "line": 20, "parameters": [{"name": "title", "type": "str, char: str = \"=\""}, {"name": "char", "type": "str = \"=\"", "default": "="}], "is_async": false, "return_type": "None", "description": "Prints a separator line with a title and a customizable character.", "signature": "print_separator(title: str, char: str = \"=\", char: str = \"=\" = =) -> None"}, {"name": "showcase_architecture", "line": 27, "parameters": [], "is_async": false, "return_type": "None", "description": "Displays information about the system''s architecture.", "signature": "showcase_architecture() -> None"}, {"name": "showcase_research_pipeline", "line": 60, "parameters": [], "is_async": false, "return_type": "None", "description": "Presents the research pipeline used in the project.", "signature": "showcase_research_pipeline() -> None"}, {"name": "showcase_technical_features", "line": 92, "parameters": [], "is_async": false, "return_type": "None", "description": "Highlights the technical features of the system.", "signature": "showcase_technical_features() -> None"}, {"name": "showcase_use_cases", "line": 123, "parameters": [], "is_async": false, "return_type": "None", "description": "Shows various use cases demonstrating the system''s applications.", "signature": "showcase_use_cases() -> None"}, {"name": "showcase_code_structure", "line": 155, "parameters": [], "is_async": false, "return_type": "None", "description": "Outlines the structure of the codebase.", "signature": "showcase_code_structure() -> None"}, {"name": "showcase_implementation_highlights", "line": 178, "parameters": [], "is_async": false, "return_type": "None", "description": "Details key implementation aspects and highlights.", "signature": "showcase_implementation_highlights() -> None"}, {"name": "showcase_demo_results", "line": 210, "parameters": [], "is_async": false, "return_type": "None", "description": "Displays results from demonstration runs or experiments.", "signature": "showcase_demo_results() -> None"}, {"name": "main", "line": 240, "parameters": [], "is_async": false, "return_type": "None", "description": "Main entry point that orchestrates the showcasing of all components.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "print_separator", "type": "function", "line": 20}, {"name": "showcase_architecture", "type": "function", "line": 27}, {"name": "showcase_research_pipeline", "type": "function", "line": 60}, {"name": "showcase_technical_features", "type": "function", "line": 92}, {"name": "showcase_use_cases", "type": "function", "line": 123}, {"name": "showcase_code_structure", "type": "function", "line": 155}, {"name": "showcase_implementation_highlights", "type": "function", "line": 178}, {"name": "showcase_demo_results", "type": "function", "line": 210}, {"name": "main", "type": "function", "line": 240}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 12, "line_end": 14}, {"name": "print_separator Function", "description": "Function print_separator implementation.", "line_start": 20, "line_end": 26}, {"name": "showcase_architecture Function", "description": "Function showcase_architecture implementation.", "line_start": 27, "line_end": 59}, {"name": "showcase_research_pipeline Function", "description": "Function showcase_research_pipeline implementation.", "line_start": 60, "line_end": 91}, {"name": "showcase_technical_features Function", "description": "Function showcase_technical_features implementation.", "line_start": 92, "line_end": 122}, {"name": "showcase_use_cases Function", "description": "Function showcase_use_cases implementation.", "line_start": 123, "line_end": 154}, {"name": "showcase_code_structure Function", "description": "Function showcase_code_structure implementation.", "line_start": 155, "line_end": 177}, {"name": "showcase_implementation_highlights Function", "description": "Function showcase_implementation_highlights implementation.", "line_start": 178, "line_end": 209}, {"name": "showcase_demo_results Function", "description": "Function showcase_demo_results implementation.", "line_start": 210, "line_end": 239}, {"name": "main Function", "description": "Function main implementation.", "line_start": 240, "line_end": 245}], "content_hash": "2af50cb2bd1c95aa0a930e1e282d9da8"}'
- path: .archive/accf/setup.py
  line_count: 53
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "setup.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "setuptools", "alias": null, "line": 7, "statement": "from setuptools import find_packages"}, {"module": "setuptools", "alias": null, "line": 7, "statement": "from setuptools import setup"}], "constants": []}, "key_elements": [{"name": "from setuptools import find_packages", "type": "import", "line": 7}, {"name": "from setuptools import setup", "type": "import", "line": 7}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 7}], "content_hash": "381782c1ffcc78e8d4cbf127372605b2"}'
- path: .archive/accf/model_selection_test.py
  line_count: 406
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "model_selection_test.py", "description": "Python module with 1 functions and 5 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "run_performance_tests", "line": 371, "parameters": [], "is_async": false, "description": "Executes a series of performance tests to evaluate system efficiency and responsiveness.", "signature": "run_performance_tests()"}], "classes": [{"name": "TestModelSelectionEngine", "line": 29, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "setUp", "line": 32, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Set up test fixtures.", "signature": "setUp(self)"}, {"name": "test_config_loading", "line": 50, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that configuration file loads correctly.", "signature": "test_config_loading(self)"}, {"name": "test_valid_models", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that valid models are correctly identified.", "signature": "test_valid_models(self)"}, {"name": "test_prompt_analysis_task_types", "line": 62, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test prompt analysis for different task types.", "signature": "test_prompt_analysis_task_types(self)"}, {"name": "test_prompt_analysis_time_constraints", "line": 75, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test prompt analysis for time constraints.", "signature": "test_prompt_analysis_time_constraints(self)"}, {"name": "test_prompt_analysis_quality_requirements", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test prompt analysis for quality requirements.", "signature": "test_prompt_analysis_quality_requirements(self)"}, {"name": "test_prompt_analysis_complexity_levels", "line": 113, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test prompt analysis for complexity levels.", "signature": "test_prompt_analysis_complexity_levels(self)"}, {"name": "test_model_selection_requirements_gathering", "line": 132, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test model selection for requirements gathering tasks.", "signature": "test_model_selection_requirements_gathering(self)"}, {"name": "test_model_selection_system_architecture", "line": 147, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test model selection for system architecture tasks.", "signature": "test_model_selection_system_architecture(self)"}, {"name": "test_model_selection_complex_architecture", "line": 159, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test model selection for complex architectural tasks.", "signature": "test_model_selection_complex_architecture(self)"}, {"name": "test_user_override", "line": 171, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that user override works correctly.", "signature": "test_user_override(self)"}, {"name": "test_invalid_user_override", "line": 186, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test handling of invalid user override.", "signature": "test_invalid_user_override(self)"}, {"name": "test_alternatives_generation", "line": 200, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that alternatives are generated correctly.", "signature": "test_alternatives_generation(self)"}, {"name": "test_reasoning_generation", "line": 217, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that reasoning is generated correctly.", "signature": "test_reasoning_generation(self)"}, {"name": "test_model_info_retrieval", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test retrieval of model information.", "signature": "test_model_info_retrieval(self)"}, {"name": "test_invalid_model_info_retrieval", "line": 240, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test handling of invalid model information requests.", "signature": "test_invalid_model_info_retrieval(self)"}, {"name": "test_available_models_listing", "line": 245, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test listing of available models.", "signature": "test_available_models_listing(self)"}, {"name": "test_task_types_listing", "line": 252, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test listing of available task types.", "signature": "test_task_types_listing(self)"}], "properties": [], "description": "Contains unit tests for verifying the correctness and robustness of the model selection engine."}, {"name": "TestTaskContext", "line": 261, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "test_task_context_creation", "line": 264, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test TaskContext creation with default values.", "signature": "test_task_context_creation(self)"}, {"name": "test_task_context_creation_with_values", "line": 274, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test TaskContext creation with specific values.", "signature": "test_task_context_creation_with_values(self)"}], "properties": [], "description": "Tests related to the management and behavior of task-specific contexts."}, {"name": "TestModelDecision", "line": 293, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "test_model_decision_creation", "line": 296, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ModelDecision creation.", "signature": "test_model_decision_creation(self)"}], "properties": [], "description": "Validates the decision-making logic within the model selection process."}, {"name": "TestConvenienceFunctions", "line": 313, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "test_create_task_context", "line": 316, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test create_task_context function.", "signature": "test_create_task_context(self)"}, {"name": "test_create_task_context_with_override", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test create_task_context function with user override.", "signature": "test_create_task_context_with_override(self)"}, {"name": "test_select_optimal_model", "line": 332, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test select_optimal_model function.", "signature": "test_select_optimal_model(self)"}, {"name": "test_select_optimal_model_with_override", "line": 340, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test select_optimal_model function with user override.", "signature": "test_select_optimal_model_with_override(self)"}], "properties": [], "description": "Tests for utility functions that simplify common operations."}, {"name": "TestConfigurationHandling", "line": 350, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "test_missing_config_file", "line": 353, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test handling of missing configuration file.", "signature": "test_missing_config_file(self)"}, {"name": "test_invalid_config_file", "line": 358, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test handling of invalid configuration file.", "signature": "test_invalid_config_file(self)"}], "properties": [], "description": "Ensures proper loading, parsing, and handling of configuration settings."}], "imports": [{"module": "json", "alias": null, "line": 15, "statement": "import json"}, {"module": "os", "alias": null, "line": 16, "statement": "import os"}, {"module": "tempfile", "alias": null, "line": 17, "statement": "import tempfile"}, {"module": "unittest", "alias": null, "line": 18, "statement": "import unittest"}, {"module": "model_selection_engine", "alias": null, "line": 20, "statement": "from model_selection_engine import ModelDecision"}, {"module": "model_selection_engine", "alias": null, "line": 20, "statement": "from model_selection_engine import ModelSelectionEngine"}, {"module": "model_selection_engine", "alias": null, "line": 20, "statement": "from model_selection_engine import TaskContext"}, {"module": "model_selection_engine", "alias": null, "line": 20, "statement": "from model_selection_engine import create_task_context"}, {"module": "model_selection_engine", "alias": null, "line": 20, "statement": "from model_selection_engine import select_optimal_model"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 15}, {"name": "os", "type": "import", "line": 16}, {"name": "tempfile", "type": "import", "line": 17}, {"name": "unittest", "type": "import", "line": 18}, {"name": "from model_selection_engine import ModelDecision", "type": "import", "line": 20}, {"name": "from model_selection_engine import ModelSelectionEngine", "type": "import", "line": 20}, {"name": "from model_selection_engine import TaskContext", "type": "import", "line": 20}, {"name": "from model_selection_engine import create_task_context", "type": "import", "line": 20}, {"name": "from model_selection_engine import select_optimal_model", "type": "import", "line": 20}, {"name": "TestModelSelectionEngine", "type": "class", "line": 29}, {"name": "TestTaskContext", "type": "class", "line": 261}, {"name": "TestModelDecision", "type": "class", "line": 293}, {"name": "TestConvenienceFunctions", "type": "class", "line": 313}, {"name": "TestConfigurationHandling", "type": "class", "line": 350}, {"name": "run_performance_tests", "type": "function", "line": 371}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 20}, {"name": "run_performance_tests Function", "description": "Function run_performance_tests implementation.", "line_start": 371, "line_end": 376}, {"name": "TestModelSelectionEngine Class", "description": "Class TestModelSelectionEngine definition and methods.", "line_start": 29, "line_end": 255}, {"name": "TestTaskContext Class", "description": "Class TestTaskContext definition and methods.", "line_start": 261, "line_end": 277}, {"name": "TestModelDecision Class", "description": "Class TestModelDecision definition and methods.", "line_start": 293, "line_end": 299}, {"name": "TestConvenienceFunctions Class", "description": "Class TestConvenienceFunctions definition and methods.", "line_start": 313, "line_end": 343}, {"name": "TestConfigurationHandling Class", "description": "Class TestConfigurationHandling definition and methods.", "line_start": 350, "line_end": 361}], "content_hash": "35581e82bb37634a9addf5afc38b959d"}'
- path: .archive/accf/quick_model_test.py
  line_count: 112
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "quick_model_test.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_single_model", "line": 25, "parameters": [{"name": "model", "type": "str):"}], "is_async": true, "description": "Asynchronously tests a single model specified by its name.", "signature": "async test_single_model(model: str):)"}, {"name": "main", "line": 70, "parameters": [], "is_async": true, "description": "Asynchronous entry point that orchestrates the overall program execution.", "signature": "async main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}], "constants": [{"name": "TEST_PROMPT", "line": 14, "value": "\nDesign a simple REST API for a todo list application. Include:\n1. API endpoints for CRUD operations\n2. Basic data model\n3. Error handling\n4. Simple authentication\n", "type": "str"}, {"name": "APPROVED_MODELS", "line": 22, "value": "[]", "type": "list"}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "TEST_PROMPT", "type": "constant", "line": 14}, {"name": "APPROVED_MODELS", "type": "constant", "line": 22}, {"name": "test_single_model", "type": "function", "line": 25}, {"name": "main", "type": "function", "line": 70}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "test_single_model Function", "description": "Function test_single_model implementation.", "line_start": 25, "line_end": 69}, {"name": "main Function", "description": "Function main implementation.", "line_start": 70, "line_end": 75}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 14, "line_end": 22}], "content_hash": "57dbc0f086f6f092f2d8f15d6c3a94a6"}'
- path: .archive/accf/demo_vector_search.py
  line_count: 185
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "demo_vector_search.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "demo_vector_search", "line": 17, "parameters": [], "is_async": false, "description": "Demonstrates how to perform a vector-based search operation.", "signature": "demo_vector_search()"}, {"name": "demo_schema_verification", "line": 112, "parameters": [], "is_async": false, "description": "Demonstrates how to verify data against a predefined schema.", "signature": "demo_schema_verification()"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "sys", "alias": null, "line": 12, "statement": "import sys"}, {"module": "capabilities.neo4j_knowledge_graph", "alias": null, "line": 14, "statement": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 12}, {"name": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph", "type": "import", "line": 14}, {"name": "demo_vector_search", "type": "function", "line": 17}, {"name": "demo_schema_verification", "type": "function", "line": 112}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 14}, {"name": "demo_vector_search Function", "description": "Function demo_vector_search implementation.", "line_start": 17, "line_end": 111}, {"name": "demo_schema_verification Function", "description": "Function demo_schema_verification implementation.", "line_start": 112, "line_end": 117}], "content_hash": "1c042ec1a2f2e8d0abc64501d2a6650c"}'
- path: .archive/accf/extract_project_summary.py
  line_count: 133
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "extract_project_summary.py", "description": "Python module with 6 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "extract_project_summary", "line": 13, "parameters": [], "is_async": false, "description": "Extracts a high-level summary of the project details.", "signature": "extract_project_summary()"}, {"name": "get_file_types", "line": 54, "parameters": [{"name": "files", "type": "unknown"}], "is_async": false, "description": "Determines and returns the types of files present in the given list.", "signature": "get_file_types(files)"}, {"name": "summarize_metrics", "line": 66, "parameters": [{"name": "metrics", "type": "unknown"}], "is_async": false, "description": "Generates a summary report based on provided project metrics.", "signature": "summarize_metrics(metrics)"}, {"name": "summarize_complexity", "line": 86, "parameters": [{"name": "complexity", "type": "unknown"}], "is_async": false, "description": "Creates a summary of the project''s complexity analysis.", "signature": "summarize_complexity(complexity)"}, {"name": "extract_main_packages", "line": 108, "parameters": [{"name": "dependencies", "type": "unknown"}], "is_async": false, "description": "Identifies and extracts the main packages from the dependency list.", "signature": "extract_main_packages(dependencies)"}, {"name": "count_total_dependencies", "line": 124, "parameters": [{"name": "dependencies", "type": "unknown"}], "is_async": false, "description": "Counts the total number of dependencies in the project.", "signature": "count_total_dependencies(dependencies)"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 8, "statement": "import json"}, {"module": "sys", "alias": null, "line": 9, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 8}, {"name": "sys", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "extract_project_summary", "type": "function", "line": 13}, {"name": "get_file_types", "type": "function", "line": 54}, {"name": "summarize_metrics", "type": "function", "line": 66}, {"name": "summarize_complexity", "type": "function", "line": 86}, {"name": "extract_main_packages", "type": "function", "line": 108}, {"name": "count_total_dependencies", "type": "function", "line": 124}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 10}, {"name": "extract_project_summary Function", "description": "Function extract_project_summary implementation.", "line_start": 13, "line_end": 53}, {"name": "get_file_types Function", "description": "Function get_file_types implementation.", "line_start": 54, "line_end": 65}, {"name": "summarize_metrics Function", "description": "Function summarize_metrics implementation.", "line_start": 66, "line_end": 85}, {"name": "summarize_complexity Function", "description": "Function summarize_complexity implementation.", "line_start": 86, "line_end": 107}, {"name": "extract_main_packages Function", "description": "Function extract_main_packages implementation.", "line_start": 108, "line_end": 123}, {"name": "count_total_dependencies Function", "description": "Function count_total_dependencies implementation.", "line_start": 124, "line_end": 129}], "content_hash": "a3a07b9af48d91409d3b56ad058e7625"}'
- path: .archive/accf/model_selection_demo.py
  line_count: 285
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "model_selection_demo.py", "description": "Python module with 12 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "print_separator", "line": 25, "parameters": [{"name": "title", "type": "str):"}], "is_async": false, "description": "Prints a formatted separator line with a title for clarity in output.", "signature": "print_separator(title: str):)"}, {"name": "print_decision", "line": 32, "parameters": [{"name": "decision", "type": "unknown"}, {"name": "prompt", "type": "str):"}], "is_async": false, "description": "Displays the decision result along with a descriptive prompt.", "signature": "print_decision(decision, prompt: str):)"}, {"name": "demo_basic_selection", "line": 42, "parameters": [], "is_async": false, "description": "Demonstrates basic model selection based on simple criteria.", "signature": "demo_basic_selection()"}, {"name": "demo_time_constraints", "line": 78, "parameters": [], "is_async": false, "description": "Shows how time constraints affect model selection decisions.", "signature": "demo_time_constraints()"}, {"name": "demo_quality_requirements", "line": 103, "parameters": [], "is_async": false, "description": "Illustrates model selection considering quality requirements.", "signature": "demo_quality_requirements()"}, {"name": "demo_complexity_levels", "line": 128, "parameters": [], "is_async": false, "description": "Demonstrates selection of models based on varying complexity levels.", "signature": "demo_complexity_levels()"}, {"name": "demo_user_overrides", "line": 150, "parameters": [], "is_async": false, "description": "Shows how user overrides can influence the model selection process.", "signature": "demo_user_overrides()"}, {"name": "demo_prompt_analysis", "line": 169, "parameters": [], "is_async": false, "description": "Demonstrates analysis of prompts to guide model selection.", "signature": "demo_prompt_analysis()"}, {"name": "demo_model_characteristics", "line": 197, "parameters": [], "is_async": false, "description": "Illustrates the impact of different model characteristics on selection.", "signature": "demo_model_characteristics()"}, {"name": "demo_decision_matrix", "line": 216, "parameters": [], "is_async": false, "description": "Demonstrates the use of a decision matrix for model selection.", "signature": "demo_decision_matrix()"}, {"name": "demo_performance_comparison", "line": 229, "parameters": [], "is_async": false, "description": "Compares performance metrics across different models.", "signature": "demo_performance_comparison()"}, {"name": "main", "line": 253, "parameters": [], "is_async": false, "description": "Runs all demonstration functions to showcase model selection scenarios.", "signature": "main()"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 16, "statement": "import json"}, {"module": "model_selection_engine", "alias": null, "line": 18, "statement": "from model_selection_engine import ModelSelectionEngine"}, {"module": "model_selection_engine", "alias": null, "line": 18, "statement": "from model_selection_engine import create_task_context"}, {"module": "model_selection_engine", "alias": null, "line": 18, "statement": "from model_selection_engine import select_optimal_model"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 16}, {"name": "from model_selection_engine import ModelSelectionEngine", "type": "import", "line": 18}, {"name": "from model_selection_engine import create_task_context", "type": "import", "line": 18}, {"name": "from model_selection_engine import select_optimal_model", "type": "import", "line": 18}, {"name": "print_separator", "type": "function", "line": 25}, {"name": "print_decision", "type": "function", "line": 32}, {"name": "demo_basic_selection", "type": "function", "line": 42}, {"name": "demo_time_constraints", "type": "function", "line": 78}, {"name": "demo_quality_requirements", "type": "function", "line": 103}, {"name": "demo_complexity_levels", "type": "function", "line": 128}, {"name": "demo_user_overrides", "type": "function", "line": 150}, {"name": "demo_prompt_analysis", "type": "function", "line": 169}, {"name": "demo_model_characteristics", "type": "function", "line": 197}, {"name": "demo_decision_matrix", "type": "function", "line": 216}, {"name": "demo_performance_comparison", "type": "function", "line": 229}, {"name": "main", "type": "function", "line": 253}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 16, "line_end": 18}, {"name": "print_separator Function", "description": "Function print_separator implementation.", "line_start": 25, "line_end": 31}, {"name": "print_decision Function", "description": "Function print_decision implementation.", "line_start": 32, "line_end": 41}, {"name": "demo_basic_selection Function", "description": "Function demo_basic_selection implementation.", "line_start": 42, "line_end": 77}, {"name": "demo_time_constraints Function", "description": "Function demo_time_constraints implementation.", "line_start": 78, "line_end": 102}, {"name": "demo_quality_requirements Function", "description": "Function demo_quality_requirements implementation.", "line_start": 103, "line_end": 127}, {"name": "demo_complexity_levels Function", "description": "Function demo_complexity_levels implementation.", "line_start": 128, "line_end": 149}, {"name": "demo_user_overrides Function", "description": "Function demo_user_overrides implementation.", "line_start": 150, "line_end": 168}, {"name": "demo_prompt_analysis Function", "description": "Function demo_prompt_analysis implementation.", "line_start": 169, "line_end": 196}, {"name": "demo_model_characteristics Function", "description": "Function demo_model_characteristics implementation.", "line_start": 197, "line_end": 215}, {"name": "demo_decision_matrix Function", "description": "Function demo_decision_matrix implementation.", "line_start": 216, "line_end": 228}, {"name": "demo_performance_comparison Function", "description": "Function demo_performance_comparison implementation.", "line_start": 229, "line_end": 252}, {"name": "main Function", "description": "Function main implementation.", "line_start": 253, "line_end": 258}], "content_hash": "93311a7e61674ea5a019403511b68247"}'
- path: .archive/project-intel/src/project_intel/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "a91fece35d668174d9b7acabc7d9e57b"}'
- path: .archive/project-intel/src/project_intel/cli.py
  line_count: 67
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "cli.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 17, "parameters": [{"name": "debug", "type": "bool, log_level: str"}, {"name": "log_level", "type": "str"}], "is_async": false, "return_type": "None", "description": "Entry point of the application that initializes settings and starts the process.", "signature": "main(debug: bool, log_level: str, log_level: str) -> None"}, {"name": "analyze", "line": 26, "parameters": [{"name": "project_path", "type": "str"}], "is_async": false, "return_type": "None", "description": "Performs analysis on the specified project directory.", "signature": "analyze(project_path: str) -> None"}, {"name": "init_rag", "line": 45, "parameters": [{"name": "collection", "type": "str"}], "is_async": false, "return_type": "None", "description": "Initializes the RAG system with the given collection.", "signature": "init_rag(collection: str) -> None"}], "classes": [], "imports": [{"module": "click", "alias": null, "line": 5, "statement": "import click"}, {"module": "opsvi_core", "alias": null, "line": 6, "statement": "from opsvi_core import get_logger"}, {"module": "opsvi_core", "alias": null, "line": 6, "statement": "from opsvi_core import setup_logging"}, {"module": "rich.console", "alias": null, "line": 7, "statement": "from rich.console import Console"}, {"module": "rich.table", "alias": null, "line": 8, "statement": "from rich.table import Table"}], "constants": []}, "key_elements": [{"name": "click", "type": "import", "line": 5}, {"name": "from opsvi_core import get_logger", "type": "import", "line": 6}, {"name": "from opsvi_core import setup_logging", "type": "import", "line": 6}, {"name": "from rich.console import Console", "type": "import", "line": 7}, {"name": "from rich.table import Table", "type": "import", "line": 8}, {"name": "main", "type": "function", "line": 17}, {"name": "analyze", "type": "function", "line": 26}, {"name": "init_rag", "type": "function", "line": 45}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 18}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 8}, {"name": "main Function", "description": "Function main implementation.", "line_start": 17, "line_end": 25}, {"name": "analyze Function", "description": "Function analyze implementation.", "line_start": 26, "line_end": 44}, {"name": "init_rag Function", "description": "Function init_rag implementation.", "line_start": 45, "line_end": 50}], "content_hash": "dc403cce47f116485697e5ce11d890ba"}'
- path: .archive/genfilemap/scripts/file_watcher.py
  line_count: 416
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "file_watcher.py", "description": "Python module with 2 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "parse_args", "line": 337, "parameters": [], "is_async": false, "description": "Parses command-line arguments and returns the parsed values.", "signature": "parse_args()"}, {"name": "main", "line": 381, "parameters": [], "is_async": false, "description": "Entry point of the program that initializes and runs the file watching process.", "signature": "main()"}], "classes": [{"name": "FileWatcher", "line": 26, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "path", "type": "unknown"}, {"name": "recursive", "type": "unknown", "default": "True"}, {"name": "debounce_delay", "type": "unknown", "default": "DEFAULT_DEBOUNCE_DELAY"}, {"name": "verbose", "type": "unknown", "default": "False"}, {"name": "include_extensions", "type": "unknown", "default": "None"}, {"name": "exclude_extensions", "type": "unknown", "default": "None"}, {"name": "min_file_size", "type": "unknown", "default": "100"}], "is_async": false, "description": "\n        Initialize the file watcher.\n        \n        Args:\n            path: Path to watch\n            recursive: Whether to watch subdirectories\n            debounce_delay: Time in seconds to wait before processing changes\n            verbose: Whether to enable verbose logging\n            include_extensions: List of file extensions to include\n            exclude_extensions: List of file extensions to exclude\n            min_file_size: Minimum file size in bytes\n        ", "signature": "__init__(self, path, recursive = True, debounce_delay = DEFAULT_DEBOUNCE_DELAY, verbose = False, include_extensions = None, exclude_extensions = None, min_file_size = 100)"}, {"name": "start", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Start the file watcher.", "signature": "start(self)"}, {"name": "stop", "line": 91, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Stop the file watcher.", "signature": "stop(self)"}, {"name": "process_file", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "unknown"}], "is_async": false, "description": "\n        Process a file to update its file map.\n        \n        Args:\n            file_path: Path to the file to process\n            \n        Returns:\n            True if the file was processed successfully, False otherwise\n        ", "signature": "process_file(self, file_path)"}, {"name": "should_process_file", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "unknown"}], "is_async": false, "description": "\n        Determine if a file should be processed.\n        \n        Args:\n            file_path: Path to the file\n            \n        Returns:\n            True if the file should be processed, False otherwise\n        ", "signature": "should_process_file(self, file_path)"}], "properties": [], "description": "Monitors specified files or directories for changes and triggers events accordingly."}, {"name": "FileEventHandler", "line": 270, "inherits_from": ["FileSystemEventHandler):"], "methods": [{"name": "__init__", "line": 273, "parameters": [{"name": "self", "type": "self"}, {"name": "watcher", "type": "unknown"}], "is_async": false, "description": "\n        Initialize the file event handler.\n        \n        Args:\n            watcher: The FileWatcher instance\n        ", "signature": "__init__(self, watcher)"}, {"name": "on_created", "line": 285, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "unknown"}], "is_async": false, "description": "Handle file creation events.", "signature": "on_created(self, event)"}, {"name": "on_modified", "line": 294, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "unknown"}], "is_async": false, "description": "Handle file modification events.", "signature": "on_modified(self, event)"}, {"name": "_process_event", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "unknown"}, {"name": "file_path", "type": "unknown"}], "is_async": false, "description": "\n        Process a file event with debouncing.\n        \n        Args:\n            event_type: Type of event (''created'' or ''modified'')\n            file_path: Path to the file\n        ", "signature": "_process_event(self, event_type, file_path)"}], "properties": [], "description": "Handles file system events such as creation, modification, deletion, and movement."}], "imports": [{"module": "argparse", "alias": null, "line": 12, "statement": "import argparse"}, {"module": "logging", "alias": null, "line": 13, "statement": "import logging"}, {"module": "os", "alias": null, "line": 14, "statement": "import os"}, {"module": "subprocess", "alias": null, "line": 15, "statement": "import subprocess"}, {"module": "sys", "alias": null, "line": 16, "statement": "import sys"}, {"module": "time", "alias": null, "line": 17, "statement": "import time"}, {"module": "watchdog.events", "alias": null, "line": 19, "statement": "from watchdog.events import FileSystemEventHandler"}, {"module": "watchdog.observers", "alias": null, "line": 20, "statement": "from watchdog.observers import Observer"}], "constants": [{"name": "DEFAULT_DEBOUNCE_DELAY", "line": 23, "value": "2.0", "type": "float"}, {"name": "LOG_FORMAT", "line": 24, "value": "%(asctime)s - %(levelname)s - %(message)s", "type": "str"}]}, "key_elements": [{"name": "argparse", "type": "import", "line": 12}, {"name": "logging", "type": "import", "line": 13}, {"name": "os", "type": "import", "line": 14}, {"name": "subprocess", "type": "import", "line": 15}, {"name": "sys", "type": "import", "line": 16}, {"name": "time", "type": "import", "line": 17}, {"name": "from watchdog.events import FileSystemEventHandler", "type": "import", "line": 19}, {"name": "from watchdog.observers import Observer", "type": "import", "line": 20}, {"name": "DEFAULT_DEBOUNCE_DELAY", "type": "constant", "line": 23}, {"name": "LOG_FORMAT", "type": "constant", "line": 24}, {"name": "FileWatcher", "type": "class", "line": 26}, {"name": "FileEventHandler", "type": "class", "line": 270}, {"name": "parse_args", "type": "function", "line": 337}, {"name": "main", "type": "function", "line": 381}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 12, "line_end": 20}, {"name": "parse_args Function", "description": "Function parse_args implementation.", "line_start": 337, "line_end": 380}, {"name": "main Function", "description": "Function main implementation.", "line_start": 381, "line_end": 386}, {"name": "FileWatcher Class", "description": "Class FileWatcher definition and methods.", "line_start": 26, "line_end": 169}, {"name": "FileEventHandler Class", "description": "Class FileEventHandler definition and methods.", "line_start": 270, "line_end": 306}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 23, "line_end": 24}], "content_hash": "ea5fd6e0d7357f08b39de30cf9881f7e"}'
- path: .archive/genfilemap/scripts/init_config.py
  line_count: 96
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "init_config.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_project_config", "line": 10, "parameters": [{"name": "config_path", "type": "unknown"}], "is_async": false, "description": "Creates and initializes the project-specific configuration file at the given path.", "signature": "create_project_config(config_path)"}, {"name": "create_global_config", "line": 31, "parameters": [{"name": "config_path", "type": "unknown"}], "is_async": false, "description": "Creates and initializes the global configuration file at the given path.", "signature": "create_global_config(config_path)"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 4, "statement": "import argparse"}, {"module": "os", "alias": null, "line": 5, "statement": "import os"}, {"module": "genfilemap.config", "alias": null, "line": 7, "statement": "from genfilemap.config import save_config"}], "constants": []}, "key_elements": [{"name": "argparse", "type": "import", "line": 4}, {"name": "os", "type": "import", "line": 5}, {"name": "from genfilemap.config import save_config", "type": "import", "line": 7}, {"name": "create_project_config", "type": "function", "line": 10}, {"name": "create_global_config", "type": "function", "line": 31}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 4, "line_end": 7}, {"name": "create_project_config Function", "description": "Function create_project_config implementation.", "line_start": 10, "line_end": 30}, {"name": "create_global_config Function", "description": "Function create_global_config implementation.", "line_start": 31, "line_end": 36}], "content_hash": "fbd433a054fbbd89b258a334ba7c2394"}'
- path: .archive/genfilemap/scripts/cat_files_with_headers.py
  line_count: 54
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "cat_files_with_headers.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "find_files", "line": 14, "parameters": [{"name": "root", "type": "Path, include_exts: set, exclude_dirs: set"}, {"name": "include_exts", "type": "set, exclude_dirs: set"}, {"name": "exclude_dirs", "type": "set"}], "is_async": false, "return_type": "Iterator[Path]", "description": "Recursively searches for files under the root directory matching specified extensions and excluding certain directories.", "signature": "find_files(root: Path, include_exts: set, exclude_dirs: set, include_exts: set, exclude_dirs: set, exclude_dirs: set) -> Iterator[Path]"}, {"name": "write_file_with_header", "line": 24, "parameters": [{"name": "outfile", "type": "unknown"}, {"name": "file_path", "type": "Path"}, {"name": "root", "type": "Path):"}], "is_async": false, "description": "Writes content to the output file with a header indicating the source file path relative to the root.", "signature": "write_file_with_header(outfile, file_path: Path, root: Path):)"}, {"name": "main", "line": 39, "parameters": [{"name": "root_dir", "type": "str", "default": "."}, {"name": "output_file", "type": "str", "default": "OUTPUT_FILENAME):"}], "is_async": false, "signature": "main(root_dir: str = ., output_file: str = OUTPUT_FILENAME):)", "description": "Main entry point that processes files from the root directory and writes results to the output file."}], "classes": [], "imports": [{"module": "collections.abc", "alias": null, "line": 4, "statement": "from collections.abc import Iterator"}, {"module": "pathlib", "alias": null, "line": 5, "statement": "from pathlib import Path"}], "constants": [{"name": "EXCLUDE_DIRS", "line": 8, "value": "{\"venv\", \".venv\", \"env\", \".env\"}", "type": ""}, {"name": "INCLUDE_EXTS", "line": 9, "value": "{\".py\", \".json\", \".md\", \".txt\"}", "type": ""}, {"name": "SEPARATOR", "line": 10, "value": "\"", "type": ""}, {"name": "OUTPUT_FILENAME", "line": 11, "value": "cat_output.txt", "type": "str"}]}, "key_elements": [{"name": "from collections.abc import Iterator", "type": "import", "line": 4}, {"name": "from pathlib import Path", "type": "import", "line": 5}, {"name": "EXCLUDE_DIRS", "type": "constant", "line": 8}, {"name": "INCLUDE_EXTS", "type": "constant", "line": 9}, {"name": "SEPARATOR", "type": "constant", "line": 10}, {"name": "OUTPUT_FILENAME", "type": "constant", "line": 11}, {"name": "find_files", "type": "function", "line": 14}, {"name": "write_file_with_header", "type": "function", "line": 24}, {"name": "main", "type": "function", "line": 39}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 4, "line_end": 5}, {"name": "find_files Function", "description": "Function find_files implementation.", "line_start": 14, "line_end": 23}, {"name": "write_file_with_header Function", "description": "Function write_file_with_header implementation.", "line_start": 24, "line_end": 38}, {"name": "main Function", "description": "Function main implementation.", "line_start": 39, "line_end": 44}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 8, "line_end": 11}], "content_hash": "9ab4a9925b9739570ba1fffcc06f710a"}'
- path: .archive/genfilemap/scripts/genfilemap_runner.py
  line_count: 147
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "genfilemap_runner.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "update_file", "line": 18, "parameters": [{"name": "file_path", "type": "unknown"}, {"name": "force", "type": "unknown", "default": "False"}], "is_async": false, "description": "Updates a single file at the specified path, optionally forcing the update.", "signature": "update_file(file_path, force = False)"}, {"name": "update_directory", "line": 57, "parameters": [{"name": "directory_path", "type": "unknown"}, {"name": "recursive", "type": "unknown", "default": "False"}, {"name": "force", "type": "unknown", "default": "False"}], "is_async": false, "description": "Updates all files in a directory, optionally recursively and forcing updates.", "signature": "update_directory(directory_path, recursive = False, force = False)"}, {"name": "parse_args", "line": 100, "parameters": [], "is_async": false, "description": "Parses and returns command-line arguments.", "signature": "parse_args()"}, {"name": "main", "line": 119, "parameters": [], "is_async": false, "description": "Main entry point of the program that orchestrates the update process.", "signature": "main()"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 12, "statement": "import argparse"}, {"module": "os.path", "alias": null, "line": 13, "statement": "import os.path"}, {"module": "subprocess", "alias": null, "line": 14, "statement": "import subprocess"}, {"module": "sys", "alias": null, "line": 15, "statement": "import sys"}], "constants": []}, "key_elements": [{"name": "argparse", "type": "import", "line": 12}, {"name": "os.path", "type": "import", "line": 13}, {"name": "subprocess", "type": "import", "line": 14}, {"name": "sys", "type": "import", "line": 15}, {"name": "update_file", "type": "function", "line": 18}, {"name": "update_directory", "type": "function", "line": 57}, {"name": "parse_args", "type": "function", "line": 100}, {"name": "main", "type": "function", "line": 119}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 12, "line_end": 15}, {"name": "update_file Function", "description": "Function update_file implementation.", "line_start": 18, "line_end": 56}, {"name": "update_directory Function", "description": "Function update_directory implementation.", "line_start": 57, "line_end": 99}, {"name": "parse_args Function", "description": "Function parse_args implementation.", "line_start": 100, "line_end": 118}, {"name": "main Function", "description": "Function main implementation.", "line_start": 119, "line_end": 124}], "content_hash": "a8473045741f417f6390147a1bda56a2"}'
- path: .archive/genfilemap/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "db94fb6646656703b19cffe467628c1d"}'
- path: .archive/genfilemap/tests/test_code_elements.py
  line_count: 76
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_code_elements.py", "description": "Python module with 2 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "simple_function", "line": 14, "parameters": [{"name": "param1", "type": "str, param2: int = 10"}, {"name": "param2", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "str", "description": "Processes input parameters and returns a formatted string result.", "signature": "simple_function(param1: str, param2: int = 10, param2: int = 10 = 10) -> str"}, {"name": "complex_function", "line": 27, "parameters": [{"name": "items", "type": "list[dict[str, any]]"}, {"name": "config", "type": "dict[str, any] | None", "default": "None"}], "is_async": false, "return_type": "tuple[list[str], int]", "description": "Processes a list of dictionaries with optional configuration and additional arguments, returning a list of strings and a count.", "signature": "complex_function(items: list[dict[str, any]], config: dict[str, any] | None = None, *args, **kwargs) -> tuple[list[str], int]"}], "classes": [{"name": "SimpleClass", "line": 37, "inherits_from": [], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "int", "default": "0"}], "is_async": false, "description": "Initialize the class.", "signature": "__init__(self, name: str, value: int = 0)"}, {"name": "get_name", "line": 47, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Return the name.", "signature": "get_name(self) -> str"}, {"name": "formatted_value", "line": 52, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Return the formatted value.", "signature": "formatted_value(self) -> str"}, {"name": "helper_method", "line": 57, "parameters": [{"name": "input_str", "type": "str"}], "is_async": false, "return_type": "str", "description": "Static helper method.", "signature": "helper_method(input_str: str) -> str"}], "properties": [{"name": "class_var", "line": 38, "type": ""}], "description": "Represents a basic object with four methods for standard operations."}, {"name": "ComplexClass", "line": 61, "inherits_from": ["SimpleClass):"], "methods": [{"name": "__init__", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "int", "default": "0"}, {"name": "extra", "type": "list[str]", "default": "None"}], "is_async": false, "description": "Initialize with parent constructor and extra parameters.", "signature": "__init__(self, name: str, value: int = 0, extra: list[str] = None)"}, {"name": "process_data", "line": 69, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "dict[str, any], options: dict | None = None"}, {"name": "options", "type": "dict | None = None", "default": "None"}], "is_async": false, "return_type": "dict[str, any]", "description": "Process data with options.", "signature": "process_data(self, data: dict[str, any], options: dict | None = None, options: dict | None = None = None) -> dict[str, any]"}], "properties": [], "description": "Represents an advanced object with two methods for specialized functionality."}], "imports": [], "constants": [{"name": "MAX_RETRIES", "line": 10, "value": "3", "type": "int"}, {"name": "DEFAULT_TIMEOUT", "line": 11, "value": "30.0", "type": "float"}, {"name": "API_BASE_URL", "line": 12, "value": "https://api.example.com/v1", "type": "str"}]}, "key_elements": [{"name": "MAX_RETRIES", "type": "constant", "line": 10}, {"name": "DEFAULT_TIMEOUT", "type": "constant", "line": 11}, {"name": "API_BASE_URL", "type": "constant", "line": 12}, {"name": "simple_function", "type": "function", "line": 14}, {"name": "complex_function", "type": "function", "line": 27}, {"name": "SimpleClass", "type": "class", "line": 37}, {"name": "ComplexClass", "type": "class", "line": 61}], "sections": [{"name": "simple_function Function", "description": "Function simple_function implementation.", "line_start": 14, "line_end": 26}, {"name": "complex_function Function", "description": "Function complex_function implementation.", "line_start": 27, "line_end": 36}, {"name": "SimpleClass Class", "description": "Class SimpleClass definition and methods.", "line_start": 37, "line_end": 60}, {"name": "ComplexClass Class", "description": "Class ComplexClass definition and methods.", "line_start": 61, "line_end": 72}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 10, "line_end": 12}], "content_hash": "566b7d8822073878c26059ff54822018"}'
- path: .archive/genfilemap/tests/test_extract.py
  line_count: 100
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_extract.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "debug_print", "line": 24, "parameters": [{"name": "msg", "type": "unknown"}], "is_async": false, "signature": "debug_print(msg)", "description": "Prints debug messages to the console for troubleshooting purposes."}, {"name": "test_extraction", "line": 36, "parameters": [{"name": "file_path", "type": "unknown"}], "is_async": false, "signature": "test_extraction(file_path)", "description": "Tests the extraction process using the specified file path."}, {"name": "main", "line": 83, "parameters": [], "is_async": false, "signature": "main()", "description": "Entry point of the program that orchestrates the execution flow."}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "re", "alias": null, "line": 12, "statement": "import re"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 28, "statement": "import genfilemap.utils.file_utils"}, {"module": "pathlib", "alias": null, "line": 14, "statement": "from pathlib import Path"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 20, "statement": "from genfilemap.utils.file_utils import extract_existing_file_map"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 20, "statement": "from genfilemap.utils.file_utils import get_comment_style"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "re", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "genfilemap.utils.file_utils", "type": "import", "line": 28}, {"name": "from pathlib import Path", "type": "import", "line": 14}, {"name": "from genfilemap.utils.file_utils import extract_existing_file_map", "type": "import", "line": 20}, {"name": "from genfilemap.utils.file_utils import get_comment_style", "type": "import", "line": 20}, {"name": "debug_print", "type": "function", "line": 24}, {"name": "test_extraction", "type": "function", "line": 36}, {"name": "main", "type": "function", "line": 83}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 28}, {"name": "debug_print Function", "description": "Function debug_print implementation.", "line_start": 24, "line_end": 35}, {"name": "test_extraction Function", "description": "Function test_extraction implementation.", "line_start": 36, "line_end": 82}, {"name": "main Function", "description": "Function main implementation.", "line_start": 83, "line_end": 88}], "content_hash": "532280a01803c02e76ca116edb8155e7"}'
- path: .archive/genfilemap/tests/test_multiprocessing.py
  line_count: 105
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_multiprocessing.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_processing_with_different_settings", "line": 16, "parameters": [{"name": "base_path", "type": "str"}, {"name": "min_lines", "type": "int", "default": "10"}], "is_async": false, "description": "Runs processing tests on files located at base_path with varying minimum line settings.", "signature": "test_processing_with_different_settings(base_path: str, min_lines: int = 10)"}, {"name": "main", "line": 98, "parameters": [], "is_async": false, "signature": "main()", "description": "Entry point of the program that initiates the primary workflow."}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 11, "statement": "import argparse"}, {"module": "subprocess", "alias": null, "line": 12, "statement": "import subprocess"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}], "constants": []}, "key_elements": [{"name": "argparse", "type": "import", "line": 11}, {"name": "subprocess", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "test_processing_with_different_settings", "type": "function", "line": 16}, {"name": "main", "type": "function", "line": 98}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 13}, {"name": "test_processing_with_different_settings Function", "description": "Function test_processing_with_different_settings implementation.", "line_start": 16, "line_end": 97}, {"name": "main Function", "description": "Function main implementation.", "line_start": 98, "line_end": 103}], "content_hash": "6477f883fab9aae0738e2ef6c132ab23"}'
- path: .archive/genfilemap/tests/test_directory_hash.py
  line_count: 270
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_directory_hash.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestDirectoryHashing", "line": 30, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "setUp", "line": 33, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Set up test environment.", "signature": "setUp(self)"}, {"name": "tearDown", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Clean up test environment.", "signature": "tearDown(self)"}, {"name": "test_compute_file_hash", "line": 68, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test computing a hash for a single file.", "signature": "test_compute_file_hash(self)"}, {"name": "test_directory_hash_info", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test DirectoryHashInfo class.", "signature": "test_directory_hash_info(self)"}, {"name": "test_compute_directory_hashes", "line": 112, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test computing hashes for a directory.", "signature": "test_compute_directory_hashes(self)"}, {"name": "test_save_and_load_hash_cache", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test saving and loading the hash cache.", "signature": "test_save_and_load_hash_cache(self)"}, {"name": "test_find_changed_directories_no_changes", "line": 167, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test finding changed directories when nothing has changed.", "signature": "test_find_changed_directories_no_changes(self)"}, {"name": "test_find_changed_directories_with_changes", "line": 181, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test finding changed directories when files have changed.", "signature": "test_find_changed_directories_with_changes(self)"}, {"name": "test_find_changed_directories_new_dir", "line": 200, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test finding changed directories when a new directory is added.", "signature": "test_find_changed_directories_new_dir(self)"}, {"name": "test_process_files_with_directory_hashing", "line": 221, "parameters": [{"name": "self", "type": "self"}, {"name": "mock_process_files_async", "type": "unknown"}], "is_async": false, "description": "Test processing files with directory hashing.", "signature": "test_process_files_with_directory_hashing(self, mock_process_files_async)"}], "properties": [], "description": "Contains unit tests for verifying the correctness and performance of directory hashing functionality."}], "imports": [{"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "shutil", "alias": null, "line": 12, "statement": "import shutil"}, {"module": "tempfile", "alias": null, "line": 13, "statement": "import tempfile"}, {"module": "unittest", "alias": null, "line": 14, "statement": "import unittest"}, {"module": "unittest.mock", "alias": null, "line": 15, "statement": "from unittest.mock import patch"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import DirectoryHashInfo"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import compute_directory_hashes"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import compute_file_hash"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import find_changed_directories"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import load_hash_cache"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash import save_hash_cache"}, {"module": "genfilemap.core.directory_hash_processing", "alias": null, "line": 25, "statement": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 11}, {"name": "shutil", "type": "import", "line": 12}, {"name": "tempfile", "type": "import", "line": 13}, {"name": "unittest", "type": "import", "line": 14}, {"name": "from unittest.mock import patch", "type": "import", "line": 15}, {"name": "from genfilemap.core.directory_hash import DirectoryHashInfo", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash import compute_directory_hashes", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash import compute_file_hash", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash import find_changed_directories", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash import load_hash_cache", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash import save_hash_cache", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing", "type": "import", "line": 25}, {"name": "TestDirectoryHashing", "type": "class", "line": 30}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 25}, {"name": "TestDirectoryHashing Class", "description": "Class TestDirectoryHashing definition and methods.", "line_start": 30, "line_end": 224}], "content_hash": "8c99047dd76e833817817ac991770262"}'
- path: .archive/genfilemap/tests/run_tests.py
  line_count: 23
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "run_tests.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "sys", "alias": null, "line": 11, "statement": "import sys"}, {"module": "unittest", "alias": null, "line": 12, "statement": "import unittest"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 10}, {"name": "sys", "type": "import", "line": 11}, {"name": "unittest", "type": "import", "line": 12}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 12}], "content_hash": "cfc344f6034b9970df1f8a2595e7c583"}'
- path: .archive/genfilemap/tests/test_quiet_mode.py
  line_count: 57
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_quiet_mode.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_model_enforcement", "line": 18, "parameters": [], "is_async": true, "description": "Asynchronously tests the enforcement of model constraints or rules.", "signature": "async test_model_enforcement()"}, {"name": "main", "line": 53, "parameters": [], "is_async": true, "description": "Asynchronous entry point for executing the primary program logic.", "signature": "async main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "sys", "alias": null, "line": 12, "statement": "import sys"}, {"module": "genfilemap.api", "alias": null, "line": 14, "statement": "from genfilemap.api import create_api_client"}, {"module": "genfilemap.config", "alias": null, "line": 15, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 12}, {"name": "from genfilemap.api import create_api_client", "type": "import", "line": 14}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 15}, {"name": "test_model_enforcement", "type": "function", "line": 18}, {"name": "main", "type": "function", "line": 53}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 15}, {"name": "test_model_enforcement Function", "description": "Function test_model_enforcement implementation.", "line_start": 18, "line_end": 52}, {"name": "main Function", "description": "Function main implementation.", "line_start": 53, "line_end": 58}], "content_hash": "c1b9da84f583180327c0208b912b289e"}'
- path: .archive/genfilemap/tests/test_final_quiet.py
  line_count: 57
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_final_quiet.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_model_enforcement", "line": 18, "parameters": [], "is_async": true, "description": "Asynchronously tests the enforcement of model constraints or rules.", "signature": "async test_model_enforcement()"}, {"name": "main", "line": 53, "parameters": [], "is_async": true, "description": "Asynchronous entry point for executing the primary program logic.", "signature": "async main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "sys", "alias": null, "line": 12, "statement": "import sys"}, {"module": "genfilemap.api", "alias": null, "line": 14, "statement": "from genfilemap.api import create_api_client"}, {"module": "genfilemap.config", "alias": null, "line": 15, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 12}, {"name": "from genfilemap.api import create_api_client", "type": "import", "line": 14}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 15}, {"name": "test_model_enforcement", "type": "function", "line": 18}, {"name": "main", "type": "function", "line": 53}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 15}, {"name": "test_model_enforcement Function", "description": "Function test_model_enforcement implementation.", "line_start": 18, "line_end": 52}, {"name": "main Function", "description": "Function main implementation.", "line_start": 53, "line_end": 58}], "content_hash": "6b607d8d889659bfd2849ebd6e6041d4"}'
- path: .archive/genfilemap/tests/test_model_enforcement.py
  line_count: 57
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_model_enforcement.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_model_enforcement", "line": 18, "parameters": [], "is_async": true, "description": "Asynchronously tests the enforcement of model constraints or rules.", "signature": "async test_model_enforcement()"}, {"name": "main", "line": 53, "parameters": [], "is_async": true, "description": "Asynchronous entry point for executing the primary program logic.", "signature": "async main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "sys", "alias": null, "line": 12, "statement": "import sys"}, {"module": "genfilemap.api", "alias": null, "line": 14, "statement": "from genfilemap.api import create_api_client"}, {"module": "genfilemap.config", "alias": null, "line": 15, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 12}, {"name": "from genfilemap.api import create_api_client", "type": "import", "line": 14}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 15}, {"name": "test_model_enforcement", "type": "function", "line": 18}, {"name": "main", "type": "function", "line": 53}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 15}, {"name": "test_model_enforcement Function", "description": "Function test_model_enforcement implementation.", "line_start": 18, "line_end": 52}, {"name": "main Function", "description": "Function main implementation.", "line_start": 53, "line_end": 58}], "content_hash": "c1b9da84f583180327c0208b912b289e"}'
- path: .archive/genfilemap/tests/config_test.py
  line_count: 39
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config_test.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "print_config_values", "line": 13, "parameters": [], "is_async": false, "description": "Prints all configuration values to the console.", "signature": "print_config_values()"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 8, "statement": "import os"}, {"module": "genfilemap.config", "alias": null, "line": 10, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 10, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 8}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 10}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 10}, {"name": "print_config_values", "type": "function", "line": 13}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 10}, {"name": "print_config_values Function", "description": "Function print_config_values implementation.", "line_start": 13, "line_end": 18}], "content_hash": "aff69b3dea934bd637a39f22aba44265"}'
- path: .archive/genfilemap/tests/test_basic.py
  line_count: 61
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_basic.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "BasicTests", "line": 25, "inherits_from": ["unittest.TestCase):"], "methods": [{"name": "test_import", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that the package can be imported successfully.", "signature": "test_import(self)"}, {"name": "test_version", "line": 33, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that the package has a version number.", "signature": "test_version(self)"}, {"name": "test_config", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that configuration functions work correctly.", "signature": "test_config(self)"}, {"name": "test_schema", "line": 52, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that the schema can be loaded.", "signature": "test_schema(self)"}], "properties": [], "description": "Contains a set of basic unit tests to verify core functionality."}], "imports": [{"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "unittest", "alias": null, "line": 14, "statement": "import unittest"}, {"module": "genfilemap", "alias": null, "line": 20, "statement": "from genfilemap import __version__"}, {"module": "genfilemap.config", "alias": null, "line": 21, "statement": "from genfilemap.config import DEFAULT_CONFIG"}, {"module": "genfilemap.config", "alias": null, "line": 21, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 21, "statement": "from genfilemap.config import load_config"}, {"module": "genfilemap.models.schemas", "alias": null, "line": 22, "statement": "from genfilemap.models.schemas import load_schema"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "unittest", "type": "import", "line": 14}, {"name": "from genfilemap import __version__", "type": "import", "line": 20}, {"name": "from genfilemap.config import DEFAULT_CONFIG", "type": "import", "line": 21}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 21}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 21}, {"name": "from genfilemap.models.schemas import load_schema", "type": "import", "line": 22}, {"name": "BasicTests", "type": "class", "line": 25}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 12, "line_end": 22}, {"name": "BasicTests Class", "description": "Class BasicTests definition and methods.", "line_start": 25, "line_end": 55}], "content_hash": "ac6a2b9c679c8ae344c7da3f1fcf8556"}'
- path: .archive/genfilemap/tests/test_config.py
  line_count: 31
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_config.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 12, "parameters": [], "is_async": false, "description": "Entry point of the program that executes the primary workflow.", "signature": "main()"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 7, "statement": "import os"}, {"module": "genfilemap.config", "alias": null, "line": 9, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 9, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 7}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 9}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 9}, {"name": "main", "type": "function", "line": 12}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 9}, {"name": "main Function", "description": "Function main implementation.", "line_start": 12, "line_end": 17}], "content_hash": "8555aa0baf1b688dfcd06ee54e78dfa2"}'
- path: .archive/genfilemap/tests/test_files/test_single_file.py
  line_count: 66
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_single_file.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_function", "line": 11, "parameters": [], "is_async": false, "description": "Executes a test routine to validate functionality.", "signature": "test_function()"}], "classes": [{"name": "TestClass", "line": 16, "inherits_from": [], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the test class.", "signature": "__init__(self)"}, {"name": "get_value", "line": 23, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Get the value.", "signature": "get_value(self)"}, {"name": "set_value", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "unknown"}], "is_async": false, "description": "Set the value.", "signature": "set_value(self, value)"}], "properties": [], "description": "Represents a test case with multiple methods for different test scenarios."}], "imports": [], "constants": []}, "key_elements": [{"name": "test_function", "type": "function", "line": 11}, {"name": "TestClass", "type": "class", "line": 16}], "sections": [{"name": "test_function Function", "description": "Function test_function implementation.", "line_start": 11, "line_end": 15}, {"name": "TestClass Class", "description": "Class TestClass definition and methods.", "line_start": 16, "line_end": 30}], "content_hash": "0888bfb636fbbef415fa4a7a25816727"}'
- path: .archive/genfilemap/src/genfilemap/__init__.py
  line_count: 46
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.cli", "alias": null, "line": 15, "statement": "from genfilemap.cli import main"}, {"module": "genfilemap.config", "alias": null, "line": 18, "statement": "from genfilemap.config import load_config"}, {"module": "genfilemap.config", "alias": null, "line": 18, "statement": "from genfilemap.config import save_config"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import create_validation_prompt"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import generate_report"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import initialize_report"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import log_validation_issues"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import process_files_async"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import run_process"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import should_abort_on_validation_failure"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import update_file_with_map"}, {"module": "genfilemap.core", "alias": null, "line": 19, "statement": "from genfilemap.core import validate_file_map"}], "constants": []}, "key_elements": [{"name": "from genfilemap.cli import main", "type": "import", "line": 15}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 18}, {"name": "from genfilemap.config import save_config", "type": "import", "line": 18}, {"name": "from genfilemap.core import create_validation_prompt", "type": "import", "line": 19}, {"name": "from genfilemap.core import generate_report", "type": "import", "line": 19}, {"name": "from genfilemap.core import initialize_report", "type": "import", "line": 19}, {"name": "from genfilemap.core import log_validation_issues", "type": "import", "line": 19}, {"name": "from genfilemap.core import process_files_async", "type": "import", "line": 19}, {"name": "from genfilemap.core import run_process", "type": "import", "line": 19}, {"name": "from genfilemap.core import should_abort_on_validation_failure", "type": "import", "line": 19}, {"name": "from genfilemap.core import update_file_with_map", "type": "import", "line": 19}, {"name": "from genfilemap.core import validate_file_map", "type": "import", "line": 19}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 19}], "content_hash": "57cda5368ca05eada85cf042a4a37309"}'
- path: .archive/genfilemap/src/genfilemap/cli.py
  line_count: 572
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "cli.py", "description": "Python module with 8 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "custom_excepthook", "line": 29, "parameters": [{"name": "exc_type", "type": "unknown"}, {"name": "exc_value", "type": "unknown"}, {"name": "exc_traceback", "type": "unknown"}], "is_async": false, "signature": "custom_excepthook(exc_type, exc_value, exc_traceback)", "description": "Handles uncaught exceptions with custom behavior."}, {"name": "setup_arg_parser", "line": 40, "parameters": [], "is_async": false, "return_type": "argparse.ArgumentParser", "description": "Creates and configures the argument parser for command-line inputs.", "signature": "setup_arg_parser() -> argparse.ArgumentParser"}, {"name": "setup_config", "line": 233, "parameters": [{"name": "args", "type": "argparse.Namespace"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Generates configuration dictionary based on parsed command-line arguments.", "signature": "setup_config(args: argparse.Namespace) -> dict[str, Any]"}, {"name": "async_main", "line": 353, "parameters": [], "is_async": false, "description": "Asynchronous main function to run the program''s core logic.", "signature": "async_main()"}, {"name": "main", "line": 427, "parameters": [], "is_async": false, "description": "Entry point of the program that initializes and runs the application.", "signature": "main()"}, {"name": "add_arguments", "line": 447, "parameters": [{"name": "parser", "type": "unknown"}], "is_async": false, "description": "Adds command-line arguments to the given argument parser.", "signature": "add_arguments(parser)"}, {"name": "create_config_from_args", "line": 526, "parameters": [{"name": "args", "type": "unknown"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Creates a configuration dictionary from the provided arguments.", "signature": "create_config_from_args(args) -> dict[str, Any]"}, {"name": "handle_exception", "line": 564, "parameters": [{"name": "exc_type", "type": "unknown"}, {"name": "exc_value", "type": "unknown"}, {"name": "exc_traceback", "type": "unknown"}], "is_async": false, "description": "Processes exceptions and performs custom exception handling.", "signature": "handle_exception(exc_type, exc_value, exc_traceback)"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 10, "statement": "import argparse"}, {"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "traceback", "alias": null, "line": 14, "statement": "import traceback"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 17, "statement": "from genfilemap.config import DEFAULT_CONFIG_PATH"}, {"module": "genfilemap.config", "alias": null, "line": 17, "statement": "from genfilemap.config import DEFAULT_PROJECT_CONFIG_PATH"}, {"module": "genfilemap.config", "alias": null, "line": 17, "statement": "from genfilemap.config import _deep_update"}, {"module": "genfilemap.config", "alias": null, "line": 17, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 17, "statement": "from genfilemap.config import load_config"}, {"module": "genfilemap.core", "alias": null, "line": 24, "statement": "from genfilemap.core import run_process"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 25, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": "log_error", "line": 26, "statement": "from genfilemap.logging_utils import error as log_error"}], "constants": []}, "key_elements": [{"name": "argparse", "type": "import", "line": 10}, {"name": "asyncio", "type": "import", "line": 11}, {"name": "os", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "traceback", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from genfilemap.config import DEFAULT_CONFIG_PATH", "type": "import", "line": 17}, {"name": "from genfilemap.config import DEFAULT_PROJECT_CONFIG_PATH", "type": "import", "line": 17}, {"name": "from genfilemap.config import _deep_update", "type": "import", "line": 17}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 17}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 17}, {"name": "from genfilemap.core import run_process", "type": "import", "line": 24}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 25}, {"name": "from genfilemap.logging_utils import error as log_error", "type": "import", "line": 26}, {"name": "custom_excepthook", "type": "function", "line": 29}, {"name": "setup_arg_parser", "type": "function", "line": 40}, {"name": "setup_config", "type": "function", "line": 233}, {"name": "async_main", "type": "function", "line": 353}, {"name": "main", "type": "function", "line": 427}, {"name": "add_arguments", "type": "function", "line": 447}, {"name": "create_config_from_args", "type": "function", "line": 526}, {"name": "handle_exception", "type": "function", "line": 564}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 26}, {"name": "custom_excepthook Function", "description": "Function custom_excepthook implementation.", "line_start": 29, "line_end": 39}, {"name": "setup_arg_parser Function", "description": "Function setup_arg_parser implementation.", "line_start": 40, "line_end": 232}, {"name": "setup_config Function", "description": "Function setup_config implementation.", "line_start": 233, "line_end": 352}, {"name": "async_main Function", "description": "Function async_main implementation.", "line_start": 353, "line_end": 426}, {"name": "main Function", "description": "Function main implementation.", "line_start": 427, "line_end": 446}, {"name": "add_arguments Function", "description": "Function add_arguments implementation.", "line_start": 447, "line_end": 525}, {"name": "create_config_from_args Function", "description": "Function create_config_from_args implementation.", "line_start": 526, "line_end": 563}, {"name": "handle_exception Function", "description": "Function handle_exception implementation.", "line_start": 564, "line_end": 569}], "content_hash": "2783cfba913b8de2a6f34324b3614b5a"}'
- path: .archive/genfilemap/src/genfilemap/core.py
  line_count: 137
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "core.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "initialize_logging", "line": 39, "parameters": [{"name": "config", "type": "dict[str, Any]):"}], "is_async": false, "description": "Sets up logging configuration based on the provided settings.", "signature": "initialize_logging(config: dict[str, Any]):)"}, {"name": "run_process", "line": 68, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Executes the main process using the given configuration and returns success status.", "signature": "run_process(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 14, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 15, "statement": "from genfilemap.core.cleaning import clean_file_maps"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 15, "statement": "from genfilemap.core.cleaning import clean_files_async"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 18, "statement": "from genfilemap.core.file_operations import count_lines"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 18, "statement": "from genfilemap.core.file_operations import get_hash_file_path"}, {"module": "genfilemap.core.processing", "alias": null, "line": 19, "statement": "from genfilemap.core.processing import process_files_async"}, {"module": "genfilemap.core.processing", "alias": null, "line": 19, "statement": "from genfilemap.core.processing import update_file_with_map"}, {"module": "genfilemap.core.project_map", "alias": null, "line": 20, "statement": "from genfilemap.core.project_map import generate_project_map"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 21, "statement": "from genfilemap.core.reporting import generate_report"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 21, "statement": "from genfilemap.core.reporting import report_data"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 22, "statement": "from genfilemap.logging_utils import configure_logging"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 22, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 22, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 22, "statement": "from genfilemap.logging_utils import get_logger"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 22, "statement": "from genfilemap.logging_utils import info"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 14}, {"name": "from genfilemap.core.cleaning import clean_file_maps", "type": "import", "line": 15}, {"name": "from genfilemap.core.cleaning import clean_files_async", "type": "import", "line": 15}, {"name": "from genfilemap.core.file_operations import count_lines", "type": "import", "line": 18}, {"name": "from genfilemap.core.file_operations import get_hash_file_path", "type": "import", "line": 18}, {"name": "from genfilemap.core.processing import process_files_async", "type": "import", "line": 19}, {"name": "from genfilemap.core.processing import update_file_with_map", "type": "import", "line": 19}, {"name": "from genfilemap.core.project_map import generate_project_map", "type": "import", "line": 20}, {"name": "from genfilemap.core.reporting import generate_report", "type": "import", "line": 21}, {"name": "from genfilemap.core.reporting import report_data", "type": "import", "line": 21}, {"name": "from genfilemap.logging_utils import configure_logging", "type": "import", "line": 22}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 22}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 22}, {"name": "from genfilemap.logging_utils import get_logger", "type": "import", "line": 22}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 22}, {"name": "initialize_logging", "type": "function", "line": 39}, {"name": "run_process", "type": "function", "line": 68}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 22}, {"name": "initialize_logging Function", "description": "Function initialize_logging implementation.", "line_start": 39, "line_end": 67}, {"name": "run_process Function", "description": "Function run_process implementation.", "line_start": 68, "line_end": 73}], "content_hash": "5e0a15405fa1a498eca54985f33a9429"}'
- path: .archive/genfilemap/src/genfilemap/config.py
  line_count: 429
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 14 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "_log_info", "line": 33, "parameters": [{"name": "msg", "type": "unknown"}], "is_async": false, "description": "Logs an informational message.", "signature": "_log_info(msg)"}, {"name": "_log_error", "line": 38, "parameters": [{"name": "msg", "type": "unknown"}], "is_async": false, "description": "Logs an error message.", "signature": "_log_error(msg)"}, {"name": "expand_env_vars", "line": 48, "parameters": [{"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Recursively expands environment variables in the given object.", "signature": "expand_env_vars(obj: Any) -> Any"}, {"name": "get_user_config_dir", "line": 78, "parameters": [], "is_async": false, "description": "Returns the path to the user''s configuration directory.", "signature": "get_user_config_dir()"}, {"name": "get_user_cache_dir", "line": 85, "parameters": [], "is_async": false, "description": "Returns the path to the user''s cache directory.", "signature": "get_user_cache_dir()"}, {"name": "get_user_data_dir", "line": 92, "parameters": [], "is_async": false, "description": "Returns the path to the user''s data directory.", "signature": "get_user_data_dir()"}, {"name": "get_user_log_dir", "line": 99, "parameters": [], "is_async": false, "description": "Returns the path to the user''s log directory.", "signature": "get_user_log_dir()"}, {"name": "_deep_update", "line": 193, "parameters": [{"name": "target", "type": "dict, source: dict"}, {"name": "source", "type": "dict"}], "is_async": false, "return_type": "dict", "description": "Recursively updates the target dictionary with values from the source dictionary.", "signature": "_deep_update(target: dict, source: dict, source: dict) -> dict"}, {"name": "get_config_value", "line": 212, "parameters": [{"name": "config", "type": "dict[str, Any], key_path: str, default=None"}, {"name": "key_path", "type": "str, default=None"}, {"name": "default", "type": "unknown", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Retrieves a configuration value using a dot-separated key path, returning a default if not found.", "signature": "get_config_value(config: dict[str, Any], key_path: str, default=None, key_path: str, default=None, default = None) -> Any"}, {"name": "load_config", "line": 243, "parameters": [{"name": "config_path", "type": "str | None", "default": "None"}, {"name": "project_config_path", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Loads configuration data from specified config file paths.", "signature": "load_config(config_path: str | None = None, project_config_path: str | None = None) -> dict[str, Any]"}, {"name": "ensure_output_dirs", "line": 356, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Ensures that output directories specified in the configuration exist.", "signature": "ensure_output_dirs(config: dict[str, Any]) -> None"}, {"name": "save_config", "line": 376, "parameters": [{"name": "config", "type": "dict[str, Any], config_path: str | None = None"}, {"name": "config_path", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Saves the configuration dictionary to a file at the specified path.", "signature": "save_config(config: dict[str, Any], config_path: str | None = None, config_path: str | None = None = None) -> bool"}, {"name": "get_environment_overrides", "line": 403, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieves configuration overrides from environment variables.", "signature": "get_environment_overrides() -> dict[str, Any]"}, {"name": "generate_default_config", "line": 421, "parameters": [{"name": "config_path", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Generates and saves a default configuration file if none exists.", "signature": "generate_default_config(config_path: str | None = None = None) -> bool"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "re", "alias": null, "line": 13, "statement": "import re"}, {"module": "sys", "alias": null, "line": 14, "statement": "import sys"}, {"module": "pathspec", "alias": null, "line": 17, "statement": "import pathspec"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}], "constants": [{"name": "APP_NAME", "line": 44, "value": "genfilemap", "type": "str"}, {"name": "APP_AUTHOR", "line": 45, "value": "genfilemap", "type": "str"}, {"name": "DEFAULT_CONFIG_PATH", "line": 107, "value": "os.path.expanduser(\"~/.genfilemap/.config/config.json\")", "type": ""}, {"name": "DEFAULT_PROJECT_CONFIG_PATH", "line": 108, "value": ".genfilemap/config.json", "type": "str"}, {"name": "DEFAULT_CONFIG", "line": 111, "value": "{''path'': ''.'', ''recursive'': False, ''force'': False, ''debug'': False, ''dry_run'': False, ''clean'': False, ''project_map'': False, ''project_map_output'': ''.genfilemap/maps/PROJECT_FILE_MAP.md''}", "type": "dict"}]}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "os", "type": "import", "line": 12}, {"name": "re", "type": "import", "line": 13}, {"name": "sys", "type": "import", "line": 14}, {"name": "pathspec", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "_log_info", "type": "function", "line": 33}, {"name": "_log_error", "type": "function", "line": 38}, {"name": "APP_NAME", "type": "constant", "line": 44}, {"name": "APP_AUTHOR", "type": "constant", "line": 45}, {"name": "expand_env_vars", "type": "function", "line": 48}, {"name": "get_user_config_dir", "type": "function", "line": 78}, {"name": "get_user_cache_dir", "type": "function", "line": 85}, {"name": "get_user_data_dir", "type": "function", "line": 92}, {"name": "get_user_log_dir", "type": "function", "line": 99}, {"name": "DEFAULT_CONFIG_PATH", "type": "constant", "line": 107}, {"name": "DEFAULT_PROJECT_CONFIG_PATH", "type": "constant", "line": 108}, {"name": "DEFAULT_CONFIG", "type": "constant", "line": 111}, {"name": "_deep_update", "type": "function", "line": 193}, {"name": "get_config_value", "type": "function", "line": 212}, {"name": "load_config", "type": "function", "line": 243}, {"name": "ensure_output_dirs", "type": "function", "line": 356}, {"name": "save_config", "type": "function", "line": 376}, {"name": "get_environment_overrides", "type": "function", "line": 403}, {"name": "generate_default_config", "type": "function", "line": 421}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "_log_info Function", "description": "Function _log_info implementation.", "line_start": 33, "line_end": 37}, {"name": "_log_error Function", "description": "Function _log_error implementation.", "line_start": 38, "line_end": 43}, {"name": "expand_env_vars Function", "description": "Function expand_env_vars implementation.", "line_start": 48, "line_end": 77}, {"name": "get_user_config_dir Function", "description": "Function get_user_config_dir implementation.", "line_start": 78, "line_end": 84}, {"name": "get_user_cache_dir Function", "description": "Function get_user_cache_dir implementation.", "line_start": 85, "line_end": 91}, {"name": "get_user_data_dir Function", "description": "Function get_user_data_dir implementation.", "line_start": 92, "line_end": 98}, {"name": "get_user_log_dir Function", "description": "Function get_user_log_dir implementation.", "line_start": 99, "line_end": 106}, {"name": "_deep_update Function", "description": "Function _deep_update implementation.", "line_start": 193, "line_end": 211}, {"name": "get_config_value Function", "description": "Function get_config_value implementation.", "line_start": 212, "line_end": 242}, {"name": "load_config Function", "description": "Function load_config implementation.", "line_start": 243, "line_end": 355}, {"name": "ensure_output_dirs Function", "description": "Function ensure_output_dirs implementation.", "line_start": 356, "line_end": 375}, {"name": "save_config Function", "description": "Function save_config implementation.", "line_start": 376, "line_end": 402}, {"name": "get_environment_overrides Function", "description": "Function get_environment_overrides implementation.", "line_start": 403, "line_end": 420}, {"name": "generate_default_config Function", "description": "Function generate_default_config implementation.", "line_start": 421, "line_end": 426}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 44, "line_end": 111}], "content_hash": "50217a593942f0f71857dc8e03982eca"}'
- path: .archive/genfilemap/src/genfilemap/file_watcher.py
  line_count: 489
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "file_watcher.py", "description": "Python module with 4 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "load_file_config", "line": 29, "parameters": [{"name": "file_path", "type": "str, config: dict[str, Any]"}, {"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Loads and returns configuration settings from a specified file.", "signature": "load_file_config(file_path: str, config: dict[str, Any], config: dict[str, Any]) -> dict[str, Any]"}, {"name": "process_file_async", "line": 49, "parameters": [{"name": "file_path", "type": "str, file_config: dict[str, Any], event_type: str | None = None"}, {"name": "file_config", "type": "dict[str, Any], event_type: str | None = None"}, {"name": "event_type", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Asynchronously processes a file based on given configuration and optional event type.", "signature": "process_file_async(file_path: str, file_config: dict[str, Any], event_type: str | None = None, file_config: dict[str, Any], event_type: str | None = None, event_type: str | None = None = None) -> bool"}, {"name": "parse_args", "line": 400, "parameters": [], "is_async": false, "description": "Parses and returns command-line arguments.", "signature": "parse_args()"}, {"name": "main", "line": 455, "parameters": [], "is_async": false, "description": "Entry point of the program that orchestrates the overall workflow.", "signature": "main()"}], "classes": [{"name": "FileWatcher", "line": 80, "inherits_from": [], "methods": [{"name": "__init__", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "path", "type": "str"}, {"name": "recursive", "type": "bool", "default": "True"}, {"name": "debounce_delay", "type": "float", "default": "DEFAULT_DEBOUNCE_DELAY"}, {"name": "verbose", "type": "bool", "default": "False"}, {"name": "include_extensions", "type": "list[str] | None", "default": "None"}, {"name": "exclude_extensions", "type": "list[str] | None", "default": "None"}, {"name": "min_line_count", "type": "int", "default": "50"}], "is_async": false, "description": "\n        Initialize the file watcher.\n        \n        Args:\n            path: Path to watch\n            recursive: Whether to watch subdirectories\n            debounce_delay: Time in seconds to wait before processing changes\n            verbose: Whether to enable verbose logging\n            include_extensions: List of file extensions to include\n            exclude_extensions: List of file extensions to exclude\n            min_line_count: Minimum number of lines for a file to be processed (default: 50)\n                            This is used because AI tools typically read ~50 lines at a time,\n                            so file maps are most useful for longer files that can''t be read in one go.\n        ", "signature": "__init__(self, path: str, recursive: bool = True, debounce_delay: float = DEFAULT_DEBOUNCE_DELAY, verbose: bool = False, include_extensions: list[str] | None = None, exclude_extensions: list[str] | None = None, min_line_count: int = 50)"}, {"name": "start", "line": 143, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Start the file watcher.", "signature": "start(self)"}, {"name": "stop", "line": 156, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Stop the file watcher.", "signature": "stop(self)"}, {"name": "process_file", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str, event_type: int = None"}, {"name": "event_type", "type": "int = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Process a single file asynchronously.", "signature": "process_file(self, file_path: str, event_type: int = None, event_type: int = None = None) -> None"}, {"name": "should_process_file", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Determine if a file should be processed.\n        \n        Args:\n            file_path: Path to the file\n            \n        Returns:\n            True if the file should be processed, False otherwise\n        ", "signature": "should_process_file(self, file_path: str) -> bool"}, {"name": "_load_ignore_patterns", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "ignore_file", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "\n        Load ignore patterns from a file.\n        \n        Args:\n            ignore_file: Path to the ignore file\n            \n        Returns:\n            List of ignore patterns\n        ", "signature": "_load_ignore_patterns(self, ignore_file: str) -> list[str]"}, {"name": "_is_ignored", "line": 310, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str, patterns: list[str]"}, {"name": "patterns", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "\n        Check if a file path matches any ignore patterns.\n        \n        Args:\n            file_path: Path to check\n            patterns: List of ignore patterns\n            \n        Returns:\n            True if the file should be ignored, False otherwise\n        ", "signature": "_is_ignored(self, file_path: str, patterns: list[str], patterns: list[str]) -> bool"}, {"name": "handle_event", "line": 329, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str"}, {"name": "file_path", "type": "str):"}], "is_async": false, "description": "\n        Handle a file event with debouncing.\n        \n        Args:\n            event_type: Type of event (''created'' or ''modified'')\n            file_path: Path to the file\n        ", "signature": "handle_event(self, event_type: str, file_path: str):)"}, {"name": "_process_debounced_event", "line": 358, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str):"}], "is_async": false, "description": "\n        Process a debounced file event.\n        \n        Args:\n            file_path: Path to the file\n        ", "signature": "_process_debounced_event(self, file_path: str):)"}], "properties": [], "description": "Monitors file system changes and triggers appropriate events."}, {"name": "FileEventHandler", "line": 374, "inherits_from": ["FileSystemEventHandler):"], "methods": [{"name": "__init__", "line": 377, "parameters": [{"name": "self", "type": "self"}, {"name": "watcher", "type": "FileWatcher):"}], "is_async": false, "description": "\n        Initialize the file event handler.\n        \n        Args:\n            watcher: The FileWatcher instance\n        ", "signature": "__init__(self, watcher: FileWatcher):)"}, {"name": "on_created", "line": 387, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "unknown"}], "is_async": false, "description": "Handle file creation events.", "signature": "on_created(self, event)"}, {"name": "on_modified", "line": 393, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "unknown"}], "is_async": false, "description": "Handle file modification events.", "signature": "on_modified(self, event)"}], "properties": [], "description": "Handles file system events and defines responses to those events."}], "imports": [{"module": "argparse", "alias": null, "line": 11, "statement": "import argparse"}, {"module": "logging", "alias": null, "line": 12, "statement": "import logging"}, {"module": "os", "alias": null, "line": 13, "statement": "import os"}, {"module": "threading", "alias": null, "line": 14, "statement": "import threading"}, {"module": "time", "alias": null, "line": 15, "statement": "import time"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "watchdog.events", "alias": null, "line": 18, "statement": "from watchdog.events import FileSystemEventHandler"}, {"module": "watchdog.observers", "alias": null, "line": 19, "statement": "from watchdog.observers import Observer"}, {"module": "genfilemap.config", "alias": null, "line": 21, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 21, "statement": "from genfilemap.config import load_config"}, {"module": "genfilemap.core", "alias": null, "line": 22, "statement": "from genfilemap.core import run_process"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 23, "statement": "from genfilemap.core.file_operations import count_lines"}], "constants": [{"name": "DEFAULT_DEBOUNCE_DELAY", "line": 26, "value": "2.0", "type": "float"}, {"name": "LOG_FORMAT", "line": 27, "value": "%(asctime)s - %(levelname)s - %(message)s", "type": "str"}]}, "key_elements": [{"name": "argparse", "type": "import", "line": 11}, {"name": "logging", "type": "import", "line": 12}, {"name": "os", "type": "import", "line": 13}, {"name": "threading", "type": "import", "line": 14}, {"name": "time", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from watchdog.events import FileSystemEventHandler", "type": "import", "line": 18}, {"name": "from watchdog.observers import Observer", "type": "import", "line": 19}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 21}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 21}, {"name": "from genfilemap.core import run_process", "type": "import", "line": 22}, {"name": "from genfilemap.core.file_operations import count_lines", "type": "import", "line": 23}, {"name": "DEFAULT_DEBOUNCE_DELAY", "type": "constant", "line": 26}, {"name": "LOG_FORMAT", "type": "constant", "line": 27}, {"name": "load_file_config", "type": "function", "line": 29}, {"name": "process_file_async", "type": "function", "line": 49}, {"name": "FileWatcher", "type": "class", "line": 80}, {"name": "FileEventHandler", "type": "class", "line": 374}, {"name": "parse_args", "type": "function", "line": 400}, {"name": "main", "type": "function", "line": 455}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 23}, {"name": "load_file_config Function", "description": "Function load_file_config implementation.", "line_start": 29, "line_end": 48}, {"name": "process_file_async Function", "description": "Function process_file_async implementation.", "line_start": 49, "line_end": 79}, {"name": "parse_args Function", "description": "Function parse_args implementation.", "line_start": 400, "line_end": 454}, {"name": "main Function", "description": "Function main implementation.", "line_start": 455, "line_end": 460}, {"name": "FileWatcher Class", "description": "Class FileWatcher definition and methods.", "line_start": 80, "line_end": 361}, {"name": "FileEventHandler Class", "description": "Class FileEventHandler definition and methods.", "line_start": 374, "line_end": 396}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 26, "line_end": 27}], "content_hash": "de33d90c24c680cf19f6f9dfd0f5a0f4"}'
- path: .archive/genfilemap/src/genfilemap/init_config.py
  line_count: 162
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "init_config.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_project_config", "line": 27, "parameters": [{"name": "config_path", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Loads and returns the project-specific configuration from the given file path.", "signature": "create_project_config(config_path: str) -> dict[str, Any]"}, {"name": "create_global_config", "line": 63, "parameters": [{"name": "config_path", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Loads and returns the global configuration from the given file path.", "signature": "create_global_config(config_path: str) -> dict[str, Any]"}, {"name": "main", "line": 108, "parameters": [], "is_async": false, "description": "Entry point of the application that initializes configurations and starts the program.", "signature": "main()"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 11, "statement": "import argparse"}, {"module": "logging", "alias": null, "line": 12, "statement": "import logging"}, {"module": "os", "alias": null, "line": 13, "statement": "import os"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import DEFAULT_CONFIG_PATH"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import DEFAULT_PROJECT_CONFIG_PATH"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_user_cache_dir"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_user_config_dir"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_user_data_dir"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_user_log_dir"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import save_config"}], "constants": []}, "key_elements": [{"name": "argparse", "type": "import", "line": 11}, {"name": "logging", "type": "import", "line": 12}, {"name": "os", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from genfilemap.config import DEFAULT_CONFIG_PATH", "type": "import", "line": 16}, {"name": "from genfilemap.config import DEFAULT_PROJECT_CONFIG_PATH", "type": "import", "line": 16}, {"name": "from genfilemap.config import get_user_cache_dir", "type": "import", "line": 16}, {"name": "from genfilemap.config import get_user_config_dir", "type": "import", "line": 16}, {"name": "from genfilemap.config import get_user_data_dir", "type": "import", "line": 16}, {"name": "from genfilemap.config import get_user_log_dir", "type": "import", "line": 16}, {"name": "from genfilemap.config import save_config", "type": "import", "line": 16}, {"name": "create_project_config", "type": "function", "line": 27}, {"name": "create_global_config", "type": "function", "line": 63}, {"name": "main", "type": "function", "line": 108}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 16}, {"name": "create_project_config Function", "description": "Function create_project_config implementation.", "line_start": 27, "line_end": 62}, {"name": "create_global_config Function", "description": "Function create_global_config implementation.", "line_start": 63, "line_end": 107}, {"name": "main Function", "description": "Function main implementation.", "line_start": 108, "line_end": 113}], "content_hash": "14abe2ba854321914e335fd90b371064"}'
- path: .archive/genfilemap/src/genfilemap/logging_utils.py
  line_count: 229
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging_utils.py", "description": "Python module with 8 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_logger", "line": 117, "parameters": [], "is_async": false, "description": "Retrieve a logger instance for logging messages.", "signature": "get_logger()"}, {"name": "debug", "line": 123, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "description": "Log a message with DEBUG level severity.", "signature": "debug(msg: str, *args, **kwargs)"}, {"name": "info", "line": 128, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "description": "Log a message with INFO level severity.", "signature": "info(msg: str, *args, **kwargs)"}, {"name": "warning", "line": 133, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "description": "Log a message with WARNING level severity.", "signature": "warning(msg: str, *args, **kwargs)"}, {"name": "error", "line": 138, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "description": "Log a message with ERROR level severity.", "signature": "error(msg: str, *args, **kwargs)"}, {"name": "critical", "line": 143, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "description": "Log a message with CRITICAL level severity.", "signature": "critical(msg: str, *args, **kwargs)"}, {"name": "configure_logging", "line": 148, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Set up logging configuration using the provided settings dictionary.", "signature": "configure_logging(config: dict[str, Any]) -> None"}, {"name": "initialize_logging", "line": 185, "parameters": [{"name": "config", "type": "dict[str, Any]):"}], "is_async": false, "description": "Initialize the logging system based on the given configuration.", "signature": "initialize_logging(config: dict[str, Any]):)"}], "classes": [{"name": "LogManager", "line": 27, "inherits_from": [], "methods": [{"name": "__new__", "line": 38, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "signature": "__new__(cls)"}, {"name": "__init__", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "configure", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "level", "type": "str", "default": "info"}, {"name": "log_file", "type": "str | None", "default": "None"}, {"name": "console", "type": "bool", "default": "True"}, {"name": "debug", "type": "bool", "default": "False"}], "is_async": false, "return_type": "None", "description": "\n        Configure logging with the specified options.\n\n        Args:\n            level: Log level (debug, info, warning, error, critical)\n            log_file: Optional path to a log file\n            console: Whether to log to console\n            debug: Override to set debug level if True\n        ", "signature": "configure(self, level: str = info, log_file: str | None = None, console: bool = True, debug: bool = False) -> None"}, {"name": "get_logger", "line": 111, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Get the configured logger instance", "signature": "get_logger(self)"}], "properties": [{"name": "_instance", "line": 33, "type": ""}, {"name": "_initialized", "line": 34, "type": ""}], "description": "Manage logging operations including configuration and message logging."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "sys", "alias": null, "line": 11, "statement": "import sys"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}], "constants": [{"name": "LOG_LEVELS", "line": 18, "value": "{}", "type": "dict"}]}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "sys", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "LOG_LEVELS", "type": "constant", "line": 18}, {"name": "LogManager", "type": "class", "line": 27}, {"name": "get_logger", "type": "function", "line": 117}, {"name": "debug", "type": "function", "line": 123}, {"name": "info", "type": "function", "line": 128}, {"name": "warning", "type": "function", "line": 133}, {"name": "error", "type": "function", "line": 138}, {"name": "critical", "type": "function", "line": 143}, {"name": "configure_logging", "type": "function", "line": 148}, {"name": "initialize_logging", "type": "function", "line": 185}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 117, "line_end": 122}, {"name": "debug Function", "description": "Function debug implementation.", "line_start": 123, "line_end": 127}, {"name": "info Function", "description": "Function info implementation.", "line_start": 128, "line_end": 132}, {"name": "warning Function", "description": "Function warning implementation.", "line_start": 133, "line_end": 137}, {"name": "error Function", "description": "Function error implementation.", "line_start": 138, "line_end": 142}, {"name": "critical Function", "description": "Function critical implementation.", "line_start": 143, "line_end": 147}, {"name": "configure_logging Function", "description": "Function configure_logging implementation.", "line_start": 148, "line_end": 184}, {"name": "initialize_logging Function", "description": "Function initialize_logging implementation.", "line_start": 185, "line_end": 190}, {"name": "LogManager Class", "description": "Class LogManager definition and methods.", "line_start": 27, "line_end": 114}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 18, "line_end": 18}], "content_hash": "92b456c2bab862f7e8b7e4ef36da17f3"}'
- path: .archive/genfilemap/src/genfilemap/__main__.py
  line_count: 41
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__main__.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main_with_config", "line": 15, "parameters": [], "is_async": false, "description": "Executes the main program logic using the provided configuration.", "signature": "main_with_config()"}], "classes": [], "imports": [{"module": "sys", "alias": null, "line": 9, "statement": "import sys"}, {"module": "genfilemap.cli", "alias": null, "line": 11, "statement": "from genfilemap.cli import setup_arg_parser"}, {"module": "genfilemap.cli", "alias": null, "line": 11, "statement": "from genfilemap.cli import setup_config"}, {"module": "genfilemap.config", "alias": null, "line": 12, "statement": "from genfilemap.config import _deep_update"}, {"module": "genfilemap.config", "alias": null, "line": 12, "statement": "from genfilemap.config import load_config"}], "constants": []}, "key_elements": [{"name": "sys", "type": "import", "line": 9}, {"name": "from genfilemap.cli import setup_arg_parser", "type": "import", "line": 11}, {"name": "from genfilemap.cli import setup_config", "type": "import", "line": 11}, {"name": "from genfilemap.config import _deep_update", "type": "import", "line": 12}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 12}, {"name": "main_with_config", "type": "function", "line": 15}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "main_with_config Function", "description": "Function main_with_config implementation.", "line_start": 15, "line_end": 20}], "content_hash": "c7b48d494f4b128ac3717d026f962ada"}'
- path: .archive/genfilemap/src/genfilemap/core/__init__.py
  line_count: 53
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.core.cleaning", "alias": null, "line": 11, "statement": "from genfilemap.core.cleaning import clean_file_maps"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 11, "statement": "from genfilemap.core.cleaning import clean_files_async"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 11, "statement": "from genfilemap.core.cleaning import deep_clean_files_async"}, {"module": "genfilemap.core.core", "alias": null, "line": 16, "statement": "from genfilemap.core.core import run_process"}, {"module": "genfilemap.core.directory_hash_processing", "alias": null, "line": 17, "statement": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 20, "statement": "from genfilemap.core.file_operations import count_lines"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 20, "statement": "from genfilemap.core.file_operations import get_hash_file_path"}, {"module": "genfilemap.core.processing", "alias": null, "line": 21, "statement": "from genfilemap.core.processing import process_files_async"}, {"module": "genfilemap.core.processing", "alias": null, "line": 21, "statement": "from genfilemap.core.processing import update_file_with_map"}, {"module": "genfilemap.core.project_map", "alias": null, "line": 22, "statement": "from genfilemap.core.project_map import generate_project_map"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 23, "statement": "from genfilemap.core.reporting import generate_report"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 23, "statement": "from genfilemap.core.reporting import initialize_report"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 23, "statement": "from genfilemap.core.reporting import report_data"}, {"module": "genfilemap.core.validation", "alias": null, "line": 26, "statement": "from genfilemap.core.validation import create_validation_prompt"}, {"module": "genfilemap.core.validation", "alias": null, "line": 26, "statement": "from genfilemap.core.validation import log_validation_issues"}, {"module": "genfilemap.core.validation", "alias": null, "line": 26, "statement": "from genfilemap.core.validation import should_abort_on_validation_failure"}, {"module": "genfilemap.core.validation", "alias": null, "line": 26, "statement": "from genfilemap.core.validation import validate_file_map"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 32, "statement": "from genfilemap.logging_utils import configure_logging"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 32, "statement": "from genfilemap.logging_utils import initialize_logging"}], "constants": []}, "key_elements": [{"name": "from genfilemap.core.cleaning import clean_file_maps", "type": "import", "line": 11}, {"name": "from genfilemap.core.cleaning import clean_files_async", "type": "import", "line": 11}, {"name": "from genfilemap.core.cleaning import deep_clean_files_async", "type": "import", "line": 11}, {"name": "from genfilemap.core.core import run_process", "type": "import", "line": 16}, {"name": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing", "type": "import", "line": 17}, {"name": "from genfilemap.core.file_operations import count_lines", "type": "import", "line": 20}, {"name": "from genfilemap.core.file_operations import get_hash_file_path", "type": "import", "line": 20}, {"name": "from genfilemap.core.processing import process_files_async", "type": "import", "line": 21}, {"name": "from genfilemap.core.processing import update_file_with_map", "type": "import", "line": 21}, {"name": "from genfilemap.core.project_map import generate_project_map", "type": "import", "line": 22}, {"name": "from genfilemap.core.reporting import generate_report", "type": "import", "line": 23}, {"name": "from genfilemap.core.reporting import initialize_report", "type": "import", "line": 23}, {"name": "from genfilemap.core.reporting import report_data", "type": "import", "line": 23}, {"name": "from genfilemap.core.validation import create_validation_prompt", "type": "import", "line": 26}, {"name": "from genfilemap.core.validation import log_validation_issues", "type": "import", "line": 26}, {"name": "from genfilemap.core.validation import should_abort_on_validation_failure", "type": "import", "line": 26}, {"name": "from genfilemap.core.validation import validate_file_map", "type": "import", "line": 26}, {"name": "from genfilemap.logging_utils import configure_logging", "type": "import", "line": 32}, {"name": "from genfilemap.logging_utils import initialize_logging", "type": "import", "line": 32}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 32}], "content_hash": "885c25ce74f4018180761febe25bd625"}'
- path: .archive/genfilemap/src/genfilemap/core/core.py
  line_count: 126
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "core.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "run_process", "line": 27, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Executes a process based on the provided configuration dictionary and returns True if successful, otherwise False.", "signature": "run_process(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 17, "statement": "from genfilemap.core.cleaning import clean_files_async"}, {"module": "genfilemap.core.cleaning", "alias": null, "line": 17, "statement": "from genfilemap.core.cleaning import deep_clean_files_async"}, {"module": "genfilemap.core.directory_hash_processing", "alias": null, "line": 18, "statement": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing"}, {"module": "genfilemap.core.processing", "alias": null, "line": 21, "statement": "from genfilemap.core.processing import process_files_async"}, {"module": "genfilemap.core.project_map", "alias": null, "line": 22, "statement": "from genfilemap.core.project_map import generate_project_map"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 23, "statement": "from genfilemap.core.reporting import generate_report"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 23, "statement": "from genfilemap.core.reporting import report_data"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 24, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 24, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 24, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 24, "statement": "from genfilemap.logging_utils import initialize_logging"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "os", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 16}, {"name": "from genfilemap.core.cleaning import clean_files_async", "type": "import", "line": 17}, {"name": "from genfilemap.core.cleaning import deep_clean_files_async", "type": "import", "line": 17}, {"name": "from genfilemap.core.directory_hash_processing import process_files_with_directory_hashing", "type": "import", "line": 18}, {"name": "from genfilemap.core.processing import process_files_async", "type": "import", "line": 21}, {"name": "from genfilemap.core.project_map import generate_project_map", "type": "import", "line": 22}, {"name": "from genfilemap.core.reporting import generate_report", "type": "import", "line": 23}, {"name": "from genfilemap.core.reporting import report_data", "type": "import", "line": 23}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 24}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 24}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 24}, {"name": "from genfilemap.logging_utils import initialize_logging", "type": "import", "line": 24}, {"name": "run_process", "type": "function", "line": 27}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 24}, {"name": "run_process Function", "description": "Function run_process implementation.", "line_start": 27, "line_end": 32}], "content_hash": "421297da3035893854105e6602cfba64"}'
- path: .archive/genfilemap/src/genfilemap/core/reporting.py
  line_count: 112
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "reporting.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "initialize_report", "line": 29, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Creates and returns an initial report data structure.", "signature": "initialize_report() -> dict[str, Any]"}, {"name": "generate_report", "line": 48, "parameters": [{"name": "report_path", "type": "str, report_data: dict[str, Any]"}, {"name": "report_data", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Generates a report file at the specified path using the provided report data.", "signature": "generate_report(report_path: str, report_data: dict[str, Any], report_data: dict[str, Any]) -> None"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 14, "statement": "from genfilemap.logging_utils import info"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 14}, {"name": "initialize_report", "type": "function", "line": 29}, {"name": "generate_report", "type": "function", "line": 48}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "initialize_report Function", "description": "Function initialize_report implementation.", "line_start": 29, "line_end": 47}, {"name": "generate_report Function", "description": "Function generate_report implementation.", "line_start": 48, "line_end": 53}], "content_hash": "c22bef4e8021556a26129e39a1d2b8a5"}'
- path: .archive/genfilemap/src/genfilemap/core/config.py
  line_count: 86
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "Config", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}, {"name": "min_lines", "type": "int", "default": "50"}, {"name": "max_lines", "type": "int", "default": "1000"}, {"name": "report_path", "type": "str | None", "default": "None"}, {"name": "api_key", "type": "str | None", "default": "None"}, {"name": "model", "type": "str", "default": "gpt-4.1-mini"}, {"name": "enable_validation", "type": "bool", "default": "False"}, {"name": "validation_model", "type": "str | None", "default": "None"}, {"name": "strict_validation", "type": "bool", "default": "False"}, {"name": "abort_on_validation_failure", "type": "bool", "default": "False"}], "is_async": false, "description": "\n        Initialize configuration.\n\n        Args:\n            min_lines: Minimum number of lines for a file to be processed\n            max_lines: Maximum number of lines for a file to be processed\n            report_path: Path to write the JSON report\n            api_key: OpenAI API key\n            model: Model to use for file map generation\n            enable_validation: Whether to validate generated file maps\n            validation_model: Model to use for validation (defaults to same as generation model)\n            strict_validation: Whether to use stricter validation criteria\n            abort_on_validation_failure: Whether to abort processing if validation fails\n        ", "signature": "__init__(self, min_lines: int = 50, max_lines: int = 1000, report_path: str | None = None, api_key: str | None = None, model: str = gpt-4.1-mini, enable_validation: bool = False, validation_model: str | None = None, strict_validation: bool = False, abort_on_validation_failure: bool = False)"}, {"name": "from_dict", "line": 49, "parameters": [{"name": "cls", "type": "self"}, {"name": "config_dict", "type": "dict[str, Any]"}], "is_async": false, "return_type": "''Config''", "description": "\n        Create a Config instance from a dictionary.\n\n        Args:\n            config_dict: Dictionary containing configuration values\n\n        Returns:\n            Config instance\n        ", "signature": "from_dict(cls, config_dict: dict[str, Any]) -> ''Config''"}, {"name": "to_dict", "line": 71, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Convert config to dictionary.\n\n        Returns:\n            Dictionary representation of config\n        ", "signature": "to_dict(self) -> dict[str, Any]"}], "properties": [], "description": "Represents configuration settings with methods to manage and access them."}], "imports": [{"module": "os", "alias": null, "line": 4, "statement": "import os"}, {"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 4}, {"name": "from typing import Any", "type": "import", "line": 5}, {"name": "Config", "type": "class", "line": 8}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 4, "line_end": 5}, {"name": "Config Class", "description": "Class Config definition and methods.", "line_start": 8, "line_end": 74}], "content_hash": "9178883a5def906c84add1b73b71e52f"}'
- path: .archive/genfilemap/src/genfilemap/core/project_map.py
  line_count: 289
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "project_map.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "generate_project_map", "line": 22, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Generates a project map based on the provided configuration dictionary and returns a boolean indicating success.", "signature": "generate_project_map(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "datetime", "alias": null, "line": 10, "statement": "import datetime"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "os", "alias": null, "line": 12, "statement": "import os"}, {"module": "re", "alias": null, "line": 13, "statement": "import re"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 17, "statement": "from genfilemap.core.file_operations import count_lines"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 18, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 18, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 18, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 19, "statement": "from genfilemap.utils.file_utils import should_ignore_file"}], "constants": []}, "key_elements": [{"name": "datetime", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "os", "type": "import", "line": 12}, {"name": "re", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 16}, {"name": "from genfilemap.core.file_operations import count_lines", "type": "import", "line": 17}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 18}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 18}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 18}, {"name": "from genfilemap.utils.file_utils import should_ignore_file", "type": "import", "line": 19}, {"name": "generate_project_map", "type": "function", "line": 22}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "generate_project_map Function", "description": "Function generate_project_map implementation.", "line_start": 22, "line_end": 27}], "content_hash": "f56e1b4349f5805ab98ec6ded94cacb5"}'
- path: .archive/genfilemap/src/genfilemap/core/cleaning.py
  line_count: 392
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "cleaning.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "clean_file_maps", "line": 20, "parameters": [{"name": "file_path", "type": "str"}, {"name": "dry_run", "type": "bool", "default": "False"}, {"name": "from_deep_clean", "type": "bool", "default": "False"}], "is_async": true, "return_type": "tuple[bool, str, str | None]", "description": "Asynchronously cleans file mappings based on the given file path and options, optionally performing a dry run or deep clean.", "signature": "async clean_file_maps(file_path: str, dry_run: bool = False, from_deep_clean: bool = False) -> tuple[bool, str, str | None]"}, {"name": "clean_files_async", "line": 141, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "Asynchronously cleans files according to the provided configuration dictionary.", "signature": "async clean_files_async(config: dict[str, Any]) -> bool"}, {"name": "deep_clean_files_async", "line": 258, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "Asynchronously performs a thorough cleaning of files based on the provided configuration.", "signature": "async deep_clean_files_async(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "re", "alias": null, "line": 11, "statement": "import re"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 14, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.file_operations", "alias": null, "line": 15, "statement": "from genfilemap.core.file_operations import get_hash_file_path"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 16, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 16, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 16, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.utils", "alias": null, "line": 17, "statement": "from genfilemap.utils import should_ignore_file"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "re", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 14}, {"name": "from genfilemap.core.file_operations import get_hash_file_path", "type": "import", "line": 15}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 16}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 16}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 16}, {"name": "from genfilemap.utils import should_ignore_file", "type": "import", "line": 17}, {"name": "clean_file_maps", "type": "function", "line": 20}, {"name": "clean_files_async", "type": "function", "line": 141}, {"name": "deep_clean_files_async", "type": "function", "line": 258}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "clean_file_maps Function", "description": "Function clean_file_maps implementation.", "line_start": 20, "line_end": 140}, {"name": "clean_files_async Function", "description": "Function clean_files_async implementation.", "line_start": 141, "line_end": 257}, {"name": "deep_clean_files_async Function", "description": "Function deep_clean_files_async implementation.", "line_start": 258, "line_end": 263}], "content_hash": "537030a9426555c907d12635a5f69fd4"}'
- path: .archive/genfilemap/src/genfilemap/core/processing.py
  line_count: 833
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "processing.py", "description": "Python module with 5 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "update_file_with_map", "line": 35, "parameters": [{"name": "file_path", "type": "str"}, {"name": "api_client", "type": "unknown"}, {"name": "model", "type": "str"}, {"name": "template", "type": "str | None", "default": "None"}, {"name": "dry_run", "type": "bool", "default": "False"}, {"name": "min_lines", "type": "int", "default": "0"}, {"name": "force", "type": "bool", "default": "False"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously updates a file''s content using a mapping generated by an API client and a specified model, with options for templating, dry run, and configuration.", "signature": "async update_file_with_map(file_path: str, api_client, model: str, template: str | None = None, dry_run: bool = False, min_lines: int = 0, force: bool = False, config: dict[str, Any] | None = None) -> bool"}, {"name": "process_files_async", "line": 277, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "Asynchronously processes multiple files based on the provided configuration settings.", "signature": "async process_files_async(config: dict[str, Any]) -> bool"}, {"name": "process_file_batch", "line": 486, "parameters": [{"name": "batch_index", "type": "unknown"}, {"name": "file_batch", "type": "unknown"}, {"name": "config", "type": "unknown"}, {"name": "expanded_ignore_patterns", "type": "unknown", "default": "None"}], "is_async": false, "description": "Processes a batch of files, applying configuration settings and optional ignore patterns.", "signature": "process_file_batch(batch_index, file_batch, config, expanded_ignore_patterns = None)"}, {"name": "process_files_with_multiprocessing", "line": 645, "parameters": [{"name": "config", "type": "dict[str, Any]"}, {"name": "process_count", "type": "int"}], "is_async": false, "return_type": "bool", "description": "Processes files concurrently using multiple processes according to the given configuration and process count.", "signature": "process_files_with_multiprocessing(config: dict[str, Any], process_count: int) -> bool"}, {"name": "process_files_single_process", "line": 811, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Processes files sequentially in a single process using the provided configuration.", "signature": "process_files_single_process(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "multiprocessing", "alias": null, "line": 10, "statement": "import multiprocessing"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "genfilemap.api", "alias": null, "line": 15, "statement": "from genfilemap.api import create_api_client"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.reporting", "alias": null, "line": 17, "statement": "from genfilemap.core.reporting import report_data"}, {"module": "genfilemap.core.validation", "alias": null, "line": 18, "statement": "from genfilemap.core.validation import log_validation_issues"}, {"module": "genfilemap.core.validation", "alias": null, "line": 18, "statement": "from genfilemap.core.validation import should_abort_on_validation_failure"}, {"module": "genfilemap.core.validation", "alias": null, "line": 18, "statement": "from genfilemap.core.validation import validate_file_map"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 23, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 23, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 23, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.processors", "alias": null, "line": 24, "statement": "from genfilemap.processors import get_processor_for_file"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import expand_ignore_patterns"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import extract_existing_file_map"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import get_api_key"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import get_comment_style"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import load_ignore_patterns"}, {"module": "genfilemap.utils", "alias": null, "line": 25, "statement": "from genfilemap.utils import should_ignore_file"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "multiprocessing", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from genfilemap.api import create_api_client", "type": "import", "line": 15}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 16}, {"name": "from genfilemap.core.reporting import report_data", "type": "import", "line": 17}, {"name": "from genfilemap.core.validation import log_validation_issues", "type": "import", "line": 18}, {"name": "from genfilemap.core.validation import should_abort_on_validation_failure", "type": "import", "line": 18}, {"name": "from genfilemap.core.validation import validate_file_map", "type": "import", "line": 18}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 23}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 23}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 23}, {"name": "from genfilemap.processors import get_processor_for_file", "type": "import", "line": 24}, {"name": "from genfilemap.utils import expand_ignore_patterns", "type": "import", "line": 25}, {"name": "from genfilemap.utils import extract_existing_file_map", "type": "import", "line": 25}, {"name": "from genfilemap.utils import get_api_key", "type": "import", "line": 25}, {"name": "from genfilemap.utils import get_comment_style", "type": "import", "line": 25}, {"name": "from genfilemap.utils import load_ignore_patterns", "type": "import", "line": 25}, {"name": "from genfilemap.utils import should_ignore_file", "type": "import", "line": 25}, {"name": "update_file_with_map", "type": "function", "line": 35}, {"name": "process_files_async", "type": "function", "line": 277}, {"name": "process_file_batch", "type": "function", "line": 486}, {"name": "process_files_with_multiprocessing", "type": "function", "line": 645}, {"name": "process_files_single_process", "type": "function", "line": 811}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 25}, {"name": "update_file_with_map Function", "description": "Function update_file_with_map implementation.", "line_start": 35, "line_end": 276}, {"name": "process_files_async Function", "description": "Function process_files_async implementation.", "line_start": 277, "line_end": 485}, {"name": "process_file_batch Function", "description": "Function process_file_batch implementation.", "line_start": 486, "line_end": 644}, {"name": "process_files_with_multiprocessing Function", "description": "Function process_files_with_multiprocessing implementation.", "line_start": 645, "line_end": 810}, {"name": "process_files_single_process Function", "description": "Function process_files_single_process implementation.", "line_start": 811, "line_end": 816}], "content_hash": "9766e60a7ce7f083b12913c987e5dff2"}'
- path: .archive/genfilemap/src/genfilemap/core/directory_hash.py
  line_count: 289
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "directory_hash.py", "description": "Python module with 5 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "compute_file_hash", "line": 77, "parameters": [{"name": "file_path", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "Calculates and returns the hash of a file given its path.", "signature": "compute_file_hash(file_path: str) -> str | None"}, {"name": "compute_directory_hashes", "line": 96, "parameters": [{"name": "directory_path", "type": "str"}, {"name": "ignore_patterns", "type": "list[str] | None", "default": "None"}, {"name": "cache", "type": "dict[str, DirectoryHashInfo] | None", "default": "None"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "return_type": "DirectoryHashInfo", "description": "Generates hash information for all files in a directory, optionally using ignore patterns and caching.", "signature": "compute_directory_hashes(directory_path: str, ignore_patterns: list[str] | None = None, cache: dict[str, DirectoryHashInfo] | None = None, config: dict[str, Any] | None = None) -> DirectoryHashInfo"}, {"name": "load_hash_cache", "line": 183, "parameters": [{"name": "cache_file", "type": "str"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "Loads and returns a hash cache from a specified cache file.", "signature": "load_hash_cache(cache_file: str) -> dict[str, dict[str, Any]]"}, {"name": "save_hash_cache", "line": 207, "parameters": [{"name": "cache", "type": "dict[str, dict[str, Any]], cache_file: str"}, {"name": "cache_file", "type": "str"}], "is_async": false, "return_type": "None", "description": "Saves the provided hash cache data to a specified cache file.", "signature": "save_hash_cache(cache: dict[str, dict[str, Any]], cache_file: str, cache_file: str) -> None"}, {"name": "find_changed_directories", "line": 235, "parameters": [{"name": "base_path", "type": "str"}, {"name": "cache", "type": "dict[str, DirectoryHashInfo]"}, {"name": "ignore_patterns", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "list[str]", "description": "Identifies and returns a list of directories with changed contents compared to the cached hashes.", "signature": "find_changed_directories(base_path: str, cache: dict[str, DirectoryHashInfo], ignore_patterns: list[str] | None = None) -> list[str]"}], "classes": [{"name": "DirectoryHashInfo", "line": 46, "inherits_from": [], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "path", "type": "str"}, {"name": "local_hash", "type": "str | None", "default": "None"}, {"name": "recursive_hash", "type": "str | None", "default": "None"}], "is_async": false, "description": "\n        Initialize a directory hash info object.\n\n        Args:\n            path: Path to the directory\n            local_hash: Hash of files in this directory only (non-recursive)\n            recursive_hash: Hash of this directory and all subdirectories\n        ", "signature": "__init__(self, path: str, local_hash: str | None = None, recursive_hash: str | None = None)"}, {"name": "to_dict", "line": 65, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Convert to a serializable dictionary.", "signature": "to_dict(self) -> dict[str, Any]"}], "properties": [], "description": "Represents hash information for a directory, including methods to manage and compare directory hashes."}], "imports": [{"module": "hashlib", "alias": null, "line": 36, "statement": "import hashlib"}, {"module": "json", "alias": null, "line": 37, "statement": "import json"}, {"module": "os", "alias": null, "line": 38, "statement": "import os"}, {"module": "datetime", "alias": null, "line": 39, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 40, "statement": "from typing import Any"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 42, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.utils", "alias": null, "line": 43, "statement": "from genfilemap.utils import should_ignore_file"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 36}, {"name": "json", "type": "import", "line": 37}, {"name": "os", "type": "import", "line": 38}, {"name": "from datetime import datetime", "type": "import", "line": 39}, {"name": "from typing import Any", "type": "import", "line": 40}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 42}, {"name": "from genfilemap.utils import should_ignore_file", "type": "import", "line": 43}, {"name": "DirectoryHashInfo", "type": "class", "line": 46}, {"name": "compute_file_hash", "type": "function", "line": 77}, {"name": "compute_directory_hashes", "type": "function", "line": 96}, {"name": "load_hash_cache", "type": "function", "line": 183}, {"name": "save_hash_cache", "type": "function", "line": 207}, {"name": "find_changed_directories", "type": "function", "line": 235}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 36, "line_end": 43}, {"name": "compute_file_hash Function", "description": "Function compute_file_hash implementation.", "line_start": 77, "line_end": 95}, {"name": "compute_directory_hashes Function", "description": "Function compute_directory_hashes implementation.", "line_start": 96, "line_end": 182}, {"name": "load_hash_cache Function", "description": "Function load_hash_cache implementation.", "line_start": 183, "line_end": 206}, {"name": "save_hash_cache Function", "description": "Function save_hash_cache implementation.", "line_start": 207, "line_end": 234}, {"name": "find_changed_directories Function", "description": "Function find_changed_directories implementation.", "line_start": 235, "line_end": 240}, {"name": "DirectoryHashInfo Class", "description": "Class DirectoryHashInfo definition and methods.", "line_start": 46, "line_end": 68}], "content_hash": "ee25154be5f892dc1d3713eb1dbfa86e"}'
- path: .archive/genfilemap/src/genfilemap/core/directory_hash_processing.py
  line_count: 261
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "directory_hash_processing.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "process_files_with_directory_hashing", "line": 44, "parameters": [{"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Processes files using directory hashing based on the provided configuration.", "signature": "process_files_with_directory_hashing(config: dict[str, Any]) -> bool"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 27, "statement": "import os"}, {"module": "shutil", "alias": null, "line": 28, "statement": "import shutil"}, {"module": "time", "alias": null, "line": 29, "statement": "import time"}, {"module": "typing", "alias": null, "line": 30, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 32, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 33, "statement": "from genfilemap.core.directory_hash import compute_directory_hashes"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 33, "statement": "from genfilemap.core.directory_hash import find_changed_directories"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 33, "statement": "from genfilemap.core.directory_hash import load_hash_cache"}, {"module": "genfilemap.core.directory_hash", "alias": null, "line": 33, "statement": "from genfilemap.core.directory_hash import save_hash_cache"}, {"module": "genfilemap.core.processing", "alias": null, "line": 39, "statement": "from genfilemap.core.processing import process_files_async"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 40, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 40, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 40, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.utils", "alias": null, "line": 41, "statement": "from genfilemap.utils import load_ignore_patterns"}, {"module": "genfilemap.utils", "alias": null, "line": 41, "statement": "from genfilemap.utils import should_ignore_file"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 27}, {"name": "shutil", "type": "import", "line": 28}, {"name": "time", "type": "import", "line": 29}, {"name": "from typing import Any", "type": "import", "line": 30}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 32}, {"name": "from genfilemap.core.directory_hash import compute_directory_hashes", "type": "import", "line": 33}, {"name": "from genfilemap.core.directory_hash import find_changed_directories", "type": "import", "line": 33}, {"name": "from genfilemap.core.directory_hash import load_hash_cache", "type": "import", "line": 33}, {"name": "from genfilemap.core.directory_hash import save_hash_cache", "type": "import", "line": 33}, {"name": "from genfilemap.core.processing import process_files_async", "type": "import", "line": 39}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 40}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 40}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 40}, {"name": "from genfilemap.utils import load_ignore_patterns", "type": "import", "line": 41}, {"name": "from genfilemap.utils import should_ignore_file", "type": "import", "line": 41}, {"name": "process_files_with_directory_hashing", "type": "function", "line": 44}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 27, "line_end": 41}, {"name": "process_files_with_directory_hashing Function", "description": "Function process_files_with_directory_hashing implementation.", "line_start": 44, "line_end": 49}], "content_hash": "5dc7ebf8cf69b1424d463e7f1c1716f6"}'
- path: .archive/genfilemap/src/genfilemap/core/file_operations.py
  line_count: 46
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "file_operations.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "count_lines", "line": 14, "parameters": [{"name": "file_path", "type": "str"}], "is_async": false, "return_type": "int", "description": "Counts the number of lines in the specified file.", "signature": "count_lines(file_path: str) -> int"}, {"name": "get_hash_file_path", "line": 33, "parameters": [{"name": "file_path", "type": "str | Path"}], "is_async": false, "return_type": "Path", "description": "Generates the hash file path corresponding to the given file path.", "signature": "get_hash_file_path(file_path: str | Path) -> Path"}], "classes": [], "imports": [{"module": "pathlib", "alias": null, "line": 9, "statement": "from pathlib import Path"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 11, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 11, "statement": "from genfilemap.logging_utils import error"}], "constants": []}, "key_elements": [{"name": "from pathlib import Path", "type": "import", "line": 9}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 11}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 11}, {"name": "count_lines", "type": "function", "line": 14}, {"name": "get_hash_file_path", "type": "function", "line": 33}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "count_lines Function", "description": "Function count_lines implementation.", "line_start": 14, "line_end": 32}, {"name": "get_hash_file_path Function", "description": "Function get_hash_file_path implementation.", "line_start": 33, "line_end": 38}], "content_hash": "21de63ad9ae8b384e487f818fd9c9ac1"}'
- path: .archive/genfilemap/src/genfilemap/core/validation.py
  line_count: 887
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 8 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_validation_prompt", "line": 18, "parameters": [{"name": "file_path", "type": "str, content: str, file_map_json: str"}, {"name": "content", "type": "str, file_map_json: str"}, {"name": "file_map_json", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a prompt string for validating a file map based on the given file path, content, and file map JSON.", "signature": "create_validation_prompt(file_path: str, content: str, file_map_json: str, content: str, file_map_json: str, file_map_json: str) -> str"}, {"name": "validate_file_map", "line": 123, "parameters": [{"name": "file_path", "type": "str"}, {"name": "content", "type": "str"}, {"name": "file_map_json", "type": "str"}, {"name": "api_client", "type": "unknown"}, {"name": "model", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Asynchronously validate the file map using the provided API client and model, returning the validation results.", "signature": "async validate_file_map(file_path: str, content: str, file_map_json: str, api_client, model: str, config: dict[str, Any] | None = None) -> dict[str, Any]"}, {"name": "should_abort_on_validation_failure", "line": 255, "parameters": [{"name": "validation_result", "type": "dict[str, Any]"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Determine whether the process should abort based on the validation result and optional configuration.", "signature": "should_abort_on_validation_failure(validation_result: dict[str, Any], config: dict[str, Any] | None = None) -> bool"}, {"name": "log_validation_issues", "line": 301, "parameters": [{"name": "validation_result", "type": "dict[str, Any], file_path: str"}, {"name": "file_path", "type": "str"}], "is_async": false, "return_type": "None", "description": "Log any validation issues found for the specified file path.", "signature": "log_validation_issues(validation_result: dict[str, Any], file_path: str, file_path: str) -> None"}, {"name": "create_comprehensive_validation_prompt", "line": 343, "parameters": [{"name": "file_path", "type": "str"}, {"name": "content", "type": "str"}, {"name": "file_map_json", "type": "str"}], "is_async": false, "return_type": "str", "description": "Create a detailed prompt string for comprehensive validation of the file map.", "signature": "create_comprehensive_validation_prompt(file_path: str, content: str, file_map_json: str) -> str"}, {"name": "correct_file_map", "line": 496, "parameters": [{"name": "file_path", "type": "str"}, {"name": "content", "type": "str"}, {"name": "file_map_json", "type": "str"}, {"name": "validation_result", "type": "dict[str, Any]"}, {"name": "api_client", "type": "unknown"}, {"name": "model", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Asynchronously correct the file map based on validation results using the API client and model, returning the corrected map.", "signature": "async correct_file_map(file_path: str, content: str, file_map_json: str, validation_result: dict[str, Any], api_client, model: str, config: dict[str, Any] | None = None) -> dict[str, Any]"}, {"name": "create_correction_prompt", "line": 614, "parameters": [{"name": "file_path", "type": "str"}, {"name": "content", "type": "str"}, {"name": "file_map_json", "type": "str"}, {"name": "validation_result", "type": "dict[str, Any]"}], "is_async": false, "return_type": "str", "description": "Generate a prompt string to guide the correction of the file map based on validation results.", "signature": "create_correction_prompt(file_path: str, content: str, file_map_json: str, validation_result: dict[str, Any]) -> str"}, {"name": "validate_file_map_comprehensive", "line": 750, "parameters": [{"name": "file_path", "type": "str"}, {"name": "content", "type": "str"}, {"name": "file_map_json", "type": "str"}, {"name": "api_client", "type": "unknown"}, {"name": "model", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Asynchronously perform a comprehensive validation of the file map using the API client and model.", "signature": "async validate_file_map_comprehensive(file_path: str, content: str, file_map_json: str, api_client, model: str, config: dict[str, Any] | None = None) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 14, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 15, "statement": "from genfilemap.logging_utils import debug"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 15, "statement": "from genfilemap.logging_utils import error"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 15, "statement": "from genfilemap.logging_utils import info"}, {"module": "genfilemap.logging_utils", "alias": null, "line": 15, "statement": "from genfilemap.logging_utils import warning"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 14}, {"name": "from genfilemap.logging_utils import debug", "type": "import", "line": 15}, {"name": "from genfilemap.logging_utils import error", "type": "import", "line": 15}, {"name": "from genfilemap.logging_utils import info", "type": "import", "line": 15}, {"name": "from genfilemap.logging_utils import warning", "type": "import", "line": 15}, {"name": "create_validation_prompt", "type": "function", "line": 18}, {"name": "validate_file_map", "type": "function", "line": 123}, {"name": "should_abort_on_validation_failure", "type": "function", "line": 255}, {"name": "log_validation_issues", "type": "function", "line": 301}, {"name": "create_comprehensive_validation_prompt", "type": "function", "line": 343}, {"name": "correct_file_map", "type": "function", "line": 496}, {"name": "create_correction_prompt", "type": "function", "line": 614}, {"name": "validate_file_map_comprehensive", "type": "function", "line": 750}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 15}, {"name": "create_validation_prompt Function", "description": "Function create_validation_prompt implementation.", "line_start": 18, "line_end": 122}, {"name": "validate_file_map Function", "description": "Function validate_file_map implementation.", "line_start": 123, "line_end": 254}, {"name": "should_abort_on_validation_failure Function", "description": "Function should_abort_on_validation_failure implementation.", "line_start": 255, "line_end": 300}, {"name": "log_validation_issues Function", "description": "Function log_validation_issues implementation.", "line_start": 301, "line_end": 342}, {"name": "create_comprehensive_validation_prompt Function", "description": "Function create_comprehensive_validation_prompt implementation.", "line_start": 343, "line_end": 495}, {"name": "correct_file_map Function", "description": "Function correct_file_map implementation.", "line_start": 496, "line_end": 613}, {"name": "create_correction_prompt Function", "description": "Function create_correction_prompt implementation.", "line_start": 614, "line_end": 749}, {"name": "validate_file_map_comprehensive Function", "description": "Function validate_file_map_comprehensive implementation.", "line_start": 750, "line_end": 755}], "content_hash": "38ba265bd3f8d8f8dd8fab120a3f54cb"}'
- path: .archive/genfilemap/src/genfilemap/prompting/__init__.py
  line_count: 19
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.prompting.prompts", "alias": null, "line": 9, "statement": "from genfilemap.prompting.prompts import get_code_system_message"}, {"module": "genfilemap.prompting.prompts", "alias": null, "line": 9, "statement": "from genfilemap.prompting.prompts import get_code_user_prompt"}, {"module": "genfilemap.prompting.prompts", "alias": null, "line": 9, "statement": "from genfilemap.prompting.prompts import get_documentation_system_message"}, {"module": "genfilemap.prompting.prompts", "alias": null, "line": 9, "statement": "from genfilemap.prompting.prompts import get_documentation_user_prompt"}], "constants": []}, "key_elements": [{"name": "from genfilemap.prompting.prompts import get_code_system_message", "type": "import", "line": 9}, {"name": "from genfilemap.prompting.prompts import get_code_user_prompt", "type": "import", "line": 9}, {"name": "from genfilemap.prompting.prompts import get_documentation_system_message", "type": "import", "line": 9}, {"name": "from genfilemap.prompting.prompts import get_documentation_user_prompt", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "a8824e32a1f94fd0b961c4608c70e612"}'
- path: .archive/genfilemap/src/genfilemap/prompting/prompts.py
  line_count: 603
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "prompts.py", "description": "Python module with 5 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "_get_config", "line": 129, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieve the configuration settings as a dictionary.", "signature": "_get_config() -> dict[str, Any]"}, {"name": "get_code_system_message", "line": 137, "parameters": [], "is_async": false, "return_type": "str", "description": "Generate the system message for code-related interactions.", "signature": "get_code_system_message() -> str"}, {"name": "get_documentation_system_message", "line": 224, "parameters": [], "is_async": false, "return_type": "str", "description": "Generate the system message for documentation-related interactions.", "signature": "get_documentation_system_message() -> str"}, {"name": "get_code_user_prompt", "line": 301, "parameters": [{"name": "file_path", "type": "str", "default": "None"}, {"name": "file_type", "type": "str", "default": "None"}, {"name": "current_date", "type": "str", "default": "None"}, {"name": "content", "type": "str", "default": "None"}, {"name": "structure_analysis", "type": "dict[str, Any]", "default": "None"}, {"name": "config", "type": "dict[str, Any]", "default": "None"}], "is_async": false, "return_type": "str", "description": "Create a user prompt for code generation or analysis based on file details and configuration.", "signature": "get_code_user_prompt(file_path: str = None, file_type: str = None, current_date: str = None, content: str = None, structure_analysis: dict[str, Any] = None, config: dict[str, Any] = None) -> str"}, {"name": "get_documentation_user_prompt", "line": 453, "parameters": [{"name": "file_path", "type": "str"}, {"name": "file_type", "type": "str"}, {"name": "current_date", "type": "str"}, {"name": "content", "type": "str"}, {"name": "structure_analysis", "type": "dict[str, Any]"}, {"name": "config", "type": "unknown", "default": "None"}], "is_async": false, "return_type": "str", "description": "Create a user prompt for documentation generation based on file details and configuration.", "signature": "get_documentation_user_prompt(file_path: str, file_type: str, current_date: str, content: str, structure_analysis: dict[str, Any], config = None) -> str"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 14, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 14, "statement": "from genfilemap.config import load_config"}], "constants": [{"name": "DEFAULT_CODE_SYSTEM_MESSAGE", "line": 17, "value": "# Role and Objective\nYou are a specialized AI assistant for code analysis that creates structured file maps in JSON format. Your primary objective is to analyze code files thoroughly and generate accurate, comprehensive file maps that enable efficient navigation and understanding.\n\n# Instructions\n\n## Core Analysis Requirements\n- Examine code files systematically to identify all key components, logical sections, and structural elements\n- Generate precise JSON file maps that accurately represent the file''s organization\n- Ensure all line numbers are accurate and verified through careful counting\n- Focus on creating actionable navigation aids for both humans and AI systems\n\n## Analysis Methodology\nYou MUST follow this systematic approach:\n\n1. **Initial File Scan**: Read through the entire file to understand its overall purpose and structure\n2. **Component Identification**: Identify all significant elements (classes, functions, imports, constants, interfaces)\n3. **Section Mapping**: Determine logical divisions and their precise line boundaries\n4. **Line Number Verification**: Count line numbers carefully from the top of the file (1-indexed)\n5. **Quality Validation**: Verify that all sections are non-overlapping and accurately positioned\n\n## JSON Schema Requirements\nGenerate a precisely structured JSON object following this EXACT schema:\n\n```json\n{\n  \"file_metadata\": {\n    \"title\": \"Descriptive title summarizing the file''s purpose\",\n    \"description\": \"Comprehensive description of functionality and role in the project\",\n    \"last_updated\": \"YYYY-MM-DD\",\n    \"type\": \"code\"\n  },\n  \"ai_instructions\": \"Specific guidance for AI systems analyzing this file\",\n  \"sections\": [\n    {\n      \"name\": \"Clear section identifier\",\n      \"description\": \"Concise explanation of section purpose\",\n      \"line_start\": 1,\n      \"line_end\": 10\n    }\n  ],\n  \"key_elements\": [\n    {\n      \"name\": \"Element identifier\",\n      \"description\": \"Brief explanation of element purpose\",\n      \"line\": 5\n    }\n  ],\n  \"code_elements\": {\n    \"functions\": [\n      {\n        \"name\": \"function_name\",\n        \"signature\": \"complete function signature\",\n        \"parameters\": [\"param1\", \"param2\"],\n        \"return_type\": \"return type if available\",\n        \"line\": 15,\n        \"description\": \"function purpose and behavior\"\n      }\n    ],\n    \"classes\": [\n      {\n        \"name\": \"ClassName\",\n        \"inheritance\": [\"BaseClass\"],\n        \"line\": 25,\n        \"description\": \"class purpose and role\"\n      }\n    ],\n    \"imports\": [\n      {\n        \"statement\": \"import statement exactly as written\",\n        \"line\": 1,\n        \"type\": \"import type (standard/third-party/local)\"\n      }\n    ],\n    \"constants\": [\n      {\n        \"name\": \"CONSTANT_NAME\",\n        \"value\": \"string representation of value\",\n        \"line\": 8,\n        \"description\": \"constant purpose\"\n      }\n    ]\n  }\n}\n```\n\n# Critical Requirements\n\n## Accuracy Standards\n- All line numbers MUST be precisely calculated and verified\n- Sections MUST NOT overlap in their line ranges\n- All code elements MUST exist in the actual file content\n- JSON output MUST be valid and well-formed\n\n## Content Precision\n- Use ONLY elements that actually exist in the provided code\n- Do NOT invent, modify, or omit any structural elements\n- Maintain exact parameter names, types, and signatures as written\n- Represent constant values as strings regardless of their native type\n\n## Formatting Standards\n- Use clear, descriptive names for all sections and elements\n- Keep descriptions concise but informative\n- Ensure proper JSON syntax with correct escaping\n- Follow consistent naming conventions throughout\n\n# Output Requirements\nReturn ONLY the JSON object with no additional text, explanations, or formatting markers. The response must be pure, valid JSON that can be parsed directly.", "type": "str"}]}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 14}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 14}, {"name": "DEFAULT_CODE_SYSTEM_MESSAGE", "type": "constant", "line": 17}, {"name": "_get_config", "type": "function", "line": 129}, {"name": "get_code_system_message", "type": "function", "line": 137}, {"name": "get_documentation_system_message", "type": "function", "line": 224}, {"name": "get_code_user_prompt", "type": "function", "line": 301}, {"name": "get_documentation_user_prompt", "type": "function", "line": 453}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "_get_config Function", "description": "Function _get_config implementation.", "line_start": 129, "line_end": 136}, {"name": "get_code_system_message Function", "description": "Function get_code_system_message implementation.", "line_start": 137, "line_end": 223}, {"name": "get_documentation_system_message Function", "description": "Function get_documentation_system_message implementation.", "line_start": 224, "line_end": 300}, {"name": "get_code_user_prompt Function", "description": "Function get_code_user_prompt implementation.", "line_start": 301, "line_end": 452}, {"name": "get_documentation_user_prompt Function", "description": "Function get_documentation_user_prompt implementation.", "line_start": 453, "line_end": 458}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 17, "line_end": 17}], "content_hash": "d132161b742c8d5a800eb2d624356211"}'
- path: .archive/genfilemap/src/genfilemap/utils/__init__.py
  line_count: 32
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.utils.api_utils", "alias": null, "line": 10, "statement": "from genfilemap.utils.api_utils import get_api_key"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import calculate_file_hash"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import create_default_fileignore"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import expand_ignore_patterns"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import extract_existing_file_map"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import get_comment_style"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import get_file_type"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import load_ignore_patterns"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 11, "statement": "from genfilemap.utils.file_utils import should_ignore_file"}, {"module": "genfilemap.utils.template_utils", "alias": null, "line": 21, "statement": "from genfilemap.utils.template_utils import load_template"}], "constants": []}, "key_elements": [{"name": "from genfilemap.utils.api_utils import get_api_key", "type": "import", "line": 10}, {"name": "from genfilemap.utils.file_utils import calculate_file_hash", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import create_default_fileignore", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import expand_ignore_patterns", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import extract_existing_file_map", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import get_comment_style", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import get_file_type", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import load_ignore_patterns", "type": "import", "line": 11}, {"name": "from genfilemap.utils.file_utils import should_ignore_file", "type": "import", "line": 11}, {"name": "from genfilemap.utils.template_utils import load_template", "type": "import", "line": 21}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 21}], "content_hash": "3db0bd966fe4205aa8590025181cf635"}'
- path: .archive/genfilemap/src/genfilemap/utils/template_utils.py
  line_count: 18
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "template_utils.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "load_template", "line": 14, "parameters": [{"name": "template_name", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "Loads and returns the content of a template by its name, or None if not found.", "signature": "load_template(template_name: str) -> str | None"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 9, "statement": "import os"}], "constants": [{"name": "TEMPLATES_DIR", "line": 12, "value": "os.path.expanduser(\"~/.file_map_templates\")", "type": ""}]}, "key_elements": [{"name": "os", "type": "import", "line": 9}, {"name": "TEMPLATES_DIR", "type": "constant", "line": 12}, {"name": "load_template", "type": "function", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "load_template Function", "description": "Function load_template implementation.", "line_start": 14, "line_end": 19}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 12, "line_end": 12}], "content_hash": "449ebe72dad3f367f5a7321ddb0c8131"}'
- path: .archive/genfilemap/src/genfilemap/utils/file_utils.py
  line_count: 456
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "file_utils.py", "description": "Python module with 11 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_comment_style", "line": 42, "parameters": [{"name": "file_path", "type": "unknown"}], "is_async": false, "description": "Determine the comment style used in a given file based on its path or extension.", "signature": "get_comment_style(file_path)"}, {"name": "is_quiet_mode", "line": 48, "parameters": [], "is_async": false, "description": "Check if the application is running in quiet mode, suppressing output.", "signature": "is_quiet_mode()"}, {"name": "debug_print", "line": 61, "parameters": [{"name": "msg", "type": "str):"}], "is_async": false, "description": "Print debug messages if debugging is enabled.", "signature": "debug_print(msg: str):)"}, {"name": "calculate_file_hash", "line": 67, "parameters": [{"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "Compute a hash value for the given file content.", "signature": "calculate_file_hash(content: str) -> str"}, {"name": "extract_existing_file_map", "line": 86, "parameters": [{"name": "content", "type": "unknown"}, {"name": "comment_style", "type": "unknown"}], "is_async": false, "description": "Extract existing file mapping information from content using the specified comment style.", "signature": "extract_existing_file_map(content, comment_style)"}, {"name": "get_file_type", "line": 295, "parameters": [{"name": "file_path", "type": "str"}], "is_async": false, "return_type": "str", "description": "Identify the file type based on the file path or extension.", "signature": "get_file_type(file_path: str) -> str"}, {"name": "should_ignore_file", "line": 326, "parameters": [{"name": "file_path", "type": "str"}, {"name": "ignore_patterns", "type": "list", "default": "None"}, {"name": "pathspec_obj", "type": "unknown", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Determine whether a file should be ignored based on ignore patterns or pathspec object.", "signature": "should_ignore_file(file_path: str, ignore_patterns: list = None, pathspec_obj = None) -> bool"}, {"name": "expand_ignore_patterns", "line": 343, "parameters": [{"name": "patterns", "type": "list[str]"}], "is_async": false, "return_type": "list[str]", "description": "Expand shorthand ignore patterns into full patterns for matching.", "signature": "expand_ignore_patterns(patterns: list[str]) -> list[str]"}, {"name": "load_ignore_patterns", "line": 365, "parameters": [{"name": "ignore_file", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Load ignore patterns from a specified ignore file.", "signature": "load_ignore_patterns(ignore_file: str) -> list[str]"}, {"name": "create_default_fileignore", "line": 377, "parameters": [{"name": "ignore_file_path", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Create a default ignore file with standard ignore patterns if it does not exist.", "signature": "create_default_fileignore(ignore_file_path: str) -> bool"}, {"name": "extract_all_file_maps", "line": 414, "parameters": [{"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "Extract all file mapping information from the given content.", "signature": "extract_all_file_maps(content: str) -> str"}], "classes": [], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "re", "alias": null, "line": 12, "statement": "import re"}, {"module": "sys", "alias": null, "line": 13, "statement": "import sys"}, {"module": "pathspec", "alias": null, "line": 16, "statement": "import pathspec"}, {"module": "pathlib", "alias": null, "line": 14, "statement": "from pathlib import Path"}, {"module": "genfilemap.logging_utils", "alias": "log_debug", "line": 18, "statement": "from genfilemap.logging_utils import debug as log_debug"}], "constants": [{"name": "COMMENT_STYLES", "line": 21, "value": "{}", "type": "dict"}, {"name": "DEFAULT_COMMENT_STYLE", "line": 39, "value": "(\"/*\", \"*/\", \"// \")", "type": ""}]}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "re", "type": "import", "line": 12}, {"name": "sys", "type": "import", "line": 13}, {"name": "pathspec", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 14}, {"name": "from genfilemap.logging_utils import debug as log_debug", "type": "import", "line": 18}, {"name": "COMMENT_STYLES", "type": "constant", "line": 21}, {"name": "DEFAULT_COMMENT_STYLE", "type": "constant", "line": 39}, {"name": "get_comment_style", "type": "function", "line": 42}, {"name": "is_quiet_mode", "type": "function", "line": 48}, {"name": "debug_print", "type": "function", "line": 61}, {"name": "calculate_file_hash", "type": "function", "line": 67}, {"name": "extract_existing_file_map", "type": "function", "line": 86}, {"name": "get_file_type", "type": "function", "line": 295}, {"name": "should_ignore_file", "type": "function", "line": 326}, {"name": "expand_ignore_patterns", "type": "function", "line": 343}, {"name": "load_ignore_patterns", "type": "function", "line": 365}, {"name": "create_default_fileignore", "type": "function", "line": 377}, {"name": "extract_all_file_maps", "type": "function", "line": 414}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "get_comment_style Function", "description": "Function get_comment_style implementation.", "line_start": 42, "line_end": 47}, {"name": "is_quiet_mode Function", "description": "Function is_quiet_mode implementation.", "line_start": 48, "line_end": 60}, {"name": "debug_print Function", "description": "Function debug_print implementation.", "line_start": 61, "line_end": 66}, {"name": "calculate_file_hash Function", "description": "Function calculate_file_hash implementation.", "line_start": 67, "line_end": 85}, {"name": "extract_existing_file_map Function", "description": "Function extract_existing_file_map implementation.", "line_start": 86, "line_end": 294}, {"name": "get_file_type Function", "description": "Function get_file_type implementation.", "line_start": 295, "line_end": 325}, {"name": "should_ignore_file Function", "description": "Function should_ignore_file implementation.", "line_start": 326, "line_end": 342}, {"name": "expand_ignore_patterns Function", "description": "Function expand_ignore_patterns implementation.", "line_start": 343, "line_end": 364}, {"name": "load_ignore_patterns Function", "description": "Function load_ignore_patterns implementation.", "line_start": 365, "line_end": 376}, {"name": "create_default_fileignore Function", "description": "Function create_default_fileignore implementation.", "line_start": 377, "line_end": 413}, {"name": "extract_all_file_maps Function", "description": "Function extract_all_file_maps implementation.", "line_start": 414, "line_end": 419}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 21, "line_end": 39}], "content_hash": "be4997df1f87bc5357bd36be67fa0345"}'
- path: .archive/genfilemap/src/genfilemap/utils/api_utils.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "api_utils.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_api_key", "line": 15, "parameters": [{"name": "vendor", "type": "str, config: dict[str, Any] = None"}, {"name": "config", "type": "dict[str, Any] = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Retrieve the API key for a given vendor from the provided configuration.", "signature": "get_api_key(vendor: str, config: dict[str, Any] = None, config: dict[str, Any] = None = None) -> str"}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 9, "statement": "import os"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "genfilemap.config", "alias": null, "line": 12, "statement": "from genfilemap.config import get_config_value"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 12}, {"name": "get_api_key", "type": "function", "line": 15}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "get_api_key Function", "description": "Function get_api_key implementation.", "line_start": 15, "line_end": 20}], "content_hash": "0c17060344c01fc160e79e4423f2457f"}'
- path: .archive/genfilemap/src/genfilemap/api/__init__.py
  line_count: 22
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_api_client", "line": 18, "parameters": [{"name": "vendor", "type": "str"}, {"name": "api_key", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "description": "Initializes and returns an API client for the specified vendor using the provided API key and optional configuration.", "signature": "create_api_client(vendor: str, api_key: str, config: dict[str, Any] | None = None)"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 9, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 9, "statement": "from typing import Optional"}, {"module": "genfilemap.api.base", "alias": null, "line": 11, "statement": "from genfilemap.api.base import APIClient"}, {"module": "genfilemap.api.base", "alias": null, "line": 11, "statement": "from genfilemap.api.base import create_api_client"}, {"module": "genfilemap.utils.api_utils", "alias": null, "line": 12, "statement": "from genfilemap.utils.api_utils import get_api_key"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from typing import Dict", "type": "import", "line": 9}, {"name": "from typing import Optional", "type": "import", "line": 9}, {"name": "from genfilemap.api.base import APIClient", "type": "import", "line": 11}, {"name": "from genfilemap.api.base import create_api_client", "type": "import", "line": 11}, {"name": "from genfilemap.utils.api_utils import get_api_key", "type": "import", "line": 12}, {"name": "create_api_client", "type": "function", "line": 18}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "create_api_client Function", "description": "Function create_api_client implementation.", "line_start": 18, "line_end": 23}], "content_hash": "0e9622bb7f8e148617196dcc56b4d2ba"}'
- path: .archive/genfilemap/src/genfilemap/api/base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "create_api_client", "line": 28, "parameters": [{"name": "vendor", "type": "str"}, {"name": "api_key", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "return_type": "APIClient", "description": "Initializes and returns an APIClient instance configured for the specified vendor using the provided API key and optional configuration.", "signature": "create_api_client(vendor: str, api_key: str, config: dict[str, Any] | None = None) -> APIClient"}], "classes": [{"name": "APIClient", "line": 12, "inherits_from": [], "methods": [{"name": "__init__", "line": 15, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str):"}], "is_async": false, "signature": "__init__(self, api_key: str):)"}, {"name": "generate_completion", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "system_message", "type": "str"}, {"name": "user_message", "type": "str"}, {"name": "model", "type": "str"}, {"name": "max_tokens", "type": "int", "default": "None"}], "is_async": true, "return_type": "str", "description": "Generate a completion - to be implemented by specific vendor clients", "signature": "async generate_completion(self, system_message: str, user_message: str, model: str, max_tokens: int = None) -> str"}], "properties": [], "description": "Represents a client for interacting with a vendor''s API, providing methods to send requests and handle responses."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "APIClient", "type": "class", "line": 12}, {"name": "create_api_client", "type": "function", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "create_api_client Function", "description": "Function create_api_client implementation.", "line_start": 28, "line_end": 33}, {"name": "APIClient Class", "description": "Class APIClient definition and methods.", "line_start": 12, "line_end": 23}], "content_hash": "8d4711bff0d34322f23de2bdf4ab3df1"}'
- path: .archive/genfilemap/src/genfilemap/api/openai.py
  line_count: 151
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "openai.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIClient", "line": 23, "inherits_from": ["APIClient):"], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key: str, config: dict[str, Any] | None = None)"}, {"name": "debug_print", "line": 32, "parameters": [{"name": "self", "type": "self"}, {"name": "msg", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Print debug message only if debug mode is enabled.\n\n        Args:\n            msg: The message to print\n        ", "signature": "debug_print(self, msg: str) -> None"}, {"name": "generate_completion", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "system_message", "type": "str"}, {"name": "user_message", "type": "str"}, {"name": "model", "type": "str"}, {"name": "max_tokens", "type": "int", "default": "None"}], "is_async": true, "return_type": "str", "description": "Generate a completion using OpenAI API", "signature": "async generate_completion(self, system_message: str, user_message: str, model: str, max_tokens: int = None) -> str"}], "properties": [], "description": "Client class for interacting with the OpenAI API, providing methods for sending requests and handling responses."}], "imports": [{"module": "json", "alias": null, "line": 9, "statement": "import json"}, {"module": "re", "alias": null, "line": 10, "statement": "import re"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "openai", "alias": null, "line": 13, "statement": "from openai import APIError"}, {"module": "openai", "alias": null, "line": 13, "statement": "from openai import APITimeoutError"}, {"module": "openai", "alias": null, "line": 13, "statement": "from openai import AsyncOpenAI"}, {"module": "openai", "alias": null, "line": 13, "statement": "from openai import RateLimitError"}, {"module": "genfilemap.api.base", "alias": null, "line": 15, "statement": "from genfilemap.api.base import APIClient"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.config", "alias": null, "line": 16, "statement": "from genfilemap.config import load_config"}, {"module": "genfilemap.logging_utils", "alias": "log_debug", "line": 17, "statement": "from genfilemap.logging_utils import debug as log_debug"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 9}, {"name": "re", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from openai import APIError", "type": "import", "line": 13}, {"name": "from openai import APITimeoutError", "type": "import", "line": 13}, {"name": "from openai import AsyncOpenAI", "type": "import", "line": 13}, {"name": "from openai import RateLimitError", "type": "import", "line": 13}, {"name": "from genfilemap.api.base import APIClient", "type": "import", "line": 15}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 16}, {"name": "from genfilemap.config import load_config", "type": "import", "line": 16}, {"name": "from genfilemap.logging_utils import debug as log_debug", "type": "import", "line": 17}, {"name": "OpenAIClient", "type": "class", "line": 23}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "OpenAIClient Class", "description": "Class OpenAIClient definition and methods.", "line_start": 23, "line_end": 47}], "content_hash": "d46d08ee084d4b37725aa0e0fad336ce"}'
- path: .archive/genfilemap/src/genfilemap/templates/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/genfilemap/src/genfilemap/models/__init__.py
  line_count: 13
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.models.schemas", "alias": null, "line": 9, "statement": "from genfilemap.models.schemas import load_schema"}, {"module": "genfilemap.models.schemas", "alias": null, "line": 9, "statement": "from genfilemap.models.schemas import validate_file_map_json"}, {"module": "genfilemap.models.schemas", "alias": null, "line": 9, "statement": "from genfilemap.models.schemas import validate_line_numbers"}], "constants": []}, "key_elements": [{"name": "from genfilemap.models.schemas import load_schema", "type": "import", "line": 9}, {"name": "from genfilemap.models.schemas import validate_file_map_json", "type": "import", "line": 9}, {"name": "from genfilemap.models.schemas import validate_line_numbers", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ed087331b0d426ad2a86f62a6bb4eafc"}'
- path: .archive/genfilemap/src/genfilemap/models/schemas.py
  line_count: 298
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "schemas.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "debug_print", "line": 19, "parameters": [{"name": "msg", "type": "str"}], "is_async": false, "return_type": "None", "description": "Prints debug messages for troubleshooting purposes.", "signature": "debug_print(msg: str) -> None"}, {"name": "validate_file_map_json", "line": 188, "parameters": [{"name": "file_map_obj", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Validates the structure and content of a file map JSON object.", "signature": "validate_file_map_json(file_map_obj: dict[str, Any]) -> None"}, {"name": "validate_line_numbers", "line": 197, "parameters": [{"name": "file_map_json", "type": "str, content: str"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if line numbers in the file map JSON match the content lines.", "signature": "validate_line_numbers(file_map_json: str, content: str, content: str) -> bool"}, {"name": "load_schema", "line": 284, "parameters": [{"name": "schema_path", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "dict", "description": "Loads and returns a JSON schema from the specified file path.", "signature": "load_schema(schema_path: str | None = None = None) -> dict"}], "classes": [], "imports": [{"module": "json", "alias": null, "line": 9, "statement": "import json"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "jsonschema", "alias": null, "line": 13, "statement": "import jsonschema"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "genfilemap.logging_utils", "alias": "log_debug", "line": 15, "statement": "from genfilemap.logging_utils import debug as log_debug"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 16, "statement": "from genfilemap.utils.file_utils import is_quiet_mode"}], "constants": [{"name": "FILE_MAP_SCHEMA", "line": 31, "value": "{''type'': ''object'', ''required'': [''file_metadata'', ''ai_instructions'', ''sections'']}", "type": "dict"}]}, "key_elements": [{"name": "json", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "jsonschema", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from genfilemap.logging_utils import debug as log_debug", "type": "import", "line": 15}, {"name": "from genfilemap.utils.file_utils import is_quiet_mode", "type": "import", "line": 16}, {"name": "debug_print", "type": "function", "line": 19}, {"name": "FILE_MAP_SCHEMA", "type": "constant", "line": 31}, {"name": "validate_file_map_json", "type": "function", "line": 188}, {"name": "validate_line_numbers", "type": "function", "line": 197}, {"name": "load_schema", "type": "function", "line": 284}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "debug_print Function", "description": "Function debug_print implementation.", "line_start": 19, "line_end": 30}, {"name": "validate_file_map_json Function", "description": "Function validate_file_map_json implementation.", "line_start": 188, "line_end": 196}, {"name": "validate_line_numbers Function", "description": "Function validate_line_numbers implementation.", "line_start": 197, "line_end": 283}, {"name": "load_schema Function", "description": "Function load_schema implementation.", "line_start": 284, "line_end": 289}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 31, "line_end": 31}], "content_hash": "87982849b8aec980a478669349c5e2c3"}'
- path: .archive/genfilemap/src/genfilemap/processors/__init__.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "genfilemap.processors.base", "alias": null, "line": 10, "statement": "from genfilemap.processors.base import FileProcessor"}, {"module": "genfilemap.processors.base", "alias": null, "line": 10, "statement": "from genfilemap.processors.base import get_processor_for_file"}, {"module": "genfilemap.processors.code_processor", "alias": null, "line": 11, "statement": "from genfilemap.processors.code_processor import CodeFileProcessor"}, {"module": "genfilemap.processors.doc_processor", "alias": null, "line": 12, "statement": "from genfilemap.processors.doc_processor import DocumentationFileProcessor"}], "constants": []}, "key_elements": [{"name": "from genfilemap.processors.base import FileProcessor", "type": "import", "line": 10}, {"name": "from genfilemap.processors.base import get_processor_for_file", "type": "import", "line": 10}, {"name": "from genfilemap.processors.code_processor import CodeFileProcessor", "type": "import", "line": 11}, {"name": "from genfilemap.processors.doc_processor import DocumentationFileProcessor", "type": "import", "line": 12}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 12}], "content_hash": "bb5f4062daef51a5359d74b175b50838"}'
- path: .archive/genfilemap/src/genfilemap/processors/code_processor.py
  line_count: 1568
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "code_processor.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CodeFileProcessor", "line": 21, "inherits_from": ["FileProcessor):"], "methods": [{"name": "analyze_structure", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Analyze the Python code structure using AST and build a detailed map\n        ", "signature": "async analyze_structure(self, content: str) -> dict[str, Any]"}, {"name": "_process_imports", "line": 260, "parameters": [{"name": "self", "type": "self"}, {"name": "tree", "type": "ast.Module"}, {"name": "content_lines", "type": "list[str]"}], "is_async": false, "return_type": "dict[str, list[dict[str, Any]]]", "description": "Extract import statements from the AST - only top-level imports", "signature": "_process_imports(self, tree: ast.Module, content_lines: list[str]) -> dict[str, list[dict[str, Any]]]"}, {"name": "_extract_function_info", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "node", "type": "unknown"}, {"name": "content_lines", "type": "list[str]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Extract detailed information about a function from its AST node", "signature": "_extract_function_info(self, node, content_lines: list[str]) -> dict[str, Any]"}, {"name": "_get_code_segment", "line": 447, "parameters": [{"name": "self", "type": "self"}, {"name": "lines", "type": "list[str], lineno: int, col_offset: int"}, {"name": "lineno", "type": "int, col_offset: int"}, {"name": "col_offset", "type": "int"}], "is_async": false, "return_type": "str", "description": "\n        Extract a code segment from the given line and column.\n        This is a simple helper for getting annotations and expressions.\n        ", "signature": "_get_code_segment(self, lines: list[str], lineno: int, col_offset: int, lineno: int, col_offset: int, col_offset: int) -> str"}, {"name": "_extract_js_code_elements", "line": 469, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Extract code elements from JavaScript/TypeScript using regex patterns.\n\n        This is more limited than AST parsing but provides reasonable results for common patterns.\n        ", "signature": "_extract_js_code_elements(self, content: str) -> dict[str, Any]"}, {"name": "generate_file_map", "line": 747, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple"}, {"name": "force", "type": "bool", "default": "False"}], "is_async": true, "return_type": "str | None", "description": "\n        Generate a file map for the given content.\n\n        Uses iterative refinement if enabled in config, otherwise falls back to deterministic approach.\n        ", "signature": "async generate_file_map(self, content: str, comment_style: tuple, force: bool = False) -> str | None"}, {"name": "_extract_python_code_elements", "line": 816, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Extract detailed code elements from Python code using AST.\n\n        This provides much more accurate and detailed information about functions, classes,\n        methods, parameters, return types (if annotated), etc.\n        ", "signature": "_extract_python_code_elements(self, content: str) -> dict[str, Any]"}, {"name": "_extract_class_info", "line": 1019, "parameters": [{"name": "self", "type": "self"}, {"name": "node", "type": "ast.ClassDef"}, {"name": "content_lines", "type": "list[str]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Extract detailed information about a class from its AST node", "signature": "_extract_class_info(self, node: ast.ClassDef, content_lines: list[str]) -> dict[str, Any]"}, {"name": "build_deterministic_file_map", "line": 1077, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "ast_data", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Build file map structure deterministically from AST data.\n        Only descriptions and section organization should involve AI.\n        ", "signature": "build_deterministic_file_map(self, content: str, ast_data: dict[str, Any]) -> dict[str, Any]"}, {"name": "generate_file_map_deterministic", "line": 1117, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple"}, {"name": "force", "type": "bool", "default": "False"}], "is_async": true, "return_type": "str", "description": "\n        Generate file map using deterministic AST extraction + AI descriptions.\n        This ensures 100% accuracy for structural elements.\n        ", "signature": "async generate_file_map_deterministic(self, content: str, comment_style: tuple, force: bool = False) -> str"}, {"name": "create_deterministic_sections", "line": 1230, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "ast_data", "type": "dict[str, Any]"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Create sections deterministically based on code structure.", "signature": "create_deterministic_sections(self, content: str, ast_data: dict[str, Any]) -> list[dict[str, Any]]"}, {"name": "create_simple_description_prompt", "line": 1326, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "base_file_map", "type": "dict[str, Any]"}], "is_async": false, "return_type": "str", "description": "Create a simple prompt for AI to add only descriptions.", "signature": "create_simple_description_prompt(self, content: str, base_file_map: dict[str, Any]) -> str"}, {"name": "parse_simple_descriptions", "line": 1357, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Parse AI response to extract simple descriptions.", "signature": "parse_simple_descriptions(self, response: str) -> dict[str, Any]"}, {"name": "merge_simple_descriptions", "line": 1371, "parameters": [{"name": "self", "type": "self"}, {"name": "base_file_map", "type": "dict[str, Any]"}, {"name": "ai_descriptions", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Merge AI-generated descriptions with deterministic structure.", "signature": "merge_simple_descriptions(self, base_file_map: dict[str, Any], ai_descriptions: dict[str, Any]) -> dict[str, Any]"}, {"name": "format_file_map", "line": 1391, "parameters": [{"name": "self", "type": "self"}, {"name": "file_map", "type": "dict[str, Any], comment_style: tuple"}, {"name": "comment_style", "type": "tuple"}], "is_async": false, "return_type": "str", "description": "Format the file map as a comment block.", "signature": "format_file_map(self, file_map: dict[str, Any], comment_style: tuple, comment_style: tuple) -> str"}, {"name": "calculate_content_hash", "line": 1402, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "Calculate hash for content.", "signature": "calculate_content_hash(self, content: str) -> str"}, {"name": "extract_stored_hash", "line": 1408, "parameters": [{"name": "self", "type": "self"}, {"name": "existing_map", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "Extract stored hash from existing file map.", "signature": "extract_stored_hash(self, existing_map: str) -> str | None"}, {"name": "is_valid_file_map", "line": 1438, "parameters": [{"name": "self", "type": "self"}, {"name": "existing_map", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if existing file map is valid.", "signature": "is_valid_file_map(self, existing_map: str) -> bool"}, {"name": "generate_file_map_with_refinement", "line": 1468, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple"}, {"name": "force", "type": "bool", "default": "False"}], "is_async": true, "return_type": "str", "description": "\n        Generate file map using iterative refinement: Generate \u2192 Validate \u2192 Correct \u2192 Validate.\n        This ensures consistently high-quality FILE_MAPs.\n        ", "signature": "async generate_file_map_with_refinement(self, content: str, comment_style: tuple, force: bool = False) -> str"}], "properties": [], "description": "Processes and analyzes code files, providing various methods for code manipulation and extraction."}], "imports": [{"module": "ast", "alias": null, "line": 9, "statement": "import ast"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "re", "alias": null, "line": 12, "statement": "import re"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "genfilemap.core.validation", "alias": null, "line": 16, "statement": "from genfilemap.core.validation import correct_file_map"}, {"module": "genfilemap.core.validation", "alias": null, "line": 16, "statement": "from genfilemap.core.validation import validate_file_map_comprehensive"}, {"module": "genfilemap.processors.base", "alias": null, "line": 17, "statement": "from genfilemap.processors.base import FileProcessor"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 18, "statement": "from genfilemap.utils.file_utils import extract_existing_file_map"}], "constants": []}, "key_elements": [{"name": "ast", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "re", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from genfilemap.core.validation import correct_file_map", "type": "import", "line": 16}, {"name": "from genfilemap.core.validation import validate_file_map_comprehensive", "type": "import", "line": 16}, {"name": "from genfilemap.processors.base import FileProcessor", "type": "import", "line": 17}, {"name": "from genfilemap.utils.file_utils import extract_existing_file_map", "type": "import", "line": 18}, {"name": "CodeFileProcessor", "type": "class", "line": 21}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "CodeFileProcessor Class", "description": "Class CodeFileProcessor definition and methods.", "line_start": 21, "line_end": 1471}], "content_hash": "9e820d253e3db171f23a817df12b1a5b"}'
- path: .archive/genfilemap/src/genfilemap/processors/base.py
  line_count: 230
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_processor_for_file", "line": 206, "parameters": [{"name": "file_path", "type": "str"}, {"name": "api_client", "type": "APIClient"}, {"name": "model", "type": "str"}, {"name": "config", "type": "unknown", "default": "None"}], "is_async": false, "return_type": "FileProcessor", "description": "Selects and returns an appropriate FileProcessor instance based on the file type and provided parameters.", "signature": "get_processor_for_file(file_path: str, api_client: APIClient, model: str, config = None) -> FileProcessor"}], "classes": [{"name": "FileProcessor", "line": 23, "inherits_from": [], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str"}, {"name": "api_client", "type": "APIClient"}, {"name": "model", "type": "str"}, {"name": "config", "type": "unknown", "default": "None"}], "is_async": false, "description": "\n        Initialize the file processor with file path and API client\n\n        Args:\n            file_path: Path to the file to process\n            api_client: API client for LLM requests\n            model: Model to use for LLM requests\n            config: Optional configuration object\n        ", "signature": "__init__(self, file_path: str, api_client: APIClient, model: str, config = None)"}, {"name": "debug_print", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "msg", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Print debug message only if debug mode is enabled.\n\n        Args:\n            msg: The message to print\n        ", "signature": "debug_print(self, msg: str) -> None"}, {"name": "analyze_structure", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Analyze the file structure to provide hints for the LLM.\n\n        This should be implemented by subclasses to provide file type-specific analysis.\n        ", "signature": "async analyze_structure(self, content: str) -> dict[str, Any]"}, {"name": "generate_file_map", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple[str, str, str]"}, {"name": "force", "type": "bool", "default": "False"}], "is_async": true, "return_type": "str | None", "description": "\n        Generate a file map for the given content.\n\n        Args:\n            content: The file content to generate a map for\n            comment_style: The comment style tuple (start_multi, end_multi, single_line)\n            force: Whether to force generation even if hash matches\n\n        Returns:\n            The generated file map or None if the existing map is valid and up-to-date\n        ", "signature": "async generate_file_map(self, content: str, comment_style: tuple[str, str, str], force: bool = False) -> str | None"}, {"name": "fallback_generation", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "system_message", "type": "str"}, {"name": "user_prompt", "type": "str"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple[str, str, str]"}, {"name": "complexity_ratio", "type": "float", "default": "0.5"}], "is_async": true, "return_type": "str | None", "description": "\n        Implements fallback complexity reduction when initial generation fails.\n\n        This method tries to generate a file map with reduced complexity when the\n        initial generation attempt fails. It reduces the complexity by the specified\n        ratio and tries again.\n\n        Args:\n            system_message: The original system message\n            user_prompt: The original user prompt\n            content: The file content to generate a map for\n            comment_style: The comment style tuple (start_multi, end_multi, single_line)\n            complexity_ratio: The ratio by which to reduce complexity (default: 0.5)\n\n        Returns:\n            The generated file map JSON string or None if generation still fails\n        ", "signature": "async fallback_generation(self, system_message: str, user_prompt: str, content: str, comment_style: tuple[str, str, str], complexity_ratio: float = 0.5) -> str | None"}, {"name": "validate_generated_map", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "file_map_json", "type": "str, content: str"}, {"name": "content", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Validate the generated file map for accuracy.\n\n        Args:\n            file_map_json: The JSON string of the generated file map\n            content: The original file content\n\n        Returns:\n            True if the file map is valid, False otherwise\n        ", "signature": "async validate_generated_map(self, file_map_json: str, content: str, content: str) -> bool"}], "properties": [], "description": "Abstract base class defining the interface and common behavior for processing different types of files."}], "imports": [{"module": "json", "alias": null, "line": 9, "statement": "import json"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "pathlib", "alias": null, "line": 11, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "genfilemap.api.base", "alias": null, "line": 14, "statement": "from genfilemap.api.base import APIClient"}, {"module": "genfilemap.config", "alias": null, "line": 15, "statement": "from genfilemap.config import get_config_value"}, {"module": "genfilemap.logging_utils", "alias": "log_debug", "line": 16, "statement": "from genfilemap.logging_utils import debug as log_debug"}, {"module": "genfilemap.models.schemas", "alias": null, "line": 17, "statement": "from genfilemap.models.schemas import validate_file_map_json"}, {"module": "genfilemap.models.schemas", "alias": null, "line": 17, "statement": "from genfilemap.models.schemas import validate_line_numbers"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 18, "statement": "from genfilemap.utils.file_utils import get_file_type"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "from pathlib import Path", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from genfilemap.api.base import APIClient", "type": "import", "line": 14}, {"name": "from genfilemap.config import get_config_value", "type": "import", "line": 15}, {"name": "from genfilemap.logging_utils import debug as log_debug", "type": "import", "line": 16}, {"name": "from genfilemap.models.schemas import validate_file_map_json", "type": "import", "line": 17}, {"name": "from genfilemap.models.schemas import validate_line_numbers", "type": "import", "line": 17}, {"name": "from genfilemap.utils.file_utils import get_file_type", "type": "import", "line": 18}, {"name": "FileProcessor", "type": "class", "line": 23}, {"name": "get_processor_for_file", "type": "function", "line": 206}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "get_processor_for_file Function", "description": "Function get_processor_for_file implementation.", "line_start": 206, "line_end": 211}, {"name": "FileProcessor Class", "description": "Class FileProcessor definition and methods.", "line_start": 23, "line_end": 183}], "content_hash": "46300df35a54effb39a902d268110aca"}'
- path: .archive/genfilemap/src/genfilemap/processors/doc_processor.py
  line_count: 374
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "doc_processor.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "DocumentationFileProcessor", "line": 25, "inherits_from": ["FileProcessor):"], "methods": [{"name": "analyze_structure", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Analyze the document structure to provide hints for the LLM.\n\n        Returns information about headings, sections, and overall structure.\n        ", "signature": "async analyze_structure(self, content: str) -> dict[str, Any]"}, {"name": "generate_file_map", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str, comment_style: tuple[str, str, str], force: bool = False"}, {"name": "comment_style", "type": "tuple[str, str, str], force: bool = False"}, {"name": "force", "type": "bool = False", "default": "False"}], "is_async": true, "return_type": "str | None", "description": "\n        Generate a file map specialized for documentation files.\n\n        Uses document structure analysis to guide the LLM in creating an accurate file map.\n\n        Args:\n            content: The file content to generate a map for\n            comment_style: The comment style tuple (start_multi, end_multi, single_line)\n            force: Whether to force generation even if hash matches\n        ", "signature": "async generate_file_map(self, content: str, comment_style: tuple[str, str, str], force: bool = False, comment_style: tuple[str, str, str], force: bool = False, force: bool = False = False) -> str | None"}, {"name": "fallback_generation", "line": 319, "parameters": [{"name": "self", "type": "self"}, {"name": "system_message", "type": "str"}, {"name": "user_prompt", "type": "str"}, {"name": "content", "type": "str"}, {"name": "comment_style", "type": "tuple[str, str, str]"}, {"name": "complexity_ratio", "type": "float", "default": "0.5"}], "is_async": true, "return_type": "str | None", "description": "\n        Override fallback generation to apply FILE_MAP line number offset for documentation files.\n\n        This ensures that even fallback generation produces correct line numbers.\n        ", "signature": "async fallback_generation(self, system_message: str, user_prompt: str, content: str, comment_style: tuple[str, str, str], complexity_ratio: float = 0.5) -> str | None"}], "properties": [], "description": "Processes documentation files to extract, modify, or generate content."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "re", "alias": null, "line": 12, "statement": "import re"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "pathlib", "alias": null, "line": 14, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "genfilemap.processors.base", "alias": null, "line": 17, "statement": "from genfilemap.processors.base import FileProcessor"}, {"module": "genfilemap.prompting.prompts", "alias": null, "line": 18, "statement": "from genfilemap.prompting.prompts import get_documentation_system_message"}, {"module": "genfilemap.prompting.prompts", "alias": null, "line": 18, "statement": "from genfilemap.prompting.prompts import get_documentation_user_prompt"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 22, "statement": "from genfilemap.utils.file_utils import calculate_file_hash"}, {"module": "genfilemap.utils.file_utils", "alias": null, "line": 22, "statement": "from genfilemap.utils.file_utils import extract_existing_file_map"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "re", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from pathlib import Path", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from genfilemap.processors.base import FileProcessor", "type": "import", "line": 17}, {"name": "from genfilemap.prompting.prompts import get_documentation_system_message", "type": "import", "line": 18}, {"name": "from genfilemap.prompting.prompts import get_documentation_user_prompt", "type": "import", "line": 18}, {"name": "from genfilemap.utils.file_utils import calculate_file_hash", "type": "import", "line": 22}, {"name": "from genfilemap.utils.file_utils import extract_existing_file_map", "type": "import", "line": 22}, {"name": "DocumentationFileProcessor", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 22}, {"name": "DocumentationFileProcessor Class", "description": "Class DocumentationFileProcessor definition and methods.", "line_start": 25, "line_end": 322}], "content_hash": "768829a8c80e88db7cc38c72e7448493"}'
- path: .archive/accf/orchestrator/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/accf/orchestrator/task_market.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "task_market.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TaskMarket", "line": 23, "inherits_from": [], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "publish_task", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "dict[str, Any]):"}], "is_async": true, "signature": "async publish_task(self, task: dict[str, Any]):)"}, {"name": "claim_task", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "signature": "async claim_task(self, agent_id: str) -> dict[str, Any]"}], "properties": [], "description": "Represents a marketplace for managing and trading tasks."}], "imports": [{"module": "asyncio", "alias": null, "line": 19, "statement": "import asyncio"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "TaskMarket", "type": "class", "line": 23}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 20}, {"name": "TaskMarket Class", "description": "Class TaskMarket definition and methods.", "line_start": 23, "line_end": 36}], "content_hash": "19de11bdee626d9a8f05d0469c05ce9b"}'
- path: .archive/accf/orchestrator/subscription_engine.py
  line_count: 32
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "subscription_engine.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "SubscriptionEngine", "line": 22, "inherits_from": [], "methods": [{"name": "__init__", "line": 23, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "subscribe", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "topic", "type": "str"}, {"name": "callback", "type": "Callable):"}], "is_async": false, "signature": "subscribe(self, topic: str, callback: Callable):)"}, {"name": "notify", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "topic", "type": "str"}, {"name": "data", "type": "unknown"}], "is_async": false, "signature": "notify(self, topic: str, data)"}], "properties": [], "description": "Manages subscription processes including creation, cancellation, and renewal of subscriptions."}], "imports": [{"module": "collections.abc", "alias": null, "line": 19, "statement": "from collections.abc import Callable"}], "constants": []}, "key_elements": [{"name": "from collections.abc import Callable", "type": "import", "line": 19}, {"name": "SubscriptionEngine", "type": "class", "line": 22}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 19}, {"name": "SubscriptionEngine Class", "description": "Class SubscriptionEngine definition and methods.", "line_start": 22, "line_end": 34}], "content_hash": "4fd6d9fc62e6812ccc97c30cbe1d0934"}'
- path: .archive/accf/orchestrator/orchestrator.py
  line_count: 90
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "orchestrator.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "EventRouter", "line": 24, "inherits_from": [], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "subscribe", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str"}, {"name": "callback", "type": "Callable):"}], "is_async": false, "signature": "subscribe(self, event_type: str, callback: Callable):)"}, {"name": "route_event", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str"}, {"name": "event", "type": "dict[str, Any]):"}], "is_async": true, "signature": "async route_event(self, event_type: str, event: dict[str, Any]):)"}], "properties": [], "description": "Manages event routing and dispatching between components."}, {"name": "IntentBus", "line": 39, "inherits_from": [], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "publish", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "intent_type", "type": "str"}, {"name": "payload", "type": "dict[str, Any]):"}], "is_async": true, "signature": "async publish(self, intent_type: str, payload: dict[str, Any]):)"}, {"name": "subscribe", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "intent_type", "type": "str"}, {"name": "callback", "type": "Callable):"}], "is_async": false, "signature": "subscribe(self, intent_type: str, callback: Callable):)"}], "properties": [], "description": "Handles the communication and delivery of intents across the system."}, {"name": "Orchestrator", "line": 54, "inherits_from": [], "methods": [{"name": "__init__", "line": 55, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "register_agent", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "agent_obj", "type": "Any):"}], "is_async": false, "signature": "register_agent(self, agent_id: str, agent_obj: Any):)"}, {"name": "add_task", "line": 66, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "dict):"}], "is_async": false, "signature": "add_task(self, task: dict):)"}, {"name": "route_task", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "dict"}, {"name": "agent_id", "type": "str):"}], "is_async": false, "signature": "route_task(self, task: dict, agent_id: str):)"}, {"name": "manage_lifecycle", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Manage the lifecycle of agents and tasks.", "signature": "manage_lifecycle(self)"}], "properties": [], "description": "Coordinates the interaction and workflow between different system components."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "collections.abc", "alias": null, "line": 20, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 21, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "from collections.abc import Callable", "type": "import", "line": 20}, {"name": "from typing import Any", "type": "import", "line": 21}, {"name": "EventRouter", "type": "class", "line": 24}, {"name": "IntentBus", "type": "class", "line": 39}, {"name": "Orchestrator", "type": "class", "line": 54}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 21}, {"name": "EventRouter Class", "description": "Class EventRouter definition and methods.", "line_start": 24, "line_end": 36}, {"name": "IntentBus Class", "description": "Class IntentBus definition and methods.", "line_start": 39, "line_end": 51}, {"name": "Orchestrator Class", "description": "Class Orchestrator definition and methods.", "line_start": 54, "line_end": 92}], "content_hash": "beb1d49c2a48a615cab48af8bfa2d931"}'
- path: .archive/accf/agent_base/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/accf/agent_base/agent_base.py
  line_count: 153
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "agent_base.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "AgentBase", "line": 28, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "description": "Initialize the agent with a name and optional config.", "signature": "__init__(self, name: str, config: dict = None)"}, {"name": "handle_message", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict"}], "is_async": false, "return_type": "dict", "description": "Process an incoming message and return a response.", "signature": "handle_message(self, message: dict) -> dict"}, {"name": "update_state", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}, {"name": "value", "type": "unknown"}], "is_async": false, "description": "Update the agent''s internal state.", "signature": "update_state(self, key: str, value)"}, {"name": "get_state", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str):"}], "is_async": false, "description": "Retrieve a value from the agent''s state.", "signature": "get_state(self, key: str):)"}, {"name": "log_event", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "str):"}], "is_async": false, "description": "Log an event or action.", "signature": "log_event(self, event: str):)"}, {"name": "run", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Persistent, self-generating, autonomous main loop for the agent.", "signature": "run(self)"}, {"name": "load_rules_and_protocols", "line": 97, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Load all applicable rules and protocols for autonomous operation (enforce always_applied_workspace_rules, autonomous.md, etc).", "signature": "load_rules_and_protocols(self)"}, {"name": "detect_new_task", "line": 102, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Detect new work (tasks, files, sessions, logs, optimization opportunities). Override in subclass.", "signature": "detect_new_task(self)"}, {"name": "generate_proactive_task", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Proactively generate new tasks if idle (system goals, monitoring, self-improvement, maintenance). Override in subclass.", "signature": "generate_proactive_task(self)"}, {"name": "execute_task", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "unknown"}], "is_async": false, "description": "Execute a detected or generated task. Override in subclass.", "signature": "execute_task(self, task)"}, {"name": "self_improvement", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Continuously review past actions, optimize logic, update guardrails, and persist new insights. Override in subclass.", "signature": "self_improvement(self)"}, {"name": "maintenance", "line": 118, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Perform maintenance actions (archiving, cleaning, validating data). Override in subclass.", "signature": "maintenance(self)"}, {"name": "is_hard_blocker", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "exception", "type": "unknown"}], "is_async": false, "description": "Determine if an exception is a hard blocker requiring user input (override as needed).", "signature": "is_hard_blocker(self, exception)"}, {"name": "request_user_input", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "exception", "type": "unknown"}], "is_async": false, "description": "Request user input for a hard blocker (placeholder). Only called if truly blocked.", "signature": "request_user_input(self, exception)"}, {"name": "should_stop", "line": 130, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Determine if the agent should stop (override for external stop signals). Default: never stop unless explicitly told.", "signature": "should_stop(self)"}], "properties": [], "description": "Base class providing core functionalities and interface for agent implementations."}, {"name": "LLMBaseAgent", "line": 135, "inherits_from": ["AgentBase", "ABC):"], "methods": [{"name": "__init__", "line": 141, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, name: str, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "answer", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Answer a prompt using the LLM/Assistants API. Must be implemented by subclasses.", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "Derived agent class integrating large language model capabilities."}], "imports": [{"module": "logging", "alias": null, "line": 20, "statement": "import logging"}, {"module": "os", "alias": null, "line": 21, "statement": "import os"}, {"module": "time", "alias": null, "line": 22, "statement": "import time"}, {"module": "openai", "alias": null, "line": 25, "statement": "import openai"}, {"module": "abc", "alias": null, "line": 23, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 23, "statement": "from abc import abstractmethod"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 20}, {"name": "os", "type": "import", "line": 21}, {"name": "time", "type": "import", "line": 22}, {"name": "openai", "type": "import", "line": 25}, {"name": "from abc import ABC", "type": "import", "line": 23}, {"name": "from abc import abstractmethod", "type": "import", "line": 23}, {"name": "AgentBase", "type": "class", "line": 28}, {"name": "LLMBaseAgent", "type": "class", "line": 135}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 18}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 20, "line_end": 25}, {"name": "AgentBase Class", "description": "Class AgentBase definition and methods.", "line_start": 28, "line_end": 133}, {"name": "LLMBaseAgent Class", "description": "Class LLMBaseAgent definition and methods.", "line_start": 135, "line_end": 156}], "content_hash": "065e5c66eb2f039d35e9344735efdb3f"}'
- path: .archive/accf/accf_agents/__init__.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "core.orchestrator", "alias": null, "line": 16, "statement": "from core.orchestrator import AgentOrchestrator"}, {"module": "core.settings", "alias": null, "line": 17, "statement": "from core.settings import Settings"}], "constants": []}, "key_elements": [{"name": "from core.orchestrator import AgentOrchestrator", "type": "import", "line": 16}, {"name": "from core.settings import Settings", "type": "import", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 16, "line_end": 17}], "content_hash": "450b7d30d3e9ffdced923c17513c4472"}'
- path: .archive/accf/tests/test_capabilities.py
  line_count: 75
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_capabilities.py", "description": "Python module with 11 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_memory_agent_init", "line": 23, "parameters": [], "is_async": false, "signature": "test_memory_agent_init()", "description": "Tests the initialization of the Memory Agent."}, {"name": "test_research_agent_init", "line": 28, "parameters": [], "is_async": false, "signature": "test_research_agent_init()", "description": "Tests the initialization of the Research Agent."}, {"name": "test_execution_agent_init", "line": 33, "parameters": [], "is_async": false, "signature": "test_execution_agent_init()", "description": "Tests the initialization of the Execution Agent."}, {"name": "test_collaboration_agent_init", "line": 40, "parameters": [], "is_async": false, "signature": "test_collaboration_agent_init()", "description": "Tests the initialization of the Collaboration Agent."}, {"name": "test_self_reflection_agent_init", "line": 45, "parameters": [], "is_async": false, "signature": "test_self_reflection_agent_init()", "description": "Tests the initialization of the Self-Reflection Agent."}, {"name": "test_knowledge_agent_init", "line": 50, "parameters": [], "is_async": false, "signature": "test_knowledge_agent_init()", "description": "Tests the initialization of the Knowledge Agent."}, {"name": "test_security_agent_init", "line": 55, "parameters": [], "is_async": false, "signature": "test_security_agent_init()", "description": "Tests the initialization of the Security Agent."}, {"name": "test_feedback_agent_init", "line": 60, "parameters": [], "is_async": false, "signature": "test_feedback_agent_init()", "description": "Tests the initialization of the Feedback Agent."}, {"name": "test_documentation_agent_init", "line": 65, "parameters": [], "is_async": false, "signature": "test_documentation_agent_init()", "description": "Tests the initialization of the Documentation Agent."}, {"name": "test_critique_agent_init", "line": 70, "parameters": [], "is_async": false, "signature": "test_critique_agent_init()", "description": "Tests the initialization of the Critique Agent."}, {"name": "test_testing_agent_init", "line": 75, "parameters": [], "is_async": false, "signature": "test_testing_agent_init()", "description": "Tests the initialization of the Testing Agent."}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 3, "statement": "import os"}, {"module": "sys", "alias": null, "line": 4, "statement": "import sys"}, {"module": "capabilities.collaboration_agent", "alias": null, "line": 10, "statement": "from capabilities.collaboration_agent import CollaborationAgent"}, {"module": "capabilities.critique_agent", "alias": null, "line": 11, "statement": "from capabilities.critique_agent import CritiqueAgent"}, {"module": "capabilities.documentation_agent", "alias": null, "line": 12, "statement": "from capabilities.documentation_agent import DocumentationAgent"}, {"module": "capabilities.execution_agent", "alias": null, "line": 13, "statement": "from capabilities.execution_agent import ExecutionAgent"}, {"module": "capabilities.feedback_agent", "alias": null, "line": 14, "statement": "from capabilities.feedback_agent import FeedbackAgent"}, {"module": "capabilities.knowledge_agent", "alias": null, "line": 15, "statement": "from capabilities.knowledge_agent import KnowledgeAgent"}, {"module": "capabilities.memory_agent", "alias": null, "line": 16, "statement": "from capabilities.memory_agent import MemoryAgent"}, {"module": "capabilities.research_agent", "alias": null, "line": 17, "statement": "from capabilities.research_agent import ResearchAgent"}, {"module": "capabilities.security_agent", "alias": null, "line": 18, "statement": "from capabilities.security_agent import SecurityAgent"}, {"module": "capabilities.self_reflection_agent", "alias": null, "line": 19, "statement": "from capabilities.self_reflection_agent import SelfReflectionAgent"}, {"module": "capabilities.testing_agent", "alias": null, "line": 20, "statement": "from capabilities.testing_agent import TestingAgent"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 3}, {"name": "sys", "type": "import", "line": 4}, {"name": "from capabilities.collaboration_agent import CollaborationAgent", "type": "import", "line": 10}, {"name": "from capabilities.critique_agent import CritiqueAgent", "type": "import", "line": 11}, {"name": "from capabilities.documentation_agent import DocumentationAgent", "type": "import", "line": 12}, {"name": "from capabilities.execution_agent import ExecutionAgent", "type": "import", "line": 13}, {"name": "from capabilities.feedback_agent import FeedbackAgent", "type": "import", "line": 14}, {"name": "from capabilities.knowledge_agent import KnowledgeAgent", "type": "import", "line": 15}, {"name": "from capabilities.memory_agent import MemoryAgent", "type": "import", "line": 16}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 17}, {"name": "from capabilities.security_agent import SecurityAgent", "type": "import", "line": 18}, {"name": "from capabilities.self_reflection_agent import SelfReflectionAgent", "type": "import", "line": 19}, {"name": "from capabilities.testing_agent import TestingAgent", "type": "import", "line": 20}, {"name": "test_memory_agent_init", "type": "function", "line": 23}, {"name": "test_research_agent_init", "type": "function", "line": 28}, {"name": "test_execution_agent_init", "type": "function", "line": 33}, {"name": "test_collaboration_agent_init", "type": "function", "line": 40}, {"name": "test_self_reflection_agent_init", "type": "function", "line": 45}, {"name": "test_knowledge_agent_init", "type": "function", "line": 50}, {"name": "test_security_agent_init", "type": "function", "line": 55}, {"name": "test_feedback_agent_init", "type": "function", "line": 60}, {"name": "test_documentation_agent_init", "type": "function", "line": 65}, {"name": "test_critique_agent_init", "type": "function", "line": 70}, {"name": "test_testing_agent_init", "type": "function", "line": 75}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 20}, {"name": "test_memory_agent_init Function", "description": "Function test_memory_agent_init implementation.", "line_start": 23, "line_end": 27}, {"name": "test_research_agent_init Function", "description": "Function test_research_agent_init implementation.", "line_start": 28, "line_end": 32}, {"name": "test_execution_agent_init Function", "description": "Function test_execution_agent_init implementation.", "line_start": 33, "line_end": 39}, {"name": "test_collaboration_agent_init Function", "description": "Function test_collaboration_agent_init implementation.", "line_start": 40, "line_end": 44}, {"name": "test_self_reflection_agent_init Function", "description": "Function test_self_reflection_agent_init implementation.", "line_start": 45, "line_end": 49}, {"name": "test_knowledge_agent_init Function", "description": "Function test_knowledge_agent_init implementation.", "line_start": 50, "line_end": 54}, {"name": "test_security_agent_init Function", "description": "Function test_security_agent_init implementation.", "line_start": 55, "line_end": 59}, {"name": "test_feedback_agent_init Function", "description": "Function test_feedback_agent_init implementation.", "line_start": 60, "line_end": 64}, {"name": "test_documentation_agent_init Function", "description": "Function test_documentation_agent_init implementation.", "line_start": 65, "line_end": 69}, {"name": "test_critique_agent_init Function", "description": "Function test_critique_agent_init implementation.", "line_start": 70, "line_end": 74}, {"name": "test_testing_agent_init Function", "description": "Function test_testing_agent_init implementation.", "line_start": 75, "line_end": 80}], "content_hash": "6ed06d968d5aa76ee0f5a81f4bd2b9c3"}'
- path: .archive/accf/tests/__init__.py
  line_count: 3
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}], "content_hash": "e986c77c33476d6cd044a89dc68d477a"}'
- path: .archive/accf/tests/test_orchestrator.py
  line_count: 18
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_orchestrator.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_orchestrator_init", "line": 8, "parameters": [], "is_async": false, "signature": "test_orchestrator_init()", "description": "Tests the initialization process of the orchestrator component."}, {"name": "test_task_market_init", "line": 13, "parameters": [], "is_async": false, "signature": "test_task_market_init()", "description": "Tests the initialization process of the task market component."}, {"name": "test_subscription_engine_init", "line": 18, "parameters": [], "is_async": false, "signature": "test_subscription_engine_init()", "description": "Tests the initialization process of the subscription engine component."}], "classes": [], "imports": [{"module": "orchestrator.orchestrator", "alias": null, "line": 3, "statement": "from orchestrator.orchestrator import Orchestrator"}, {"module": "orchestrator.subscription_engine", "alias": null, "line": 4, "statement": "from orchestrator.subscription_engine import SubscriptionEngine"}, {"module": "orchestrator.task_market", "alias": null, "line": 5, "statement": "from orchestrator.task_market import TaskMarket"}], "constants": []}, "key_elements": [{"name": "from orchestrator.orchestrator import Orchestrator", "type": "import", "line": 3}, {"name": "from orchestrator.subscription_engine import SubscriptionEngine", "type": "import", "line": 4}, {"name": "from orchestrator.task_market import TaskMarket", "type": "import", "line": 5}, {"name": "test_orchestrator_init", "type": "function", "line": 8}, {"name": "test_task_market_init", "type": "function", "line": 13}, {"name": "test_subscription_engine_init", "type": "function", "line": 18}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 5}, {"name": "test_orchestrator_init Function", "description": "Function test_orchestrator_init implementation.", "line_start": 8, "line_end": 12}, {"name": "test_task_market_init Function", "description": "Function test_task_market_init implementation.", "line_start": 13, "line_end": 17}, {"name": "test_subscription_engine_init Function", "description": "Function test_subscription_engine_init implementation.", "line_start": 18, "line_end": 23}], "content_hash": "c35239490b524aafccc583659b552236"}'
- path: .archive/accf/tests/test_consult_agent_model_validation.py
  line_count: 171
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_consult_agent_model_validation.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestConsultAgentModelValidation", "line": 16, "inherits_from": [], "methods": [{"name": "consult_agent", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create a ConsultAgent instance for testing.", "signature": "consult_agent(self)"}, {"name": "test_approved_models_accepted", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that all approved models are accepted.", "signature": "async test_approved_models_accepted(self, consult_agent)"}, {"name": "test_unauthorized_models_rejected", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that unauthorized models are rejected with clear error.", "signature": "async test_unauthorized_models_rejected(self, consult_agent)"}, {"name": "test_default_model_when_none_provided", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that default model is used when no model is provided.", "signature": "async test_default_model_when_none_provided(self, consult_agent)"}, {"name": "test_model_parameter_in_response", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that the selected model is included in the response.", "signature": "async test_model_parameter_in_response(self, consult_agent)"}, {"name": "test_case_sensitive_model_names", "line": 112, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that model names are case-sensitive.", "signature": "async test_case_sensitive_model_names(self, consult_agent)"}, {"name": "test_empty_string_model_rejected", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that empty string model is rejected.", "signature": "async test_empty_string_model_rejected(self, consult_agent)"}, {"name": "test_whitespace_only_model_rejected", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test that whitespace-only model is rejected.", "signature": "async test_whitespace_only_model_rejected(self, consult_agent)"}], "properties": [], "description": "Contains test methods to validate the ConsultAgent model''s behavior and data integrity."}], "imports": [{"module": "pytest", "alias": null, "line": 10, "statement": "import pytest"}, {"module": "accf_agents", "alias": null, "line": 11, "statement": "from accf_agents import Settings"}, {"module": "accf_agents.agents.base", "alias": null, "line": 12, "statement": "from accf_agents.agents.base import Task"}, {"module": "accf_agents.agents.consult_agent", "alias": null, "line": 13, "statement": "from accf_agents.agents.consult_agent import ConsultAgent"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 10}, {"name": "from accf_agents import Settings", "type": "import", "line": 11}, {"name": "from accf_agents.agents.base import Task", "type": "import", "line": 12}, {"name": "from accf_agents.agents.consult_agent import ConsultAgent", "type": "import", "line": 13}, {"name": "TestConsultAgentModelValidation", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "TestConsultAgentModelValidation Class", "description": "Class TestConsultAgentModelValidation definition and methods.", "line_start": 16, "line_end": 158}], "content_hash": "b382ac51cdf3abb66b590fee9e2b27f0"}'
- path: .archive/accf/tests/test_consult_agent_design.py
  line_count: 133
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_consult_agent_design.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestConsultAgentDesign", "line": 16, "inherits_from": [], "methods": [{"name": "consult_agent", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create a ConsultAgent instance for testing.", "signature": "consult_agent(self)"}, {"name": "test_consult_agent_can_handle_design", "line": 25, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": false, "description": "Test that ConsultAgent can handle ''design'' task type.", "signature": "test_consult_agent_can_handle_design(self, consult_agent)"}, {"name": "test_design_artifact_guidance_exists", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": false, "description": "Test that design artifact guidance is properly defined.", "signature": "test_design_artifact_guidance_exists(self, consult_agent)"}, {"name": "test_design_task_execution", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test executing a design task.", "signature": "async test_design_task_execution(self, consult_agent)"}, {"name": "test_build_enhanced_prompt_with_design", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": false, "description": "Test building enhanced prompt with design artifact type.", "signature": "test_build_enhanced_prompt_with_design(self, consult_agent)"}, {"name": "test_all_artifact_types_available", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": false, "description": "Test that all artifact types are available.", "signature": "test_all_artifact_types_available(self, consult_agent)"}, {"name": "test_invalid_artifact_type_handling", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": false, "description": "Test handling of invalid artifact type.", "signature": "test_invalid_artifact_type_handling(self, consult_agent)"}, {"name": "test_design_task_with_file_paths", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "consult_agent", "type": "unknown"}], "is_async": true, "description": "Test design task with file paths.", "signature": "async test_design_task_with_file_paths(self, consult_agent)"}], "properties": [], "description": "Contains test methods to verify the design and functionality of the Consult Agent."}], "imports": [{"module": "pytest", "alias": null, "line": 10, "statement": "import pytest"}, {"module": "accf_agents", "alias": null, "line": 11, "statement": "from accf_agents import Settings"}, {"module": "accf_agents.agents.base", "alias": null, "line": 12, "statement": "from accf_agents.agents.base import Task"}, {"module": "accf_agents.agents.consult_agent", "alias": null, "line": 13, "statement": "from accf_agents.agents.consult_agent import ConsultAgent"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 10}, {"name": "from accf_agents import Settings", "type": "import", "line": 11}, {"name": "from accf_agents.agents.base import Task", "type": "import", "line": 12}, {"name": "from accf_agents.agents.consult_agent import ConsultAgent", "type": "import", "line": 13}, {"name": "TestConsultAgentDesign", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "TestConsultAgentDesign Class", "description": "Class TestConsultAgentDesign definition and methods.", "line_start": 16, "line_end": 113}], "content_hash": "c7ad6d56f231433bc8c43b8b4edfd276"}'
- path: .archive/accf/tests/test_new_agents.py
  line_count: 118
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_new_agents.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestMemoryAgent", "line": 12, "inherits_from": [], "methods": [{"name": "test_memory_agent_creation", "line": 15, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that MemoryAgent can be created.", "signature": "test_memory_agent_creation(self)"}, {"name": "test_memory_agent_capabilities", "line": 21, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that MemoryAgent has correct capabilities.", "signature": "test_memory_agent_capabilities(self)"}, {"name": "test_memory_agent_store_and_retrieve", "line": 31, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that MemoryAgent can store and retrieve data.", "signature": "async test_memory_agent_store_and_retrieve(self)"}], "properties": [], "description": "Unit tests for verifying the behavior of the MemoryAgent class."}, {"name": "TestCollaborationAgent", "line": 58, "inherits_from": [], "methods": [{"name": "test_collaboration_agent_creation", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that CollaborationAgent can be created.", "signature": "test_collaboration_agent_creation(self)"}, {"name": "test_collaboration_agent_capabilities", "line": 67, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that CollaborationAgent has correct capabilities.", "signature": "test_collaboration_agent_capabilities(self)"}, {"name": "test_collaboration_agent_add_collaborator", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that CollaborationAgent can add collaborators.", "signature": "async test_collaboration_agent_add_collaborator(self)"}, {"name": "test_collaboration_agent_collaborate", "line": 102, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that CollaborationAgent can handle collaboration.", "signature": "async test_collaboration_agent_collaborate(self)"}], "properties": [], "description": "Unit tests for validating the functionality of the CollaborationAgent class."}], "imports": [{"module": "pytest", "alias": null, "line": 7, "statement": "import pytest"}, {"module": "accf_agents", "alias": null, "line": 8, "statement": "from accf_agents import Settings"}, {"module": "accf_agents.agents", "alias": null, "line": 9, "statement": "from accf_agents.agents import CollaborationAgent"}, {"module": "accf_agents.agents", "alias": null, "line": 9, "statement": "from accf_agents.agents import MemoryAgent"}, {"module": "accf_agents.agents", "alias": null, "line": 9, "statement": "from accf_agents.agents import Task"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 7}, {"name": "from accf_agents import Settings", "type": "import", "line": 8}, {"name": "from accf_agents.agents import CollaborationAgent", "type": "import", "line": 9}, {"name": "from accf_agents.agents import MemoryAgent", "type": "import", "line": 9}, {"name": "from accf_agents.agents import Task", "type": "import", "line": 9}, {"name": "TestMemoryAgent", "type": "class", "line": 12}, {"name": "TestCollaborationAgent", "type": "class", "line": 58}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 9}, {"name": "TestMemoryAgent Class", "description": "Class TestMemoryAgent definition and methods.", "line_start": 12, "line_end": 34}, {"name": "TestCollaborationAgent Class", "description": "Class TestCollaborationAgent definition and methods.", "line_start": 58, "line_end": 105}], "content_hash": "72dd6bfcd5904aa38acb500049ebdb64"}'
- path: .archive/accf/tests/test_async_endpoints.py
  line_count: 221
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_async_endpoints.py", "description": "Python module with 13 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_health_endpoint", "line": 16, "parameters": [], "is_async": false, "description": "Tests the basic health check endpoint to ensure the service is running.", "signature": "test_health_endpoint()"}, {"name": "test_detailed_health_endpoint", "line": 27, "parameters": [], "is_async": false, "description": "Tests the detailed health endpoint to verify comprehensive system status information.", "signature": "test_detailed_health_endpoint()"}, {"name": "test_readiness_endpoint", "line": 38, "parameters": [], "is_async": false, "description": "Tests the readiness endpoint to confirm the service is ready to accept requests.", "signature": "test_readiness_endpoint()"}, {"name": "test_knowledge_search_endpoint", "line": 48, "parameters": [], "is_async": false, "description": "Tests the knowledge search endpoint for correct search functionality.", "signature": "test_knowledge_search_endpoint()"}, {"name": "test_consult_endpoint", "line": 65, "parameters": [], "is_async": false, "description": "Tests the consult endpoint to validate consultation request handling.", "signature": "test_consult_endpoint()"}, {"name": "test_batch_execution_endpoint", "line": 85, "parameters": [], "is_async": false, "description": "Tests the batch execution endpoint for processing multiple tasks in one request.", "signature": "test_batch_execution_endpoint()"}, {"name": "test_agent_status_endpoint", "line": 109, "parameters": [], "is_async": false, "description": "Tests the agent status endpoint to retrieve current agent state information.", "signature": "test_agent_status_endpoint()"}, {"name": "test_agent_capabilities_endpoint", "line": 119, "parameters": [], "is_async": false, "description": "Tests the agent capabilities endpoint to verify reported agent functionalities.", "signature": "test_agent_capabilities_endpoint()"}, {"name": "test_agent_test_endpoint", "line": 129, "parameters": [], "is_async": false, "description": "Tests the agent test endpoint to ensure agent testing operations work correctly.", "signature": "test_agent_test_endpoint()"}, {"name": "test_task_status_endpoint", "line": 146, "parameters": [], "is_async": false, "description": "Tests the task status endpoint to check the status retrieval of specific tasks.", "signature": "test_task_status_endpoint()"}, {"name": "test_invalid_task_type", "line": 169, "parameters": [], "is_async": false, "description": "Tests the system''s response to invalid or unsupported task types.", "signature": "test_invalid_task_type()"}, {"name": "test_missing_parameters", "line": 185, "parameters": [], "is_async": false, "description": "Tests the API behavior when required parameters are missing from requests.", "signature": "test_missing_parameters()"}, {"name": "test_large_batch_execution", "line": 201, "parameters": [], "is_async": false, "description": "Tests the batch execution endpoint''s ability to handle large numbers of tasks.", "signature": "test_large_batch_execution()"}], "classes": [], "imports": [{"module": "pytest", "alias": null, "line": 11, "statement": "import pytest"}, {"module": "accf_agents.api.app", "alias": null, "line": 12, "statement": "from accf_agents.api.app import app"}, {"module": "fastapi.testclient", "alias": null, "line": 13, "statement": "from fastapi.testclient import TestClient"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 11}, {"name": "from accf_agents.api.app import app", "type": "import", "line": 12}, {"name": "from fastapi.testclient import TestClient", "type": "import", "line": 13}, {"name": "test_health_endpoint", "type": "function", "line": 16}, {"name": "test_detailed_health_endpoint", "type": "function", "line": 27}, {"name": "test_readiness_endpoint", "type": "function", "line": 38}, {"name": "test_knowledge_search_endpoint", "type": "function", "line": 48}, {"name": "test_consult_endpoint", "type": "function", "line": 65}, {"name": "test_batch_execution_endpoint", "type": "function", "line": 85}, {"name": "test_agent_status_endpoint", "type": "function", "line": 109}, {"name": "test_agent_capabilities_endpoint", "type": "function", "line": 119}, {"name": "test_agent_test_endpoint", "type": "function", "line": 129}, {"name": "test_task_status_endpoint", "type": "function", "line": 146}, {"name": "test_invalid_task_type", "type": "function", "line": 169}, {"name": "test_missing_parameters", "type": "function", "line": 185}, {"name": "test_large_batch_execution", "type": "function", "line": 201}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 13}, {"name": "test_health_endpoint Function", "description": "Function test_health_endpoint implementation.", "line_start": 16, "line_end": 26}, {"name": "test_detailed_health_endpoint Function", "description": "Function test_detailed_health_endpoint implementation.", "line_start": 27, "line_end": 37}, {"name": "test_readiness_endpoint Function", "description": "Function test_readiness_endpoint implementation.", "line_start": 38, "line_end": 47}, {"name": "test_knowledge_search_endpoint Function", "description": "Function test_knowledge_search_endpoint implementation.", "line_start": 48, "line_end": 64}, {"name": "test_consult_endpoint Function", "description": "Function test_consult_endpoint implementation.", "line_start": 65, "line_end": 84}, {"name": "test_batch_execution_endpoint Function", "description": "Function test_batch_execution_endpoint implementation.", "line_start": 85, "line_end": 108}, {"name": "test_agent_status_endpoint Function", "description": "Function test_agent_status_endpoint implementation.", "line_start": 109, "line_end": 118}, {"name": "test_agent_capabilities_endpoint Function", "description": "Function test_agent_capabilities_endpoint implementation.", "line_start": 119, "line_end": 128}, {"name": "test_agent_test_endpoint Function", "description": "Function test_agent_test_endpoint implementation.", "line_start": 129, "line_end": 145}, {"name": "test_task_status_endpoint Function", "description": "Function test_task_status_endpoint implementation.", "line_start": 146, "line_end": 168}, {"name": "test_invalid_task_type Function", "description": "Function test_invalid_task_type implementation.", "line_start": 169, "line_end": 184}, {"name": "test_missing_parameters Function", "description": "Function test_missing_parameters implementation.", "line_start": 185, "line_end": 200}, {"name": "test_large_batch_execution Function", "description": "Function test_large_batch_execution implementation.", "line_start": 201, "line_end": 206}], "content_hash": "7ebc9b4b769432102a4f40f81b829849"}'
- path: .archive/accf/tests/test_registry.py
  line_count: 28
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_registry.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_registry_init", "line": 12, "parameters": [], "is_async": false, "signature": "test_registry_init()", "description": "Tests the initialization process of the registry."}, {"name": "test_registry_register_and_lookup", "line": 17, "parameters": [], "is_async": false, "signature": "test_registry_register_and_lookup()", "description": "Tests registering an agent and looking it up in the registry."}, {"name": "test_registry_list_agents", "line": 25, "parameters": [], "is_async": false, "signature": "test_registry_list_agents()", "description": "Tests listing all agents currently registered."}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 3, "statement": "import os"}, {"module": "sys", "alias": null, "line": 4, "statement": "import sys"}, {"module": "registry.registry", "alias": null, "line": 9, "statement": "from registry.registry import AgentRegistry"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 3}, {"name": "sys", "type": "import", "line": 4}, {"name": "from registry.registry import AgentRegistry", "type": "import", "line": 9}, {"name": "test_registry_init", "type": "function", "line": 12}, {"name": "test_registry_register_and_lookup", "type": "function", "line": 17}, {"name": "test_registry_list_agents", "type": "function", "line": 25}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 9}, {"name": "test_registry_init Function", "description": "Function test_registry_init implementation.", "line_start": 12, "line_end": 16}, {"name": "test_registry_register_and_lookup Function", "description": "Function test_registry_register_and_lookup implementation.", "line_start": 17, "line_end": 24}, {"name": "test_registry_list_agents Function", "description": "Function test_registry_list_agents implementation.", "line_start": 25, "line_end": 30}], "content_hash": "d27abdf83906e122bf0d6c1299383ba7"}'
- path: .archive/accf/tests/test_agents.py
  line_count: 163
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_agents.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestSettings", "line": 13, "inherits_from": [], "methods": [{"name": "test_settings_creation", "line": 16, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that settings can be created.", "signature": "test_settings_creation(self)"}, {"name": "test_settings_optional_fields", "line": 24, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that optional fields work correctly.", "signature": "test_settings_optional_fields(self)"}], "properties": [], "description": "Contains tests for validating configuration settings."}, {"name": "TestTaskAndResult", "line": 32, "inherits_from": [], "methods": [{"name": "test_task_creation", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that tasks can be created.", "signature": "test_task_creation(self)"}, {"name": "test_result_creation", "line": 42, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that results can be created.", "signature": "test_result_creation(self)"}], "properties": [], "description": "Tests functionality related to task processing and result handling."}, {"name": "TestConsultAgent", "line": 50, "inherits_from": [], "methods": [{"name": "test_consult_agent_creation", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that ConsultAgent can be created.", "signature": "test_consult_agent_creation(self)"}, {"name": "test_consult_agent_capabilities", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that ConsultAgent has correct capabilities.", "signature": "test_consult_agent_capabilities(self)"}, {"name": "test_consult_agent_can_handle", "line": 70, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that ConsultAgent can handle correct task types.", "signature": "test_consult_agent_can_handle(self)"}, {"name": "test_consult_agent_execute", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that ConsultAgent can execute tasks.", "signature": "async test_consult_agent_execute(self)"}], "properties": [], "description": "Includes tests for the consult agent''s behavior and interactions."}, {"name": "TestKnowledgeAgent", "line": 94, "inherits_from": [], "methods": [{"name": "test_knowledge_agent_creation", "line": 97, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that KnowledgeAgent can be created.", "signature": "test_knowledge_agent_creation(self)"}, {"name": "test_knowledge_agent_capabilities", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that KnowledgeAgent has correct capabilities.", "signature": "test_knowledge_agent_capabilities(self)"}, {"name": "test_knowledge_agent_search", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that KnowledgeAgent can search.", "signature": "async test_knowledge_agent_search(self)"}], "properties": [], "description": "Tests knowledge agent capabilities and knowledge management."}, {"name": "TestAgentOrchestrator", "line": 132, "inherits_from": [], "methods": [{"name": "test_orchestrator_creation", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that AgentOrchestrator can be created.", "signature": "async test_orchestrator_creation(self)"}, {"name": "test_orchestrator_initialization", "line": 143, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that AgentOrchestrator can be initialized.", "signature": "async test_orchestrator_initialization(self)"}, {"name": "test_orchestrator_agent_status", "line": 151, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test that AgentOrchestrator can provide agent status.", "signature": "async test_orchestrator_agent_status(self)"}], "properties": [], "description": "Verifies orchestration logic among multiple agents."}], "imports": [{"module": "pytest", "alias": null, "line": 8, "statement": "import pytest"}, {"module": "accf_agents", "alias": null, "line": 9, "statement": "from accf_agents import AgentOrchestrator"}, {"module": "accf_agents", "alias": null, "line": 9, "statement": "from accf_agents import Settings"}, {"module": "accf_agents.agents", "alias": null, "line": 10, "statement": "from accf_agents.agents import ConsultAgent"}, {"module": "accf_agents.agents", "alias": null, "line": 10, "statement": "from accf_agents.agents import KnowledgeAgent"}, {"module": "accf_agents.agents", "alias": null, "line": 10, "statement": "from accf_agents.agents import Result"}, {"module": "accf_agents.agents", "alias": null, "line": 10, "statement": "from accf_agents.agents import Task"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 8}, {"name": "from accf_agents import AgentOrchestrator", "type": "import", "line": 9}, {"name": "from accf_agents import Settings", "type": "import", "line": 9}, {"name": "from accf_agents.agents import ConsultAgent", "type": "import", "line": 10}, {"name": "from accf_agents.agents import KnowledgeAgent", "type": "import", "line": 10}, {"name": "from accf_agents.agents import Result", "type": "import", "line": 10}, {"name": "from accf_agents.agents import Task", "type": "import", "line": 10}, {"name": "TestSettings", "type": "class", "line": 13}, {"name": "TestTaskAndResult", "type": "class", "line": 32}, {"name": "TestConsultAgent", "type": "class", "line": 50}, {"name": "TestKnowledgeAgent", "type": "class", "line": 94}, {"name": "TestAgentOrchestrator", "type": "class", "line": 132}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 8, "line_end": 10}, {"name": "TestSettings Class", "description": "Class TestSettings definition and methods.", "line_start": 13, "line_end": 27}, {"name": "TestTaskAndResult Class", "description": "Class TestTaskAndResult definition and methods.", "line_start": 32, "line_end": 45}, {"name": "TestConsultAgent Class", "description": "Class TestConsultAgent definition and methods.", "line_start": 50, "line_end": 82}, {"name": "TestKnowledgeAgent Class", "description": "Class TestKnowledgeAgent definition and methods.", "line_start": 94, "line_end": 117}, {"name": "TestAgentOrchestrator Class", "description": "Class TestAgentOrchestrator definition and methods.", "line_start": 132, "line_end": 154}], "content_hash": "6c4fc37be3c3dd5eedf615f64212afe6"}'
- path: .archive/accf/tests/test_documentation_bundle_agent.py
  line_count: 81
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_documentation_bundle_agent.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_docs_bundle_parallel", "line": 21, "parameters": [], "is_async": false, "signature": "test_docs_bundle_parallel()", "description": "Tests the documentation bundling process when run in parallel mode."}, {"name": "test_docs_bundle_sequential", "line": 32, "parameters": [], "is_async": false, "signature": "test_docs_bundle_sequential()", "description": "Tests the documentation bundling process when run sequentially."}, {"name": "test_logging_and_config", "line": 43, "parameters": [{"name": "monkeypatch", "type": "unknown"}, {"name": "tmp_path", "type": "unknown"}], "is_async": false, "signature": "test_logging_and_config(monkeypatch, tmp_path)", "description": "Tests the logging setup and configuration handling using monkeypatch and temporary path."}, {"name": "test_resource_management", "line": 74, "parameters": [{"name": "monkeypatch", "type": "unknown"}], "is_async": false, "signature": "test_resource_management(monkeypatch)", "description": "Tests resource management functionality with monkeypatching."}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 3, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 4, "statement": "import logging"}, {"module": "os", "alias": null, "line": 5, "statement": "import os"}, {"module": "sys", "alias": null, "line": 6, "statement": "import sys"}, {"module": "yaml", "alias": null, "line": 8, "statement": "import yaml"}, {"module": "capabilities.documentation_bundle_agent", "alias": null, "line": 13, "statement": "from capabilities.documentation_bundle_agent import DocumentationBundleAgent"}, {"module": "schemas", "alias": null, "line": 16, "statement": "from schemas import DocsBundle"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 3}, {"name": "logging", "type": "import", "line": 4}, {"name": "os", "type": "import", "line": 5}, {"name": "sys", "type": "import", "line": 6}, {"name": "yaml", "type": "import", "line": 8}, {"name": "from capabilities.documentation_bundle_agent import DocumentationBundleAgent", "type": "import", "line": 13}, {"name": "from schemas import DocsBundle", "type": "import", "line": 16}, {"name": "test_docs_bundle_parallel", "type": "function", "line": 21}, {"name": "test_docs_bundle_sequential", "type": "function", "line": 32}, {"name": "test_logging_and_config", "type": "function", "line": 43}, {"name": "test_resource_management", "type": "function", "line": 74}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 16}, {"name": "test_docs_bundle_parallel Function", "description": "Function test_docs_bundle_parallel implementation.", "line_start": 21, "line_end": 31}, {"name": "test_docs_bundle_sequential Function", "description": "Function test_docs_bundle_sequential implementation.", "line_start": 32, "line_end": 42}, {"name": "test_logging_and_config Function", "description": "Function test_logging_and_config implementation.", "line_start": 43, "line_end": 73}, {"name": "test_resource_management Function", "description": "Function test_resource_management implementation.", "line_start": 74, "line_end": 79}], "content_hash": "daac4fcd88d26c98840ddaa4ffffb13b"}'
- path: .archive/accf/tests/test_agent_base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_agent_base.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_agent_base_init", "line": 13, "parameters": [], "is_async": false, "signature": "test_agent_base_init()", "description": "Tests the initialization process of the AgentBase class."}, {"name": "test_agent_base_handle_message", "line": 21, "parameters": [], "is_async": false, "signature": "test_agent_base_handle_message()", "description": "Tests the message handling functionality of the AgentBase class."}, {"name": "test_agent_base_state", "line": 28, "parameters": [], "is_async": false, "signature": "test_agent_base_state()", "description": "Tests the state management of the AgentBase class."}, {"name": "test_agent_base_log_event", "line": 34, "parameters": [], "is_async": false, "signature": "test_agent_base_log_event()", "description": "Tests the event logging mechanism of the AgentBase class."}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 3, "statement": "import os"}, {"module": "sys", "alias": null, "line": 4, "statement": "import sys"}, {"module": "agent_base.agent_base", "alias": null, "line": 10, "statement": "from agent_base.agent_base import AgentBase"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 3}, {"name": "sys", "type": "import", "line": 4}, {"name": "from agent_base.agent_base import AgentBase", "type": "import", "line": 10}, {"name": "test_agent_base_init", "type": "function", "line": 13}, {"name": "test_agent_base_handle_message", "type": "function", "line": 21}, {"name": "test_agent_base_state", "type": "function", "line": 28}, {"name": "test_agent_base_log_event", "type": "function", "line": 34}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 10}, {"name": "test_agent_base_init Function", "description": "Function test_agent_base_init implementation.", "line_start": 13, "line_end": 20}, {"name": "test_agent_base_handle_message Function", "description": "Function test_agent_base_handle_message implementation.", "line_start": 21, "line_end": 27}, {"name": "test_agent_base_state Function", "description": "Function test_agent_base_state implementation.", "line_start": 28, "line_end": 33}, {"name": "test_agent_base_log_event Function", "description": "Function test_agent_base_log_event implementation.", "line_start": 34, "line_end": 39}], "content_hash": "88e5814d651d1ec7cdf07d41ca7b656e"}'
- path: .archive/accf/tests/test_neo4j_knowledge_graph.py
  line_count: 312
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_neo4j_knowledge_graph.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestNeo4jKnowledgeGraph", "line": 16, "inherits_from": [], "methods": [{"name": "mock_driver", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Mock Neo4j driver for testing.", "signature": "mock_driver(self)"}, {"name": "mock_embedder", "line": 31, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Mock OpenAI embedder for testing.", "signature": "mock_embedder(self)"}, {"name": "knowledge_graph", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "mock_driver", "type": "unknown"}, {"name": "mock_embedder", "type": "unknown"}], "is_async": false, "description": "Create a test knowledge graph instance.", "signature": "knowledge_graph(self, mock_driver, mock_embedder)"}, {"name": "test_initialization", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}], "is_async": false, "description": "Test knowledge graph initialization.", "signature": "test_initialization(self, knowledge_graph)"}, {"name": "test_query_execution", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}], "is_async": false, "description": "Test Cypher query execution.", "signature": "test_query_execution(self, knowledge_graph, mock_driver)"}, {"name": "test_query_with_parameters", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}], "is_async": false, "description": "Test Cypher query execution with parameters.", "signature": "test_query_with_parameters(self, knowledge_graph, mock_driver)"}, {"name": "test_vector_search", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_embedder", "type": "unknown"}], "is_async": false, "description": "Test vector similarity search.", "signature": "test_vector_search(self, knowledge_graph, mock_embedder)"}, {"name": "test_store_research_finding", "line": 144, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}, {"name": "mock_embedder", "type": "unknown"}], "is_async": false, "description": "Test storing research findings with vector embeddings.", "signature": "test_store_research_finding(self, knowledge_graph, mock_driver, mock_embedder)"}, {"name": "test_find_similar_research", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}], "is_async": false, "description": "Test finding similar research using vector search.", "signature": "test_find_similar_research(self, knowledge_graph)"}, {"name": "test_get_research_overview", "line": 195, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}], "is_async": false, "description": "Test getting research overview statistics.", "signature": "test_get_research_overview(self, knowledge_graph, mock_driver)"}, {"name": "test_connection_error_handling", "line": 241, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test handling of connection errors.", "signature": "test_connection_error_handling(self)"}, {"name": "test_query_error_handling", "line": 249, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}], "is_async": false, "description": "Test handling of query execution errors.", "signature": "test_query_error_handling(self, knowledge_graph, mock_driver)"}, {"name": "test_vector_search_no_retriever", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}], "is_async": false, "description": "Test vector search when retriever is not available.", "signature": "test_vector_search_no_retriever(self, knowledge_graph)"}, {"name": "test_close_connection", "line": 272, "parameters": [{"name": "self", "type": "self"}, {"name": "knowledge_graph", "type": "unknown"}, {"name": "mock_driver", "type": "unknown"}], "is_async": false, "description": "Test closing the database connection.", "signature": "test_close_connection(self, knowledge_graph, mock_driver)"}], "properties": [], "description": "Unit test class for verifying the functionality of the Neo4j knowledge graph implementation."}, {"name": "TestNeo4jKnowledgeGraphIntegration", "line": 283, "inherits_from": [], "methods": [{"name": "test_real_connection", "line": 287, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test connection to real Neo4j instance (requires running Neo4j).", "signature": "test_real_connection(self)"}, {"name": "test_vector_index_creation", "line": 301, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test vector index creation (requires OpenAI API key).", "signature": "test_vector_index_creation(self)"}], "properties": [], "description": "Integration test class for validating the end-to-end behavior of the Neo4j knowledge graph."}], "imports": [{"module": "os", "alias": null, "line": 9, "statement": "import os"}, {"module": "pytest", "alias": null, "line": 12, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import Mock"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import patch"}, {"module": "capabilities.neo4j_knowledge_graph", "alias": null, "line": 13, "statement": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 9}, {"name": "pytest", "type": "import", "line": 12}, {"name": "from unittest.mock import Mock", "type": "import", "line": 10}, {"name": "from unittest.mock import patch", "type": "import", "line": 10}, {"name": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph", "type": "import", "line": 13}, {"name": "TestNeo4jKnowledgeGraph", "type": "class", "line": 16}, {"name": "TestNeo4jKnowledgeGraphIntegration", "type": "class", "line": 283}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "TestNeo4jKnowledgeGraph Class", "description": "Class TestNeo4jKnowledgeGraph definition and methods.", "line_start": 16, "line_end": 275}, {"name": "TestNeo4jKnowledgeGraphIntegration Class", "description": "Class TestNeo4jKnowledgeGraphIntegration definition and methods.", "line_start": 283, "line_end": 304}], "content_hash": "f9ea850cd2c19cd9a9e33f12293d17d2"}'
- path: .archive/accf/tests/test_end_to_end.py
  line_count: 95
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_end_to_end.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "test_end_to_end", "line": 22, "parameters": [], "is_async": false, "signature": "test_end_to_end()", "description": "Runs a comprehensive end-to-end test to verify the complete workflow."}], "classes": [], "imports": [{"module": "os", "alias": null, "line": 3, "statement": "import os"}, {"module": "sys", "alias": null, "line": 4, "statement": "import sys"}, {"module": "capabilities.collaboration_agent", "alias": null, "line": 11, "statement": "from capabilities.collaboration_agent import CollaborationAgent"}, {"module": "capabilities.execution_agent", "alias": null, "line": 12, "statement": "from capabilities.execution_agent import ExecutionAgent"}, {"module": "capabilities.feedback_agent", "alias": null, "line": 13, "statement": "from capabilities.feedback_agent import FeedbackAgent"}, {"module": "capabilities.knowledge_agent", "alias": null, "line": 14, "statement": "from capabilities.knowledge_agent import KnowledgeAgent"}, {"module": "capabilities.memory_agent", "alias": null, "line": 15, "statement": "from capabilities.memory_agent import MemoryAgent"}, {"module": "capabilities.research_agent", "alias": null, "line": 16, "statement": "from capabilities.research_agent import ResearchAgent"}, {"module": "capabilities.security_agent", "alias": null, "line": 17, "statement": "from capabilities.security_agent import SecurityAgent"}, {"module": "orchestrator.orchestrator", "alias": null, "line": 18, "statement": "from orchestrator.orchestrator import Orchestrator"}, {"module": "registry.registry", "alias": null, "line": 19, "statement": "from registry.registry import AgentRegistry"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 3}, {"name": "sys", "type": "import", "line": 4}, {"name": "from capabilities.collaboration_agent import CollaborationAgent", "type": "import", "line": 11}, {"name": "from capabilities.execution_agent import ExecutionAgent", "type": "import", "line": 12}, {"name": "from capabilities.feedback_agent import FeedbackAgent", "type": "import", "line": 13}, {"name": "from capabilities.knowledge_agent import KnowledgeAgent", "type": "import", "line": 14}, {"name": "from capabilities.memory_agent import MemoryAgent", "type": "import", "line": 15}, {"name": "from capabilities.research_agent import ResearchAgent", "type": "import", "line": 16}, {"name": "from capabilities.security_agent import SecurityAgent", "type": "import", "line": 17}, {"name": "from orchestrator.orchestrator import Orchestrator", "type": "import", "line": 18}, {"name": "from registry.registry import AgentRegistry", "type": "import", "line": 19}, {"name": "test_end_to_end", "type": "function", "line": 22}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 19}, {"name": "test_end_to_end Function", "description": "Function test_end_to_end implementation.", "line_start": 22, "line_end": 27}], "content_hash": "ab4c7effebe61e982f1f5177437d74cc"}'
- path: .archive/accf/capabilities/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/accf/capabilities/consult_agent.py
  line_count: 1021
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "consult_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ConsultAgent", "line": 11, "inherits_from": ["LLMBaseAgent):"], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "_log_api_call", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}, {"name": "prompt_length", "type": "int"}, {"name": "context", "type": "str", "default": ""}], "is_async": false, "description": "Log every API call with detailed information.", "signature": "_log_api_call(self, model: str, prompt_length: int, context: str = )"}, {"name": "_log_api_response", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "dict"}, {"name": "response_length", "type": "int):"}], "is_async": false, "description": "Log every API response with detailed information.", "signature": "_log_api_response(self, response: dict, response_length: int):)"}, {"name": "_log_critic_call", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "response_length", "type": "int"}, {"name": "artifact_type", "type": "str"}, {"name": "original_prompt", "type": "str"}], "is_async": false, "description": "Log every critic API call with detailed information.", "signature": "_log_critic_call(self, response_length: int, artifact_type: str, original_prompt: str)"}, {"name": "_log_critic_response", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "critic_result", "type": "dict):"}], "is_async": false, "description": "Log every critic response with detailed information.", "signature": "_log_critic_response(self, critic_result: dict):)"}, {"name": "_session_expired", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "session", "type": "unknown"}], "is_async": false, "signature": "_session_expired(self, session)"}, {"name": "_get_or_create_session", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "unknown"}], "is_async": false, "signature": "_get_or_create_session(self, session_id)"}, {"name": "reset_session", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "unknown"}], "is_async": false, "signature": "reset_session(self, session_id)"}, {"name": "_get_artifact_guidance", "line": 114, "parameters": [{"name": "self", "type": "self"}, {"name": "artifact_type", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Get artifact-specific guidance for prompt generation.\n\n        Args:\n            artifact_type: The type of artifact being generated\n\n        Returns:\n            str: Artifact-specific guidance text\n        ", "signature": "_get_artifact_guidance(self, artifact_type: str) -> str"}, {"name": "answer", "line": 479, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "session_id", "type": "str", "default": "default"}, {"name": "file_paths", "type": "list", "default": "None"}, {"name": "artifact_type", "type": "str", "default": "None"}, {"name": "iterate", "type": "int", "default": "None"}, {"name": "critic_enabled", "type": "bool", "default": "False"}, {"name": "model", "type": "str", "default": "None"}], "is_async": false, "return_type": "dict", "signature": "answer(self, prompt: str, session_id: str = default, file_paths: list = None, artifact_type: str = None, iterate: int = None, critic_enabled: bool = False, model: str = None) -> dict"}], "properties": [{"name": "session_store", "line": 18, "type": ""}, {"name": "SESSION_TIMEOUT", "line": 19, "type": ""}, {"name": "MODEL", "line": 20, "type": ""}, {"name": "ASSISTANT_NAME", "line": 21, "type": ""}], "description": "Manages consultation processes, handling user interactions and providing expert advice through multiple methods."}], "imports": [{"module": "logging", "alias": null, "line": 3, "statement": "import logging"}, {"module": "os", "alias": null, "line": 4, "statement": "import os"}, {"module": "sys", "alias": null, "line": 5, "statement": "import sys"}, {"module": "time", "alias": null, "line": 6, "statement": "import time"}, {"module": "agent_base.agent_base", "alias": null, "line": 8, "statement": "from agent_base.agent_base import LLMBaseAgent"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 3}, {"name": "os", "type": "import", "line": 4}, {"name": "sys", "type": "import", "line": 5}, {"name": "time", "type": "import", "line": 6}, {"name": "from agent_base.agent_base import LLMBaseAgent", "type": "import", "line": 8}, {"name": "ConsultAgent", "type": "class", "line": 11}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 8}, {"name": "ConsultAgent Class", "description": "Class ConsultAgent definition and methods.", "line_start": 11, "line_end": 482}], "content_hash": "d93f126ef57bcc0ff06eef9f13b7b1c1"}'
- path: .archive/accf/capabilities/self_reflection_agent.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "self_reflection_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "SelfReflectionAgent", "line": 25, "inherits_from": [], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "reflect", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Perform self-reflection and return insights or improvements (analyze logs).", "signature": "reflect(self, context: dict[str, Any]) -> dict[str, Any]"}, {"name": "answer", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Trigger self-reflection and return insights based on the prompt.", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "An agent that performs self-reflection to improve its decision-making and actions."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "SelfReflectionAgent", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 20}, {"name": "SelfReflectionAgent Class", "description": "Class SelfReflectionAgent definition and methods.", "line_start": 25, "line_end": 47}], "content_hash": "41ac6094bf963b10ad9f89cc53bc0bab"}'
- path: .archive/accf/capabilities/testing_agent.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "testing_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "TestingAgent", "line": 27, "inherits_from": [], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY)"}, {"name": "test", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "signature": "test(self, prompt: str) -> dict"}], "properties": [], "description": "Represents an agent used for testing purposes, providing methods to perform test-related actions."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "os", "alias": null, "line": 20, "statement": "import os"}, {"module": "shared.openai_interfaces.responses_interface", "alias": null, "line": 22, "statement": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "os", "type": "import", "line": 20}, {"name": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface", "type": "import", "line": 22}, {"name": "TestingAgent", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 22}, {"name": "TestingAgent Class", "description": "Class TestingAgent definition and methods.", "line_start": 27, "line_end": 36}], "content_hash": "610f17a422798403e847253b668d955f"}'
- path: .archive/accf/capabilities/knowledge_agent.py
  line_count: 239
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "knowledge_agent.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "KnowledgeGraph", "line": 25, "inherits_from": [], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "uri", "type": "str", "default": "bolt://localhost:7687"}, {"name": "database", "type": "str", "default": "neo4j"}], "is_async": false, "signature": "__init__(self, uri: str = bolt://localhost:7687, database: str = neo4j)"}, {"name": "query", "line": 32, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}], "is_async": false, "return_type": "Any", "signature": "query(self, query: str) -> Any"}, {"name": "update", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "fact", "type": "dict[str, Any]"}, {"name": "provenance", "type": "dict[str, Any]", "default": "None"}], "is_async": false, "signature": "update(self, fact: dict[str, Any], provenance: dict[str, Any] = None)"}], "properties": [], "description": "Represents a knowledge graph structure with methods to manipulate and query the graph."}, {"name": "KnowledgeAgent", "line": 47, "inherits_from": ["LLMBaseAgent):"], "methods": [{"name": "__init__", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "answer", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "signature": "answer(self, prompt: str) -> dict"}, {"name": "list_node_labels", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list", "description": "List all node labels in the database.", "signature": "list_node_labels(self) -> list"}, {"name": "describe_schema", "line": 124, "parameters": [{"name": "self", "type": "self"}, {"name": "label_name", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Describe the schema/fields of a node label (best effort).", "signature": "describe_schema(self, label_name: str) -> dict"}, {"name": "get_project_overview", "line": 138, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict", "description": "Summarize project structure, main node labels, and key entities.", "signature": "get_project_overview(self) -> dict"}, {"name": "get_recent_activity", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "limit", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "list", "description": "List recent changes/additions across node labels (best effort).", "signature": "get_recent_activity(self, limit: int = 10 = 10) -> list"}, {"name": "find_entity", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "entity_name", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Locate and describe any entity (component, user, doc, etc.) in the DB.", "signature": "find_entity(self, entity_name: str) -> dict"}, {"name": "explain_label", "line": 204, "parameters": [{"name": "self", "type": "self"}, {"name": "label_name", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Describe the schema, purpose, and sample data for any node label.", "signature": "explain_label(self, label_name: str) -> dict"}, {"name": "answer_with_evidence", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Run context-aware queries and return answers with supporting evidence and provenance.", "signature": "answer_with_evidence(self, question: str) -> dict"}], "properties": [], "description": "Manages interactions with the knowledge graph, providing methods for knowledge retrieval, update, and reasoning."}], "imports": [{"module": "typing", "alias": null, "line": 19, "statement": "from typing import Any"}, {"module": "agent_base.agent_base", "alias": null, "line": 21, "statement": "from agent_base.agent_base import LLMBaseAgent"}, {"module": "capabilities.neo4j_knowledge_graph", "alias": null, "line": 22, "statement": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 19}, {"name": "from agent_base.agent_base import LLMBaseAgent", "type": "import", "line": 21}, {"name": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph", "type": "import", "line": 22}, {"name": "KnowledgeGraph", "type": "class", "line": 25}, {"name": "KnowledgeAgent", "type": "class", "line": 47}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 22}, {"name": "KnowledgeGraph Class", "description": "Class KnowledgeGraph definition and methods.", "line_start": 25, "line_end": 41}, {"name": "KnowledgeAgent Class", "description": "Class KnowledgeAgent definition and methods.", "line_start": 47, "line_end": 213}], "content_hash": "140581695c6966b49fc545302f97cb1b"}'
- path: .archive/accf/capabilities/neo4j_knowledge_graph.py
  line_count: 180
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "neo4j_knowledge_graph.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "_tokenise", "line": 53, "parameters": [{"name": "text", "type": "str"}], "is_async": false, "return_type": "list[str]", "signature": "_tokenise(text: str) -> list[str]", "description": "Splits the input text into a list of tokens."}], "classes": [{"name": "KnowledgeGraphUnavailableError", "line": 37, "inherits_from": ["RuntimeError):"], "methods": [], "properties": [], "description": "Exception raised when the knowledge graph service is unavailable."}, {"name": "KGResult", "line": 41, "inherits_from": ["NamedTuple):"], "methods": [], "properties": [], "description": "Represents the result returned from a knowledge graph query."}, {"name": "Neo4jKnowledgeGraph", "line": 57, "inherits_from": [], "methods": [{"name": "__init__", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "_session", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "signature": "async _session(self)"}, {"name": "close", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "signature": "async close(self) -> None"}, {"name": "upsert_page", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "page", "type": "FirecrawlResult"}], "is_async": true, "return_type": "None", "description": "Create *or* update a (:Page) node.", "signature": "async upsert_page(self, page: FirecrawlResult) -> None"}, {"name": "query", "line": 134, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str, *, top_k: int | None = None"}], "is_async": true, "return_type": "list[KGResult]", "description": "\n        Very-simple similarity: overlap / sqrt(lenA*lenB) on token arrays\n        executed inside Cypher (fast for <10K nodes).\n        ", "signature": "async query(self, question: str, *, top_k: int | None = None) -> list[KGResult]"}], "properties": [{"name": "_DEFAULT_NEO4J_URI", "line": 58, "type": ""}, {"name": "_DEFAULT_TOP_K", "line": 59, "type": ""}], "description": "Manages interactions with a Neo4j knowledge graph database."}], "imports": [{"module": "logging", "alias": null, "line": 26, "statement": "import logging"}, {"module": "os", "alias": null, "line": 27, "statement": "import os"}, {"module": "re", "alias": null, "line": 28, "statement": "import re"}, {"module": "__future__", "alias": null, "line": 24, "statement": "from __future__ import annotations"}, {"module": "contextlib", "alias": null, "line": 29, "statement": "from contextlib import asynccontextmanager"}, {"module": "typing", "alias": null, "line": 30, "statement": "from typing import NamedTuple"}, {"module": "capabilities.tools.firecrawl_tool", "alias": null, "line": 32, "statement": "from capabilities.tools.firecrawl_tool import FirecrawlResult"}], "constants": [{"name": "_TOKEN_RX", "line": 50, "value": "re.compile(r\"[a-zA-Z0-9]+\")", "type": ""}]}, "key_elements": [{"name": "logging", "type": "import", "line": 26}, {"name": "os", "type": "import", "line": 27}, {"name": "re", "type": "import", "line": 28}, {"name": "from __future__ import annotations", "type": "import", "line": 24}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 29}, {"name": "from typing import NamedTuple", "type": "import", "line": 30}, {"name": "from capabilities.tools.firecrawl_tool import FirecrawlResult", "type": "import", "line": 32}, {"name": "KnowledgeGraphUnavailableError", "type": "class", "line": 37}, {"name": "KGResult", "type": "class", "line": 41}, {"name": "_TOKEN_RX", "type": "constant", "line": 50}, {"name": "_tokenise", "type": "function", "line": 53}, {"name": "Neo4jKnowledgeGraph", "type": "class", "line": 57}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 23}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 24, "line_end": 32}, {"name": "_tokenise Function", "description": "Function _tokenise implementation.", "line_start": 53, "line_end": 56}, {"name": "KnowledgeGraphUnavailableError Class", "description": "Class KnowledgeGraphUnavailableError definition and methods.", "line_start": 37, "line_end": 47}, {"name": "KGResult Class", "description": "Class KGResult definition and methods.", "line_start": 41, "line_end": 51}, {"name": "Neo4jKnowledgeGraph Class", "description": "Class Neo4jKnowledgeGraph definition and methods.", "line_start": 57, "line_end": 137}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 50, "line_end": 50}], "content_hash": "a3370f44b3641f4f94eecb78739b2c6d"}'
- path: .archive/accf/capabilities/execution_agent.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "execution_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ExecutionAgent", "line": 25, "inherits_from": [], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "execute", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Execute a task and return the result (simulated for now).", "signature": "execute(self, task: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Manages and executes tasks or commands within a given environment."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "ExecutionAgent", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 20}, {"name": "ExecutionAgent Class", "description": "Class ExecutionAgent definition and methods.", "line_start": 25, "line_end": 32}], "content_hash": "0cf37a779bf9102e63cd9c636cd36e4a"}'
- path: .archive/accf/capabilities/security_agent.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "security_agent.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "SecurityLayer", "line": 24, "inherits_from": [], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "log_action", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "action", "type": "str"}, {"name": "context", "type": "dict[str, Any]):"}], "is_async": false, "signature": "log_action(self, agent_id: str, action: str, context: dict[str, Any]):)"}, {"name": "check_permission", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str, action: str"}, {"name": "action", "type": "str"}], "is_async": false, "return_type": "bool", "signature": "check_permission(self, agent_id: str, action: str, action: str) -> bool"}], "properties": [], "description": "Represents a security layer responsible for managing security protocols and operations."}, {"name": "SecurityAgent", "line": 38, "inherits_from": [], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "log_action", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "action", "type": "str"}, {"name": "context", "type": "dict[str, Any]):"}], "is_async": false, "signature": "log_action(self, agent_id: str, action: str, context: dict[str, Any]):)"}, {"name": "check_permission", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str, action: str"}, {"name": "action", "type": "str"}], "is_async": false, "return_type": "bool", "signature": "check_permission(self, agent_id: str, action: str, action: str) -> bool"}], "properties": [], "description": "Represents a security agent that performs security-related tasks and enforces policies."}], "imports": [{"module": "typing", "alias": null, "line": 19, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 19}, {"name": "SecurityLayer", "type": "class", "line": 24}, {"name": "SecurityAgent", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 19}, {"name": "SecurityLayer Class", "description": "Class SecurityLayer definition and methods.", "line_start": 24, "line_end": 36}, {"name": "SecurityAgent Class", "description": "Class SecurityAgent definition and methods.", "line_start": 38, "line_end": 49}], "content_hash": "4a065715aae46c61b84c65aa6a2aa9df"}'
- path: .archive/accf/capabilities/critique_agent.py
  line_count: 52
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "critique_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CritiqueAgent", "line": 28, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY)"}, {"name": "critique", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Critique content using LLM (simulated).", "signature": "critique(self, content: str) -> dict[str, Any]"}, {"name": "answer", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Critique the given prompt using the LLM-backed critique method.", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "Agent class that generates critiques based on input data to provide feedback or suggestions."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "os", "alias": null, "line": 20, "statement": "import os"}, {"module": "typing", "alias": null, "line": 21, "statement": "from typing import Any"}, {"module": "shared.openai_interfaces.responses_interface", "alias": null, "line": 23, "statement": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "os", "type": "import", "line": 20}, {"name": "from typing import Any", "type": "import", "line": 21}, {"name": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface", "type": "import", "line": 23}, {"name": "CritiqueAgent", "type": "class", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 23}, {"name": "CritiqueAgent Class", "description": "Class CritiqueAgent definition and methods.", "line_start": 28, "line_end": 55}], "content_hash": "5cc458a4fb4b313d2f41cfc9189767b2"}'
- path: .archive/accf/capabilities/challenge_agent.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "challenge_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ChallengeAgent", "line": 3, "inherits_from": [], "methods": [{"name": "__init__", "line": 4, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "answer", "line": 7, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "Represents an agent that participates in challenges, providing methods to perform challenge-related actions."}], "imports": [], "constants": []}, "key_elements": [{"name": "ChallengeAgent", "type": "class", "line": 3}], "sections": [{"name": "ChallengeAgent Class", "description": "Class ChallengeAgent definition and methods.", "line_start": 3, "line_end": 10}], "content_hash": "36eeb1d499aa734a184b6ec7e6c8ac20"}'
- path: .archive/accf/capabilities/synthesis_agent.py
  line_count: 262
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "synthesis_agent.py", "description": "Python module with 2 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "_tokenise", "line": 56, "parameters": [{"name": "text", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Converts a text string into a list of tokens.", "signature": "_tokenise(text: str) -> list[str]"}, {"name": "_relevance_score", "line": 62, "parameters": [{"name": "text", "type": "str, question_tokens: Counter"}, {"name": "question_tokens", "type": "Counter"}], "is_async": false, "return_type": "float", "description": "Calculates a relevance score between text and question tokens.", "signature": "_relevance_score(text: str, question_tokens: Counter, question_tokens: Counter) -> float"}], "classes": [{"name": "SynthesisAgent", "line": 77, "inherits_from": [], "methods": [{"name": "__init__", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "llm", "type": "OpenAIResponsesInterface"}], "is_async": false, "return_type": "None", "signature": "__init__(self, llm: OpenAIResponsesInterface) -> None"}, {"name": "synthesise", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}, {"name": "pages", "type": "Sequence[FirecrawlResult]"}], "is_async": false, "return_type": "dict[str, str]", "description": "\n        Return a JSON dict: {\"answer\": str, \"confidence\": str, \"sources\": list[str]}.\n\n        The coroutine *never raises* on LLM issues \u2013 callers can treat failures\n        as low-confidence answers.\n        ", "signature": "synthesise(self, question: str, pages: Sequence[FirecrawlResult]) -> dict[str, str]"}, {"name": "_build_prompt", "line": 195, "parameters": [{"name": "question", "type": "str"}, {"name": "ranked_pages", "type": "Sequence[tuple[FirecrawlResult, float]]"}], "is_async": false, "return_type": "str", "description": "Embed the *markdown* of ranked pages in a structured system prompt.", "signature": "_build_prompt(question: str, ranked_pages: Sequence[tuple[FirecrawlResult, float]]) -> str"}, {"name": "_rank_and_deduplicate", "line": 215, "parameters": [{"name": "self", "type": "self"}, {"name": "pages", "type": "Sequence[FirecrawlResult]"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "list[tuple[FirecrawlResult, float]]", "description": "Order pages by relevance; drop exact-duplicate URLs.", "signature": "_rank_and_deduplicate(self, pages: Sequence[FirecrawlResult], question: str) -> list[tuple[FirecrawlResult, float]]"}, {"name": "_heuristic_confidence", "line": 234, "parameters": [{"name": "answer", "type": "str"}], "is_async": false, "return_type": "float", "description": "Crude confidence score based on length \u2013 placeholder for future ML.", "signature": "_heuristic_confidence(answer: str) -> float"}], "properties": [{"name": "_LLM_TIMEOUT_SEC", "line": 78, "type": ""}, {"name": "_MAX_PAGES_FOR_PROMPT", "line": 79, "type": ""}], "description": "Agent that synthesizes information from multiple sources to generate a response."}], "imports": [{"module": "asyncio", "alias": null, "line": 23, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 24, "statement": "import json"}, {"module": "logging", "alias": null, "line": 25, "statement": "import logging"}, {"module": "math", "alias": null, "line": 26, "statement": "import math"}, {"module": "re", "alias": null, "line": 27, "statement": "import re"}, {"module": "__future__", "alias": null, "line": 21, "statement": "from __future__ import annotations"}, {"module": "collections", "alias": null, "line": 28, "statement": "from collections import Counter"}, {"module": "collections.abc", "alias": null, "line": 29, "statement": "from collections.abc import Sequence"}, {"module": "capabilities.tools.firecrawl_tool", "alias": null, "line": 31, "statement": "from capabilities.tools.firecrawl_tool import FirecrawlResult"}, {"module": "shared.openai_interfaces.responses_interface", "alias": null, "line": 32, "statement": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface"}], "constants": [{"name": "_STOP_WORDS", "line": 39, "value": "{", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 23}, {"name": "json", "type": "import", "line": 24}, {"name": "logging", "type": "import", "line": 25}, {"name": "math", "type": "import", "line": 26}, {"name": "re", "type": "import", "line": 27}, {"name": "from __future__ import annotations", "type": "import", "line": 21}, {"name": "from collections import Counter", "type": "import", "line": 28}, {"name": "from collections.abc import Sequence", "type": "import", "line": 29}, {"name": "from capabilities.tools.firecrawl_tool import FirecrawlResult", "type": "import", "line": 31}, {"name": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface", "type": "import", "line": 32}, {"name": "_STOP_WORDS", "type": "constant", "line": 39}, {"name": "_tokenise", "type": "function", "line": 56}, {"name": "_relevance_score", "type": "function", "line": 62}, {"name": "SynthesisAgent", "type": "class", "line": 77}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 19}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 21, "line_end": 32}, {"name": "_tokenise Function", "description": "Function _tokenise implementation.", "line_start": 56, "line_end": 61}, {"name": "_relevance_score Function", "description": "Function _relevance_score implementation.", "line_start": 62, "line_end": 76}, {"name": "SynthesisAgent Class", "description": "Class SynthesisAgent definition and methods.", "line_start": 77, "line_end": 237}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 39, "line_end": 39}], "content_hash": "12507ede04842240462a4f0d1e462fea"}'
- path: .archive/accf/capabilities/documentation_bundle_agent.py
  line_count: 132
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "documentation_bundle_agent.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "RequirementsDoc", "line": 16, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a requirements document detailing project needs."}, {"name": "DesignDoc", "line": 22, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a design document outlining system architecture."}, {"name": "SpecsDoc", "line": 29, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a specifications document defining technical details."}, {"name": "TestPlanDoc", "line": 35, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a test plan document describing testing strategies."}, {"name": "DocsBundle", "line": 40, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates a collection of related documentation documents."}, {"name": "DocumentationBundleAgent", "line": 47, "inherits_from": [], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "_load_config", "line": 80, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "_load_config(self)"}, {"name": "generate_docs_bundle", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "mode", "type": "str", "default": "parallel"}], "is_async": true, "return_type": "DocsBundle", "signature": "async generate_docs_bundle(self, prompt: str, mode: str = parallel) -> DocsBundle"}, {"name": "_call_agent", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "doc_type", "type": "str"}, {"name": "prompt", "type": "str"}, {"name": "context", "type": "dict[str, Any]):"}], "is_async": true, "signature": "async _call_agent(self, doc_type: str, prompt: str, context: dict[str, Any]):)"}], "properties": [], "description": "Manages and coordinates operations on a bundle of documentation."}], "imports": [{"module": "asyncio", "alias": null, "line": 3, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 4, "statement": "import logging"}, {"module": "os", "alias": null, "line": 5, "statement": "import os"}, {"module": "yaml", "alias": null, "line": 8, "statement": "import yaml"}, {"module": "typing", "alias": null, "line": 6, "statement": "from typing import Any"}, {"module": "capabilities.documentation_agent", "alias": null, "line": 9, "statement": "from capabilities.documentation_agent import DocumentationAgent"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}], "constants": [{"name": "CONFIG_PATH", "line": 12, "value": "os.getenv(\"DOC_BUNDLE_CONFIG\", \"documentation_bundle_config.yaml\")", "type": ""}, {"name": "DEFAULT_MAX_PARALLEL", "line": 13, "value": "int(os.getenv(\"DOC_BUNDLE_MAX_PARALLEL\", \"4\"))", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 3}, {"name": "logging", "type": "import", "line": 4}, {"name": "os", "type": "import", "line": 5}, {"name": "yaml", "type": "import", "line": 8}, {"name": "from typing import Any", "type": "import", "line": 6}, {"name": "from capabilities.documentation_agent import DocumentationAgent", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "CONFIG_PATH", "type": "constant", "line": 12}, {"name": "DEFAULT_MAX_PARALLEL", "type": "constant", "line": 13}, {"name": "RequirementsDoc", "type": "class", "line": 16}, {"name": "DesignDoc", "type": "class", "line": 22}, {"name": "SpecsDoc", "type": "class", "line": 29}, {"name": "TestPlanDoc", "type": "class", "line": 35}, {"name": "DocsBundle", "type": "class", "line": 40}, {"name": "DocumentationBundleAgent", "type": "class", "line": 47}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 10}, {"name": "RequirementsDoc Class", "description": "Class RequirementsDoc definition and methods.", "line_start": 16, "line_end": 26}, {"name": "DesignDoc Class", "description": "Class DesignDoc definition and methods.", "line_start": 22, "line_end": 32}, {"name": "SpecsDoc Class", "description": "Class SpecsDoc definition and methods.", "line_start": 29, "line_end": 39}, {"name": "TestPlanDoc Class", "description": "Class TestPlanDoc definition and methods.", "line_start": 35, "line_end": 45}, {"name": "DocsBundle Class", "description": "Class DocsBundle definition and methods.", "line_start": 40, "line_end": 50}, {"name": "DocumentationBundleAgent Class", "description": "Class DocumentationBundleAgent definition and methods.", "line_start": 47, "line_end": 122}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 12, "line_end": 13}], "content_hash": "343e6053528a1930ec02ad2103b688fd"}'
- path: .archive/accf/capabilities/critic_agent.py
  line_count: 362
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "critic_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CriticAgent", "line": 17, "inherits_from": ["LLMBaseAgent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "_log_critic_api_call", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}, {"name": "prompt_length", "type": "int"}, {"name": "response_length", "type": "int"}, {"name": "artifact_type", "type": "str"}], "is_async": false, "description": "Log every critic API call with detailed information.", "signature": "_log_critic_api_call(self, model: str, prompt_length: int, response_length: int, artifact_type: str)"}, {"name": "_log_critic_api_response", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "dict"}, {"name": "response_length", "type": "int):"}], "is_async": false, "description": "Log every critic API response with detailed information.", "signature": "_log_critic_api_response(self, response: dict, response_length: int):)"}, {"name": "_log_parsed_result", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "result", "type": "dict):"}], "is_async": false, "description": "Log the parsed critic result with detailed information.", "signature": "_log_parsed_result(self, result: dict):)"}, {"name": "review_response", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}, {"name": "artifact_type", "type": "str | None", "default": "None"}, {"name": "original_prompt", "type": "str", "default": ""}, {"name": "context", "type": "str", "default": ""}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Review a response for correctness and major issues.\n\n        Args:\n            response: The response to review\n            artifact_type: Type of artifact being reviewed (code, doc, etc.)\n            original_prompt: The original user request\n            context: Additional context about the request\n\n        Returns:\n            dict: Review result with pass/fail status and feedback\n        ", "signature": "review_response(self, response: str, artifact_type: str | None = None, original_prompt: str = , context: str = ) -> dict[str, Any]"}, {"name": "_build_review_prompt", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "str"}, {"name": "artifact_type", "type": "str | None"}, {"name": "original_prompt", "type": "str"}, {"name": "context", "type": "str"}], "is_async": false, "return_type": "str", "description": "Build the review prompt based on artifact type.", "signature": "_build_review_prompt(self, response: str, artifact_type: str | None, original_prompt: str, context: str) -> str"}, {"name": "_parse_review_result", "line": 277, "parameters": [{"name": "self", "type": "self"}, {"name": "review_text", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Parse the review response into structured format.", "signature": "_parse_review_result(self, review_text: str) -> dict[str, Any]"}, {"name": "answer", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "\n        Run a single-pass critique on `prompt` and return a structured response.\n\n        This method satisfies the abstract requirement from LLMBaseAgent.\n        For actual critique functionality, use review_response() method.\n        ", "signature": "answer(self, prompt: str) -> dict"}], "properties": [{"name": "MODEL", "line": 24, "type": ""}, {"name": "ASSISTANT_NAME", "line": 25, "type": ""}, {"name": "MAX_RETRY_ATTEMPTS", "line": 26, "type": ""}], "description": "Represents an agent that evaluates actions or states, typically used in reinforcement learning to estimate value functions."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "agent_base.agent_base", "alias": null, "line": 14, "statement": "from agent_base.agent_base import LLMBaseAgent"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from agent_base.agent_base import LLMBaseAgent", "type": "import", "line": 14}, {"name": "CriticAgent", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "CriticAgent Class", "description": "Class CriticAgent definition and methods.", "line_start": 17, "line_end": 343}], "content_hash": "bf5a583e8890a7fabd54323de6c3e939"}'
- path: .archive/accf/capabilities/collaboration_agent.py
  line_count: 64
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "collaboration_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CollaborationAgent", "line": 25, "inherits_from": [], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "collaborate", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Handle a collaboration message and return a response (simulated for now).", "signature": "collaborate(self, message: dict[str, Any]) -> dict[str, Any]"}, {"name": "answer", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Handle a collaboration request by parsing the prompt and routing to collaborate.", "signature": "answer(self, prompt: str) -> dict"}, {"name": "get_project_overview", "line": 48, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict", "description": "Delegate to KnowledgeAgent for project overview.", "signature": "get_project_overview(self) -> dict"}, {"name": "get_recent_activity", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "limit", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "list", "description": "Delegate to KnowledgeAgent for recent activity.", "signature": "get_recent_activity(self, limit: int = 10 = 10) -> list"}, {"name": "find_entity", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "entity_name", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Delegate to KnowledgeAgent for entity search.", "signature": "find_entity(self, entity_name: str) -> dict"}, {"name": "explain_collection", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "collection_name", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Delegate to KnowledgeAgent for collection explanation.", "signature": "explain_collection(self, collection_name: str) -> dict"}, {"name": "answer_with_evidence", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Delegate to KnowledgeAgent for evidence-backed Q&A.", "signature": "answer_with_evidence(self, question: str) -> dict"}], "properties": [], "description": "Manages collaborative interactions and coordinates tasks among multiple agents."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}, {"module": "capabilities.knowledge_agent", "alias": null, "line": 22, "statement": "from capabilities.knowledge_agent import KnowledgeAgent"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "from capabilities.knowledge_agent import KnowledgeAgent", "type": "import", "line": 22}, {"name": "CollaborationAgent", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 22}, {"name": "CollaborationAgent Class", "description": "Class CollaborationAgent definition and methods.", "line_start": 25, "line_end": 67}], "content_hash": "e3dccd489ff5462a340a1c8734bc5d2e"}'
- path: .archive/accf/capabilities/documentation_agent.py
  line_count: 90
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "documentation_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "DocumentationAgent", "line": 28, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "doc_type", "type": "str", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, doc_type: str = None)"}, {"name": "generate", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "signature": "generate(self, prompt: str) -> dict"}, {"name": "answer", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Generate documentation for the given prompt using the LLM interface.", "signature": "answer(self, prompt: str) -> dict[str, Any]"}], "properties": [], "description": "Handles the generation and management of code documentation."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "os", "alias": null, "line": 20, "statement": "import os"}, {"module": "typing", "alias": null, "line": 21, "statement": "from typing import Any"}, {"module": "shared.openai_interfaces.responses_interface", "alias": null, "line": 23, "statement": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "os", "type": "import", "line": 20}, {"name": "from typing import Any", "type": "import", "line": 21}, {"name": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface", "type": "import", "line": 23}, {"name": "DocumentationAgent", "type": "class", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 23}, {"name": "DocumentationAgent Class", "description": "Class DocumentationAgent definition and methods.", "line_start": 28, "line_end": 82}], "content_hash": "9db7553afcf5d8f739ab092a9db7be05"}'
- path: .archive/accf/capabilities/feedback_agent.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "feedback_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "FeedbackAgent", "line": 24, "inherits_from": [], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "log_action", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "action", "type": "str"}, {"name": "outcome", "type": "str):"}], "is_async": false, "signature": "log_action(self, agent_id: str, action: str, outcome: str):)"}, {"name": "analyze", "line": 31, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list", "signature": "analyze(self) -> list"}, {"name": "answer", "line": 35, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Analyze feedback logs and return a summary or actionable insights.", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "Manages user feedback collection and processing through multiple methods."}], "imports": [{"module": "typing", "alias": null, "line": 19, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 19}, {"name": "FeedbackAgent", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 19}, {"name": "FeedbackAgent Class", "description": "Class FeedbackAgent definition and methods.", "line_start": 24, "line_end": 38}], "content_hash": "efcb676332e65fee20c0fd9cd79cf1ed"}'
- path: .archive/accf/capabilities/check_me_agent.py
  line_count: 154
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "check_me_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CheckMeAgent", "line": 10, "inherits_from": ["LLMBaseAgent):"], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "_get_or_create_assistant", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "_get_or_create_assistant(self)"}, {"name": "_session_expired", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "session", "type": "unknown"}], "is_async": false, "signature": "_session_expired(self, session)"}, {"name": "_get_or_create_session", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "unknown"}], "is_async": false, "signature": "_get_or_create_session(self, session_id)"}, {"name": "reset_session", "line": 81, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "unknown"}], "is_async": false, "signature": "reset_session(self, session_id)"}, {"name": "answer", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str, session_id: str = \"default\""}, {"name": "session_id", "type": "str = \"default\"", "default": "default"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Review the input for errors, omissions, or improvements using the OpenAI Assistants API.\n        Maintains session context per session_id.\n        Returns a dict with ''result'' (summary) and ''details'' (list of issues/suggestions).\n        ", "signature": "answer(self, prompt: str, session_id: str = \"default\", session_id: str = \"default\" = default) -> dict[str, Any]"}], "properties": [{"name": "session_store", "line": 17, "type": ""}, {"name": "SESSION_TIMEOUT", "line": 18, "type": ""}, {"name": "MODEL", "line": 19, "type": ""}, {"name": "ASSISTANT_NAME", "line": 20, "type": ""}, {"name": "_assistant_id", "line": 21, "type": ""}], "description": "Represents an agent that performs checks and validations with six associated methods."}], "imports": [{"module": "logging", "alias": null, "line": 3, "statement": "import logging"}, {"module": "os", "alias": null, "line": 4, "statement": "import os"}, {"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}, {"module": "agent_base.agent_base", "alias": null, "line": 7, "statement": "from agent_base.agent_base import LLMBaseAgent"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 3}, {"name": "os", "type": "import", "line": 4}, {"name": "from typing import Any", "type": "import", "line": 5}, {"name": "from agent_base.agent_base import LLMBaseAgent", "type": "import", "line": 7}, {"name": "CheckMeAgent", "type": "class", "line": 10}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 7}, {"name": "CheckMeAgent Class", "description": "Class CheckMeAgent definition and methods.", "line_start": 10, "line_end": 93}], "content_hash": "71b318f19e4075de656bb5b3005222af"}'
- path: .archive/accf/capabilities/research_agent.py
  line_count: 789
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "research_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ResearchAgent", "line": 66, "inherits_from": [], "methods": [{"name": "__init__", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str = \"OPENAI_API_KEY\"", "default": "OPENAI_API_KEY"}], "is_async": false, "return_type": "None", "signature": "__init__(self, api_key_env: str = \"OPENAI_API_KEY\" = OPENAI_API_KEY) -> None"}, {"name": "answer_question", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Static canned answers \u2013 unchanged for contract stability.", "signature": "answer_question(self, question: str) -> dict[str, Any]"}, {"name": "answer_question_using_llm", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Answer a question using the LLM only (no external context).", "signature": "answer_question_using_llm(self, question: str) -> dict[str, Any]"}, {"name": "_gather_external_research", "line": 124, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Best-effort Brave search + Firecrawl scrape (see Phase-2).", "signature": "_gather_external_research(self, question: str) -> dict[str, Any]"}, {"name": "answer_question_with_external_tools", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Intelligent multi-source research pipeline with sequential logic.\n\n        Order of operations:\n        1. Knowledge-graph retrieval.\n        2. Web search (Brave \u2192 Firecrawl) for context education.\n        3. Generate specialized queries based on web context.\n        4. Academic search (ArXiv) with intelligent queries *if relevant*.\n        5. Technical documentation search (Context7) with intelligent queries *if relevant*.\n        6. Synthesis and storage.\n        ", "signature": "answer_question_with_external_tools(self, question: str) -> dict[str, Any]"}, {"name": "_should_use_academic_research", "line": 295, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Very simple heuristic:\n\n        If the question contains any academic-style keywords, trigger ArXiv.\n        ", "signature": "_should_use_academic_research(self, question: str) -> bool"}, {"name": "_gather_academic_research", "line": 314, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "list[FirecrawlResult]", "signature": "_gather_academic_research(self, question: str) -> list[FirecrawlResult]"}, {"name": "_should_use_context7_docs", "line": 342, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Heuristic to decide if Context7 documentation search is warranted.", "signature": "_should_use_context7_docs(self, question: str) -> bool"}, {"name": "_extract_web_context", "line": 378, "parameters": [{"name": "self", "type": "self"}, {"name": "brave_results", "type": "list[BraveSearchResult]"}, {"name": "scraped", "type": "list[FirecrawlResult]"}], "is_async": false, "return_type": "str", "description": "Extract context from web search results to inform specialized queries.", "signature": "_extract_web_context(self, brave_results: list[BraveSearchResult], scraped: list[FirecrawlResult]) -> str"}, {"name": "_generate_arxiv_queries", "line": 400, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str, web_context: str"}, {"name": "web_context", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Generate ArXiv-specific queries based on question and web context.", "signature": "_generate_arxiv_queries(self, question: str, web_context: str, web_context: str) -> list[str]"}, {"name": "_generate_context7_queries", "line": 436, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str, web_context: str"}, {"name": "web_context", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Generate Context7-specific queries based on question and web context.", "signature": "_generate_context7_queries(self, question: str, web_context: str, web_context: str) -> list[str]"}, {"name": "_gather_academic_research_with_queries", "line": 516, "parameters": [{"name": "self", "type": "self"}, {"name": "queries", "type": "list[str]"}], "is_async": true, "return_type": "list[ArxivPaperResult]", "description": "Gather academic research using specific queries.", "signature": "async _gather_academic_research_with_queries(self, queries: list[str]) -> list[ArxivPaperResult]"}, {"name": "_gather_context7_docs_with_queries", "line": 543, "parameters": [{"name": "self", "type": "self"}, {"name": "queries", "type": "list[str]"}], "is_async": false, "return_type": "list[Context7Result]", "description": "Gather Context7 documentation using specific library queries.", "signature": "_gather_context7_docs_with_queries(self, queries: list[str]) -> list[Context7Result]"}, {"name": "_kg_lookup", "line": 590, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "list[FirecrawlResult] | None", "signature": "_kg_lookup(self, question: str) -> list[FirecrawlResult] | None"}, {"name": "_kg_upsert_all", "line": 608, "parameters": [{"name": "self", "type": "self"}, {"name": "pages", "type": "Sequence[FirecrawlResult]"}], "is_async": false, "return_type": "None", "signature": "_kg_upsert_all(self, pages: Sequence[FirecrawlResult]) -> None"}, {"name": "_transform_question_to_queries", "line": 631, "parameters": [{"name": "self", "type": "self"}, {"name": "question", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "\n        Deterministic heuristic that converts a question into multiple\n        search-engine-friendly queries (no extra LLM call).\n\n        Strategy (simplified clone of reference Stage-2):\n        \u2022 Lower-case, strip punctuation.\n        \u2022 Remove common stop-words.\n        \u2022 Create variations with / without quoted phrases.\n        ", "signature": "_transform_question_to_queries(self, question: str) -> list[str]"}, {"name": "_run_with_sem", "line": 662, "parameters": [{"name": "self", "type": "self"}, {"name": "coro", "type": "unknown"}], "is_async": true, "description": "\n        Helper to run an async callable under the shared semaphore (concurrency\n        guard).  Separate function used so we can `create_task` it easily.\n        ", "signature": "async _run_with_sem(self, coro, *args, **kwargs)"}, {"name": "_call_llm", "line": 674, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Wrapper around the OpenAI interface with resiliency.", "signature": "_call_llm(self, prompt: str) -> dict[str, Any]"}, {"name": "_store_research_entry", "line": 777, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "answer", "type": "str"}, {"name": "sources", "type": "Sequence[str]"}], "is_async": false, "return_type": "None", "description": "Persist a research interaction in memory (placeholder DB).", "signature": "_store_research_entry(self, prompt: str, answer: str, sources: Sequence[str]) -> None"}], "properties": [{"name": "_LLM_MAX_RETRIES", "line": 68, "type": ""}, {"name": "_LLM_TIMEOUT_SEC", "line": 69, "type": ""}, {"name": "_LLM_BACKOFF_BASE_SEC", "line": 70, "type": ""}, {"name": "_CONCURRENCY_LIMIT", "line": 71, "type": ""}, {"name": "_MAX_SEARCH_QUERIES", "line": 72, "type": ""}, {"name": "_MAX_RESULTS_PER_QUERY", "line": 73, "type": ""}, {"name": "_ARXIV_MAX_RESULTS", "line": 75, "type": ""}, {"name": "_MIN_KG_RESULTS", "line": 76, "type": ""}], "description": "Represents an agent that conducts research by managing tasks, analyzing data, and generating insights."}], "imports": [{"module": "asyncio", "alias": null, "line": 31, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 32, "statement": "import logging"}, {"module": "os", "alias": null, "line": 33, "statement": "import os"}, {"module": "random", "alias": null, "line": 34, "statement": "import random"}, {"module": "time", "alias": null, "line": 35, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 29, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 36, "statement": "from collections.abc import Sequence"}, {"module": "typing", "alias": null, "line": 37, "statement": "from typing import Any"}, {"module": "capabilities.neo4j_knowledge_graph", "alias": null, "line": 39, "statement": "from capabilities.neo4j_knowledge_graph import KGResult"}, {"module": "capabilities.neo4j_knowledge_graph", "alias": null, "line": 39, "statement": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph"}, {"module": "capabilities.synthesis_agent", "alias": null, "line": 43, "statement": "from capabilities.synthesis_agent import SynthesisAgent"}, {"module": "capabilities.tools.arxiv_tool", "alias": null, "line": 44, "statement": "from capabilities.tools.arxiv_tool import ArxivPaperResult"}, {"module": "capabilities.tools.arxiv_tool", "alias": null, "line": 44, "statement": "from capabilities.tools.arxiv_tool import ArxivTool"}, {"module": "capabilities.tools.arxiv_tool", "alias": null, "line": 44, "statement": "from capabilities.tools.arxiv_tool import ArxivUnavailableError"}, {"module": "capabilities.tools.brave_search_tool", "alias": null, "line": 49, "statement": "from capabilities.tools.brave_search_tool import BraveSearchResult"}, {"module": "capabilities.tools.brave_search_tool", "alias": null, "line": 49, "statement": "from capabilities.tools.brave_search_tool import BraveSearchTool"}, {"module": "capabilities.tools.brave_search_tool", "alias": null, "line": 49, "statement": "from capabilities.tools.brave_search_tool import BraveSearchUnavailableError"}, {"module": "capabilities.tools.context7_tool", "alias": null, "line": 54, "statement": "from capabilities.tools.context7_tool import Context7Result"}, {"module": "capabilities.tools.context7_tool", "alias": null, "line": 54, "statement": "from capabilities.tools.context7_tool import Context7Tool"}, {"module": "capabilities.tools.firecrawl_tool", "alias": null, "line": 58, "statement": "from capabilities.tools.firecrawl_tool import FirecrawlResult"}, {"module": "capabilities.tools.firecrawl_tool", "alias": null, "line": 58, "statement": "from capabilities.tools.firecrawl_tool import FirecrawlTool"}, {"module": "capabilities.tools.firecrawl_tool", "alias": null, "line": 58, "statement": "from capabilities.tools.firecrawl_tool import FirecrawlUnavailableError"}, {"module": "shared.openai_interfaces.responses_interface", "alias": null, "line": 63, "statement": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 31}, {"name": "logging", "type": "import", "line": 32}, {"name": "os", "type": "import", "line": 33}, {"name": "random", "type": "import", "line": 34}, {"name": "time", "type": "import", "line": 35}, {"name": "from __future__ import annotations", "type": "import", "line": 29}, {"name": "from collections.abc import Sequence", "type": "import", "line": 36}, {"name": "from typing import Any", "type": "import", "line": 37}, {"name": "from capabilities.neo4j_knowledge_graph import KGResult", "type": "import", "line": 39}, {"name": "from capabilities.neo4j_knowledge_graph import Neo4jKnowledgeGraph", "type": "import", "line": 39}, {"name": "from capabilities.synthesis_agent import SynthesisAgent", "type": "import", "line": 43}, {"name": "from capabilities.tools.arxiv_tool import ArxivPaperResult", "type": "import", "line": 44}, {"name": "from capabilities.tools.arxiv_tool import ArxivTool", "type": "import", "line": 44}, {"name": "from capabilities.tools.arxiv_tool import ArxivUnavailableError", "type": "import", "line": 44}, {"name": "from capabilities.tools.brave_search_tool import BraveSearchResult", "type": "import", "line": 49}, {"name": "from capabilities.tools.brave_search_tool import BraveSearchTool", "type": "import", "line": 49}, {"name": "from capabilities.tools.brave_search_tool import BraveSearchUnavailableError", "type": "import", "line": 49}, {"name": "from capabilities.tools.context7_tool import Context7Result", "type": "import", "line": 54}, {"name": "from capabilities.tools.context7_tool import Context7Tool", "type": "import", "line": 54}, {"name": "from capabilities.tools.firecrawl_tool import FirecrawlResult", "type": "import", "line": 58}, {"name": "from capabilities.tools.firecrawl_tool import FirecrawlTool", "type": "import", "line": 58}, {"name": "from capabilities.tools.firecrawl_tool import FirecrawlUnavailableError", "type": "import", "line": 58}, {"name": "from shared.openai_interfaces.responses_interface import OpenAIResponsesInterface", "type": "import", "line": 63}, {"name": "ResearchAgent", "type": "class", "line": 66}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 27}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 29, "line_end": 63}, {"name": "ResearchAgent Class", "description": "Class ResearchAgent definition and methods.", "line_start": 66, "line_end": 780}], "content_hash": "b9c90a2e1885361bf2d777c412af62e7"}'
- path: .archive/accf/capabilities/memory_agent.py
  line_count: 93
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "memory_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryAgent", "line": 22, "inherits_from": ["LLMBaseAgent):"], "methods": [{"name": "__init__", "line": 23, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key_env", "type": "str", "default": "OPENAI_API_KEY"}, {"name": "config", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key_env: str = OPENAI_API_KEY, config: dict = None)"}, {"name": "store", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}, {"name": "value", "type": "unknown"}], "is_async": false, "description": "Store a value in persistent memory.", "signature": "store(self, key: str, value)"}, {"name": "retrieve", "line": 32, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str):"}], "is_async": false, "description": "Retrieve a value from persistent memory.", "signature": "retrieve(self, key: str):)"}, {"name": "answer", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}], "is_async": false, "return_type": "dict", "description": "Answer a memory-related question using LLM and stored memory.", "signature": "answer(self, prompt: str) -> dict"}], "properties": [], "description": "Manages memory operations and interactions within an agent system."}], "imports": [{"module": "agent_base.agent_base", "alias": null, "line": 19, "statement": "from agent_base.agent_base import LLMBaseAgent"}], "constants": []}, "key_elements": [{"name": "from agent_base.agent_base import LLMBaseAgent", "type": "import", "line": 19}, {"name": "MemoryAgent", "type": "class", "line": 22}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 19}, {"name": "MemoryAgent Class", "description": "Class MemoryAgent definition and methods.", "line_start": 22, "line_end": 41}], "content_hash": "12918341d8f2ea0ba01a8d4a26c9abbc"}'
- path: .archive/accf/registry/__init__.py
  line_count: 0
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d41d8cd98f00b204e9800998ecf8427e"}'
- path: .archive/accf/registry/registry.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "registry.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "AgentRegistry", "line": 23, "inherits_from": [], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the agent registry.", "signature": "__init__(self)"}, {"name": "register", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "capabilities", "type": "list[str]"}, {"name": "metadata", "type": "dict[str, Any]", "default": "None"}], "is_async": false, "description": "Register a new agent with its capabilities.", "signature": "register(self, agent_id: str, capabilities: list[str], metadata: dict[str, Any] = None)"}, {"name": "lookup", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Lookup an agent by ID.", "signature": "lookup(self, agent_id: str) -> dict[str, Any]"}, {"name": "list_agents", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "List all registered agents and their capabilities.", "signature": "list_agents(self) -> dict[str, dict[str, Any]]"}], "properties": [], "description": "Manages the registration and retrieval of agent instances."}], "imports": [{"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 20, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 19}, {"name": "from typing import Any", "type": "import", "line": 20}, {"name": "AgentRegistry", "type": "class", "line": 23}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 19, "line_end": 20}, {"name": "AgentRegistry Class", "description": "Class AgentRegistry definition and methods.", "line_start": 23, "line_end": 52}], "content_hash": "f3139686e6f7475f4a69de9e2b955fbf"}'
- path: .archive/accf/shared/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "f938f9b75fec98fd3378557731db35f6"}'
- path: .archive/accf/accf_agents/core/neo4j_vector.py
  line_count: 203
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "neo4j_vector.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "Neo4jVectorSearch", "line": 16, "inherits_from": [], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "uri", "type": "str"}, {"name": "user", "type": "str"}, {"name": "password", "type": "str"}, {"name": "database", "type": "str", "default": "neo4j"}], "is_async": false, "description": "Initialize Neo4j vector search.", "signature": "__init__(self, uri: str, user: str, password: str, database: str = neo4j)"}, {"name": "create_vector_index", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "index_name", "type": "str", "default": "embeddings"}, {"name": "label", "type": "str", "default": "Text"}, {"name": "property", "type": "str", "default": "embedding"}, {"name": "dimensions", "type": "int", "default": "1536"}, {"name": "similarity", "type": "str", "default": "cosine"}], "is_async": true, "description": "Create a vector index for embeddings.", "signature": "async create_vector_index(self, index_name: str = embeddings, label: str = Text, property: str = embedding, dimensions: int = 1536, similarity: str = cosine)"}, {"name": "vector_search", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "top_k", "type": "int", "default": "5"}, {"name": "index_name", "type": "str", "default": "embeddings"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Perform vector search using embeddings.", "signature": "async vector_search(self, query_embedding: list[float], top_k: int = 5, index_name: str = embeddings) -> list[dict[str, Any]]"}, {"name": "store_embedding", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}, {"name": "embedding", "type": "list[float]"}, {"name": "node_id", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Store text with its embedding in Neo4j.", "signature": "async store_embedding(self, text: str, embedding: list[float], node_id: str | None = None) -> bool"}, {"name": "batch_store_embeddings", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str]"}, {"name": "embeddings", "type": "list[list[float]]"}], "is_async": true, "return_type": "bool", "description": "Store multiple texts with their embeddings in batch.", "signature": "async batch_store_embeddings(self, texts: list[str], embeddings: list[list[float]]) -> bool"}, {"name": "delete_embedding", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "node_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete an embedding node by ID.", "signature": "async delete_embedding(self, node_id: str) -> bool"}, {"name": "get_embedding_stats", "line": 179, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get statistics about stored embeddings.", "signature": "async get_embedding_stats(self) -> dict[str, Any]"}, {"name": "close", "line": 202, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Close the Neo4j driver connection.", "signature": "async close(self)"}], "properties": [], "description": "Provides methods to perform vector-based search operations using Neo4j graph database."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "neo4j", "alias": null, "line": 13, "statement": "from neo4j import AsyncGraphDatabase"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from neo4j import AsyncGraphDatabase", "type": "import", "line": 13}, {"name": "Neo4jVectorSearch", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "Neo4jVectorSearch Class", "description": "Class Neo4jVectorSearch definition and methods.", "line_start": 16, "line_end": 205}], "content_hash": "3b8cff0feaa0fe2266a216f1e0d3038c"}'
- path: .archive/accf/accf_agents/core/settings.py
  line_count: 57
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "settings.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_settings", "line": 57, "parameters": [], "is_async": false, "return_type": "Settings", "description": "Retrieves the current application settings.", "signature": "get_settings() -> Settings"}], "classes": [{"name": "Settings", "line": 14, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents configuration settings for the application."}], "imports": [{"module": "pydantic_settings", "alias": null, "line": 11, "statement": "from pydantic_settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from pydantic_settings import BaseSettings", "type": "import", "line": 11}, {"name": "Settings", "type": "class", "line": 14}, {"name": "get_settings", "type": "function", "line": 57}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 11}, {"name": "get_settings Function", "description": "Function get_settings implementation.", "line_start": 57, "line_end": 62}, {"name": "Settings Class", "description": "Class Settings definition and methods.", "line_start": 14, "line_end": 24}], "content_hash": "820518dbf6aa6dadc103b3366a695e33"}'
- path: .archive/accf/accf_agents/core/orchestrator.py
  line_count: 164
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "orchestrator.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "AgentOrchestrator", "line": 19, "inherits_from": [], "methods": [{"name": "__init__", "line": 22, "parameters": [{"name": "self", "type": "self"}, {"name": "settings", "type": "Settings):"}], "is_async": false, "signature": "__init__(self, settings: Settings):)"}, {"name": "initialize", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the orchestrator and all agents.", "signature": "async initialize(self) -> None"}, {"name": "_discover_agents", "line": 42, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Discover available agents from the accf_agents.agents module.", "signature": "async _discover_agents(self) -> None"}, {"name": "_initialize_agents", "line": 68, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize all discovered agents.", "signature": "async _initialize_agents(self) -> None"}, {"name": "execute_workflow", "line": 77, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a workflow task using the appropriate agent.", "signature": "async execute_workflow(self, task: Task) -> Result"}, {"name": "_find_agent_for_task", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "BaseAgent | None", "description": "Find the appropriate agent for a given task type.", "signature": "_find_agent_for_task(self, task_type: str) -> BaseAgent | None"}, {"name": "execute_parallel_workflow", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "tasks", "type": "list[Task]"}], "is_async": true, "return_type": "list[Result]", "description": "Execute multiple tasks in parallel.", "signature": "async execute_parallel_workflow(self, tasks: list[Task]) -> list[Result]"}, {"name": "get_agent_status", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get status information for all agents.", "signature": "get_agent_status(self) -> dict[str, Any]"}, {"name": "shutdown", "line": 162, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the orchestrator and all agents.", "signature": "async shutdown(self) -> None"}], "properties": [], "description": "Manages and coordinates the interactions and workflows of multiple agents within a system."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "agents.base", "alias": null, "line": 15, "statement": "from agents.base import BaseAgent"}, {"module": "agents.base", "alias": null, "line": 15, "statement": "from agents.base import Result"}, {"module": "agents.base", "alias": null, "line": 15, "statement": "from agents.base import Task"}, {"module": "settings", "alias": null, "line": 16, "statement": "from settings import Settings"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from agents.base import BaseAgent", "type": "import", "line": 15}, {"name": "from agents.base import Result", "type": "import", "line": 15}, {"name": "from agents.base import Task", "type": "import", "line": 15}, {"name": "from settings import Settings", "type": "import", "line": 16}, {"name": "AgentOrchestrator", "type": "class", "line": 19}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "AgentOrchestrator Class", "description": "Class AgentOrchestrator definition and methods.", "line_start": 19, "line_end": 165}], "content_hash": "fdb7aec58d957851ed521303d2b76665"}'
- path: .archive/accf/accf_agents/utils/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "from logging import setup_logging"}, {"module": "security", "alias": null, "line": 10, "statement": "from security import SecretsManager"}, {"module": "validation", "alias": null, "line": 11, "statement": "from validation import validate_result"}, {"module": "validation", "alias": null, "line": 11, "statement": "from validation import validate_task"}], "constants": []}, "key_elements": [{"name": "from logging import setup_logging", "type": "import", "line": 9}, {"name": "from security import SecretsManager", "type": "import", "line": 10}, {"name": "from validation import validate_result", "type": "import", "line": 11}, {"name": "from validation import validate_task", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "e0549b42b605cc8d6c70c7a2032ae56f"}'
- path: .archive/accf/accf_agents/utils/logging.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 15, "parameters": [{"name": "settings", "type": "Settings, level: str | None = None"}, {"name": "level", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Configures the logging system based on provided settings and optional log level.", "signature": "setup_logging(settings: Settings, level: str | None = None, level: str | None = None = None) -> None"}, {"name": "get_logger", "line": 47, "parameters": [{"name": "name", "type": "str"}], "is_async": false, "return_type": "logging.Logger", "description": "Retrieves a logger instance with the specified name.", "signature": "get_logger(name: str) -> logging.Logger"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "sys", "alias": null, "line": 10, "statement": "import sys"}, {"module": "core.settings", "alias": null, "line": 12, "statement": "from core.settings import Settings"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "sys", "type": "import", "line": 10}, {"name": "from core.settings import Settings", "type": "import", "line": 12}, {"name": "setup_logging", "type": "function", "line": 15}, {"name": "get_logger", "type": "function", "line": 47}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 15, "line_end": 46}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 47, "line_end": 52}], "content_hash": "77b87b91ed824c79d27115cb3c260bc8"}'
- path: .archive/accf/accf_agents/utils/security.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "security.py", "description": "Python module with 2 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "validate_api_key", "line": 64, "parameters": [{"name": "api_key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the provided API key is valid and authorized.", "signature": "validate_api_key(api_key: str) -> bool"}, {"name": "sanitize_log_message", "line": 77, "parameters": [{"name": "message", "type": "str"}], "is_async": false, "return_type": "str", "description": "Removes sensitive information from log messages to ensure security.", "signature": "sanitize_log_message(message: str) -> str"}], "classes": [{"name": "SecretsManager", "line": 17, "inherits_from": [], "methods": [{"name": "__init__", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "settings", "type": "Settings):"}], "is_async": false, "signature": "__init__(self, settings: Settings):)"}, {"name": "get_secret", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str"}, {"name": "default", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "str | None", "description": "Get a secret value from environment or AWS Secrets Manager.", "signature": "get_secret(self, secret_name: str, default: str | None = None) -> str | None"}, {"name": "set_secret", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str, value: str"}, {"name": "value", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set a secret value in the cache.", "signature": "set_secret(self, secret_name: str, value: str, value: str) -> None"}, {"name": "clear_cache", "line": 59, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear the secrets cache.", "signature": "clear_cache(self) -> None"}], "properties": [], "description": "Manages storage, retrieval, and rotation of sensitive secrets securely."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "core.settings", "alias": null, "line": 12, "statement": "from core.settings import Settings"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "from core.settings import Settings", "type": "import", "line": 12}, {"name": "SecretsManager", "type": "class", "line": 17}, {"name": "validate_api_key", "type": "function", "line": 64}, {"name": "sanitize_log_message", "type": "function", "line": 77}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "validate_api_key Function", "description": "Function validate_api_key implementation.", "line_start": 64, "line_end": 76}, {"name": "sanitize_log_message Function", "description": "Function sanitize_log_message implementation.", "line_start": 77, "line_end": 82}, {"name": "SecretsManager Class", "description": "Class SecretsManager definition and methods.", "line_start": 17, "line_end": 62}], "content_hash": "6dace4a414ae44a9bc9a8103ed38bb17"}'
- path: .archive/accf/accf_agents/utils/validation.py
  line_count: 78
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "validate_task", "line": 14, "parameters": [{"name": "task", "type": "Task"}], "is_async": false, "return_type": "list[str]", "description": "Checks the validity of a Task object and returns a list of error messages if any.", "signature": "validate_task(task: Task) -> list[str]"}, {"name": "validate_result", "line": 36, "parameters": [{"name": "result", "type": "Result"}], "is_async": false, "return_type": "list[str]", "description": "Checks the validity of a Result object and returns a list of error messages if any.", "signature": "validate_result(result: Result) -> list[str]"}, {"name": "validate_parameters", "line": 55, "parameters": [{"name": "parameters", "type": "dict[str, Any]"}, {"name": "required_keys", "type": "list[str]"}], "is_async": false, "return_type": "list[str]", "description": "Verifies that required keys are present in the parameters dictionary and returns a list of missing keys or errors.", "signature": "validate_parameters(parameters: dict[str, Any], required_keys: list[str]) -> list[str]"}, {"name": "sanitize_parameters", "line": 70, "parameters": [{"name": "parameters", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Cleans and normalizes the parameters dictionary to ensure safe and consistent data.", "signature": "sanitize_parameters(parameters: dict[str, Any]) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "agents", "alias": null, "line": 11, "statement": "from agents import Result"}, {"module": "agents", "alias": null, "line": 11, "statement": "from agents import Task"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from agents import Result", "type": "import", "line": 11}, {"name": "from agents import Task", "type": "import", "line": 11}, {"name": "validate_task", "type": "function", "line": 14}, {"name": "validate_result", "type": "function", "line": 36}, {"name": "validate_parameters", "type": "function", "line": 55}, {"name": "sanitize_parameters", "type": "function", "line": 70}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "validate_task Function", "description": "Function validate_task implementation.", "line_start": 14, "line_end": 35}, {"name": "validate_result Function", "description": "Function validate_result implementation.", "line_start": 36, "line_end": 54}, {"name": "validate_parameters Function", "description": "Function validate_parameters implementation.", "line_start": 55, "line_end": 69}, {"name": "sanitize_parameters Function", "description": "Function sanitize_parameters implementation.", "line_start": 70, "line_end": 75}], "content_hash": "116c67d64e7fb9d5fdcf1e4f17e8098f"}'
- path: .archive/accf/accf_agents/api/__init__.py
  line_count: 9
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "app", "alias": null, "line": 9, "statement": "from app import create_app"}, {"module": "app", "alias": null, "line": 9, "statement": "from app import get_app"}], "constants": []}, "key_elements": [{"name": "from app import create_app", "type": "import", "line": 9}, {"name": "from app import get_app", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f904fb5aa1315ec7e4da52921ca70821"}'
- path: .archive/accf/accf_agents/api/app.py
  line_count: 90
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "app.py", "description": "Python module with 4 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "lifespan", "line": 25, "parameters": [{"name": "app", "type": "FastAPI):"}], "is_async": true, "description": "Manages the startup and shutdown lifecycle events of the FastAPI application.", "signature": "async lifespan(app: FastAPI):)"}, {"name": "create_app", "line": 50, "parameters": [], "is_async": false, "return_type": "FastAPI", "description": "Initializes and configures a new FastAPI application instance.", "signature": "create_app() -> FastAPI"}, {"name": "get_app", "line": 79, "parameters": [], "is_async": false, "return_type": "FastAPI", "description": "Retrieves the current FastAPI application instance.", "signature": "get_app() -> FastAPI"}, {"name": "get_orchestrator", "line": 84, "parameters": [], "is_async": false, "return_type": "AgentOrchestrator", "description": "Provides an instance of the AgentOrchestrator for managing agents.", "signature": "get_orchestrator() -> AgentOrchestrator"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "contextlib", "alias": null, "line": 11, "statement": "from contextlib import asynccontextmanager"}, {"module": "fastapi", "alias": null, "line": 13, "statement": "from fastapi import FastAPI"}, {"module": "fastapi", "alias": null, "line": 13, "statement": "from fastapi import HTTPException"}, {"module": "fastapi.middleware.cors", "alias": null, "line": 14, "statement": "from fastapi.middleware.cors import CORSMiddleware"}, {"module": "core.orchestrator", "alias": null, "line": 16, "statement": "from core.orchestrator import AgentOrchestrator"}, {"module": "core.settings", "alias": null, "line": 17, "statement": "from core.settings import get_settings"}, {"module": "utils.logging", "alias": null, "line": 18, "statement": "from utils.logging import setup_logging"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 11}, {"name": "from fastapi import FastAPI", "type": "import", "line": 13}, {"name": "from fastapi import HTTPException", "type": "import", "line": 13}, {"name": "from fastapi.middleware.cors import CORSMiddleware", "type": "import", "line": 14}, {"name": "from core.orchestrator import AgentOrchestrator", "type": "import", "line": 16}, {"name": "from core.settings import get_settings", "type": "import", "line": 17}, {"name": "from utils.logging import setup_logging", "type": "import", "line": 18}, {"name": "lifespan", "type": "function", "line": 25}, {"name": "create_app", "type": "function", "line": 50}, {"name": "get_app", "type": "function", "line": 79}, {"name": "get_orchestrator", "type": "function", "line": 84}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "lifespan Function", "description": "Function lifespan implementation.", "line_start": 25, "line_end": 49}, {"name": "create_app Function", "description": "Function create_app implementation.", "line_start": 50, "line_end": 78}, {"name": "get_app Function", "description": "Function get_app implementation.", "line_start": 79, "line_end": 83}, {"name": "get_orchestrator Function", "description": "Function get_orchestrator implementation.", "line_start": 84, "line_end": 89}], "content_hash": "488c159127ae76b03fcc3823f71095d0"}'
- path: .archive/accf/accf_agents/agents/__init__.py
  line_count: 68
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "AgentRegistry", "line": 22, "inherits_from": [], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "register", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_type", "type": "str, agent_class: type"}, {"name": "agent_class", "type": "type"}], "is_async": false, "return_type": "None", "description": "Register an agent class.", "signature": "register(self, agent_type: str, agent_class: type, agent_class: type) -> None"}, {"name": "create_agent", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_type", "type": "str, name: str, settings: Any"}, {"name": "name", "type": "str, settings: Any"}, {"name": "settings", "type": "Any"}], "is_async": false, "return_type": "BaseAgent", "description": "Create an agent instance.", "signature": "create_agent(self, agent_type: str, name: str, settings: Any, name: str, settings: Any, settings: Any) -> BaseAgent"}, {"name": "get_agent", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "BaseAgent | None", "description": "Get an agent by name.", "signature": "get_agent(self, name: str) -> BaseAgent | None"}, {"name": "list_agents", "line": 47, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List all registered agent names.", "signature": "list_agents(self) -> list[str]"}, {"name": "list_agent_types", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List all registered agent types.", "signature": "list_agent_types(self) -> list[str]"}], "properties": [], "description": "Manages the registration and retrieval of agent instances."}], "imports": [{"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import BaseAgent"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Result"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Task"}, {"module": "collaboration_agent", "alias": null, "line": 14, "statement": "from collaboration_agent import CollaborationAgent"}, {"module": "consult_agent", "alias": null, "line": 17, "statement": "from consult_agent import ConsultAgent"}, {"module": "knowledge_agent", "alias": null, "line": 18, "statement": "from knowledge_agent import KnowledgeAgent"}, {"module": "memory_agent", "alias": null, "line": 19, "statement": "from memory_agent import MemoryAgent"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import List", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from base import BaseAgent", "type": "import", "line": 13}, {"name": "from base import Result", "type": "import", "line": 13}, {"name": "from base import Task", "type": "import", "line": 13}, {"name": "from collaboration_agent import CollaborationAgent", "type": "import", "line": 14}, {"name": "from consult_agent import ConsultAgent", "type": "import", "line": 17}, {"name": "from knowledge_agent import KnowledgeAgent", "type": "import", "line": 18}, {"name": "from memory_agent import MemoryAgent", "type": "import", "line": 19}, {"name": "AgentRegistry", "type": "class", "line": 22}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 19}, {"name": "AgentRegistry Class", "description": "Class AgentRegistry definition and methods.", "line_start": 22, "line_end": 54}], "content_hash": "63ce3084005b473647ab9829e29c1e31"}'
- path: .archive/accf/accf_agents/agents/consult_agent.py
  line_count: 575
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "consult_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ConsultAgent", "line": 17, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "settings", "type": "Any):"}], "is_async": false, "signature": "__init__(self, name: str, settings: Any):)"}, {"name": "can_handle", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if this agent can handle the given task type.", "signature": "can_handle(self, task_type: str) -> bool"}, {"name": "get_capabilities", "line": 41, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of task types this agent can handle.", "signature": "get_capabilities(self) -> list[str]"}, {"name": "execute", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a consult task.", "signature": "async execute(self, task: Task) -> Result"}, {"name": "_execute_consult", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "session_id", "type": "str", "default": "default"}, {"name": "file_paths", "type": "list[str]", "default": "None"}, {"name": "artifact_type", "type": "str", "default": "None"}, {"name": "iterate", "type": "int", "default": "None"}, {"name": "critic_enabled", "type": "bool", "default": "False"}, {"name": "model", "type": "str", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Execute the core consult logic.", "signature": "async _execute_consult(self, prompt: str, session_id: str = default, file_paths: list[str] = None, artifact_type: str = None, iterate: int = None, critic_enabled: bool = False, model: str = None) -> dict[str, Any]"}, {"name": "_build_enhanced_prompt", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "artifact_type", "type": "str", "default": "None"}, {"name": "file_paths", "type": "list[str]", "default": "None"}], "is_async": false, "return_type": "str", "description": "Build an enhanced prompt with artifact-specific guidance.", "signature": "_build_enhanced_prompt(self, prompt: str, artifact_type: str = None, file_paths: list[str] = None) -> str"}, {"name": "_get_artifact_guidance", "line": 149, "parameters": [{"name": "self", "type": "self"}, {"name": "artifact_type", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Get artifact-specific guidance for prompt generation.\n\n        Args:\n            artifact_type: The type of artifact being generated\n\n        Returns:\n            str: Artifact-specific guidance text\n        ", "signature": "_get_artifact_guidance(self, artifact_type: str) -> str"}, {"name": "_get_or_create_session", "line": 542, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get or create a session for the given session ID.", "signature": "_get_or_create_session(self, session_id: str) -> dict[str, Any]"}, {"name": "_session_expired", "line": 557, "parameters": [{"name": "self", "type": "self"}, {"name": "session", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Check if a session has expired.", "signature": "_session_expired(self, session: dict[str, Any]) -> bool"}, {"name": "reset_session", "line": 561, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "str"}], "is_async": false, "return_type": "None", "description": "Reset a session.", "signature": "reset_session(self, session_id: str) -> None"}, {"name": "get_session_info", "line": 567, "parameters": [{"name": "self", "type": "self"}, {"name": "session_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Get information about a session.", "signature": "get_session_info(self, session_id: str) -> dict[str, Any] | None"}], "properties": [], "description": "Represents an agent responsible for managing consultations, including scheduling, communication, and follow-up processes."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import BaseAgent"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import Result"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import Task"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from base import BaseAgent", "type": "import", "line": 14}, {"name": "from base import Result", "type": "import", "line": 14}, {"name": "from base import Task", "type": "import", "line": 14}, {"name": "ConsultAgent", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "ConsultAgent Class", "description": "Class ConsultAgent definition and methods.", "line_start": 17, "line_end": 570}], "content_hash": "b32c2d1430b449b1ca43a117645e785d"}'
- path: .archive/accf/accf_agents/agents/base.py
  line_count: 66
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "Task", "line": 17, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a unit of work or activity to be performed."}, {"name": "Result", "line": 27, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the outcome or output of a completed task."}, {"name": "BaseAgent", "line": 37, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "settings", "type": "Any):"}], "is_async": false, "signature": "__init__(self, name: str, settings: Any):)"}, {"name": "execute", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a task and return a result.", "signature": "async execute(self, task: Task) -> Result"}, {"name": "can_handle", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if this agent can handle the given task type.", "signature": "can_handle(self, task_type: str) -> bool"}, {"name": "initialize", "line": 56, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the agent (called once before first use).", "signature": "async initialize(self) -> None"}, {"name": "_setup", "line": 62, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Internal setup method - override in subclasses if needed.", "signature": "async _setup(self) -> None"}, {"name": "get_capabilities", "line": 66, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of task types this agent can handle.", "signature": "get_capabilities(self) -> list[str]"}], "properties": [], "description": "Defines the foundational behavior and interface for an agent with core functionalities."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 14}, {"name": "Task", "type": "class", "line": 17}, {"name": "Result", "type": "class", "line": 27}, {"name": "BaseAgent", "type": "class", "line": 37}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "Task Class", "description": "Class Task definition and methods.", "line_start": 17, "line_end": 27}, {"name": "Result Class", "description": "Class Result definition and methods.", "line_start": 27, "line_end": 37}, {"name": "BaseAgent Class", "description": "Class BaseAgent definition and methods.", "line_start": 37, "line_end": 69}], "content_hash": "cfe67219aa3580c9b36385beeae6700c"}'
- path: .archive/accf/accf_agents/agents/knowledge_agent.py
  line_count: 157
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "knowledge_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "KnowledgeAgent", "line": 16, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "settings", "type": "Any):"}], "is_async": false, "signature": "__init__(self, name: str, settings: Any):)"}, {"name": "can_handle", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if this agent can handle the given task type.", "signature": "can_handle(self, task_type: str) -> bool"}, {"name": "get_capabilities", "line": 40, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of task types this agent can handle.", "signature": "get_capabilities(self) -> list[str]"}, {"name": "execute", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a knowledge task.", "signature": "async execute(self, task: Task) -> Result"}, {"name": "_search_knowledge", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Search the knowledge base.", "signature": "async _search_knowledge(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_store_knowledge", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Store knowledge in the knowledge base.", "signature": "async _store_knowledge(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_retrieve_knowledge", "line": 128, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Retrieve specific knowledge by ID.", "signature": "async _retrieve_knowledge(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_manage_knowledge", "line": 143, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Manage knowledge base operations.", "signature": "async _manage_knowledge(self, parameters: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Manages knowledge acquisition, processing, and retrieval through various methods."}], "imports": [{"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import BaseAgent"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Result"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Task"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from base import BaseAgent", "type": "import", "line": 13}, {"name": "from base import Result", "type": "import", "line": 13}, {"name": "from base import Task", "type": "import", "line": 13}, {"name": "KnowledgeAgent", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "KnowledgeAgent Class", "description": "Class KnowledgeAgent definition and methods.", "line_start": 16, "line_end": 146}], "content_hash": "5673f774de74c6a526b7cfe4379511b2"}'
- path: .archive/accf/accf_agents/agents/collaboration_agent.py
  line_count: 272
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "collaboration_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "CollaborationAgent", "line": 16, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "settings", "type": "Any):"}], "is_async": false, "signature": "__init__(self, name: str, settings: Any):)"}, {"name": "can_handle", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if this agent can handle the given task type.", "signature": "can_handle(self, task_type: str) -> bool"}, {"name": "get_capabilities", "line": 45, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of task types this agent can handle.", "signature": "get_capabilities(self) -> list[str]"}, {"name": "execute", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a collaboration task.", "signature": "async execute(self, task: Task) -> Result"}, {"name": "_collaborate", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Handle a collaboration request.", "signature": "async _collaborate(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_handle_message", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Handle a collaboration message.", "signature": "async _handle_message(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_get_project_overview", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get project overview information.", "signature": "async _get_project_overview(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_get_recent_activity", "line": 170, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get recent collaboration activity.", "signature": "async _get_recent_activity(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_find_entity", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Find entity information.", "signature": "async _find_entity(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_explain_collection", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Explain a collection.", "signature": "async _explain_collection(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_answer_with_evidence", "line": 216, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Answer question with evidence.", "signature": "async _answer_with_evidence(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_add_collaborator", "line": 232, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Add a collaborator to the collaboration network.", "signature": "async _add_collaborator(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_remove_collaborator", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Remove a collaborator from the collaboration network.", "signature": "async _remove_collaborator(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_list_collaborators", "line": 268, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "List all collaborators.", "signature": "async _list_collaborators(self, parameters: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Manages collaborative interactions and coordinates tasks among multiple agents."}], "imports": [{"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import BaseAgent"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Result"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Task"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from base import BaseAgent", "type": "import", "line": 13}, {"name": "from base import Result", "type": "import", "line": 13}, {"name": "from base import Task", "type": "import", "line": 13}, {"name": "CollaborationAgent", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "CollaborationAgent Class", "description": "Class CollaborationAgent definition and methods.", "line_start": 16, "line_end": 271}], "content_hash": "da03be468df230dd6abb47ef6fc9b3c8"}'
- path: .archive/accf/accf_agents/agents/memory_agent.py
  line_count: 200
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "memory_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryAgent", "line": 16, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "settings", "type": "Any):"}], "is_async": false, "signature": "__init__(self, name: str, settings: Any):)"}, {"name": "can_handle", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "task_type", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if this agent can handle the given task type.", "signature": "can_handle(self, task_type: str) -> bool"}, {"name": "get_capabilities", "line": 39, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of task types this agent can handle.", "signature": "get_capabilities(self) -> list[str]"}, {"name": "execute", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "Task"}], "is_async": true, "return_type": "Result", "description": "Execute a memory task.", "signature": "async execute(self, task: Task) -> Result"}, {"name": "_store_memory", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Store a value in persistent memory.", "signature": "async _store_memory(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_retrieve_memory", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Retrieve a value from persistent memory.", "signature": "async _retrieve_memory(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_answer_with_memory", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Answer a question using LLM and stored memory context.", "signature": "async _answer_with_memory(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_clear_memory", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Clear memory - either specific key or all memory.", "signature": "async _clear_memory(self, parameters: dict[str, Any]) -> dict[str, Any]"}, {"name": "_list_memory", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "List all memory keys and optionally their values.", "signature": "async _list_memory(self, parameters: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Manages memory operations and interactions within an agent system."}], "imports": [{"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import BaseAgent"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Result"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import Task"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from base import BaseAgent", "type": "import", "line": 13}, {"name": "from base import Result", "type": "import", "line": 13}, {"name": "from base import Task", "type": "import", "line": 13}, {"name": "MemoryAgent", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "MemoryAgent Class", "description": "Class MemoryAgent definition and methods.", "line_start": 16, "line_end": 190}], "content_hash": "e845c0bab7cf0f7f226ff78f6a9c1946"}'
- path: .archive/accf/accf_agents/api/endpoints/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "c7938bcb5edb15b3651b22b908bfd3a8"}'
- path: .archive/accf/accf_agents/api/endpoints/agents.py
  line_count: 148
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "agents.py", "description": "Python module with 5 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "list_agents", "line": 20, "parameters": [{"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Retrieve a list of all available agents managed by the orchestrator.", "signature": "async list_agents(orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "get_agent_details", "line": 36, "parameters": [{"name": "agent_name", "type": "str"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Fetch detailed information about a specific agent by name.", "signature": "async get_agent_details(agent_name: str, orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "get_agent_capabilities", "line": 59, "parameters": [{"name": "agent_name", "type": "str"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Obtain the capabilities and features supported by a specific agent.", "signature": "async get_agent_capabilities(agent_name: str, orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "test_agent", "line": 81, "parameters": [{"name": "agent_name", "type": "str"}, {"name": "test_data", "type": "dict[str, Any]"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Run a test on a specified agent using provided test data and return the results.", "signature": "async test_agent(agent_name: str, test_data: dict[str, Any], orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "get_agents_overview", "line": 123, "parameters": [{"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get a summarized overview of all agents managed by the orchestrator.", "signature": "async get_agents_overview(orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "fastapi", "alias": null, "line": 11, "statement": "from fastapi import APIRouter"}, {"module": "fastapi", "alias": null, "line": 11, "statement": "from fastapi import Depends"}, {"module": "fastapi", "alias": null, "line": 11, "statement": "from fastapi import HTTPException"}, {"module": "core.orchestrator", "alias": null, "line": 13, "statement": "from core.orchestrator import AgentOrchestrator"}, {"module": "app", "alias": null, "line": 14, "statement": "from app import get_orchestrator"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from fastapi import APIRouter", "type": "import", "line": 11}, {"name": "from fastapi import Depends", "type": "import", "line": 11}, {"name": "from fastapi import HTTPException", "type": "import", "line": 11}, {"name": "from core.orchestrator import AgentOrchestrator", "type": "import", "line": 13}, {"name": "from app import get_orchestrator", "type": "import", "line": 14}, {"name": "list_agents", "type": "function", "line": 20}, {"name": "get_agent_details", "type": "function", "line": 36}, {"name": "get_agent_capabilities", "type": "function", "line": 59}, {"name": "test_agent", "type": "function", "line": 81}, {"name": "get_agents_overview", "type": "function", "line": 123}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "list_agents Function", "description": "Function list_agents implementation.", "line_start": 20, "line_end": 35}, {"name": "get_agent_details Function", "description": "Function get_agent_details implementation.", "line_start": 36, "line_end": 58}, {"name": "get_agent_capabilities Function", "description": "Function get_agent_capabilities implementation.", "line_start": 59, "line_end": 80}, {"name": "test_agent Function", "description": "Function test_agent implementation.", "line_start": 81, "line_end": 122}, {"name": "get_agents_overview Function", "description": "Function get_agents_overview implementation.", "line_start": 123, "line_end": 128}], "content_hash": "6ca0216f791e318b7cba8886cf626676"}'
- path: .archive/accf/accf_agents/api/endpoints/health.py
  line_count: 78
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "health.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "health_check", "line": 22, "parameters": [], "is_async": true, "return_type": "dict[str, Any]", "description": "Performs a basic asynchronous health check and returns the status.", "signature": "async health_check() -> dict[str, Any]"}, {"name": "detailed_health_check", "line": 32, "parameters": [{"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Performs a detailed asynchronous health check using the provided orchestrator and returns comprehensive status information.", "signature": "async detailed_health_check(orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "readiness_check", "line": 62, "parameters": [{"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Checks if the system is ready to handle requests using the provided orchestrator and returns readiness status.", "signature": "async readiness_check(orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "psutil", "alias": null, "line": 12, "statement": "import psutil"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "fastapi", "alias": null, "line": 13, "statement": "from fastapi import APIRouter"}, {"module": "fastapi", "alias": null, "line": 13, "statement": "from fastapi import Depends"}, {"module": "fastapi", "alias": null, "line": 13, "statement": "from fastapi import HTTPException"}, {"module": "core.orchestrator", "alias": null, "line": 15, "statement": "from core.orchestrator import AgentOrchestrator"}, {"module": "app", "alias": null, "line": 16, "statement": "from app import get_orchestrator"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "psutil", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from fastapi import APIRouter", "type": "import", "line": 13}, {"name": "from fastapi import Depends", "type": "import", "line": 13}, {"name": "from fastapi import HTTPException", "type": "import", "line": 13}, {"name": "from core.orchestrator import AgentOrchestrator", "type": "import", "line": 15}, {"name": "from app import get_orchestrator", "type": "import", "line": 16}, {"name": "health_check", "type": "function", "line": 22}, {"name": "detailed_health_check", "type": "function", "line": 32}, {"name": "readiness_check", "type": "function", "line": 62}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "health_check Function", "description": "Function health_check implementation.", "line_start": 22, "line_end": 31}, {"name": "detailed_health_check Function", "description": "Function detailed_health_check implementation.", "line_start": 32, "line_end": 61}, {"name": "readiness_check Function", "description": "Function readiness_check implementation.", "line_start": 62, "line_end": 67}], "content_hash": "a0418c2da5c42b844feab343e0c2c9a3"}'
- path: .archive/accf/accf_agents/api/endpoints/tasks.py
  line_count: 125
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "tasks.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "execute_task", "line": 23, "parameters": [{"name": "task_data", "type": "dict[str, Any]"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Executes a single task asynchronously using the provided orchestrator and returns the result.", "signature": "async execute_task(task_data: dict[str, Any], orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "execute_batch_tasks", "line": 63, "parameters": [{"name": "tasks_data", "type": "list[dict[str, Any]]"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Executes multiple tasks asynchronously in batch using the provided orchestrator and returns their results.", "signature": "async execute_batch_tasks(tasks_data: list[dict[str, Any]], orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}, {"name": "get_task_status", "line": 116, "parameters": [{"name": "task_id", "type": "str"}, {"name": "orchestrator", "type": "AgentOrchestrator", "default": "Depends(get_orchestrator)"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Retrieves the current status of a task asynchronously by its ID using the provided orchestrator.", "signature": "async get_task_status(task_id: str, orchestrator: AgentOrchestrator = Depends(get_orchestrator)) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "uuid", "alias": null, "line": 9, "statement": "import uuid"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "fastapi", "alias": null, "line": 12, "statement": "from fastapi import APIRouter"}, {"module": "fastapi", "alias": null, "line": 12, "statement": "from fastapi import Depends"}, {"module": "fastapi", "alias": null, "line": 12, "statement": "from fastapi import HTTPException"}, {"module": "agents", "alias": null, "line": 14, "statement": "from agents import Task"}, {"module": "core.orchestrator", "alias": null, "line": 15, "statement": "from core.orchestrator import AgentOrchestrator"}, {"module": "utils.validation", "alias": null, "line": 16, "statement": "from utils.validation import validate_task"}, {"module": "app", "alias": null, "line": 17, "statement": "from app import get_orchestrator"}], "constants": []}, "key_elements": [{"name": "uuid", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from fastapi import APIRouter", "type": "import", "line": 12}, {"name": "from fastapi import Depends", "type": "import", "line": 12}, {"name": "from fastapi import HTTPException", "type": "import", "line": 12}, {"name": "from agents import Task", "type": "import", "line": 14}, {"name": "from core.orchestrator import AgentOrchestrator", "type": "import", "line": 15}, {"name": "from utils.validation import validate_task", "type": "import", "line": 16}, {"name": "from app import get_orchestrator", "type": "import", "line": 17}, {"name": "execute_task", "type": "function", "line": 23}, {"name": "execute_batch_tasks", "type": "function", "line": 63}, {"name": "get_task_status", "type": "function", "line": 116}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "execute_task Function", "description": "Function execute_task implementation.", "line_start": 23, "line_end": 62}, {"name": "execute_batch_tasks Function", "description": "Function execute_batch_tasks implementation.", "line_start": 63, "line_end": 115}, {"name": "get_task_status Function", "description": "Function get_task_status implementation.", "line_start": 116, "line_end": 121}], "content_hash": "c2f174de1b0236098e47fc8df91f120b"}'
- path: .archive/accf/.cursor/templates/INTERFACE_SCRIPT_TEMPLATE.py
  line_count: 64
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "INTERFACE_SCRIPT_TEMPLATE.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}], "content_hash": "b0b4670e8861752a76afda169c6880dd"}'
- path: .archive/accf/capabilities/core/monitoring.py
  line_count: 346
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "monitoring.py", "description": "Python module with 2 functions and 5 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "get_monitoring", "line": 330, "parameters": [], "is_async": false, "return_type": "tuple[CloudWatchMetrics, HealthChecker, PerformanceMonitor, AgentMetrics]", "description": "Retrieve instances of monitoring-related components including metrics and health checkers.", "signature": "get_monitoring() -> tuple[CloudWatchMetrics, HealthChecker, PerformanceMonitor, AgentMetrics]"}, {"name": "get_health_status", "line": 345, "parameters": [], "is_async": true, "return_type": "dict[str, Any]", "description": "Asynchronously fetch the current health status of the system.", "signature": "async get_health_status() -> dict[str, Any]"}], "classes": [{"name": "MetricData", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a single metric data point with associated values and metadata."}, {"name": "CloudWatchMetrics", "line": 33, "inherits_from": [], "methods": [{"name": "__init__", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "namespace", "type": "str", "default": "ACCF/ResearchAgent"}, {"name": "region", "type": "str", "default": "us-east-1"}], "is_async": false, "signature": "__init__(self, namespace: str = ACCF/ResearchAgent, region: str = us-east-1)"}, {"name": "put_metric", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "metric_name", "type": "str"}, {"name": "value", "type": "float"}, {"name": "unit", "type": "str", "default": "Count"}, {"name": "dimensions", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "description": "Put a single metric to CloudWatch", "signature": "put_metric(self, metric_name: str, value: float, unit: str = Count, dimensions: dict[str, str] | None = None)"}, {"name": "put_metrics_batch", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "metrics", "type": "list[MetricData]):"}], "is_async": false, "description": "Put multiple metrics in a single API call", "signature": "put_metrics_batch(self, metrics: list[MetricData]):)"}, {"name": "timer", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "metric_name", "type": "str"}, {"name": "dimensions", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "description": "Context manager for timing operations", "signature": "timer(self, metric_name: str, dimensions: dict[str, str] | None = None)"}, {"name": "record_system_metrics", "line": 118, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Record system-level metrics", "signature": "record_system_metrics(self)"}], "properties": [], "description": "Handles the collection and reporting of metrics to AWS CloudWatch."}, {"name": "HealthChecker", "line": 146, "inherits_from": [], "methods": [{"name": "__init__", "line": 149, "parameters": [{"name": "self", "type": "self"}, {"name": "metrics", "type": "CloudWatchMetrics):"}], "is_async": false, "signature": "__init__(self, metrics: CloudWatchMetrics):)"}, {"name": "check_neo4j_connection", "line": 157, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check Neo4j database connectivity", "signature": "async check_neo4j_connection(self) -> bool"}, {"name": "check_openai_connection", "line": 180, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check OpenAI API connectivity", "signature": "async check_openai_connection(self) -> bool"}, {"name": "perform_health_check", "line": 202, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Perform comprehensive health check", "signature": "async perform_health_check(self) -> dict[str, Any]"}], "properties": [], "description": "Performs health checks to assess the status of various system components."}, {"name": "PerformanceMonitor", "line": 241, "inherits_from": [], "methods": [{"name": "__init__", "line": 244, "parameters": [{"name": "self", "type": "self"}, {"name": "metrics", "type": "CloudWatchMetrics):"}], "is_async": false, "signature": "__init__(self, metrics: CloudWatchMetrics):)"}, {"name": "record_request_metrics", "line": 253, "parameters": [{"name": "self", "type": "self"}, {"name": "endpoint", "type": "str"}, {"name": "duration", "type": "float"}, {"name": "status_code", "type": "int"}, {"name": "error", "type": "bool", "default": "False"}], "is_async": false, "description": "Record request-level metrics", "signature": "record_request_metrics(self, endpoint: str, duration: float, status_code: int, error: bool = False)"}, {"name": "check_performance_alerts", "line": 274, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Check for performance threshold violations", "signature": "check_performance_alerts(self) -> list[str]"}], "properties": [], "description": "Monitors and analyzes system performance metrics over time."}, {"name": "AgentMetrics", "line": 285, "inherits_from": [], "methods": [{"name": "__init__", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "metrics", "type": "CloudWatchMetrics):"}], "is_async": false, "signature": "__init__(self, metrics: CloudWatchMetrics):)"}, {"name": "record_agent_execution", "line": 291, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_name", "type": "str"}, {"name": "duration", "type": "float"}, {"name": "success", "type": "bool"}, {"name": "result_count", "type": "int", "default": "0"}], "is_async": false, "description": "Record agent execution metrics", "signature": "record_agent_execution(self, agent_name: str, duration: float, success: bool, result_count: int = 0)"}, {"name": "record_research_metrics", "line": 310, "parameters": [{"name": "self", "type": "self"}, {"name": "query_type", "type": "str"}, {"name": "duration", "type": "float"}, {"name": "sources_found", "type": "int"}, {"name": "quality_score", "type": "float"}], "is_async": false, "description": "Record research-specific metrics", "signature": "record_research_metrics(self, query_type: str, duration: float, sources_found: int, quality_score: float)"}], "properties": [], "description": "Collects and manages metrics specific to the agent''s operation."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "boto3", "alias": null, "line": 16, "statement": "import boto3"}, {"module": "psutil", "alias": null, "line": 17, "statement": "import psutil"}, {"module": "contextlib", "alias": null, "line": 11, "statement": "from contextlib import contextmanager"}, {"module": "dataclasses", "alias": null, "line": 12, "statement": "from dataclasses import dataclass"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "boto3", "type": "import", "line": 16}, {"name": "psutil", "type": "import", "line": 17}, {"name": "from contextlib import contextmanager", "type": "import", "line": 11}, {"name": "from dataclasses import dataclass", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "MetricData", "type": "class", "line": 23}, {"name": "CloudWatchMetrics", "type": "class", "line": 33}, {"name": "HealthChecker", "type": "class", "line": 146}, {"name": "PerformanceMonitor", "type": "class", "line": 241}, {"name": "AgentMetrics", "type": "class", "line": 285}, {"name": "get_monitoring", "type": "function", "line": 330}, {"name": "get_health_status", "type": "function", "line": 345}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "get_monitoring Function", "description": "Function get_monitoring implementation.", "line_start": 330, "line_end": 344}, {"name": "get_health_status Function", "description": "Function get_health_status implementation.", "line_start": 345, "line_end": 350}, {"name": "MetricData Class", "description": "Class MetricData definition and methods.", "line_start": 23, "line_end": 33}, {"name": "CloudWatchMetrics Class", "description": "Class CloudWatchMetrics definition and methods.", "line_start": 33, "line_end": 121}, {"name": "HealthChecker Class", "description": "Class HealthChecker definition and methods.", "line_start": 146, "line_end": 205}, {"name": "PerformanceMonitor Class", "description": "Class PerformanceMonitor definition and methods.", "line_start": 241, "line_end": 277}, {"name": "AgentMetrics Class", "description": "Class AgentMetrics definition and methods.", "line_start": 285, "line_end": 313}], "content_hash": "b2113cf72277a39f02bc7111b58976bb"}'
- path: .archive/accf/capabilities/api/health.py
  line_count: 279
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "health.py", "description": "Python module with 10 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "health_check", "line": 23, "parameters": [], "is_async": true, "description": "Performs an asynchronous health check of the application.", "signature": "async health_check()"}, {"name": "readiness_check", "line": 70, "parameters": [], "is_async": true, "description": "Asynchronously verifies if the application is ready to handle requests.", "signature": "async readiness_check()"}, {"name": "liveness_check", "line": 104, "parameters": [], "is_async": true, "description": "Asynchronously checks if the application is alive and responsive.", "signature": "async liveness_check()"}, {"name": "metrics_endpoint", "line": 125, "parameters": [], "is_async": true, "description": "Asynchronously serves application metrics data.", "signature": "async metrics_endpoint()"}, {"name": "detailed_status", "line": 164, "parameters": [], "is_async": true, "description": "Provides a detailed asynchronous status report of the application.", "signature": "async detailed_status()"}, {"name": "get_uptime", "line": 205, "parameters": [], "is_async": false, "return_type": "str", "description": "Returns the application''s uptime as a formatted string.", "signature": "get_uptime() -> str"}, {"name": "get_uptime_seconds", "line": 230, "parameters": [], "is_async": false, "return_type": "float", "description": "Returns the application''s uptime in seconds as a float.", "signature": "get_uptime_seconds() -> float"}, {"name": "get_system_info", "line": 240, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieves system-related information as a dictionary.", "signature": "get_system_info() -> dict[str, Any]"}, {"name": "get_process_info", "line": 256, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieves process-related information as a dictionary.", "signature": "get_process_info() -> dict[str, Any]"}, {"name": "get_pid", "line": 274, "parameters": [], "is_async": false, "return_type": "int", "description": "Returns the current process ID as an integer.", "signature": "get_pid() -> int"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "capabilities.core.monitoring", "alias": null, "line": 14, "statement": "from capabilities.core.monitoring import get_health_status"}, {"module": "capabilities.core.monitoring", "alias": null, "line": 14, "statement": "from capabilities.core.monitoring import get_monitoring"}, {"module": "fastapi", "alias": null, "line": 15, "statement": "from fastapi import APIRouter"}, {"module": "fastapi", "alias": null, "line": 15, "statement": "from fastapi import HTTPException"}, {"module": "fastapi.responses", "alias": null, "line": 16, "statement": "from fastapi.responses import JSONResponse"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from capabilities.core.monitoring import get_health_status", "type": "import", "line": 14}, {"name": "from capabilities.core.monitoring import get_monitoring", "type": "import", "line": 14}, {"name": "from fastapi import APIRouter", "type": "import", "line": 15}, {"name": "from fastapi import HTTPException", "type": "import", "line": 15}, {"name": "from fastapi.responses import JSONResponse", "type": "import", "line": 16}, {"name": "health_check", "type": "function", "line": 23}, {"name": "readiness_check", "type": "function", "line": 70}, {"name": "liveness_check", "type": "function", "line": 104}, {"name": "metrics_endpoint", "type": "function", "line": 125}, {"name": "detailed_status", "type": "function", "line": 164}, {"name": "get_uptime", "type": "function", "line": 205}, {"name": "get_uptime_seconds", "type": "function", "line": 230}, {"name": "get_system_info", "type": "function", "line": 240}, {"name": "get_process_info", "type": "function", "line": 256}, {"name": "get_pid", "type": "function", "line": 274}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "health_check Function", "description": "Function health_check implementation.", "line_start": 23, "line_end": 69}, {"name": "readiness_check Function", "description": "Function readiness_check implementation.", "line_start": 70, "line_end": 103}, {"name": "liveness_check Function", "description": "Function liveness_check implementation.", "line_start": 104, "line_end": 124}, {"name": "metrics_endpoint Function", "description": "Function metrics_endpoint implementation.", "line_start": 125, "line_end": 163}, {"name": "detailed_status Function", "description": "Function detailed_status implementation.", "line_start": 164, "line_end": 204}, {"name": "get_uptime Function", "description": "Function get_uptime implementation.", "line_start": 205, "line_end": 229}, {"name": "get_uptime_seconds Function", "description": "Function get_uptime_seconds implementation.", "line_start": 230, "line_end": 239}, {"name": "get_system_info Function", "description": "Function get_system_info implementation.", "line_start": 240, "line_end": 255}, {"name": "get_process_info Function", "description": "Function get_process_info implementation.", "line_start": 256, "line_end": 273}, {"name": "get_pid Function", "description": "Function get_pid implementation.", "line_start": 274, "line_end": 279}], "content_hash": "6c4b62ad2375393732fb848dd0672ebf"}'
- path: .archive/accf/capabilities/tools/firecrawl_tool.py
  line_count: 127
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "firecrawl_tool.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "FirecrawlUnavailableError", "line": 30, "inherits_from": ["RuntimeError):"], "methods": [], "properties": [], "description": "Exception raised when the Firecrawl service is unavailable."}, {"name": "FirecrawlResult", "line": 34, "inherits_from": ["NamedTuple):"], "methods": [], "properties": [], "description": "Represents the result returned from a Firecrawl operation."}, {"name": "FirecrawlTool", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "scrape", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}], "is_async": false, "return_type": "FirecrawlResult", "description": "\n        Scrape a single URL asynchronously.\n\n        Parameters\n        ----------\n        url:\n            The target URL.\n\n        Returns\n        -------\n        FirecrawlResult\n            A normalised object containing the markdown content.\n\n        Raises\n        ------\n        FirecrawlUnavailableError\n            If the underlying client or server is down / missing.\n        ", "signature": "scrape(self, url: str) -> FirecrawlResult"}], "properties": [], "description": "Tool for interacting with the Firecrawl service, providing methods to perform actions."}], "imports": [{"module": "logging", "alias": null, "line": 24, "statement": "import logging"}, {"module": "__future__", "alias": null, "line": 22, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 25, "statement": "from typing import NamedTuple"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 24}, {"name": "from __future__ import annotations", "type": "import", "line": 22}, {"name": "from typing import NamedTuple", "type": "import", "line": 25}, {"name": "FirecrawlUnavailableError", "type": "class", "line": 30}, {"name": "FirecrawlResult", "type": "class", "line": 34}, {"name": "FirecrawlTool", "type": "class", "line": 50}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 20}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 22, "line_end": 25}, {"name": "FirecrawlUnavailableError Class", "description": "Class FirecrawlUnavailableError definition and methods.", "line_start": 30, "line_end": 40}, {"name": "FirecrawlResult Class", "description": "Class FirecrawlResult definition and methods.", "line_start": 34, "line_end": 44}, {"name": "FirecrawlTool Class", "description": "Class FirecrawlTool definition and methods.", "line_start": 50, "line_end": 83}], "content_hash": "6807070afb9c92ca967214465d805a5c"}'
- path: .archive/accf/capabilities/tools/context7_tool.py
  line_count: 285
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "context7_tool.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "Context7UnavailableError", "line": 31, "inherits_from": ["RuntimeError):"], "methods": [], "properties": [], "description": "Exception raised when Context7 service is unavailable."}, {"name": "Context7Result", "line": 35, "inherits_from": [], "methods": [{"name": "__init__", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "library_id", "type": "str"}, {"name": "content", "type": "str"}, {"name": "topic", "type": "str | None", "default": "None"}, {"name": "token_count", "type": "int", "default": "0"}, {"name": "success", "type": "bool", "default": "True"}, {"name": "error", "type": "str", "default": ""}], "is_async": false, "signature": "__init__(self, library_id: str, content: str, topic: str | None = None, token_count: int = 0, success: bool = True, error: str = )"}, {"name": "__str__", "line": 54, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}], "properties": [], "description": "Represents the result returned from a Context7 operation."}, {"name": "Context7Tool", "line": 58, "inherits_from": [], "methods": [{"name": "__init__", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "mcp_config_path", "type": "str | None", "default": "None"}], "is_async": false, "signature": "__init__(self, mcp_config_path: str | None = None)"}, {"name": "_call_context7_tool", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "tool_name", "type": "str"}, {"name": "arguments", "type": "dict):"}], "is_async": true, "description": "Call a Context7 MCP tool with proper session management.", "signature": "async _call_context7_tool(self, tool_name: str, arguments: dict):)"}, {"name": "run", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "parameters", "type": "dict"}], "is_async": true, "return_type": "dict", "description": "Run the Context7 tool with parameters.", "signature": "async run(self, parameters: dict) -> dict"}, {"name": "resolve_library", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str"}], "is_async": true, "return_type": "list[Context7Result]", "description": "Resolve a library name to Context7-compatible library IDs.", "signature": "async resolve_library(self, library_name: str) -> list[Context7Result]"}, {"name": "get_documentation", "line": 191, "parameters": [{"name": "self", "type": "self"}, {"name": "library_id", "type": "str"}, {"name": "topic", "type": "str | None", "default": "None"}, {"name": "tokens", "type": "int", "default": "10000"}], "is_async": true, "return_type": "Context7Result", "description": "Get documentation for a specific library.", "signature": "async get_documentation(self, library_id: str, topic: str | None = None, tokens: int = 10000) -> Context7Result"}, {"name": "search_and_get_docs", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str"}, {"name": "topic", "type": "str | None", "default": "None"}, {"name": "tokens", "type": "int", "default": "10000"}, {"name": "select_best", "type": "bool", "default": "True"}], "is_async": true, "return_type": "Context7Result", "description": "Search for a library and get its documentation in one step.", "signature": "async search_and_get_docs(self, library_name: str, topic: str | None = None, tokens: int = 10000, select_best: bool = True) -> Context7Result"}], "properties": [], "description": "Provides tools and methods to interact with the Context7 service."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "logging", "alias": null, "line": 13, "statement": "import logging"}, {"module": "os", "alias": null, "line": 14, "statement": "import os"}, {"module": "pathlib", "alias": null, "line": 15, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "json", "type": "import", "line": 12}, {"name": "logging", "type": "import", "line": 13}, {"name": "os", "type": "import", "line": 14}, {"name": "from pathlib import Path", "type": "import", "line": 15}, {"name": "Context7UnavailableError", "type": "class", "line": 31}, {"name": "Context7Result", "type": "class", "line": 35}, {"name": "Context7Tool", "type": "class", "line": 58}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 15}, {"name": "Context7UnavailableError Class", "description": "Class Context7UnavailableError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "Context7Result Class", "description": "Class Context7Result definition and methods.", "line_start": 35, "line_end": 57}, {"name": "Context7Tool Class", "description": "Class Context7Tool definition and methods.", "line_start": 58, "line_end": 225}], "content_hash": "9bca4fc98a69789af7da2aee9ed097b2"}'
- path: .archive/accf/capabilities/tools/arxiv_tool.py
  line_count: 264
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "arxiv_tool.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "ArxivUnavailableError", "line": 35, "inherits_from": ["RuntimeError):"], "methods": [], "properties": [], "description": "Exception raised when the Arxiv service is unavailable."}, {"name": "ArxivPaperResult", "line": 39, "inherits_from": ["NamedTuple):"], "methods": [], "properties": [], "description": "Represents the result of a paper query from Arxiv, including metadata and content."}, {"name": "ArxivTool", "line": 64, "inherits_from": [], "methods": [{"name": "__init__", "line": 69, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "search", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "max_results", "type": "int | None", "default": "None"}, {"name": "download_papers", "type": "bool", "default": "True"}], "is_async": true, "return_type": "list[ArxivPaperResult]", "description": "\n        Search ArXiv asynchronously.\n\n        Parameters\n        ----------\n        query:\n            Free-text query string.\n        max_results:\n            Max number of results (defaults to ``_DEFAULT_MAX_RESULTS``).\n        download_papers:\n            Whether to download the actual paper content (defaults to True).\n\n        Returns\n        -------\n        list[ArxivPaperResult]\n        ", "signature": "async search(self, query: str, max_results: int | None = None, download_papers: bool = True) -> list[ArxivPaperResult]"}, {"name": "download_paper_content", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "paper", "type": "ArxivPaperResult"}], "is_async": true, "return_type": "ArxivPaperResult", "description": "\n        Download the content of a single paper.\n\n        Parameters\n        ----------\n        paper:\n            ArxivPaperResult with pdf_url.\n\n        Returns\n        -------\n        ArxivPaperResult\n            Updated result with content field populated.\n        ", "signature": "async download_paper_content(self, paper: ArxivPaperResult) -> ArxivPaperResult"}, {"name": "_search_via_mcp", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, k: int"}, {"name": "k", "type": "int"}], "is_async": true, "return_type": "list[ArxivPaperResult]", "signature": "async _search_via_mcp(self, query: str, k: int, k: int) -> list[ArxivPaperResult]"}, {"name": "_search_via_pypi", "line": 187, "parameters": [{"name": "query", "type": "str, k: int"}, {"name": "k", "type": "int"}], "is_async": false, "return_type": "list[ArxivPaperResult]", "signature": "_search_via_pypi(query: str, k: int, k: int) -> list[ArxivPaperResult]"}, {"name": "_download_papers_content", "line": 203, "parameters": [{"name": "self", "type": "self"}, {"name": "papers", "type": "list[ArxivPaperResult]"}], "is_async": true, "return_type": "list[ArxivPaperResult]", "description": "Download content for all papers in parallel.", "signature": "async _download_papers_content(self, papers: list[ArxivPaperResult]) -> list[ArxivPaperResult]"}, {"name": "_download_via_mcp_research_papers", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "paper_id", "type": "str"}], "is_async": true, "return_type": "str | None", "description": "Download paper content using MCP research_papers tool.", "signature": "async _download_via_mcp_research_papers(self, paper_id: str) -> str | None"}, {"name": "_download_pdf_content", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "pdf_url", "type": "str"}], "is_async": true, "return_type": "str | None", "description": "Download PDF content directly.", "signature": "async _download_pdf_content(self, pdf_url: str) -> str | None"}], "properties": [{"name": "_DEFAULT_MAX_RESULTS", "line": 65, "type": ""}], "description": "Provides methods to interact with the Arxiv API for searching and retrieving academic papers."}], "imports": [{"module": "asyncio", "alias": null, "line": 28, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 29, "statement": "import logging"}, {"module": "__future__", "alias": null, "line": 26, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 30, "statement": "from typing import NamedTuple"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 28}, {"name": "logging", "type": "import", "line": 29}, {"name": "from __future__ import annotations", "type": "import", "line": 26}, {"name": "from typing import NamedTuple", "type": "import", "line": 30}, {"name": "ArxivUnavailableError", "type": "class", "line": 35}, {"name": "ArxivPaperResult", "type": "class", "line": 39}, {"name": "ArxivTool", "type": "class", "line": 64}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 24}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 26, "line_end": 30}, {"name": "ArxivUnavailableError Class", "description": "Class ArxivUnavailableError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "ArxivPaperResult Class", "description": "Class ArxivPaperResult definition and methods.", "line_start": 39, "line_end": 49}, {"name": "ArxivTool Class", "description": "Class ArxivTool definition and methods.", "line_start": 64, "line_end": 237}], "content_hash": "766fbf9419b28a627777cb10bef7decc"}'
- path: .archive/accf/capabilities/tools/brave_search_tool.py
  line_count: 134
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "brave_search_tool.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "BraveSearchUnavailableError", "line": 32, "inherits_from": ["RuntimeError):"], "methods": [], "properties": [], "description": "Exception raised when Brave Search service is unavailable."}, {"name": "BraveSearchResult", "line": 36, "inherits_from": ["NamedTuple):"], "methods": [], "properties": [], "description": "Represents a single search result from Brave Search."}, {"name": "BraveSearchTool", "line": 45, "inherits_from": [], "methods": [{"name": "__init__", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "search", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "count", "type": "int | None", "default": "None"}], "is_async": false, "return_type": "list[BraveSearchResult]", "description": "\n        Perform an asynchronous Brave web search.\n\n        Parameters\n        ----------\n        query:\n            Free-form search query.\n        count:\n            Maximum number of results (defaults to 5).\n\n        Returns\n        -------\n        list[BraveSearchResult]\n            Normalised search results (never `None`).\n\n        Raises\n        ------\n        BraveSearchUnavailableError\n            If the underlying Brave client or server is unavailable.\n        ", "signature": "search(self, query: str, count: int | None = None) -> list[BraveSearchResult]"}], "properties": [{"name": "_DEFAULT_RESULT_COUNT", "line": 54, "type": ""}], "description": "Tool for performing searches using Brave Search API."}], "imports": [{"module": "logging", "alias": null, "line": 26, "statement": "import logging"}, {"module": "__future__", "alias": null, "line": 24, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 27, "statement": "from typing import NamedTuple"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 26}, {"name": "from __future__ import annotations", "type": "import", "line": 24}, {"name": "from typing import NamedTuple", "type": "import", "line": 27}, {"name": "BraveSearchUnavailableError", "type": "class", "line": 32}, {"name": "BraveSearchResult", "type": "class", "line": 36}, {"name": "BraveSearchTool", "type": "class", "line": 45}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 22}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 24, "line_end": 27}, {"name": "BraveSearchUnavailableError Class", "description": "Class BraveSearchUnavailableError definition and methods.", "line_start": 32, "line_end": 42}, {"name": "BraveSearchResult Class", "description": "Class BraveSearchResult definition and methods.", "line_start": 36, "line_end": 46}, {"name": "BraveSearchTool Class", "description": "Class BraveSearchTool definition and methods.", "line_start": 45, "line_end": 75}], "content_hash": "e64f8b02af21dfb693d598b66134f8d1"}'
- path: .archive/accf/shared/mcp/arxiv_mcp_client.py
  line_count: 279
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "arxiv_mcp_client.py", "description": "Python module with 1 functions and 2 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "main", "line": 266, "parameters": [], "is_async": true, "description": "Asynchronous entry point that orchestrates the primary workflow of the application.", "signature": "async main()"}], "classes": [{"name": "ArXivPaper", "line": 25, "inherits_from": [], "methods": [], "properties": [], "description": "Represents an academic paper from the arXiv repository, encapsulating its metadata and content."}, {"name": "ArXivMCPClient", "line": 36, "inherits_from": [], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "server_name", "type": "str", "default": "research_papers"}], "is_async": false, "description": "Initialize the ArXiv MCP client.\n\n        Args:\n            server_name: Name of the MCP server to connect to\n        ", "signature": "__init__(self, server_name: str = research_papers)"}, {"name": "_get_mcp_session", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Create and manage MCP session with ArXiv server.", "signature": "async _get_mcp_session(self)"}, {"name": "connect", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Connect to the ArXiv MCP server.", "signature": "async connect(self)"}, {"name": "disconnect", "line": 84, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Disconnect from the ArXiv MCP server.", "signature": "async disconnect(self)"}, {"name": "search_papers", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "max_results", "type": "int", "default": "10"}, {"name": "categories", "type": "list[str] | None", "default": "None"}, {"name": "date_from", "type": "str | None", "default": "None"}, {"name": "date_to", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "list[ArXivPaper]", "description": "Search for papers on ArXiv.\n\n        Args:\n            query: Search query string\n            max_results: Maximum number of results to return\n            categories: List of ArXiv categories to filter by (e.g., [''cs.AI'', ''cs.LG''])\n            date_from: Start date in YYYY-MM-DD format\n            date_to: End date in YYYY-MM-DD format\n\n        Returns:\n            List of ArXivPaper objects\n        ", "signature": "async search_papers(self, query: str, max_results: int = 10, categories: list[str] | None = None, date_from: str | None = None, date_to: str | None = None) -> list[ArXivPaper]"}, {"name": "download_paper", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "paper_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Download a paper by its ArXiv ID.\n\n        Args:\n            paper_id: ArXiv paper ID (e.g., ''2501.10120'')\n\n        Returns:\n            Dictionary containing download status and metadata\n        ", "signature": "async download_paper(self, paper_id: str) -> dict[str, Any]"}, {"name": "read_paper", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "paper_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Read a downloaded paper by its ArXiv ID.\n\n        Args:\n            paper_id: ArXiv paper ID (e.g., ''2501.10120'')\n\n        Returns:\n            Dictionary containing paper content and metadata\n        ", "signature": "async read_paper(self, paper_id: str) -> dict[str, Any]"}, {"name": "list_papers", "line": 230, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "List all available papers.\n\n        Returns:\n            Dictionary containing list of papers and metadata\n        ", "signature": "async list_papers(self) -> dict[str, Any]"}], "properties": [], "description": "Client for interacting with the arXiv API, providing methods to search, retrieve, and manage arXiv papers."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "logging", "alias": null, "line": 13, "statement": "import logging"}, {"module": "os", "alias": null, "line": 14, "statement": "import os"}, {"module": "contextlib", "alias": null, "line": 15, "statement": "from contextlib import asynccontextmanager"}, {"module": "dataclasses", "alias": null, "line": 16, "statement": "from dataclasses import dataclass"}, {"module": "pathlib", "alias": null, "line": 17, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 18, "statement": "from typing import Any"}, {"module": "mcp", "alias": null, "line": 20, "statement": "from mcp import ClientSession"}, {"module": "mcp", "alias": null, "line": 20, "statement": "from mcp import StdioServerParameters"}, {"module": "mcp.client.stdio", "alias": null, "line": 21, "statement": "from mcp.client.stdio import stdio_client"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "json", "type": "import", "line": 12}, {"name": "logging", "type": "import", "line": 13}, {"name": "os", "type": "import", "line": 14}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 15}, {"name": "from dataclasses import dataclass", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 18}, {"name": "from mcp import ClientSession", "type": "import", "line": 20}, {"name": "from mcp import StdioServerParameters", "type": "import", "line": 20}, {"name": "from mcp.client.stdio import stdio_client", "type": "import", "line": 21}, {"name": "ArXivPaper", "type": "class", "line": 25}, {"name": "ArXivMCPClient", "type": "class", "line": 36}, {"name": "main", "type": "function", "line": 266}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 11, "line_end": 21}, {"name": "main Function", "description": "Function main implementation.", "line_start": 266, "line_end": 271}, {"name": "ArXivPaper Class", "description": "Class ArXivPaper definition and methods.", "line_start": 25, "line_end": 35}, {"name": "ArXivMCPClient Class", "description": "Class ArXivMCPClient definition and methods.", "line_start": 36, "line_end": 233}], "content_hash": "be74bf0ccd16c80ebe6fdd1df86584f9"}'
- path: .archive/accf/shared/mcp/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "189d96aa3dfc5fa9028fa0ef9f75f4a9"}'
- path: .archive/accf/shared/mcp/context7_mcp_client.py
  line_count: 460
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "context7_mcp_client.py", "description": "Python module with 3 functions and 4 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "quick_docs", "line": 423, "parameters": [{"name": "library_name", "type": "str, topic: str = None, tokens: int = 10000"}, {"name": "topic", "type": "str = None, tokens: int = 10000", "default": "None"}, {"name": "tokens", "type": "int = 10000", "default": "10000"}], "is_async": true, "return_type": "str", "description": "Fetches concise documentation for a specified library and optional topic using token limits.", "signature": "async quick_docs(library_name: str, topic: str = None, tokens: int = 10000, topic: str = None, tokens: int = 10000 = None, tokens: int = 10000 = 10000) -> str"}, {"name": "quick_resolve", "line": 430, "parameters": [{"name": "library_name", "type": "str"}], "is_async": true, "return_type": "list[LibraryInfo]", "description": "Retrieves a list of library information objects for the given library name.", "signature": "async quick_resolve(library_name: str) -> list[LibraryInfo]"}, {"name": "main", "line": 437, "parameters": [], "is_async": true, "description": "Entry point for asynchronous execution of the program.", "signature": "async main()"}], "classes": [{"name": "Context7Error", "line": 70, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Represents errors specific to the Context7 library operations."}, {"name": "LibraryInfo", "line": 77, "inherits_from": [], "methods": [], "properties": [], "description": "Holds metadata and details about a software library."}, {"name": "DocumentationResult", "line": 87, "inherits_from": [], "methods": [{"name": "__str__", "line": 97, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}], "properties": [], "description": "Encapsulates the result of a documentation retrieval operation."}, {"name": "Context7MCPClient", "line": 101, "inherits_from": [], "methods": [{"name": "__init__", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "mcp_config_path", "type": "str | None", "default": "None"}, {"name": "debug", "type": "bool", "default": "False"}], "is_async": false, "description": "\n        Initialize the Context7 MCP client.\n\n        Args:\n            mcp_config_path: Path to MCP configuration file\n            debug: Enable debug logging\n        ", "signature": "__init__(self, mcp_config_path: str | None = None, debug: bool = False)"}, {"name": "_get_session", "line": 137, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Get an MCP client session.", "signature": "async _get_session(self)"}, {"name": "_parse_library_results", "line": 195, "parameters": [{"name": "self", "type": "self"}, {"name": "tool_result", "type": "CallToolResult"}], "is_async": false, "return_type": "list[LibraryInfo]", "description": "Parse library resolution results from MCP tool response.", "signature": "_parse_library_results(self, tool_result: CallToolResult) -> list[LibraryInfo]"}, {"name": "resolve_library_id", "line": 248, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str"}], "is_async": true, "return_type": "list[LibraryInfo]", "description": "\n        Resolve a library name to Context7-compatible library IDs.\n\n        Args:\n            library_name: Name of the library to resolve\n\n        Returns:\n            List of library information\n        ", "signature": "async resolve_library_id(self, library_name: str) -> list[LibraryInfo]"}, {"name": "get_library_docs", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "library_id", "type": "str"}, {"name": "topic", "type": "str", "default": "None"}, {"name": "tokens", "type": "int", "default": "10000"}], "is_async": true, "return_type": "DocumentationResult", "description": "\n        Get documentation for a specific library.\n\n        Args:\n            library_id: Context7-compatible library ID\n            topic: Optional topic to focus on\n            tokens: Maximum tokens to retrieve\n\n        Returns:\n            Documentation result\n        ", "signature": "async get_library_docs(self, library_id: str, topic: str = None, tokens: int = 10000) -> DocumentationResult"}, {"name": "search_and_get_docs", "line": 333, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str"}, {"name": "topic", "type": "str", "default": "None"}, {"name": "tokens", "type": "int", "default": "10000"}, {"name": "select_best", "type": "bool", "default": "True"}], "is_async": true, "return_type": "DocumentationResult", "description": "\n        Search for a library and get its documentation in one step.\n\n        Args:\n            library_name: Name of the library to search for\n            topic: Optional topic to focus on\n            tokens: Maximum tokens to retrieve\n            select_best: Whether to select the best match automatically\n\n        Returns:\n            Documentation result\n        ", "signature": "async search_and_get_docs(self, library_name: str, topic: str = None, tokens: int = 10000, select_best: bool = True) -> DocumentationResult"}, {"name": "get_implementation_guidance", "line": 390, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str"}, {"name": "feature", "type": "str"}, {"name": "tokens", "type": "int", "default": "5000"}], "is_async": true, "return_type": "str", "description": "\n        Get implementation guidance for a specific library feature.\n\n        Args:\n            library_name: Name of the library\n            feature: Specific feature to get guidance for\n            tokens: Maximum tokens to retrieve\n\n        Returns:\n            Implementation guidance text\n        ", "signature": "async get_implementation_guidance(self, library_name: str, feature: str, tokens: int = 5000) -> str"}], "properties": [], "description": "Client for interacting with the Context7 MCP service, providing multiple methods for library and documentation management."}], "imports": [{"module": "asyncio", "alias": null, "line": 49, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 50, "statement": "import json"}, {"module": "logging", "alias": null, "line": 51, "statement": "import logging"}, {"module": "os", "alias": null, "line": 52, "statement": "import os"}, {"module": "sys", "alias": null, "line": 53, "statement": "import sys"}, {"module": "contextlib", "alias": null, "line": 54, "statement": "from contextlib import asynccontextmanager"}, {"module": "dataclasses", "alias": null, "line": 55, "statement": "from dataclasses import dataclass"}, {"module": "pathlib", "alias": null, "line": 56, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 49}, {"name": "json", "type": "import", "line": 50}, {"name": "logging", "type": "import", "line": 51}, {"name": "os", "type": "import", "line": 52}, {"name": "sys", "type": "import", "line": 53}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 54}, {"name": "from dataclasses import dataclass", "type": "import", "line": 55}, {"name": "from pathlib import Path", "type": "import", "line": 56}, {"name": "Context7Error", "type": "class", "line": 70}, {"name": "LibraryInfo", "type": "class", "line": 77}, {"name": "DocumentationResult", "type": "class", "line": 87}, {"name": "Context7MCPClient", "type": "class", "line": 101}, {"name": "quick_docs", "type": "function", "line": 423}, {"name": "quick_resolve", "type": "function", "line": 430}, {"name": "main", "type": "function", "line": 437}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 49, "line_end": 56}, {"name": "quick_docs Function", "description": "Function quick_docs implementation.", "line_start": 423, "line_end": 429}, {"name": "quick_resolve Function", "description": "Function quick_resolve implementation.", "line_start": 430, "line_end": 436}, {"name": "main Function", "description": "Function main implementation.", "line_start": 437, "line_end": 442}, {"name": "Context7Error Class", "description": "Class Context7Error definition and methods.", "line_start": 70, "line_end": 80}, {"name": "LibraryInfo Class", "description": "Class LibraryInfo definition and methods.", "line_start": 77, "line_end": 87}, {"name": "DocumentationResult Class", "description": "Class DocumentationResult definition and methods.", "line_start": 87, "line_end": 100}, {"name": "Context7MCPClient Class", "description": "Class Context7MCPClient definition and methods.", "line_start": 101, "line_end": 393}], "content_hash": "e359466897afdba92541b5409c08977c"}'
- path: .archive/accf/shared/mcp/brave_mcp_search.py
  line_count: 594
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "brave_mcp_search.py", "description": "Python module with 2 functions and 7 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "quick_search", "line": 482, "parameters": [{"name": "query", "type": "str"}, {"name": "search_type", "type": "str", "default": "web"}, {"name": "mcp_config_path", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "SearchResponse", "description": "Performs an asynchronous search query with optional configuration and parameters.", "signature": "async quick_search(query: str, search_type: str = web, mcp_config_path: str | None = None, **kwargs) -> SearchResponse"}, {"name": "main", "line": 517, "parameters": [], "is_async": true, "description": "Entry point for asynchronous execution of the program.", "signature": "async main()"}], "classes": [{"name": "BraveMCPError", "line": 88, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Base exception class for errors related to Brave MCP operations."}, {"name": "ServerNotFoundError", "line": 94, "inherits_from": ["BraveMCPError):"], "methods": [], "properties": [], "description": "Exception raised when the specified server cannot be found."}, {"name": "AuthenticationError", "line": 100, "inherits_from": ["BraveMCPError):"], "methods": [], "properties": [], "description": "Exception raised for authentication failures."}, {"name": "ConnectionError", "line": 106, "inherits_from": ["BraveMCPError):"], "methods": [], "properties": [], "description": "Exception raised for connection-related issues."}, {"name": "SearchResult", "line": 113, "inherits_from": [], "methods": [{"name": "__str__", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}], "properties": [], "description": "Represents an individual search result with associated data."}, {"name": "SearchResponse", "line": 125, "inherits_from": [], "methods": [{"name": "__str__", "line": 132, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}], "properties": [], "description": "Encapsulates the response from a search operation, including results and metadata."}, {"name": "BraveMCPSearch", "line": 143, "inherits_from": [], "methods": [{"name": "__init__", "line": 151, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str | None", "default": "None"}, {"name": "debug", "type": "bool", "default": "False"}, {"name": "mcp_config_path", "type": "str | None", "default": "None"}], "is_async": false, "description": "\n        Initialize the Brave MCP Search client.\n\n        Args:\n            api_key: Brave Search API key. If None, will try to read from mcp.json or BRAVE_API_KEY env var.\n            debug: Enable debug logging.\n            mcp_config_path: Path to mcp.json config file. Defaults to .cursor/mcp.json.\n        ", "signature": "__init__(self, api_key: str | None = None, debug: bool = False, mcp_config_path: str | None = None)"}, {"name": "_get_api_key_from_config", "line": 188, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str | None", "description": "\n        Attempt to read the Brave API key from mcp.json configuration file.\n\n        Returns:\n            API key if found in config file, None otherwise.\n        ", "signature": "_get_api_key_from_config(self) -> str | None"}, {"name": "_check_brave_server_installed", "line": 219, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if Brave MCP server is installed and accessible.", "signature": "_check_brave_server_installed(self) -> bool"}, {"name": "_ensure_brave_server", "line": 225, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Ensure Brave MCP server is installed.", "signature": "_ensure_brave_server(self) -> None"}, {"name": "_get_mcp_session", "line": 245, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Create and manage MCP session with Brave server.", "signature": "async _get_mcp_session(self)"}, {"name": "_parse_search_results", "line": 267, "parameters": [{"name": "self", "type": "self"}, {"name": "tool_result", "type": "CallToolResult"}, {"name": "query", "type": "str"}], "is_async": false, "return_type": "SearchResponse", "description": "Parse MCP tool result into SearchResponse object.", "signature": "_parse_search_results(self, tool_result: CallToolResult, query: str) -> SearchResponse"}, {"name": "search", "line": 313, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "count", "type": "int", "default": "10"}, {"name": "freshness", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "SearchResponse", "description": "\n        Perform a web search using Brave Search API.\n\n        Args:\n            query: Search query string\n            count: Number of results to return (max 20, default 10)\n            freshness: Filter by discovery time:\n                - \"pd\": Past day\n                - \"pw\": Past week\n                - \"pm\": Past month\n                - \"py\": Past year\n                - \"YYYY-MM-DDtoYYYY-MM-DD\": Custom date range\n\n        Returns:\n            SearchResponse object containing results\n\n        Raises:\n            BraveMCPError: If search fails\n        ", "signature": "async search(self, query: str, count: int = 10, freshness: str | None = None) -> SearchResponse"}, {"name": "image_search", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, count: int = 1"}, {"name": "count", "type": "int = 1", "default": "1"}], "is_async": true, "return_type": "SearchResponse", "description": "\n        Search for images using Brave Search API.\n\n        Args:\n            query: Search query string\n            count: Number of images to return (max 3, default 1)\n\n        Returns:\n            SearchResponse object containing image results\n        ", "signature": "async image_search(self, query: str, count: int = 1, count: int = 1 = 1) -> SearchResponse"}, {"name": "news_search", "line": 384, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "count", "type": "int", "default": "10"}, {"name": "freshness", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "SearchResponse", "description": "\n        Search for news articles using Brave Search API.\n\n        Args:\n            query: Search query string\n            count: Number of results to return (max 20, default 10)\n            freshness: Filter by discovery time (same options as web search)\n\n        Returns:\n            SearchResponse object containing news results\n        ", "signature": "async news_search(self, query: str, count: int = 10, freshness: str | None = None) -> SearchResponse"}, {"name": "video_search", "line": 417, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "count", "type": "int", "default": "10"}, {"name": "freshness", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "SearchResponse", "description": "\n        Search for videos using Brave Search API.\n\n        Args:\n            query: Search query string\n            count: Number of results to return (max 20, default 10)\n            freshness: Filter by discovery time (same options as web search)\n\n        Returns:\n            SearchResponse object containing video results\n        ", "signature": "async video_search(self, query: str, count: int = 10, freshness: str | None = None) -> SearchResponse"}, {"name": "local_search", "line": 450, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, count: int = 5"}, {"name": "count", "type": "int = 5", "default": "5"}], "is_async": true, "return_type": "SearchResponse", "description": "\n        Search for local businesses and points of interest.\n\n        Note: Requires Brave Search Pro API plan for location results.\n        Falls back to web search if no location results found.\n\n        Args:\n            query: Local search query string\n            count: Number of results to return (max 20, default 5)\n\n        Returns:\n            SearchResponse object containing local results\n        ", "signature": "async local_search(self, query: str, count: int = 5, count: int = 5 = 5) -> SearchResponse"}], "properties": [], "description": "Handles search operations and interactions with the Brave MCP service."}], "imports": [{"module": "asyncio", "alias": null, "line": 67, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 68, "statement": "import json"}, {"module": "logging", "alias": null, "line": 69, "statement": "import logging"}, {"module": "os", "alias": null, "line": 70, "statement": "import os"}, {"module": "subprocess", "alias": null, "line": 71, "statement": "import subprocess"}, {"module": "sys", "alias": null, "line": 72, "statement": "import sys"}, {"module": "contextlib", "alias": null, "line": 73, "statement": "from contextlib import asynccontextmanager"}, {"module": "dataclasses", "alias": null, "line": 74, "statement": "from dataclasses import dataclass"}, {"module": "pathlib", "alias": null, "line": 75, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 67}, {"name": "json", "type": "import", "line": 68}, {"name": "logging", "type": "import", "line": 69}, {"name": "os", "type": "import", "line": 70}, {"name": "subprocess", "type": "import", "line": 71}, {"name": "sys", "type": "import", "line": 72}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 73}, {"name": "from dataclasses import dataclass", "type": "import", "line": 74}, {"name": "from pathlib import Path", "type": "import", "line": 75}, {"name": "BraveMCPError", "type": "class", "line": 88}, {"name": "ServerNotFoundError", "type": "class", "line": 94}, {"name": "AuthenticationError", "type": "class", "line": 100}, {"name": "ConnectionError", "type": "class", "line": 106}, {"name": "SearchResult", "type": "class", "line": 113}, {"name": "SearchResponse", "type": "class", "line": 125}, {"name": "BraveMCPSearch", "type": "class", "line": 143}, {"name": "quick_search", "type": "function", "line": 482}, {"name": "main", "type": "function", "line": 517}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 67, "line_end": 75}, {"name": "quick_search Function", "description": "Function quick_search implementation.", "line_start": 482, "line_end": 516}, {"name": "main Function", "description": "Function main implementation.", "line_start": 517, "line_end": 522}, {"name": "BraveMCPError Class", "description": "Class BraveMCPError definition and methods.", "line_start": 88, "line_end": 98}, {"name": "ServerNotFoundError Class", "description": "Class ServerNotFoundError definition and methods.", "line_start": 94, "line_end": 104}, {"name": "AuthenticationError Class", "description": "Class AuthenticationError definition and methods.", "line_start": 100, "line_end": 110}, {"name": "ConnectionError Class", "description": "Class ConnectionError definition and methods.", "line_start": 106, "line_end": 116}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 113, "line_end": 123}, {"name": "SearchResponse Class", "description": "Class SearchResponse definition and methods.", "line_start": 125, "line_end": 135}, {"name": "BraveMCPSearch Class", "description": "Class BraveMCPSearch definition and methods.", "line_start": 143, "line_end": 453}], "content_hash": "2cb02c03af553c816d86866509dea553"}'
- path: .archive/accf/shared/mcp/mcp_server_template.py
  line_count: 284
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "mcp_server_template.py", "description": "Python module with 2 functions and 4 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "configure_logging", "line": 29, "parameters": [{"name": "level", "type": "int = logging.INFO", "default": "logging.INFO"}], "is_async": false, "return_type": "None", "description": "Set up logging configuration with the specified log level.", "signature": "configure_logging(level: int = logging.INFO = logging.INFO) -> None"}, {"name": "main", "line": 257, "parameters": [], "is_async": false, "return_type": "None", "description": "Entry point of the application that runs the main logic.", "signature": "main() -> None"}], "classes": [{"name": "ToolExecutionError", "line": 46, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during tool execution."}, {"name": "BaseTool", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "input_schema", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str, description: str, input_schema: dict[str, Any]) -> None"}, {"name": "execute", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "description": "\n        Execute the tool logic. Override in subclasses.\n\n        Args:\n            arguments: Tool arguments.\n\n        Returns:\n            List of TextContent objects.\n\n        Raises:\n            ToolExecutionError: If execution fails.\n        ", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}, {"name": "validate_input", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "\n        Validate input arguments against the input schema.\n        (Stub for future JSON Schema validation.)\n\n        Args:\n            arguments: Tool arguments.\n\n        Raises:\n            ValueError: If validation fails.\n        ", "signature": "validate_input(self, arguments: dict[str, Any]) -> None"}], "properties": [], "description": "Abstract base class defining the interface and common behavior for tools."}, {"name": "EchoTool", "line": 104, "inherits_from": ["BaseTool):"], "methods": [{"name": "__init__", "line": 109, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "execute", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "arguments", "type": "dict[str, Any]"}], "is_async": true, "return_type": "list[TextContent]", "signature": "async execute(self, arguments: dict[str, Any]) -> list[TextContent]"}], "properties": [], "description": "Tool that echoes input back as output."}, {"name": "MCPServerTemplate", "line": 131, "inherits_from": [], "methods": [{"name": "__init__", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "tools", "type": "list[BaseTool] | None", "default": "None"}, {"name": "log_level", "type": "int", "default": "logging.INFO"}], "is_async": false, "return_type": "None", "description": "\n        Initialize the MCP server.\n\n        Args:\n            name: Server name.\n            tools: List of BaseTool instances.\n            log_level: Logging level.\n        ", "signature": "__init__(self, name: str, tools: list[BaseTool] | None = None, log_level: int = logging.INFO) -> None"}, {"name": "register_tool", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "tool", "type": "BaseTool"}], "is_async": false, "return_type": "None", "description": "\n        Register a tool at runtime.\n\n        Args:\n            tool: Instance of BaseTool.\n        ", "signature": "register_tool(self, tool: BaseTool) -> None"}, {"name": "unregister_tool", "line": 176, "parameters": [{"name": "self", "type": "self"}, {"name": "tool_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Unregister a tool at runtime.\n\n        Args:\n            tool_name: Name of the tool to remove.\n        ", "signature": "unregister_tool(self, tool_name: str) -> None"}, {"name": "load_plugins", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "plugin_dir", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Stub for plugin loading. Extend to support dynamic tool discovery.\n\n        Args:\n            plugin_dir: Directory to load plugins from.\n        ", "signature": "load_plugins(self, plugin_dir: str | None = None = None) -> None"}, {"name": "_register_server_handlers", "line": 199, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "\n        Register tool listing and invocation handlers with the MCP server.\n        ", "signature": "_register_server_handlers(self) -> None"}, {"name": "run", "line": 241, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Run the MCP server using stdio transport (Cursor IDE compatible).\n        ", "signature": "async run(self) -> None"}], "properties": [], "description": "Template class for MCP server implementations with core server methods."}], "imports": [{"module": "asyncio", "alias": null, "line": 18, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 19, "statement": "import logging"}, {"module": "os", "alias": null, "line": 20, "statement": "import os"}, {"module": "typing", "alias": null, "line": 21, "statement": "from typing import Any"}, {"module": "mcp.server", "alias": null, "line": 23, "statement": "from mcp.server import Server"}, {"module": "mcp.types", "alias": null, "line": 24, "statement": "from mcp.types import TextContent"}, {"module": "mcp.types", "alias": null, "line": 24, "statement": "from mcp.types import Tool"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 18}, {"name": "logging", "type": "import", "line": 19}, {"name": "os", "type": "import", "line": 20}, {"name": "from typing import Any", "type": "import", "line": 21}, {"name": "from mcp.server import Server", "type": "import", "line": 23}, {"name": "from mcp.types import TextContent", "type": "import", "line": 24}, {"name": "from mcp.types import Tool", "type": "import", "line": 24}, {"name": "configure_logging", "type": "function", "line": 29}, {"name": "ToolExecutionError", "type": "class", "line": 46}, {"name": "BaseTool", "type": "class", "line": 50}, {"name": "EchoTool", "type": "class", "line": 104}, {"name": "MCPServerTemplate", "type": "class", "line": 131}, {"name": "main", "type": "function", "line": 257}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 16}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 18, "line_end": 24}, {"name": "configure_logging Function", "description": "Function configure_logging implementation.", "line_start": 29, "line_end": 45}, {"name": "main Function", "description": "Function main implementation.", "line_start": 257, "line_end": 262}, {"name": "ToolExecutionError Class", "description": "Class ToolExecutionError definition and methods.", "line_start": 46, "line_end": 56}, {"name": "BaseTool Class", "description": "Class BaseTool definition and methods.", "line_start": 50, "line_end": 89}, {"name": "EchoTool Class", "description": "Class EchoTool definition and methods.", "line_start": 104, "line_end": 125}, {"name": "MCPServerTemplate Class", "description": "Class MCPServerTemplate definition and methods.", "line_start": 131, "line_end": 244}], "content_hash": "451f445b78a70cf50c5bd212a3fa0a92"}'
- path: .archive/accf/shared/mcp/firecrawl_mcp_client.py
  line_count: 500
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "firecrawl_mcp_client.py", "description": "Python module with 2 functions and 4 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [{"name": "quick_scrape", "line": 382, "parameters": [{"name": "url", "type": "str, **kwargs"}], "is_async": true, "return_type": "ScrapingResult", "description": "Performs an asynchronous quick scrape of the given URL and returns the scraping result.", "signature": "async quick_scrape(url: str, **kwargs, **kwargs) -> ScrapingResult"}, {"name": "main", "line": 389, "parameters": [], "is_async": true, "description": "Entry point for the asynchronous execution of the scraping process.", "signature": "async main()"}], "classes": [{"name": "FirecrawlError", "line": 78, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Custom exception class for handling errors related to the Firecrawl scraping process."}, {"name": "ScrapingResult", "line": 85, "inherits_from": [], "methods": [{"name": "__str__", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}], "properties": [], "description": "Represents the result of a scraping operation, including extracted data and metadata."}, {"name": "CrawlResult", "line": 99, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 109, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__post_init__(self)"}], "properties": [], "description": "Encapsulates the outcome of a crawl operation, including status and retrieved content."}, {"name": "FirecrawlMCPClient", "line": 114, "inherits_from": [], "methods": [{"name": "__init__", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "mcp_config_path", "type": "str | None", "default": "None"}, {"name": "debug", "type": "bool", "default": "False"}], "is_async": false, "description": "\n        Initialize the Firecrawl MCP client.\n\n        Args:\n            mcp_config_path: Path to mcp.json config file\n            debug: Enable debug logging\n        ", "signature": "__init__(self, mcp_config_path: str | None = None, debug: bool = False)"}, {"name": "_get_session", "line": 141, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Create and manage an MCP session with Firecrawl server.", "signature": "async _get_session(self)"}, {"name": "scrape", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}, {"name": "formats", "type": "list[str]", "default": "None"}, {"name": "only_main_content", "type": "bool", "default": "True"}, {"name": "timeout", "type": "int", "default": "30000"}], "is_async": true, "return_type": "ScrapingResult", "description": "Scrape content from a single URL.", "signature": "async scrape(self, url: str, formats: list[str] = None, only_main_content: bool = True, timeout: int = 30000) -> ScrapingResult"}, {"name": "crawl", "line": 226, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}, {"name": "max_depth", "type": "int", "default": "2"}, {"name": "limit", "type": "int", "default": "50"}, {"name": "allow_external_links", "type": "bool", "default": "False"}], "is_async": true, "return_type": "CrawlResult", "description": "Start a crawl job on a website.", "signature": "async crawl(self, url: str, max_depth: int = 2, limit: int = 50, allow_external_links: bool = False) -> CrawlResult"}, {"name": "check_crawl_status", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "job_id", "type": "str"}], "is_async": true, "return_type": "CrawlResult", "description": "Check the status of a crawl job.", "signature": "async check_crawl_status(self, job_id: str) -> CrawlResult"}, {"name": "search", "line": 325, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "scrape_results", "type": "bool", "default": "True"}], "is_async": true, "return_type": "list[ScrapingResult]", "description": "Search the web and optionally scrape results.", "signature": "async search(self, query: str, limit: int = 10, scrape_results: bool = True) -> list[ScrapingResult]"}], "properties": [], "description": "Client class for interacting with the Firecrawl MCP service, managing crawling and scraping tasks."}], "imports": [{"module": "asyncio", "alias": null, "line": 56, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 57, "statement": "import json"}, {"module": "logging", "alias": null, "line": 58, "statement": "import logging"}, {"module": "os", "alias": null, "line": 59, "statement": "import os"}, {"module": "sys", "alias": null, "line": 60, "statement": "import sys"}, {"module": "contextlib", "alias": null, "line": 61, "statement": "from contextlib import asynccontextmanager"}, {"module": "dataclasses", "alias": null, "line": 62, "statement": "from dataclasses import dataclass"}, {"module": "pathlib", "alias": null, "line": 63, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 64, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 56}, {"name": "json", "type": "import", "line": 57}, {"name": "logging", "type": "import", "line": 58}, {"name": "os", "type": "import", "line": 59}, {"name": "sys", "type": "import", "line": 60}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 61}, {"name": "from dataclasses import dataclass", "type": "import", "line": 62}, {"name": "from pathlib import Path", "type": "import", "line": 63}, {"name": "from typing import Any", "type": "import", "line": 64}, {"name": "FirecrawlError", "type": "class", "line": 78}, {"name": "ScrapingResult", "type": "class", "line": 85}, {"name": "CrawlResult", "type": "class", "line": 99}, {"name": "FirecrawlMCPClient", "type": "class", "line": 114}, {"name": "quick_scrape", "type": "function", "line": 382}, {"name": "main", "type": "function", "line": 389}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 56, "line_end": 64}, {"name": "quick_scrape Function", "description": "Function quick_scrape implementation.", "line_start": 382, "line_end": 388}, {"name": "main Function", "description": "Function main implementation.", "line_start": 389, "line_end": 394}, {"name": "FirecrawlError Class", "description": "Class FirecrawlError definition and methods.", "line_start": 78, "line_end": 88}, {"name": "ScrapingResult Class", "description": "Class ScrapingResult definition and methods.", "line_start": 85, "line_end": 97}, {"name": "CrawlResult Class", "description": "Class CrawlResult definition and methods.", "line_start": 99, "line_end": 112}, {"name": "FirecrawlMCPClient Class", "description": "Class FirecrawlMCPClient definition and methods.", "line_start": 114, "line_end": 328}], "content_hash": "e6dd7ca3409864062ef7e685d392b314"}'
- path: .archive/accf/shared/openai_interfaces/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [], "content_hash": "d49aba6a21587db704d8db3eceed5eec"}'
- path: .archive/accf/shared/openai_interfaces/base.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIBaseInterface", "line": 9, "inherits_from": [], "methods": [{"name": "__init__", "line": 15, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str | None", "default": "None"}, {"name": "organization", "type": "str | None", "default": "None"}], "is_async": false, "signature": "__init__(self, api_key: str | None = None, organization: str | None = None)"}, {"name": "_handle_error", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "error", "type": "Exception"}], "is_async": false, "return_type": "None", "signature": "_handle_error(self, error: Exception) -> None"}, {"name": "_get_headers", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "signature": "_get_headers(self) -> dict[str, str]"}], "properties": [], "description": "Base class providing core methods for interacting with the OpenAI API."}], "imports": [{"module": "logging", "alias": null, "line": 3, "statement": "import logging"}, {"module": "os", "alias": null, "line": 4, "statement": "import os"}, {"module": "openai", "alias": null, "line": 6, "statement": "import openai"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 3}, {"name": "os", "type": "import", "line": 4}, {"name": "openai", "type": "import", "line": 6}, {"name": "OpenAIBaseInterface", "type": "class", "line": 9}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 6}, {"name": "OpenAIBaseInterface Class", "description": "Class OpenAIBaseInterface definition and methods.", "line_start": 9, "line_end": 41}], "content_hash": "9604a803d258504292dfb29005edd2d5"}'
- path: .archive/accf/shared/openai_interfaces/files_interface.py
  line_count: 130
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "files_interface.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIFilesInterface", "line": 10, "inherits_from": ["OpenAIBaseInterface):"], "methods": [{"name": "list_files", "line": 16, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all files.\n        GET /v1/files\n        ", "signature": "list_files(self) -> list[dict[str, Any]]"}, {"name": "upload_file", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "file_bytes", "type": "bytes, purpose: str, **kwargs"}, {"name": "purpose", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Upload a file for a specific purpose.\n        POST /v1/files\n        ", "signature": "upload_file(self, file_bytes: bytes, purpose: str, **kwargs, purpose: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "delete_file", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Delete a file by ID.\n        DELETE /v1/files/{file_id}\n        ", "signature": "delete_file(self, file_id: str) -> dict[str, Any]"}, {"name": "retrieve_file", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve file metadata by ID.\n        GET /v1/files/{file_id}\n        ", "signature": "retrieve_file(self, file_id: str) -> dict[str, Any]"}, {"name": "retrieve_file_content", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": false, "return_type": "bytes", "description": "\n        Retrieve the content of a file by ID.\n        GET /v1/files/{file_id}/content\n        ", "signature": "retrieve_file_content(self, file_id: str) -> bytes"}, {"name": "alist_files", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "\n        Async: List all files.\n        GET /v1/files\n        ", "signature": "async alist_files(self) -> list[dict[str, Any]]"}, {"name": "aupload_file", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "file_bytes", "type": "bytes"}, {"name": "purpose", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Async: Upload a file for a specific purpose.\n        POST /v1/files\n        ", "signature": "async aupload_file(self, file_bytes: bytes, purpose: str, **kwargs) -> dict[str, Any]"}, {"name": "adelete_file", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Async: Delete a file by ID.\n        DELETE /v1/files/{file_id}\n        ", "signature": "async adelete_file(self, file_id: str) -> dict[str, Any]"}, {"name": "aretrieve_file", "line": 112, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Async: Retrieve file metadata by ID.\n        GET /v1/files/{file_id}\n        ", "signature": "async aretrieve_file(self, file_id: str) -> dict[str, Any]"}, {"name": "aretrieve_file_content", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "file_id", "type": "str"}], "is_async": true, "return_type": "bytes", "description": "\n        Async: Retrieve the content of a file by ID.\n        GET /v1/files/{file_id}/content\n        ", "signature": "async aretrieve_file_content(self, file_id: str) -> bytes"}], "properties": [], "description": "Provides methods to interact with OpenAI file management, including uploading, retrieving, and deleting files."}], "imports": [{"module": "io", "alias": null, "line": 3, "statement": "import io"}, {"module": "openai", "alias": null, "line": 6, "statement": "import openai"}, {"module": "typing", "alias": null, "line": 4, "statement": "from typing import Any"}, {"module": "shared.openai_interfaces.base", "alias": null, "line": 7, "statement": "from shared.openai_interfaces.base import OpenAIBaseInterface"}], "constants": []}, "key_elements": [{"name": "io", "type": "import", "line": 3}, {"name": "openai", "type": "import", "line": 6}, {"name": "from typing import Any", "type": "import", "line": 4}, {"name": "from shared.openai_interfaces.base import OpenAIBaseInterface", "type": "import", "line": 7}, {"name": "OpenAIFilesInterface", "type": "class", "line": 10}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 7}, {"name": "OpenAIFilesInterface Class", "description": "Class OpenAIFilesInterface definition and methods.", "line_start": 10, "line_end": 126}], "content_hash": "b283c81a0c058d6409f3900014ac6dcc"}'
- path: .archive/accf/shared/openai_interfaces/responses_interface.py
  line_count: 309
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "responses_interface.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIResponsesInterface", "line": 11, "inherits_from": ["OpenAIBaseInterface):"], "methods": [{"name": "__init__", "line": 17, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self, *args, **kwargs)"}, {"name": "create_response", "line": 23, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "unknown"}, {"name": "input", "type": "unknown"}, {"name": "instructions", "type": "unknown", "default": "None"}, {"name": "text_format", "type": "unknown", "default": "None"}, {"name": "response_format", "type": "unknown", "default": "None"}, {"name": "reasoning", "type": "unknown", "default": "None"}, {"name": "previous_response_id", "type": "unknown", "default": "None"}, {"name": "store", "type": "unknown", "default": "None"}, {"name": "max_output_tokens", "type": "unknown", "default": "None"}, {"name": "debug", "type": "unknown", "default": "False"}], "is_async": false, "description": "\n        Create a response using the OpenAI Responses API.\n        Supports structured outputs (JSON schema), reasoning, and conversation state.\n        Args:\n            model: Model name (e.g., ''gpt-4.1-mini'', ''o3'', etc.)\n            input: List of dicts (role/content) or string\n            instructions: Optional system instructions\n            text_format: None, ''json_object'', or dict for JSON schema (legacy, prefer response_format)\n            response_format: dict, e.g. {\"type\": \"json_object\"} (preferred for structured output)\n            reasoning: dict, e.g. {\"effort\": \"medium\", \"summary\": \"auto\"}\n            previous_response_id: str, for conversation state\n            store: bool, whether to store response\n            max_output_tokens: int, output token limit\n            debug: bool, enable debug logging\n        Returns:\n            dict: API response\n        ", "signature": "create_response(self, model, input, instructions = None, text_format = None, response_format = None, reasoning = None, previous_response_id = None, store = None, max_output_tokens = None, debug = False)"}, {"name": "create_response_stream", "line": 99, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "\n        Create a streaming response (POST /responses with stream=True)\n        Yields events as they arrive.\n        ", "signature": "create_response_stream(self, **kwargs)"}, {"name": "parse_json_output", "line": 118, "parameters": [{"name": "output_text", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "\n        Try to parse output_text as JSON. Returns dict/list or None if parsing fails.\n        ", "signature": "parse_json_output(output_text: str) -> Any | None"}, {"name": "retrieve_response", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Retrieve a response by ID (GET /responses/{response_id})", "signature": "retrieve_response(self, response_id: str, **kwargs, **kwargs) -> dict[str, Any] | None"}, {"name": "list_input_items", "line": 149, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": false, "return_type": "list[dict[str, Any]] | None", "description": "List input items for a response (GET /responses/{response_id}/input_items)", "signature": "list_input_items(self, response_id: str, **kwargs) -> list[dict[str, Any]] | None"}, {"name": "delete_response", "line": 170, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Delete a response by ID (DELETE /responses/{response_id})", "signature": "delete_response(self, response_id: str) -> dict[str, Any] | None"}, {"name": "cancel_response", "line": 186, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Cancel a response (POST /responses/{response_id}/cancel)", "signature": "cancel_response(self, response_id: str) -> dict[str, Any] | None"}, {"name": "acreate_response", "line": 205, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any] | None", "signature": "async acreate_response(self, **kwargs) -> dict[str, Any] | None"}, {"name": "aretrieve_response", "line": 232, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any] | None", "signature": "async aretrieve_response(self, response_id: str, **kwargs) -> dict[str, Any] | None"}, {"name": "alist_input_items", "line": 255, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": true, "return_type": "list[dict[str, Any]] | None", "signature": "async alist_input_items(self, response_id: str, **kwargs) -> list[dict[str, Any]] | None"}, {"name": "adelete_response", "line": 275, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any] | None", "signature": "async adelete_response(self, response_id: str) -> dict[str, Any] | None"}, {"name": "acancel_response", "line": 294, "parameters": [{"name": "self", "type": "self"}, {"name": "response_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any] | None", "signature": "async acancel_response(self, response_id: str) -> dict[str, Any] | None"}], "properties": [], "description": "Interface defining methods to handle and process responses from OpenAI API."}], "imports": [{"module": "logging", "alias": null, "line": 3, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 4, "statement": "from typing import Any"}, {"module": "shared.openai_interfaces.base", "alias": null, "line": 6, "statement": "from shared.openai_interfaces.base import OpenAIBaseInterface"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 3}, {"name": "from typing import Any", "type": "import", "line": 4}, {"name": "from shared.openai_interfaces.base import OpenAIBaseInterface", "type": "import", "line": 6}, {"name": "OpenAIResponsesInterface", "type": "class", "line": 11}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 6}, {"name": "OpenAIResponsesInterface Class", "description": "Class OpenAIResponsesInterface definition and methods.", "line_start": 11, "line_end": 297}], "content_hash": "c457b5f43ed3e78acfca15c9a5d6cf4e"}'
- path: .archive/accf/shared/openai_interfaces/assistants_interface.py
  line_count: 323
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "assistants_interface.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-04"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIAssistantsInterface", "line": 16, "inherits_from": ["OpenAIBaseInterface):"], "methods": [{"name": "create_assistant", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "signature": "create_assistant(self, **kwargs) -> dict[str, Any]"}, {"name": "retrieve_assistant", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "assistant_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve an assistant by ID.\n        GET /v1/assistants/{assistant_id}\n        ", "signature": "retrieve_assistant(self, assistant_id: str) -> dict[str, Any]"}, {"name": "modify_assistant", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "assistant_id", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Modify an assistant.\n        POST /v1/assistants/{assistant_id}\n        ", "signature": "modify_assistant(self, assistant_id: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "delete_assistant", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "assistant_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Delete an assistant.\n        DELETE /v1/assistants/{assistant_id}\n        ", "signature": "delete_assistant(self, assistant_id: str) -> dict[str, Any]"}, {"name": "list_assistants", "line": 86, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all assistants.\n        GET /v1/assistants\n        ", "signature": "list_assistants(self) -> list[dict[str, Any]]"}, {"name": "create_thread", "line": 101, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Create a thread.\n        POST /v1/threads\n        ", "signature": "create_thread(self, **kwargs) -> dict[str, Any]"}, {"name": "retrieve_thread", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve a thread by ID.\n        GET /v1/threads/{thread_id}\n        ", "signature": "retrieve_thread(self, thread_id: str) -> dict[str, Any]"}, {"name": "modify_thread", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Modify a thread.\n        POST /v1/threads/{thread_id}\n        ", "signature": "modify_thread(self, thread_id: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "delete_thread", "line": 146, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Delete a thread.\n        DELETE /v1/threads/{thread_id}\n        ", "signature": "delete_thread(self, thread_id: str) -> dict[str, Any]"}, {"name": "list_threads", "line": 161, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all threads.\n        GET /v1/threads\n        ", "signature": "list_threads(self) -> list[dict[str, Any]]"}, {"name": "create_message", "line": 176, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Create a message in a thread.\n        POST /v1/threads/{thread_id}/messages\n        ", "signature": "create_message(self, thread_id: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "list_messages", "line": 193, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all messages in a thread.\n        GET /v1/threads/{thread_id}/messages\n        ", "signature": "list_messages(self, thread_id: str) -> list[dict[str, Any]]"}, {"name": "retrieve_message", "line": 208, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, message_id: str"}, {"name": "message_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve a message by ID.\n        GET /v1/threads/{thread_id}/messages/{message_id}\n        ", "signature": "retrieve_message(self, thread_id: str, message_id: str, message_id: str) -> dict[str, Any]"}, {"name": "run_thread", "line": 225, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, **kwargs"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Run a thread.\n        POST /v1/threads/{thread_id}/runs\n        ", "signature": "run_thread(self, thread_id: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "retrieve_run", "line": 242, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, run_id: str"}, {"name": "run_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve a run by ID.\n        GET /v1/threads/{thread_id}/runs/{run_id}\n        ", "signature": "retrieve_run(self, thread_id: str, run_id: str, run_id: str) -> dict[str, Any]"}, {"name": "list_runs", "line": 259, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all runs in a thread.\n        GET /v1/threads/{thread_id}/runs\n        ", "signature": "list_runs(self, thread_id: str) -> list[dict[str, Any]]"}, {"name": "cancel_run", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, run_id: str"}, {"name": "run_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Cancel a run.\n        POST /v1/threads/{thread_id}/runs/{run_id}/cancel\n        ", "signature": "cancel_run(self, thread_id: str, run_id: str, run_id: str) -> dict[str, Any]"}, {"name": "list_run_steps", "line": 291, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str, run_id: str"}, {"name": "run_id", "type": "str"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "\n        List all run steps in a run.\n        GET /v1/threads/{thread_id}/runs/{run_id}/steps\n        ", "signature": "list_run_steps(self, thread_id: str, run_id: str, run_id: str) -> list[dict[str, Any]]"}, {"name": "retrieve_run_step", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "thread_id", "type": "str"}, {"name": "run_id", "type": "str"}, {"name": "step_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Retrieve a run step by ID.\n        GET /v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}\n        ", "signature": "retrieve_run_step(self, thread_id: str, run_id: str, step_id: str) -> dict[str, Any]"}], "properties": [], "description": "Interface class providing methods to interact with OpenAI assistants."}], "imports": [{"module": "typing", "alias": null, "line": 3, "statement": "from typing import Any"}, {"module": "shared.openai_interfaces.base", "alias": null, "line": 5, "statement": "from shared.openai_interfaces.base import OpenAIBaseInterface"}], "constants": [{"name": "ALLOWED_MODELS", "line": 7, "value": "[]", "type": "list"}]}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 3}, {"name": "from shared.openai_interfaces.base import OpenAIBaseInterface", "type": "import", "line": 5}, {"name": "ALLOWED_MODELS", "type": "constant", "line": 7}, {"name": "OpenAIAssistantsInterface", "type": "class", "line": 16}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 5}, {"name": "OpenAIAssistantsInterface Class", "description": "Class OpenAIAssistantsInterface definition and methods.", "line_start": 16, "line_end": 311}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 7, "line_end": 7}], "content_hash": "43c0a29cdce610e6d684e6759f621014"}'
