# PROJECT MAP - AI AGENT OPTIMIZED
# ===============================
# Comprehensive project analysis for AI agents
# Generated by genfilemap utility
#
# AGENT USAGE:
# - project_structure: File organization and type distribution
# - entry_points: Application entry points and CLI interface
# - statistics: Overall code metrics and statistics
# - dependency_analysis: Import relationships and dependency mapping
# - workflow_analysis: Execution paths and workflow diagrams
# - files: Detailed analysis of each file in the project
#
# KEY INSIGHTS:
# - Find entry points in entry_points section
# - Understand dependencies in dependency_analysis section
# - Trace execution flows in workflow_analysis section
# - Navigate codebase using files section
#
# Generated: 2025-08-06T13:04:55+00:00
# Tool: genfilemap --project-map-in-memory

project_name: master_root
base_path: /home/opsvi/master_root
generated_at: '2025-08-06T13:04:55+00:00'
# Module organization and file type distribution
project_structure:
  file_type_distribution:
    python_files: 112
    config_files: 8
    total_files: 112
  module_structure:
    libs:
      files:
      - libs/opsvi-rag/opsvi_rag/__init__.py
      - libs/opsvi-rag/opsvi_rag/core/__init__.py
      - libs/opsvi-rag/opsvi_rag/core/exceptions.py
      - libs/opsvi-rag/opsvi_rag/core/config.py
      - libs/opsvi-rag/opsvi_rag/search/__init__.py
      - libs/opsvi-rag/opsvi_rag/indexing/__init__.py
      - libs/opsvi-rag/opsvi_rag/utils/__init__.py
      - libs/opsvi-rag/opsvi_rag/tests/__init__.py
      - libs/opsvi-rag/opsvi_rag/analytics/__init__.py
      - libs/opsvi-rag/opsvi_rag/retrieval/__init__.py
      - libs/opsvi-rag/opsvi_rag/pipelines/__init__.py
      - libs/opsvi-rag/opsvi_rag/storage/__init__.py
      - libs/opsvi-rag/opsvi_rag/cache/__init__.py
      - libs/opsvi-rag/opsvi_rag/processors/__init__.py
      - libs/opsvi-rag/tests/test_providers.py
      - libs/opsvi-llm/opsvi_llm/__init__.py
      - libs/opsvi-llm/opsvi_llm/core/__init__.py
      - libs/opsvi-llm/opsvi_llm/core/exceptions.py
      - libs/opsvi-llm/opsvi_llm/core/config.py
      - libs/opsvi-llm/opsvi_llm/functions/__init__.py
      - libs/opsvi-llm/opsvi_llm/safety/__init__.py
      - libs/opsvi-llm/opsvi_llm/utils/__init__.py
      - libs/opsvi-llm/opsvi_llm/tests/__init__.py
      - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
      - libs/opsvi-llm/opsvi_llm/schemas/requests.py
      - libs/opsvi-llm/opsvi_llm/schemas/responses.py
      - libs/opsvi-llm/opsvi_llm/optimization/__init__.py
      - libs/opsvi-llm/opsvi_llm/streaming/__init__.py
      - libs/opsvi-llm/opsvi_llm/prompts/__init__.py
      - libs/opsvi-llm/opsvi_llm/providers/__init__.py
      - libs/opsvi-llm/opsvi_llm/providers/base.py
      - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
      - libs/opsvi-llm/tests/__init__.py
      - libs/opsvi-llm/tests/test_schemas.py
      - libs/opsvi-core/opsvi_core/__init__.py
      - libs/opsvi-core/opsvi_core/core/__init__.py
      - libs/opsvi-core/opsvi_core/core/exceptions.py
      - libs/opsvi-core/opsvi_core/core/config.py
      - libs/opsvi-core/opsvi_core/utils/__init__.py
      - libs/opsvi-core/opsvi_core/tests/__init__.py
      - libs/opsvi-core/opsvi_core/security/auth.py
      - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
      - libs/opsvi-core/opsvi_core/resilience/retry.py
      - libs/opsvi-core/opsvi_core/caching/__init__.py
      - libs/opsvi-core/opsvi_core/serialization/__init__.py
      - libs/opsvi-core/opsvi_core/testing/__init__.py
      - libs/opsvi-core/opsvi_core/agents/__init__.py
      - libs/opsvi-core/opsvi_core/agents/base_agent.py
      - libs/opsvi-core/tests/__init__.py
      - libs/opsvi-core/tests/test_core.py
      - libs/opsvi-foundation/opsvi_foundation/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/observability/alerts.py
      - libs/opsvi-foundation/opsvi_foundation/observability/profiling.py
      - libs/opsvi-foundation/opsvi_foundation/observability/tracing.py
      - libs/opsvi-foundation/opsvi_foundation/observability/health.py
      - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
      - libs/opsvi-foundation/opsvi_foundation/observability/metrics.py
      - libs/opsvi-foundation/opsvi_foundation/utils/compression.py
      - libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
      - libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
      - libs/opsvi-foundation/opsvi_foundation/utils/encryption.py
      - libs/opsvi-foundation/opsvi_foundation/utils/caching.py
      - libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
      - libs/opsvi-foundation/opsvi_foundation/utils/validation.py
      - libs/opsvi-foundation/opsvi_foundation/security/permissions.py
      - libs/opsvi-foundation/opsvi_foundation/security/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/security/oauth.py
      - libs/opsvi-foundation/opsvi_foundation/security/encryption.py
      - libs/opsvi-foundation/opsvi_foundation/security/auth.py
      - libs/opsvi-foundation/opsvi_foundation/security/validation.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/rate_limiter.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/fallback.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/circuit_breaker.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/retry.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/bulkhead.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/timeout.py
      - libs/opsvi-foundation/opsvi_foundation/testing/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
      - libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
      - libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/base.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/factory.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
      - libs/opsvi-foundation/opsvi_foundation/config/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/config/settings.py
      - libs/opsvi-foundation/opsvi_foundation/config/secrets.py
      - libs/opsvi-foundation/opsvi_foundation/config/environments.py
      - libs/opsvi-agents/opsvi_agents/__init__.py
      - libs/opsvi-agents/opsvi_agents/adapters/__init__.py
      - libs/opsvi-agents/opsvi_agents/monitoring/__init__.py
      - libs/opsvi-agents/opsvi_agents/communication/__init__.py
      - libs/opsvi-agents/opsvi_agents/core/__init__.py
      - libs/opsvi-agents/opsvi_agents/core/exceptions.py
      - libs/opsvi-agents/opsvi_agents/core/config.py
      - libs/opsvi-agents/opsvi_agents/workflows/__init__.py
      - libs/opsvi-agents/opsvi_agents/utils/__init__.py
      - libs/opsvi-agents/opsvi_agents/tests/__init__.py
      - libs/opsvi-agents/opsvi_agents/types/__init__.py
      - libs/opsvi-agents/opsvi_agents/registry/__init__.py
      - libs/opsvi-agents/opsvi_agents/deployment/__init__.py
      - libs/opsvi-agents/opsvi_agents/orchestration/__init__.py
      - libs/opsvi-agents/tests/__init__.py
      - libs/opsvi-agents/tests/test_agents.py
      - libs/templates/create_opsvi_library.py
      total_lines: 17749
      total_functions: 197
      total_classes: 338
    tests:
      files:
      - tests/opsvi_core/test_logging.py
      total_lines: 11
      total_functions: 1
      total_classes: 0
    tools:
      files:
      - tools/rag_init.py
      total_lines: 129
      total_functions: 2
      total_classes: 0
# Application entry points and CLI interface
entry_points:
  core:
    file: libs/opsvi-core/tests/test_core.py
    type: core_processor
    main_functions:
    - run_process
    description: Main processing workflow coordinator
# Overall code metrics and statistics
statistics:
  total_functions: 200
  total_classes: 338
  total_imports: 806
  total_lines: 17889
  external_dependencies: []
# Import relationships and dependency mapping between files
dependency_analysis:
  most_imported_files:
  - file_path: libs/opsvi-rag/opsvi_rag/core/exceptions.py
    imported_by_count: 16
    imported_by:
    - libs/opsvi-rag/opsvi_rag/__init__.py
    - libs/opsvi-rag/opsvi_rag/core/__init__.py
    - libs/opsvi-rag/tests/test_providers.py
    - libs/opsvi-llm/opsvi_llm/__init__.py
    - libs/opsvi-llm/opsvi_llm/core/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
    - libs/opsvi-core/opsvi_core/resilience/retry.py
    - libs/opsvi-core/opsvi_core/agents/base_agent.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-agents/opsvi_agents/__init__.py
    - libs/opsvi-agents/opsvi_agents/core/__init__.py
    - libs/opsvi-agents/tests/test_agents.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    imported_by_count: 13
    imported_by:
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
    - libs/opsvi-core/opsvi_core/resilience/retry.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    - libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
    - libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
    - tests/opsvi_core/test_logging.py
  - file_path: libs/opsvi-rag/opsvi_rag/core/config.py
    imported_by_count: 7
    imported_by:
    - libs/opsvi-rag/opsvi_rag/core/__init__.py
    - libs/opsvi-llm/opsvi_llm/core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-foundation/opsvi_foundation/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
    - libs/opsvi-agents/opsvi_agents/core/__init__.py
  - file_path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
    imported_by_count: 5
    imported_by:
    - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
    - libs/opsvi-llm/opsvi_llm/schemas/requests.py
    - libs/opsvi-llm/opsvi_llm/providers/base.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/tests/test_schemas.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/config/secrets.py
    imported_by_count: 5
    imported_by:
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
    - libs/opsvi-foundation/opsvi_foundation/security/oauth.py
    - libs/opsvi-foundation/opsvi_foundation/security/encryption.py
    - libs/opsvi-foundation/opsvi_foundation/security/auth.py
  - file_path: libs/opsvi-llm/opsvi_llm/providers/base.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-rag/tests/test_providers.py
    - libs/opsvi-llm/opsvi_llm/providers/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
  - file_path: libs/opsvi-llm/opsvi_llm/schemas/requests.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/base.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
  - file_path: libs/opsvi-core/opsvi_core/agents/base_agent.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-core/opsvi_core/agents/__init__.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-agents/tests/test_agents.py
  - file_path: libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    imported_by_count: 2
    imported_by:
    - libs/opsvi-rag/tests/test_providers.py
    - libs/opsvi-llm/opsvi_llm/providers/__init__.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/observability/metrics.py
    imported_by_count: 1
    imported_by:
    - libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
  circular_dependencies:
  - cycle:
    - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    severity: high
# Execution paths and workflow diagrams
workflow_analysis:
  workflow_paths: {}
  conditional_branches: []
  function_calls: {}
  workflow_diagram: "graph TD\n    A[Entry Point] --> B{Parse Arguments}\n    B --> C{Check Flags}\n\n    C -->|Flags Found| D[Process Flags]\n    C -->|No Flags| E[Default Processing]\n\n    D --> F[Execute Workflow]\n    E --> F\n\n    F --> G[Complete]\n\n    style A fill:#e1f5fe\n    style G fill:#c8e6c9\n    style C fill:#fff3e0\n    style F fill:#f3e5f5\n"
# Detailed analysis of each file in the project
files:
- path: libs/opsvi-rag/opsvi_rag/__init__.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import FoundationConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import AuthManager"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import RAGConfig"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import config"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import RAGError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import RAGValidationError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import RAGConfigurationError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 15}, {"name": "from opsvi_foundation import AuthManager", "type": "import", "line": 15}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from core import RAGConfig", "type": "import", "line": 24}, {"name": "from core import config", "type": "import", "line": 24}, {"name": "from core.exceptions import RAGError", "type": "import", "line": 25}, {"name": "from core.exceptions import RAGValidationError", "type": "import", "line": 25}, {"name": "from core.exceptions import RAGConfigurationError", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "3c9a1e8bd14f6c0926e842a86110e156"}'
- path: libs/opsvi-rag/opsvi_rag/core/__init__.py
  line_count: 16
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import RAGConfig"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import config"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import RAGError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import RAGValidationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import RAGConfigurationError"}], "constants": []}, "key_elements": [{"name": "from config import RAGConfig", "type": "import", "line": 9}, {"name": "from config import config", "type": "import", "line": 9}, {"name": "from exceptions import RAGError", "type": "import", "line": 10}, {"name": "from exceptions import RAGValidationError", "type": "import", "line": 10}, {"name": "from exceptions import RAGConfigurationError", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "c78667b896e2106cdef0883ac150596c"}'
- path: libs/opsvi-rag/opsvi_rag/core/exceptions.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RAGError", "line": 12, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Base exception class for RAG-related errors."}, {"name": "RAGValidationError", "line": 18, "inherits_from": ["RAGError):"], "methods": [], "properties": [], "description": "Exception raised for validation errors in RAG processes."}, {"name": "RAGConfigurationError", "line": 24, "inherits_from": ["RAGError):"], "methods": [], "properties": [], "description": "Exception raised for configuration errors in RAG setup."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "RAGError", "type": "class", "line": 12}, {"name": "RAGValidationError", "type": "class", "line": 18}, {"name": "RAGConfigurationError", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "RAGError Class", "description": "Class RAGError definition and methods.", "line_start": 12, "line_end": 22}, {"name": "RAGValidationError Class", "description": "Class RAGValidationError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "RAGConfigurationError Class", "description": "Class RAGConfigurationError definition and methods.", "line_start": 24, "line_end": 34}], "content_hash": "749d2a2b0269015947ac0259b5e8eb95"}'
- path: libs/opsvi-rag/opsvi_rag/core/config.py
  line_count: 29
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RAGConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 23, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"RAGConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"RAGConfig\""}], "properties": [], "description": "Configuration class for Retrieval-Augmented Generation (RAG) models."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import FoundationConfig"}], "constants": []}, "key_elements": [{"name": "from typing import Optional", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 11}, {"name": "RAGConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "RAGConfig Class", "description": "Class RAGConfig definition and methods.", "line_start": 14, "line_end": 26}], "content_hash": "20104d9f080f41f5b39925b15dd147bf"}'
- path: libs/opsvi-rag/opsvi_rag/search/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "0d476c1be10478f038e027ffb441b27d"}'
- path: libs/opsvi-rag/opsvi_rag/indexing/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "cf780950ee4943f5d4dc7216e3065ecc"}'
- path: libs/opsvi-rag/opsvi_rag/utils/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "e1847bbb29fda49dc31b2956947c27d0"}'
- path: libs/opsvi-rag/opsvi_rag/tests/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "d3aa683d7496da7bca899c8f2fd61536"}'
- path: libs/opsvi-rag/opsvi_rag/analytics/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "2f9fd76358ba948b2a861ac6f69c44c4"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "6612976424276396a5344eea4dfb5051"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "91d894ebf4b58e2c56187b08dc7266a8"}'
- path: libs/opsvi-rag/opsvi_rag/storage/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "0532b7818acf24069585c1e461ed55d4"}'
- path: libs/opsvi-rag/opsvi_rag/cache/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "9475c7bbc3b1da868733f6879e0ef408"}'
- path: libs/opsvi-rag/opsvi_rag/processors/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "ff7dde1ed657be1936efbb19427a03b7"}'
- path: libs/opsvi-rag/tests/test_providers.py
  line_count: 307
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_providers.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MockEmbeddingProvider", "line": 24, "inherits_from": ["BaseEmbeddingProvider):"], "methods": [{"name": "__init__", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str", "default": "mock-model"}], "is_async": false, "signature": "__init__(self, model: str = mock-model, **kwargs)"}, {"name": "embed_texts", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str], **kwargs"}], "is_async": true, "return_type": "list[list[float]]", "signature": "async embed_texts(self, texts: list[str], **kwargs, **kwargs) -> list[list[float]]"}, {"name": "get_dimensions", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "signature": "async get_dimensions(self) -> int"}, {"name": "health_check", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Simulates an embedding provider for testing purposes."}, {"name": "TestBaseEmbeddingProvider", "line": 42, "inherits_from": [], "methods": [{"name": "provider", "line": 46, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "provider(self)"}, {"name": "test_embed_text_single", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": true, "description": "Test embedding a single text.", "signature": "async test_embed_text_single(self, provider)"}, {"name": "test_embed_batch_structured", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": true, "description": "Test structured batch embedding.", "signature": "async test_embed_batch_structured(self, provider)"}, {"name": "test_context_manager_protocol", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": false, "description": "Test async context manager protocol.", "signature": "test_context_manager_protocol(self, provider)"}], "properties": [], "description": "Tests the base embedding provider''s core functionality and interface."}, {"name": "TestOpenAIEmbeddingProvider", "line": 79, "inherits_from": [], "methods": [{"name": "config", "line": 83, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "config(self)"}, {"name": "mock_openai_provider", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "mock_openai_provider(self)"}, {"name": "test_initialization_valid_model", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": false, "description": "Test initialization with valid model.", "signature": "test_initialization_valid_model(self, config)"}, {"name": "test_initialization_invalid_model", "line": 107, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test initialization with invalid model.", "signature": "test_initialization_invalid_model(self)"}, {"name": "test_embed_texts_success", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_openai_provider", "type": "unknown"}], "is_async": true, "description": "Test successful text embedding.", "signature": "async test_embed_texts_success(self, config, mock_openai_provider)"}, {"name": "test_embed_texts_batch_size_exceeded", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": true, "description": "Test batch size validation.", "signature": "async test_embed_texts_batch_size_exceeded(self, config)"}, {"name": "test_get_dimensions", "line": 148, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": true, "description": "Test getting embedding dimensions.", "signature": "async test_get_dimensions(self, config)"}, {"name": "test_get_model_info", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": false, "description": "Test getting model information.", "signature": "test_get_model_info(self, config)"}], "properties": [], "description": "Validates the OpenAI embedding provider implementation and its integration."}, {"name": "TestSentenceTransformerEmbeddingProvider", "line": 168, "inherits_from": [], "methods": [{"name": "config", "line": 172, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "config(self)"}, {"name": "mock_sentence_transformer", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "mock_sentence_transformer(self)"}, {"name": "test_initialization", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": false, "description": "Test provider initialization.", "signature": "test_initialization(self, config, mock_sentence_transformer)"}, {"name": "test_initialization_no_library", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test initialization when sentence-transformers not available.", "signature": "test_initialization_no_library(self)"}, {"name": "test_embed_texts_success", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": true, "description": "Test successful text embedding.", "signature": "async test_embed_texts_success(self, config, mock_sentence_transformer)"}, {"name": "test_list_available_models", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": false, "description": "Test listing available models.", "signature": "test_list_available_models(self, config, mock_sentence_transformer)"}], "properties": [], "description": "Checks the Sentence Transformer embedding provider for correctness and performance."}, {"name": "TestEmbeddingProviderFactory", "line": 242, "inherits_from": [], "methods": [{"name": "test_create_openai_provider", "line": 246, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test creating OpenAI provider through factory.", "signature": "async test_create_openai_provider(self)"}, {"name": "test_create_sentence_transformer_provider", "line": 257, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test creating Sentence Transformers provider through factory.", "signature": "async test_create_sentence_transformer_provider(self)"}, {"name": "test_get_default_config", "line": 273, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting default configuration.", "signature": "test_get_default_config(self)"}, {"name": "test_get_provider_capabilities", "line": 287, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting provider capabilities.", "signature": "test_get_provider_capabilities(self)"}, {"name": "test_create_hybrid_config", "line": 301, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating hybrid configuration with fallback.", "signature": "test_create_hybrid_config(self)"}], "properties": [], "description": "Tests the factory responsible for creating embedding provider instances."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import MagicMock"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import patch"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 10, "statement": "from opsvi_core.exceptions import InitializationError"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 10, "statement": "from opsvi_core.exceptions import ValidationError"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import BaseEmbeddingProvider"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import EmbeddingProviderFactory"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import OpenAIEmbeddingProvider"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import ProviderType"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import SentenceTransformerEmbeddingProvider"}, {"module": "opsvi_rag.providers.base", "alias": null, "line": 19, "statement": "from opsvi_rag.providers.base import EmbeddingRequest"}, {"module": "opsvi_rag.providers.base", "alias": null, "line": 19, "statement": "from opsvi_rag.providers.base import EmbeddingResponse"}, {"module": "opsvi_rag.providers.openai_provider", "alias": null, "line": 20, "statement": "from opsvi_rag.providers.openai_provider import OpenAIEmbeddingConfig"}, {"module": "opsvi_rag.providers.sentence_transformer_provider", "alias": null, "line": 21, "statement": "from opsvi_rag.providers.sentence_transformer_provider import SentenceTransformerConfig"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 7}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 7}, {"name": "from unittest.mock import patch", "type": "import", "line": 7}, {"name": "from opsvi_core.exceptions import InitializationError", "type": "import", "line": 10}, {"name": "from opsvi_core.exceptions import ValidationError", "type": "import", "line": 10}, {"name": "from opsvi_rag.providers import BaseEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import EmbeddingProviderFactory", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import OpenAIEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import ProviderType", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import SentenceTransformerEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers.base import EmbeddingRequest", "type": "import", "line": 19}, {"name": "from opsvi_rag.providers.base import EmbeddingResponse", "type": "import", "line": 19}, {"name": "from opsvi_rag.providers.openai_provider import OpenAIEmbeddingConfig", "type": "import", "line": 20}, {"name": "from opsvi_rag.providers.sentence_transformer_provider import SentenceTransformerConfig", "type": "import", "line": 21}, {"name": "MockEmbeddingProvider", "type": "class", "line": 24}, {"name": "TestBaseEmbeddingProvider", "type": "class", "line": 42}, {"name": "TestOpenAIEmbeddingProvider", "type": "class", "line": 79}, {"name": "TestSentenceTransformerEmbeddingProvider", "type": "class", "line": 168}, {"name": "TestEmbeddingProviderFactory", "type": "class", "line": 242}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 21}, {"name": "MockEmbeddingProvider Class", "description": "Class MockEmbeddingProvider definition and methods.", "line_start": 24, "line_end": 41}, {"name": "TestBaseEmbeddingProvider Class", "description": "Class TestBaseEmbeddingProvider definition and methods.", "line_start": 42, "line_end": 76}, {"name": "TestOpenAIEmbeddingProvider Class", "description": "Class TestOpenAIEmbeddingProvider definition and methods.", "line_start": 79, "line_end": 157}, {"name": "TestSentenceTransformerEmbeddingProvider Class", "description": "Class TestSentenceTransformerEmbeddingProvider definition and methods.", "line_start": 168, "line_end": 232}, {"name": "TestEmbeddingProviderFactory Class", "description": "Class TestEmbeddingProviderFactory definition and methods.", "line_start": 242, "line_end": 304}], "content_hash": "f7e0d99d19115fae4bd9ad091932d271"}'
- path: libs/opsvi-llm/opsvi_llm/__init__.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import FoundationConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import AuthManager"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import LLMConfig"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import config"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import LLMError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import LLMValidationError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import LLMConfigurationError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 15}, {"name": "from opsvi_foundation import AuthManager", "type": "import", "line": 15}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from core import LLMConfig", "type": "import", "line": 24}, {"name": "from core import config", "type": "import", "line": 24}, {"name": "from core.exceptions import LLMError", "type": "import", "line": 25}, {"name": "from core.exceptions import LLMValidationError", "type": "import", "line": 25}, {"name": "from core.exceptions import LLMConfigurationError", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "fcd73a7a4b23c950ee53ca5c88c44698"}'
- path: libs/opsvi-llm/opsvi_llm/core/__init__.py
  line_count: 16
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import LLMConfig"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import config"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import LLMError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import LLMValidationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import LLMConfigurationError"}], "constants": []}, "key_elements": [{"name": "from config import LLMConfig", "type": "import", "line": 9}, {"name": "from config import config", "type": "import", "line": 9}, {"name": "from exceptions import LLMError", "type": "import", "line": 10}, {"name": "from exceptions import LLMValidationError", "type": "import", "line": 10}, {"name": "from exceptions import LLMConfigurationError", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "8b3a1b404c271a26e8bde616d2d3914c"}'
- path: libs/opsvi-llm/opsvi_llm/core/exceptions.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LLMError", "line": 12, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Base exception class for errors related to large language models."}, {"name": "LLMValidationError", "line": 18, "inherits_from": ["LLMError):"], "methods": [], "properties": [], "description": "Exception raised for validation errors in large language model inputs or outputs."}, {"name": "LLMConfigurationError", "line": 24, "inherits_from": ["LLMError):"], "methods": [], "properties": [], "description": "Exception raised for configuration errors in large language model setup."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "LLMError", "type": "class", "line": 12}, {"name": "LLMValidationError", "type": "class", "line": 18}, {"name": "LLMConfigurationError", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "LLMError Class", "description": "Class LLMError definition and methods.", "line_start": 12, "line_end": 22}, {"name": "LLMValidationError Class", "description": "Class LLMValidationError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "LLMConfigurationError Class", "description": "Class LLMConfigurationError definition and methods.", "line_start": 24, "line_end": 34}], "content_hash": "2e66560efc7682dff3bc10be56c8bff5"}'
- path: libs/opsvi-llm/opsvi_llm/core/config.py
  line_count: 29
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LLMConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 23, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"LLMConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"LLMConfig\""}], "properties": [], "description": "Configuration class for setting up parameters of a large language model."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import FoundationConfig"}], "constants": []}, "key_elements": [{"name": "from typing import Optional", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 11}, {"name": "LLMConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "LLMConfig Class", "description": "Class LLMConfig definition and methods.", "line_start": 14, "line_end": 26}], "content_hash": "b6831397566d0e9c4bf05a76be01c71d"}'
- path: libs/opsvi-llm/opsvi_llm/functions/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "0a41bc1d6b05f30bff951f71305c7079"}'
- path: libs/opsvi-llm/opsvi_llm/safety/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "e4e269342b481749d9b58d8124a838ea"}'
- path: libs/opsvi-llm/opsvi_llm/utils/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "d6b1c1e3e209646535ea3becb49c324e"}'
- path: libs/opsvi-llm/opsvi_llm/tests/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1b499a7d87b476025eb4ed248dbb7c9b"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/__init__.py
  line_count: 39
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "requests", "alias": null, "line": 9, "statement": "from requests import ChatRequest"}, {"module": "requests", "alias": null, "line": 9, "statement": "from requests import CompletionRequest"}, {"module": "requests", "alias": null, "line": 9, "statement": "from requests import EmbeddingRequest"}, {"module": "requests", "alias": null, "line": 9, "statement": "from requests import ModerationRequest"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import LLMResponse"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import ChatMessage"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import MessageRole"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import FunctionCall"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import FunctionDefinition"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import StreamChunk"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import EmbeddingResponse"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import ModerationResponse"}], "constants": []}, "key_elements": [{"name": "from requests import ChatRequest", "type": "import", "line": 9}, {"name": "from requests import CompletionRequest", "type": "import", "line": 9}, {"name": "from requests import EmbeddingRequest", "type": "import", "line": 9}, {"name": "from requests import ModerationRequest", "type": "import", "line": 9}, {"name": "from responses import LLMResponse", "type": "import", "line": 15}, {"name": "from responses import ChatMessage", "type": "import", "line": 15}, {"name": "from responses import MessageRole", "type": "import", "line": 15}, {"name": "from responses import FunctionCall", "type": "import", "line": 15}, {"name": "from responses import FunctionDefinition", "type": "import", "line": 15}, {"name": "from responses import StreamChunk", "type": "import", "line": 15}, {"name": "from responses import EmbeddingResponse", "type": "import", "line": 15}, {"name": "from responses import ModerationResponse", "type": "import", "line": 15}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}], "content_hash": "25398762141e168660d22d0d4087a057"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/requests.py
  line_count: 141
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "requests.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CompletionRequest", "line": 18, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_prompt", "line": 44, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_prompt(cls, v)"}], "properties": [], "description": "Represents a request to generate text completions from a language model."}, {"name": "ChatRequest", "line": 50, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_messages", "line": 87, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_messages(cls, v)"}, {"name": "validate_function_call", "line": 93, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}, {"name": "values", "type": "unknown"}], "is_async": false, "signature": "validate_function_call(cls, v, values)"}], "properties": [], "description": "Handles chat-based interactions with a conversational language model."}, {"name": "EmbeddingRequest", "line": 99, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_input", "line": 107, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_input(cls, v)"}], "properties": [], "description": "Creates requests to generate vector embeddings from input text."}, {"name": "ModerationRequest", "line": 123, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_input", "line": 130, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_input(cls, v)"}], "properties": [], "description": "Manages requests to evaluate and moderate content for policy compliance."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Union"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import validator"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import ChatMessage"}, {"module": "responses", "alias": null, "line": 15, "statement": "from responses import FunctionDefinition"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import List", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from typing import Union", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from pydantic import validator", "type": "import", "line": 13}, {"name": "from responses import ChatMessage", "type": "import", "line": 15}, {"name": "from responses import FunctionDefinition", "type": "import", "line": 15}, {"name": "CompletionRequest", "type": "class", "line": 18}, {"name": "ChatRequest", "type": "class", "line": 50}, {"name": "EmbeddingRequest", "type": "class", "line": 99}, {"name": "ModerationRequest", "type": "class", "line": 123}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "CompletionRequest Class", "description": "Class CompletionRequest definition and methods.", "line_start": 18, "line_end": 47}, {"name": "ChatRequest Class", "description": "Class ChatRequest definition and methods.", "line_start": 50, "line_end": 96}, {"name": "EmbeddingRequest Class", "description": "Class EmbeddingRequest definition and methods.", "line_start": 99, "line_end": 110}, {"name": "ModerationRequest Class", "description": "Class ModerationRequest definition and methods.", "line_start": 123, "line_end": 133}], "content_hash": "a99ee3207aeee7a4208f7a8e831e147c"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
  line_count: 247
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "responses.py", "description": "Python module with 0 functions and 13 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MessageRole", "line": 18, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "SYSTEM", "line": 19, "type": ""}, {"name": "USER", "line": 20, "type": ""}, {"name": "ASSISTANT", "line": 21, "type": ""}, {"name": "FUNCTION", "line": 22, "type": ""}], "description": "Represents the role of a message participant in a conversation."}, {"name": "ChatMessage", "line": 27, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_content", "line": 37, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_content(cls, v)"}], "properties": [], "description": "Encapsulates a single message within a chat, including its content and metadata."}, {"name": "FunctionParameter", "line": 43, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines a parameter for a function, including its name and type."}, {"name": "FunctionDefinition", "line": 64, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_name", "line": 74, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_name(cls, v)"}], "properties": [], "description": "Describes a function''s signature and its parameters."}, {"name": "FunctionCall", "line": 85, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_arguments", "line": 92, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_arguments(cls, v)"}, {"name": "get_arguments", "line": 102, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Parse arguments as dictionary.\n\n        Returns:\n            Parsed arguments dictionary\n        ", "signature": "get_arguments(self) -> Dict[str, Any]"}], "properties": [], "description": "Represents an invocation of a function with specific arguments."}, {"name": "UsageInfo", "line": 111, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Tracks usage statistics such as token counts for API calls."}, {"name": "LLMResponse", "line": 119, "inherits_from": ["BaseModel):"], "methods": [{"name": "has_function_calls", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if response contains function calls.\n\n        Returns:\n            True if response has function calls\n        ", "signature": "has_function_calls(self) -> bool"}, {"name": "get_content", "line": 148, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get the main content from the response.\n\n        Returns:\n            Generated text or content from first message\n        ", "signature": "get_content(self) -> str"}, {"name": "get_total_tokens", "line": 162, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get total tokens used.\n\n        Returns:\n            Total token count, 0 if not available\n        ", "signature": "get_total_tokens(self) -> int"}], "properties": [], "description": "Models the response from a large language model, including generated content and metadata."}, {"name": "StreamChunk", "line": 171, "inherits_from": ["BaseModel):"], "methods": [{"name": "is_final", "line": 183, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if this is the final chunk.\n\n        Returns:\n            True if this is the final chunk\n        ", "signature": "is_final(self) -> bool"}], "properties": [], "description": "Represents a partial chunk of streamed data from the language model."}, {"name": "EmbeddingVector", "line": 192, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds a vector representation of text for embedding purposes."}, {"name": "EmbeddingResponse", "line": 200, "inherits_from": ["BaseModel):"], "methods": [{"name": "get_embeddings", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[List[float]]", "description": "Get embedding vectors as list.\n\n        Returns:\n            List of embedding vectors\n        ", "signature": "get_embeddings(self) -> List[List[float]]"}], "properties": [], "description": "Contains the response data for an embedding request, including vectors and metadata."}, {"name": "ModerationCategory", "line": 219, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines categories used for content moderation classification."}, {"name": "ModerationResult", "line": 226, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the result of a moderation check on content."}, {"name": "ModerationResponse", "line": 236, "inherits_from": ["BaseModel):"], "methods": [{"name": "is_flagged", "line": 243, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if any content was flagged.\n\n        Returns:\n            True if any content was flagged\n        ", "signature": "is_flagged(self) -> bool"}], "properties": [], "description": "Encapsulates the full response from a content moderation request."}], "imports": [{"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import validator"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from pydantic import validator", "type": "import", "line": 15}, {"name": "MessageRole", "type": "class", "line": 18}, {"name": "ChatMessage", "type": "class", "line": 27}, {"name": "FunctionParameter", "type": "class", "line": 43}, {"name": "FunctionDefinition", "type": "class", "line": 64}, {"name": "FunctionCall", "type": "class", "line": 85}, {"name": "UsageInfo", "type": "class", "line": 111}, {"name": "LLMResponse", "type": "class", "line": 119}, {"name": "StreamChunk", "type": "class", "line": 171}, {"name": "EmbeddingVector", "type": "class", "line": 192}, {"name": "EmbeddingResponse", "type": "class", "line": 200}, {"name": "ModerationCategory", "type": "class", "line": 219}, {"name": "ModerationResult", "type": "class", "line": 226}, {"name": "ModerationResponse", "type": "class", "line": 236}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "MessageRole Class", "description": "Class MessageRole definition and methods.", "line_start": 18, "line_end": 28}, {"name": "ChatMessage Class", "description": "Class ChatMessage definition and methods.", "line_start": 27, "line_end": 40}, {"name": "FunctionParameter Class", "description": "Class FunctionParameter definition and methods.", "line_start": 43, "line_end": 53}, {"name": "FunctionDefinition Class", "description": "Class FunctionDefinition definition and methods.", "line_start": 64, "line_end": 77}, {"name": "FunctionCall Class", "description": "Class FunctionCall definition and methods.", "line_start": 85, "line_end": 105}, {"name": "UsageInfo Class", "description": "Class UsageInfo definition and methods.", "line_start": 111, "line_end": 121}, {"name": "LLMResponse Class", "description": "Class LLMResponse definition and methods.", "line_start": 119, "line_end": 165}, {"name": "StreamChunk Class", "description": "Class StreamChunk definition and methods.", "line_start": 171, "line_end": 186}, {"name": "EmbeddingVector Class", "description": "Class EmbeddingVector definition and methods.", "line_start": 192, "line_end": 202}, {"name": "EmbeddingResponse Class", "description": "Class EmbeddingResponse definition and methods.", "line_start": 200, "line_end": 213}, {"name": "ModerationCategory Class", "description": "Class ModerationCategory definition and methods.", "line_start": 219, "line_end": 229}, {"name": "ModerationResult Class", "description": "Class ModerationResult definition and methods.", "line_start": 226, "line_end": 236}, {"name": "ModerationResponse Class", "description": "Class ModerationResponse definition and methods.", "line_start": 236, "line_end": 246}], "content_hash": "0d0fe715a2a1a69941f1dcc34380f0db"}'
- path: libs/opsvi-llm/opsvi_llm/optimization/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "4e2e7eb93f9f0f3063ea6f7339a45f7e"}'
- path: libs/opsvi-llm/opsvi_llm/streaming/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "195ab0315cc386e1ddfaf76b7195483f"}'
- path: libs/opsvi-llm/opsvi_llm/prompts/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "72e9dce04140798aa394445f24f80de4"}'
- path: libs/opsvi-llm/opsvi_llm/providers/__init__.py
  line_count: 14
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "base", "alias": null, "line": 9, "statement": "from base import BaseLLMProvider"}, {"module": "openai_provider", "alias": null, "line": 10, "statement": "from openai_provider import OpenAIProvider"}, {"module": "openai_provider", "alias": null, "line": 10, "statement": "from openai_provider import OpenAIConfig"}], "constants": []}, "key_elements": [{"name": "from base import BaseLLMProvider", "type": "import", "line": 9}, {"name": "from openai_provider import OpenAIProvider", "type": "import", "line": 10}, {"name": "from openai_provider import OpenAIConfig", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "198eff16b1f2737a801aed0244098b69"}'
- path: libs/opsvi-llm/opsvi_llm/providers/base.py
  line_count: 113
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "BaseLLMProvider", "line": 20, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "generate_chat", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response with generated content\n\n        Raises:\n            LLMError: If generation fails\n        ", "signature": "async generate_chat(self, request: ChatRequest) -> LLMResponse"}, {"name": "generate_stream", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[str]", "description": "Generate streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Content chunks as they arrive\n\n        Raises:\n            LLMError: If streaming fails\n        ", "signature": "async generate_stream(self, request: ChatRequest) -> AsyncIterator[str]"}, {"name": "generate_with_functions", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion with function calling.\n\n        Args:\n            request: Chat completion request with functions\n\n        Returns:\n            LLM response with function calls if any\n\n        Raises:\n            LLMError: If generation fails\n        ", "signature": "async generate_with_functions(self, request: ChatRequest) -> LLMResponse"}, {"name": "get_supported_models", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "Get list of supported models.\n\n        Returns:\n            List of supported model names\n        ", "signature": "get_supported_models(self) -> List[str]"}, {"name": "supports_function_calling", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports function calling.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports function calling\n        ", "signature": "supports_function_calling(self, model: str | None = None = None) -> bool"}, {"name": "supports_streaming", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports streaming.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports streaming\n        ", "signature": "supports_streaming(self, model: str | None = None = None) -> bool"}, {"name": "health_check", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "Dict[str, Any]", "description": "Perform health check.\n\n        Returns:\n            Health status information\n\n        Raises:\n            ComponentError: If health check fails\n        ", "signature": "async health_check(self) -> Dict[str, Any]"}], "properties": [], "description": "Abstract base class for large language model providers, defining core methods for interaction and management."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import AsyncIterator"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import List"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "schemas.requests", "alias": null, "line": 16, "statement": "from schemas.requests import ChatRequest"}, {"module": "schemas.requests", "alias": null, "line": 16, "statement": "from schemas.requests import CompletionRequest"}, {"module": "schemas.responses", "alias": null, "line": 17, "statement": "from schemas.responses import LLMResponse"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import AsyncIterator", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import List", "type": "import", "line": 12}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 14}, {"name": "from schemas.requests import ChatRequest", "type": "import", "line": 16}, {"name": "from schemas.requests import CompletionRequest", "type": "import", "line": 16}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 17}, {"name": "BaseLLMProvider", "type": "class", "line": 20}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "BaseLLMProvider Class", "description": "Class BaseLLMProvider definition and methods.", "line_start": 20, "line_end": 109}], "content_hash": "08b22bf4bcac34e802cf0013c82b08ca"}'
- path: libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
  line_count: 483
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "openai_provider.py", "description": "Python module with 1 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "validate_model_constraints", "line": 55, "parameters": [{"name": "model", "type": "str"}], "is_async": false, "return_type": "None", "description": "Checks if the specified model meets required constraints.", "signature": "validate_model_constraints(model: str) -> None"}], "classes": [{"name": "OpenAIConfig", "line": 71, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for OpenAI API integration."}, {"name": "OpenAIProvider", "line": 90, "inherits_from": ["BaseLLMProvider):"], "methods": [{"name": "__init__", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OpenAIConfig):"}], "is_async": false, "signature": "__init__(self, config: OpenAIConfig):)"}, {"name": "_initialize", "line": 161, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the provider.", "signature": "async _initialize(self) -> None"}, {"name": "generate_chat", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response with generated content\n\n        Raises:\n            LLMError: If generation fails\n            LLMValidationError: If request validation fails\n        ", "signature": "async generate_chat(self, request: ChatRequest) -> LLMResponse"}, {"name": "generate_stream", "line": 203, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[str]", "description": "Generate streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Content chunks as they arrive\n\n        Raises:\n            LLMError: If streaming fails\n        ", "signature": "async generate_stream(self, request: ChatRequest) -> AsyncIterator[str]"}, {"name": "generate_with_functions", "line": 231, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion with function calling.\n\n        Args:\n            request: Chat completion request with functions\n\n        Returns:\n            LLM response with function calls if any\n\n        Raises:\n            LLMError: If generation fails\n            LLMValidationError: If functions are not supported\n        ", "signature": "async generate_with_functions(self, request: ChatRequest) -> LLMResponse"}, {"name": "_create_chat_completion", "line": 257, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Create chat completion using OpenAI API.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response\n        ", "signature": "async _create_chat_completion(self, request: ChatRequest) -> LLMResponse"}, {"name": "_create_chat_stream", "line": 284, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[ChatCompletionChunk]", "description": "Create streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Chat completion chunks\n        ", "signature": "async _create_chat_stream(self, request: ChatRequest) -> AsyncIterator[ChatCompletionChunk]"}, {"name": "_build_api_request", "line": 309, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Build OpenAI API request from chat request.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            OpenAI API request parameters\n        ", "signature": "_build_api_request(self, request: ChatRequest) -> Dict[str, Any]"}, {"name": "_convert_response", "line": 343, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "ChatCompletion"}], "is_async": false, "return_type": "LLMResponse", "description": "Convert OpenAI response to LLM response.\n\n        Args:\n            response: OpenAI chat completion response\n\n        Returns:\n            LLM response\n        ", "signature": "_convert_response(self, response: ChatCompletion) -> LLMResponse"}, {"name": "_validate_request", "line": 395, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": false, "return_type": "None", "description": "Validate chat request.\n\n        Args:\n            request: Chat completion request\n\n        Raises:\n            LLMValidationError: If request is invalid\n        ", "signature": "_validate_request(self, request: ChatRequest) -> None"}, {"name": "get_supported_models", "line": 423, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "Get list of supported models.\n\n        Returns:\n            List of supported model names\n        ", "signature": "get_supported_models(self) -> List[str]"}, {"name": "supports_function_calling", "line": 431, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports function calling.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports function calling\n        ", "signature": "supports_function_calling(self, model: str | None = None = None) -> bool"}, {"name": "supports_streaming", "line": 444, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports streaming.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports streaming (all OpenAI models do)\n        ", "signature": "supports_streaming(self, model: str | None = None = None) -> bool"}, {"name": "health_check", "line": 456, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "Dict[str, Any]", "description": "Perform health check.\n\n        Returns:\n            Health status information\n\n        Raises:\n            ComponentError: If health check fails\n        ", "signature": "async health_check(self) -> Dict[str, Any]"}], "properties": [], "description": "Handles interactions and operations with the OpenAI API."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import AsyncIterator"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "openai", "alias": null, "line": 15, "statement": "from openai import AsyncOpenAI"}, {"module": "openai.types.chat", "alias": null, "line": 16, "statement": "from openai.types.chat import ChatCompletion"}, {"module": "openai.types.chat", "alias": null, "line": 16, "statement": "from openai.types.chat import ChatCompletionChunk"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import get_logger"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import retry"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import RetryConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import CircuitBreakerConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import ComponentError"}, {"module": "core.exceptions", "alias": null, "line": 28, "statement": "from core.exceptions import LLMError"}, {"module": "core.exceptions", "alias": null, "line": 28, "statement": "from core.exceptions import LLMValidationError"}, {"module": "base", "alias": null, "line": 29, "statement": "from base import BaseLLMProvider"}, {"module": "schemas.requests", "alias": null, "line": 30, "statement": "from schemas.requests import ChatRequest"}, {"module": "schemas.requests", "alias": null, "line": 30, "statement": "from schemas.requests import CompletionRequest"}, {"module": "schemas.responses", "alias": null, "line": 31, "statement": "from schemas.responses import LLMResponse"}, {"module": "schemas.responses", "alias": null, "line": 31, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 31, "statement": "from schemas.responses import FunctionCall"}], "constants": [{"name": "APPROVED_MODELS", "line": 34, "value": "{\"o4-mini\", \"o3\", \"gpt-4.1-mini\", \"gpt-4.1\", \"gpt-4.1-nano\"}", "type": ""}, {"name": "FORBIDDEN_MODELS", "line": 36, "value": "{", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import AsyncIterator", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from openai import AsyncOpenAI", "type": "import", "line": 15}, {"name": "from openai.types.chat import ChatCompletion", "type": "import", "line": 16}, {"name": "from openai.types.chat import ChatCompletionChunk", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "from pydantic import Field", "type": "import", "line": 17}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 19}, {"name": "from opsvi_foundation import retry", "type": "import", "line": 19}, {"name": "from opsvi_foundation import RetryConfig", "type": "import", "line": 19}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 19}, {"name": "from opsvi_foundation import CircuitBreakerConfig", "type": "import", "line": 19}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 19}, {"name": "from core.exceptions import LLMError", "type": "import", "line": 28}, {"name": "from core.exceptions import LLMValidationError", "type": "import", "line": 28}, {"name": "from base import BaseLLMProvider", "type": "import", "line": 29}, {"name": "from schemas.requests import ChatRequest", "type": "import", "line": 30}, {"name": "from schemas.requests import CompletionRequest", "type": "import", "line": 30}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 31}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 31}, {"name": "from schemas.responses import FunctionCall", "type": "import", "line": 31}, {"name": "APPROVED_MODELS", "type": "constant", "line": 34}, {"name": "FORBIDDEN_MODELS", "type": "constant", "line": 36}, {"name": "validate_model_constraints", "type": "function", "line": 55}, {"name": "OpenAIConfig", "type": "class", "line": 71}, {"name": "OpenAIProvider", "type": "class", "line": 90}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 31}, {"name": "validate_model_constraints Function", "description": "Function validate_model_constraints implementation.", "line_start": 55, "line_end": 70}, {"name": "OpenAIConfig Class", "description": "Class OpenAIConfig definition and methods.", "line_start": 71, "line_end": 81}, {"name": "OpenAIProvider Class", "description": "Class OpenAIProvider definition and methods.", "line_start": 90, "line_end": 459}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 34, "line_end": 36}], "content_hash": "15e919398a8f8d2e6b3ef13edba7bc1a"}'
- path: libs/opsvi-llm/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "08edff2d89ff34f4badc935392c037de"}'
- path: libs/opsvi-llm/tests/test_schemas.py
  line_count: 224
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_schemas.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestMessageRole", "line": 19, "inherits_from": [], "methods": [{"name": "test_message_roles", "line": 22, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test all message roles are defined.", "signature": "test_message_roles(self)"}], "properties": [], "description": "Tests for validating message role assignments and behaviors."}, {"name": "TestChatMessage", "line": 30, "inherits_from": [], "methods": [{"name": "test_valid_chat_message", "line": 33, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid chat message.", "signature": "test_valid_chat_message(self)"}, {"name": "test_chat_message_with_name", "line": 41, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with name.", "signature": "test_chat_message_with_name(self)"}, {"name": "test_chat_message_with_function_call", "line": 48, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with function call.", "signature": "test_chat_message_with_function_call(self)"}, {"name": "test_invalid_empty_content", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty content is rejected for non-function messages.", "signature": "test_invalid_empty_content(self)"}, {"name": "test_function_message_empty_content", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that function messages can have empty content.", "signature": "test_function_message_empty_content(self)"}], "properties": [], "description": "Tests for chat message creation, manipulation, and validation."}, {"name": "TestFunctionCall", "line": 74, "inherits_from": [], "methods": [{"name": "test_valid_function_call", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid function call.", "signature": "test_valid_function_call(self)"}, {"name": "test_invalid_arguments_type", "line": 85, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that arguments must be a string.", "signature": "test_invalid_arguments_type(self)"}], "properties": [], "description": "Tests for function call formatting and parsing within chat messages."}, {"name": "TestLLMResponse", "line": 93, "inherits_from": [], "methods": [{"name": "test_valid_llm_response", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid LLM response.", "signature": "test_valid_llm_response(self)"}, {"name": "test_llm_response_with_messages", "line": 105, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with messages.", "signature": "test_llm_response_with_messages(self)"}, {"name": "test_llm_response_with_function_calls", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with function calls.", "signature": "test_llm_response_with_function_calls(self)"}, {"name": "test_llm_response_with_metadata", "line": 125, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with metadata.", "signature": "test_llm_response_with_metadata(self)"}, {"name": "test_invalid_empty_generated_text", "line": 131, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty generated_text is rejected.", "signature": "test_invalid_empty_generated_text(self)"}, {"name": "test_invalid_generated_text_type", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that generated_text must be a string.", "signature": "test_invalid_generated_text_type(self)"}, {"name": "test_llm_response_methods", "line": 141, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response utility methods.", "signature": "test_llm_response_methods(self)"}, {"name": "test_llm_response_to_dict", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test converting LLM response to dictionary.", "signature": "test_llm_response_to_dict(self)"}], "properties": [], "description": "Tests for handling and processing responses from language models."}, {"name": "TestGenerationConfig", "line": 161, "inherits_from": [], "methods": [{"name": "test_valid_generation_config", "line": 164, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid generation config.", "signature": "test_valid_generation_config(self)"}, {"name": "test_generation_config_with_values", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config with custom values.", "signature": "test_generation_config_with_values(self)"}, {"name": "test_generation_config_validation", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config validation.", "signature": "test_generation_config_validation(self)"}, {"name": "test_stop_sequences_validation", "line": 214, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test stop sequences validation.", "signature": "test_stop_sequences_validation(self)"}], "properties": [], "description": "Tests for configuration settings related to text generation."}], "imports": [{"module": "pytest", "alias": null, "line": 7, "statement": "import pytest"}, {"module": "pydantic", "alias": null, "line": 8, "statement": "from pydantic import ValidationError"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import ChatMessage"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import FunctionCall"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import GenerationConfig"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import LLMResponse"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import MessageRole"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 7}, {"name": "from pydantic import ValidationError", "type": "import", "line": 8}, {"name": "from opsvi_llm.schemas.responses import ChatMessage", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import FunctionCall", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import GenerationConfig", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import LLMResponse", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import MessageRole", "type": "import", "line": 10}, {"name": "TestMessageRole", "type": "class", "line": 19}, {"name": "TestChatMessage", "type": "class", "line": 30}, {"name": "TestFunctionCall", "type": "class", "line": 74}, {"name": "TestLLMResponse", "type": "class", "line": 93}, {"name": "TestGenerationConfig", "type": "class", "line": 161}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 10}, {"name": "TestMessageRole Class", "description": "Class TestMessageRole definition and methods.", "line_start": 19, "line_end": 25}, {"name": "TestChatMessage Class", "description": "Class TestChatMessage definition and methods.", "line_start": 30, "line_end": 66}, {"name": "TestFunctionCall Class", "description": "Class TestFunctionCall definition and methods.", "line_start": 74, "line_end": 88}, {"name": "TestLLMResponse Class", "description": "Class TestLLMResponse definition and methods.", "line_start": 93, "line_end": 156}, {"name": "TestGenerationConfig Class", "description": "Class TestGenerationConfig definition and methods.", "line_start": 161, "line_end": 217}], "content_hash": "b41644fb5db6fecc02c3e2e1bec952d4"}'
- path: libs/opsvi-core/opsvi_core/__init__.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import FoundationConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import AuthManager"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import CoreConfig"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import config"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import CoreError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import AgentError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import WorkflowError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 15}, {"name": "from opsvi_foundation import AuthManager", "type": "import", "line": 15}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from core import CoreConfig", "type": "import", "line": 24}, {"name": "from core import config", "type": "import", "line": 24}, {"name": "from core.exceptions import CoreError", "type": "import", "line": 25}, {"name": "from core.exceptions import AgentError", "type": "import", "line": 25}, {"name": "from core.exceptions import WorkflowError", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "5fffa5e5d88e24437e13002eef36a354"}'
- path: libs/opsvi-core/opsvi_core/core/__init__.py
  line_count: 16
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import CoreConfig"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import config"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import CoreError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import AgentError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import WorkflowError"}], "constants": []}, "key_elements": [{"name": "from config import CoreConfig", "type": "import", "line": 9}, {"name": "from config import config", "type": "import", "line": 9}, {"name": "from exceptions import CoreError", "type": "import", "line": 10}, {"name": "from exceptions import AgentError", "type": "import", "line": 10}, {"name": "from exceptions import WorkflowError", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "fede1b5a9141e89635fa00d6e7590318"}'
- path: libs/opsvi-core/opsvi_core/core/exceptions.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CoreError", "line": 12, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Base class for core-related errors."}, {"name": "AgentError", "line": 18, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error class for agent-specific exceptions."}, {"name": "WorkflowError", "line": 24, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Exception class for workflow-related errors."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "CoreError", "type": "class", "line": 12}, {"name": "AgentError", "type": "class", "line": 18}, {"name": "WorkflowError", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "CoreError Class", "description": "Class CoreError definition and methods.", "line_start": 12, "line_end": 22}, {"name": "AgentError Class", "description": "Class AgentError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "WorkflowError Class", "description": "Class WorkflowError definition and methods.", "line_start": 24, "line_end": 34}], "content_hash": "241b3c74eb3fda31cc9f3d566a4ed55e"}'
- path: libs/opsvi-core/opsvi_core/core/config.py
  line_count: 31
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CoreConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 25, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"CoreConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"CoreConfig\""}], "properties": [], "description": "Manages core configuration settings for the application."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import FoundationConfig"}], "constants": []}, "key_elements": [{"name": "from typing import Optional", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 11}, {"name": "CoreConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "CoreConfig Class", "description": "Class CoreConfig definition and methods.", "line_start": 14, "line_end": 28}], "content_hash": "4ac7abf1ecc7dc3e9abe882220c56a51"}'
- path: libs/opsvi-core/opsvi_core/utils/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "9a3664fd4472d13cf43591a01f2f0c2f"}'
- path: libs/opsvi-core/opsvi_core/tests/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "c3669ec87a30f9ca9a5b294d1f38d256"}'
- path: libs/opsvi-core/opsvi_core/security/auth.py
  line_count: 151
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "auth.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 142, "parameters": [{"name": "data", "type": "str, max_length: int = 1000"}, {"name": "max_length", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "str", "description": "Cleans and truncates input string to a specified maximum length.", "signature": "sanitize_input(data: str, max_length: int = 1000, max_length: int = 1000 = 1000) -> str"}], "classes": [{"name": "AuthConfig", "line": 25, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for authentication."}, {"name": "TokenPayload", "line": 34, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the data contained within an authentication token."}, {"name": "AuthManager", "line": 43, "inherits_from": [], "methods": [{"name": "__init__", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AuthConfig):"}], "is_async": false, "signature": "__init__(self, config: AuthConfig):)"}, {"name": "generate_jwt", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, email: str, roles: list[str]"}, {"name": "email", "type": "str, roles: list[str]"}, {"name": "roles", "type": "list[str]"}], "is_async": false, "return_type": "str", "description": "Generate a JWT token for the user.", "signature": "generate_jwt(self, user_id: str, email: str, roles: list[str], email: str, roles: list[str], roles: list[str]) -> str"}, {"name": "validate_jwt", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "token", "type": "str"}], "is_async": false, "return_type": "TokenPayload", "description": "Validate and decode a JWT token.", "signature": "validate_jwt(self, token: str) -> TokenPayload"}, {"name": "generate_api_key", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"opsvi\"", "default": "opsvi"}], "is_async": false, "return_type": "str", "description": "Generate a secure API key.", "signature": "generate_api_key(self, prefix: str = \"opsvi\" = opsvi) -> str"}, {"name": "hash_api_key", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, salt: Optional[str] = None"}, {"name": "salt", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Hash an API key for secure storage.", "signature": "hash_api_key(self, api_key: str, salt: Optional[str] = None, salt: Optional[str] = None = None) -> tuple[str, str]"}, {"name": "verify_api_key", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, stored_hash: str, salt: str"}, {"name": "stored_hash", "type": "str, salt: str"}, {"name": "salt", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verify an API key against its stored hash.", "signature": "verify_api_key(self, api_key: str, stored_hash: str, salt: str, stored_hash: str, salt: str, salt: str) -> bool"}, {"name": "encrypt_data", "line": 111, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Encrypt sensitive data.", "signature": "encrypt_data(self, data: str) -> str"}, {"name": "decrypt_data", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Decrypt sensitive data.", "signature": "decrypt_data(self, encrypted_data: str) -> str"}, {"name": "check_permission", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "user_roles", "type": "list[str], required_role: str"}, {"name": "required_role", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if user has required permission.", "signature": "check_permission(self, user_roles: list[str], required_role: str, required_role: str) -> bool"}, {"name": "require_permission", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "user_roles", "type": "list[str], required_role: str"}, {"name": "required_role", "type": "str"}], "is_async": false, "return_type": "None", "description": "Require user to have specific permission or raise exception.", "signature": "require_permission(self, user_roles: list[str], required_role: str, required_role: str) -> None"}], "properties": [], "description": "Manages authentication processes including token creation, validation, and user session handling."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "secrets", "alias": null, "line": 11, "statement": "import secrets"}, {"module": "jwt", "alias": null, "line": 15, "statement": "import jwt"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "cryptography.fernet", "alias": null, "line": 16, "statement": "from cryptography.fernet import Fernet"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}, {"module": "core.exceptions", "alias": null, "line": 19, "statement": "from core.exceptions import AuthenticationError"}, {"module": "core.exceptions", "alias": null, "line": 19, "statement": "from core.exceptions import AuthorizationError"}, {"module": "core.logging", "alias": null, "line": 20, "statement": "from core.logging import get_logger"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "secrets", "type": "import", "line": 11}, {"name": "jwt", "type": "import", "line": 15}, {"name": "from datetime import datetime", "type": "import", "line": 12}, {"name": "from datetime import timedelta", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "from core.exceptions import AuthenticationError", "type": "import", "line": 19}, {"name": "from core.exceptions import AuthorizationError", "type": "import", "line": 19}, {"name": "from core.logging import get_logger", "type": "import", "line": 20}, {"name": "AuthConfig", "type": "class", "line": 25}, {"name": "TokenPayload", "type": "class", "line": 34}, {"name": "AuthManager", "type": "class", "line": 43}, {"name": "sanitize_input", "type": "function", "line": 142}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 142, "line_end": 147}, {"name": "AuthConfig Class", "description": "Class AuthConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "TokenPayload Class", "description": "Class TokenPayload definition and methods.", "line_start": 34, "line_end": 44}, {"name": "AuthManager Class", "description": "Class AuthManager definition and methods.", "line_start": 43, "line_end": 139}], "content_hash": "80627ab147e06b7f4a723efaa3c8f5e6"}'
- path: libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
  line_count: 197
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "circuit_breaker.py", "description": "Python module with 1 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "circuit_breaker", "line": 193, "parameters": [{"name": "name", "type": "str"}, {"name": "config", "type": "Optional[CircuitBreakerConfig]", "default": "None"}], "is_async": false, "description": "Creates or retrieves a circuit breaker instance with the given name and optional configuration.", "signature": "circuit_breaker(name: str, config: Optional[CircuitBreakerConfig] = None)"}], "classes": [{"name": "CircuitState", "line": 24, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 24, "type": ""}, {"name": "OPEN", "line": 25, "type": ""}, {"name": "HALF_OPEN", "line": 26, "type": ""}], "description": "Represents the possible states of a circuit breaker."}, {"name": "CircuitBreakerConfig", "line": 32, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a circuit breaker."}, {"name": "CircuitBreakerError", "line": 41, "inherits_from": ["ExternalServiceError):"], "methods": [], "properties": [], "description": "Exception raised when a circuit breaker is open or an error occurs."}, {"name": "CircuitBreaker", "line": 46, "inherits_from": [], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CircuitBreakerConfig):"}], "is_async": false, "signature": "__init__(self, config: CircuitBreakerConfig):)"}, {"name": "call", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with circuit breaker protection.", "signature": "async call(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_check_state", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Check and update circuit breaker state.", "signature": "async _check_state(self) -> None"}, {"name": "_on_success", "line": 102, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle successful call.", "signature": "async _on_success(self) -> None"}, {"name": "_on_failure", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle failed call.", "signature": "async _on_failure(self) -> None"}, {"name": "get_state", "line": 128, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current circuit breaker state information.", "signature": "get_state(self) -> dict[str, Any]"}, {"name": "reset", "line": 143, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset circuit breaker to closed state.", "signature": "async reset(self) -> None"}], "properties": [], "description": "Manages the state and behavior of a circuit breaker to prevent system overload."}, {"name": "CircuitBreakerRegistry", "line": 153, "inherits_from": [], "methods": [{"name": "__init__", "line": 156, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "get_breaker", "line": 160, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: Optional[CircuitBreakerConfig] = None"}, {"name": "config", "type": "Optional[CircuitBreakerConfig] = None", "default": "None"}], "is_async": true, "return_type": "CircuitBreaker", "description": "Get or create a circuit breaker.", "signature": "async get_breaker(self, name: str, config: Optional[CircuitBreakerConfig] = None, config: Optional[CircuitBreakerConfig] = None = None) -> CircuitBreaker"}, {"name": "call_with_breaker", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}, {"name": "config", "type": "Optional[CircuitBreakerConfig]", "default": "None"}], "is_async": true, "return_type": "T", "description": "Execute function with named circuit breaker.", "signature": "async call_with_breaker(self, name: str, func: Callable[..., T], config: Optional[CircuitBreakerConfig] = None, *args, **kwargs) -> T"}, {"name": "get_all_states", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "Get states of all registered circuit breakers.", "signature": "get_all_states(self) -> dict[str, dict[str, Any]]"}, {"name": "reset_all", "line": 182, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset all circuit breakers.", "signature": "async reset_all(self) -> None"}], "properties": [], "description": "Maintains a registry of circuit breaker instances for centralized management."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 12, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Union"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import ExternalServiceError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import TimeoutError"}, {"module": "core.logging", "alias": null, "line": 17, "statement": "from core.logging import get_logger"}], "constants": [{"name": "T", "line": 21, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from dataclasses import dataclass", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Callable", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 14}, {"name": "from typing import Union", "type": "import", "line": 14}, {"name": "from core.exceptions import ExternalServiceError", "type": "import", "line": 16}, {"name": "from core.exceptions import TimeoutError", "type": "import", "line": 16}, {"name": "from core.logging import get_logger", "type": "import", "line": 17}, {"name": "T", "type": "constant", "line": 21}, {"name": "CircuitState", "type": "class", "line": 24}, {"name": "CircuitBreakerConfig", "type": "class", "line": 32}, {"name": "CircuitBreakerError", "type": "class", "line": 41}, {"name": "CircuitBreaker", "type": "class", "line": 46}, {"name": "CircuitBreakerRegistry", "type": "class", "line": 153}, {"name": "circuit_breaker", "type": "function", "line": 193}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "circuit_breaker Function", "description": "Function circuit_breaker implementation.", "line_start": 193, "line_end": 198}, {"name": "CircuitState Class", "description": "Class CircuitState definition and methods.", "line_start": 24, "line_end": 34}, {"name": "CircuitBreakerConfig Class", "description": "Class CircuitBreakerConfig definition and methods.", "line_start": 32, "line_end": 42}, {"name": "CircuitBreakerError Class", "description": "Class CircuitBreakerError definition and methods.", "line_start": 41, "line_end": 51}, {"name": "CircuitBreaker Class", "description": "Class CircuitBreaker definition and methods.", "line_start": 46, "line_end": 146}, {"name": "CircuitBreakerRegistry Class", "description": "Class CircuitBreakerRegistry definition and methods.", "line_start": 153, "line_end": 185}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 21, "line_end": 21}], "content_hash": "9b17fcfb312e0539307a3beeb2af8030"}'
- path: libs/opsvi-core/opsvi_core/resilience/retry.py
  line_count: 226
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retry.py", "description": "Python module with 4 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "retry", "line": 163, "parameters": [{"name": "config", "type": "Optional[RetryConfig]", "default": "None"}], "is_async": false, "description": "Decorator to retry a function call using a specified retry configuration.", "signature": "retry(config: Optional[RetryConfig] = None)"}, {"name": "retry_with_exponential_backoff", "line": 178, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "Optional[float]", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with exponential backoff delays between attempts.", "signature": "retry_with_exponential_backoff(max_attempts: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True, exceptions: tuple[type, ...] = (Exception,), timeout: Optional[float] = None)"}, {"name": "retry_with_linear_backoff", "line": 197, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "increment", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "30.0"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "Optional[float]", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with linearly increasing delays between attempts.", "signature": "retry_with_linear_backoff(max_attempts: int = 3, base_delay: float = 1.0, increment: float = 1.0, max_delay: float = 30.0, exceptions: tuple[type, ...] = (Exception,), timeout: Optional[float] = None)"}, {"name": "retry_with_fixed_delay", "line": 215, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "delay", "type": "float", "default": "1.0"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "Optional[float]", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with a fixed delay between attempts.", "signature": "retry_with_fixed_delay(max_attempts: int = 3, delay: float = 1.0, exceptions: tuple[type, ...] = (Exception,), timeout: Optional[float] = None)"}], "classes": [{"name": "BackoffStrategy", "line": 25, "inherits_from": ["ABC):"], "methods": [{"name": "get_delay", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Get delay for the given attempt number.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Abstract base class defining the interface for backoff strategies."}, {"name": "ExponentialBackoff", "line": 34, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True)"}, {"name": "get_delay", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate exponential backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements an exponential backoff strategy with optional jitter."}, {"name": "LinearBackoff", "line": 56, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "increment", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "30.0"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, increment: float = 1.0, max_delay: float = 30.0)"}, {"name": "get_delay", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate linear backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements a linear backoff strategy with incremental delay increases."}, {"name": "FixedBackoff", "line": 70, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "delay", "type": "float", "default": "1.0"}], "is_async": false, "signature": "__init__(self, delay: float = 1.0)"}, {"name": "get_delay", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Return fixed delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements a fixed delay backoff strategy."}, {"name": "RetryConfig", "line": 82, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__post_init__(self)"}], "properties": [], "description": "Configuration container for retry behavior and backoff strategy."}, {"name": "RetryError", "line": 94, "inherits_from": ["ExternalServiceError):"], "methods": [{"name": "__init__", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "attempts", "type": "int"}, {"name": "last_exception", "type": "Exception):"}], "is_async": false, "signature": "__init__(self, message: str, attempts: int, last_exception: Exception):)"}], "properties": [], "description": "Exception raised when all retry attempts have been exhausted."}, {"name": "RetryExecutor", "line": 103, "inherits_from": [], "methods": [{"name": "__init__", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RetryConfig):"}], "is_async": false, "signature": "__init__(self, config: RetryConfig):)"}, {"name": "execute", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with retry logic.", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages execution and retrying of functions according to a retry configuration."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "random", "alias": null, "line": 10, "statement": "import random"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "functools", "alias": null, "line": 14, "statement": "from functools import wraps"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Union"}, {"module": "core.exceptions", "alias": null, "line": 17, "statement": "from core.exceptions import ExternalServiceError"}, {"module": "core.exceptions", "alias": null, "line": 17, "statement": "from core.exceptions import TimeoutError"}, {"module": "core.logging", "alias": null, "line": 18, "statement": "from core.logging import get_logger"}], "constants": [{"name": "T", "line": 22, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "random", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from functools import wraps", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Callable", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from typing import Union", "type": "import", "line": 15}, {"name": "from core.exceptions import ExternalServiceError", "type": "import", "line": 17}, {"name": "from core.exceptions import TimeoutError", "type": "import", "line": 17}, {"name": "from core.logging import get_logger", "type": "import", "line": 18}, {"name": "T", "type": "constant", "line": 22}, {"name": "BackoffStrategy", "type": "class", "line": 25}, {"name": "ExponentialBackoff", "type": "class", "line": 34}, {"name": "LinearBackoff", "type": "class", "line": 56}, {"name": "FixedBackoff", "type": "class", "line": 70}, {"name": "RetryConfig", "type": "class", "line": 82}, {"name": "RetryError", "type": "class", "line": 94}, {"name": "RetryExecutor", "type": "class", "line": 103}, {"name": "retry", "type": "function", "line": 163}, {"name": "retry_with_exponential_backoff", "type": "function", "line": 178}, {"name": "retry_with_linear_backoff", "type": "function", "line": 197}, {"name": "retry_with_fixed_delay", "type": "function", "line": 215}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "retry Function", "description": "Function retry implementation.", "line_start": 163, "line_end": 177}, {"name": "retry_with_exponential_backoff Function", "description": "Function retry_with_exponential_backoff implementation.", "line_start": 178, "line_end": 196}, {"name": "retry_with_linear_backoff Function", "description": "Function retry_with_linear_backoff implementation.", "line_start": 197, "line_end": 214}, {"name": "retry_with_fixed_delay Function", "description": "Function retry_with_fixed_delay implementation.", "line_start": 215, "line_end": 220}, {"name": "BackoffStrategy Class", "description": "Class BackoffStrategy definition and methods.", "line_start": 25, "line_end": 32}, {"name": "ExponentialBackoff Class", "description": "Class ExponentialBackoff definition and methods.", "line_start": 34, "line_end": 47}, {"name": "LinearBackoff Class", "description": "Class LinearBackoff definition and methods.", "line_start": 56, "line_end": 67}, {"name": "FixedBackoff Class", "description": "Class FixedBackoff definition and methods.", "line_start": 70, "line_end": 79}, {"name": "RetryConfig Class", "description": "Class RetryConfig definition and methods.", "line_start": 82, "line_end": 92}, {"name": "RetryError Class", "description": "Class RetryError definition and methods.", "line_start": 94, "line_end": 100}, {"name": "RetryExecutor Class", "description": "Class RetryExecutor definition and methods.", "line_start": 103, "line_end": 158}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 22, "line_end": 22}], "content_hash": "0315a2ee54590f65671d17fb788f20b7"}'
- path: libs/opsvi-core/opsvi_core/caching/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1947a3c946d2e27d1753344a7b98a5fc"}'
- path: libs/opsvi-core/opsvi_core/serialization/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "a4017046a292f3d106f9718cd301ef0e"}'
- path: libs/opsvi-core/opsvi_core/testing/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "e60978dcb1f752608c5f01a97e042956"}'
- path: libs/opsvi-core/opsvi_core/agents/__init__.py
  line_count: 21
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import BaseAgent"}, {"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import AgentState"}, {"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import AgentCapability"}, {"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import AgentMetadata"}, {"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import AgentMessage"}], "constants": []}, "key_elements": [{"name": "from base_agent import BaseAgent", "type": "import", "line": 9}, {"name": "from base_agent import AgentState", "type": "import", "line": 9}, {"name": "from base_agent import AgentCapability", "type": "import", "line": 9}, {"name": "from base_agent import AgentMetadata", "type": "import", "line": 9}, {"name": "from base_agent import AgentMessage", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ca9537c64a6e051ed9f1350c56fa15c8"}'
- path: libs/opsvi-core/opsvi_core/agents/base_agent.py
  line_count: 376
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base_agent.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentState", "line": 31, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "CREATED", "line": 32, "type": ""}, {"name": "INITIALIZING", "line": 33, "type": ""}, {"name": "READY", "line": 34, "type": ""}, {"name": "RUNNING", "line": 35, "type": ""}, {"name": "PAUSED", "line": 36, "type": ""}, {"name": "STOPPING", "line": 37, "type": ""}, {"name": "STOPPED", "line": 38, "type": ""}, {"name": "ERROR", "line": 39, "type": ""}], "description": "Represents the current state of an agent, including status and context information."}, {"name": "AgentCapability", "line": 44, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines the capabilities or skills that an agent possesses."}, {"name": "AgentMetadata", "line": 55, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds metadata information about an agent, such as identifiers and descriptive attributes."}, {"name": "AgentMessage", "line": 67, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates messages exchanged between agents or between an agent and external systems."}, {"name": "BaseAgent", "line": 78, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "metadata", "type": "AgentMetadata):"}], "is_async": false, "signature": "__init__(self, metadata: AgentMetadata):)"}, {"name": "_initialize", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the agent.", "signature": "async _initialize(self) -> None"}, {"name": "_start", "line": 129, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the agent.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the agent.", "signature": "async _stop(self) -> None"}, {"name": "_cleanup", "line": 175, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup agent resources.", "signature": "async _cleanup(self) -> None"}, {"name": "setup", "line": 188, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific setup logic.\n\n        Override this method to implement custom initialization.\n        ", "signature": "async setup(self) -> None"}, {"name": "run", "line": 196, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific run logic.\n\n        Override this method to implement the main agent loop.\n        ", "signature": "async run(self) -> None"}, {"name": "teardown", "line": 204, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific teardown logic.\n\n        Override this method to implement custom cleanup.\n        ", "signature": "async teardown(self) -> None"}, {"name": "cleanup_resources", "line": 211, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup agent resources.\n\n        Override this method to implement custom resource cleanup.\n        ", "signature": "async cleanup_resources(self) -> None"}, {"name": "pause", "line": 218, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Pause the agent.", "signature": "async pause(self) -> None"}, {"name": "resume", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Resume the agent.", "signature": "async resume(self) -> None"}, {"name": "send_message", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Send message to another agent.\n\n        Args:\n            message: Message to send\n\n        Raises:\n            AgentError: If message sending fails\n        ", "signature": "async send_message(self, message: AgentMessage) -> None"}, {"name": "receive_message", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Receive and process a message.\n\n        Args:\n            message: Received message\n        ", "signature": "async receive_message(self, message: AgentMessage) -> None"}, {"name": "register_message_handler", "line": 298, "parameters": [{"name": "self", "type": "self"}, {"name": "message_type", "type": "str, handler: callable"}, {"name": "handler", "type": "callable"}], "is_async": false, "return_type": "None", "description": "Register a message handler.\n\n        Args:\n            message_type: Type of message to handle\n            handler: Async function to handle the message\n        ", "signature": "register_message_handler(self, message_type: str, handler: callable, handler: callable) -> None"}, {"name": "add_capability", "line": 312, "parameters": [{"name": "self", "type": "self"}, {"name": "capability", "type": "AgentCapability"}], "is_async": false, "return_type": "None", "description": "Add a capability to the agent.\n\n        Args:\n            capability: Capability to add\n        ", "signature": "add_capability(self, capability: AgentCapability) -> None"}, {"name": "get_stats", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Get agent statistics.\n\n        Returns:\n            Dictionary of agent statistics\n        ", "signature": "get_stats(self) -> Dict[str, Any]"}, {"name": "health_check", "line": 338, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "Dict[str, Any]", "description": "Perform agent health check.\n\n        Returns:\n            Health status information\n        ", "signature": "async health_check(self) -> Dict[str, Any]"}, {"name": "deliver_message", "line": 352, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Deliver message to recipient.\n\n        Override this method to implement custom message delivery.\n\n        Args:\n            message: Message to deliver\n        ", "signature": "async deliver_message(self, message: AgentMessage) -> None"}, {"name": "handle_unknown_message", "line": 365, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Handle unknown message types.\n\n        Override this method to implement custom unknown message handling.\n\n        Args:\n            message: Unknown message\n        ", "signature": "async handle_unknown_message(self, message: AgentMessage) -> None"}], "properties": [], "description": "Provides the foundational implementation for an agent, including core behaviors and lifecycle management."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "uuid", "alias": null, "line": 12, "statement": "import uuid"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import retry"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import RetryConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import ComponentError"}, {"module": "pydantic", "alias": null, "line": 24, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 24, "statement": "from pydantic import Field"}, {"module": "core.exceptions", "alias": null, "line": 26, "statement": "from core.exceptions import AgentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "uuid", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Dict", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 17}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "from opsvi_foundation import retry", "type": "import", "line": 17}, {"name": "from opsvi_foundation import RetryConfig", "type": "import", "line": 17}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 17}, {"name": "from pydantic import BaseModel", "type": "import", "line": 24}, {"name": "from pydantic import Field", "type": "import", "line": 24}, {"name": "from core.exceptions import AgentError", "type": "import", "line": 26}, {"name": "AgentState", "type": "class", "line": 31}, {"name": "AgentCapability", "type": "class", "line": 44}, {"name": "AgentMetadata", "type": "class", "line": 55}, {"name": "AgentMessage", "type": "class", "line": 67}, {"name": "BaseAgent", "type": "class", "line": 78}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 26}, {"name": "AgentState Class", "description": "Class AgentState definition and methods.", "line_start": 31, "line_end": 41}, {"name": "AgentCapability Class", "description": "Class AgentCapability definition and methods.", "line_start": 44, "line_end": 54}, {"name": "AgentMetadata Class", "description": "Class AgentMetadata definition and methods.", "line_start": 55, "line_end": 65}, {"name": "AgentMessage Class", "description": "Class AgentMessage definition and methods.", "line_start": 67, "line_end": 77}, {"name": "BaseAgent Class", "description": "Class BaseAgent definition and methods.", "line_start": 78, "line_end": 368}], "content_hash": "939bcc020ef40c8ccfae4a843a4a4df3"}'
- path: libs/opsvi-core/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1b6ec8a3d830b8a6e90b76ec782cac26"}'
- path: libs/opsvi-core/tests/test_core.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_core.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestConfiguration", "line": 25, "inherits_from": [], "methods": [{"name": "test_config_loading", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure config loads with expected attributes.", "signature": "test_config_loading(self)"}, {"name": "test_config_defaults", "line": 36, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test configuration default values.", "signature": "test_config_defaults(self)"}, {"name": "test_load_config_function", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test load_config function.", "signature": "test_load_config_function(self)"}], "properties": [], "description": "Tests for configuration loading and validation."}, {"name": "TestLogging", "line": 50, "inherits_from": [], "methods": [{"name": "test_logging_setup", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure logging setup does not raise.", "signature": "test_logging_setup(self)"}, {"name": "test_get_logger", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting a structured logger.", "signature": "test_get_logger(self)"}, {"name": "test_log_context", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test log context creation.", "signature": "test_log_context(self)"}], "properties": [], "description": "Tests for logging functionality and output correctness."}, {"name": "TestExceptions", "line": 73, "inherits_from": [], "methods": [{"name": "test_base_exception", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test base OpsviError exception.", "signature": "test_base_exception(self)"}, {"name": "test_exception_with_details", "line": 81, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test exception with additional details.", "signature": "test_exception_with_details(self)"}, {"name": "test_configuration_error", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ConfigurationError.", "signature": "test_configuration_error(self)"}, {"name": "test_initialization_error", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test InitializationError.", "signature": "test_initialization_error(self)"}, {"name": "test_validation_error", "line": 98, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ValidationError.", "signature": "test_validation_error(self)"}, {"name": "test_external_service_error", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ExternalServiceError.", "signature": "test_external_service_error(self)"}, {"name": "test_database_connection_error", "line": 108, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test DatabaseConnectionError.", "signature": "test_database_connection_error(self)"}], "properties": [], "description": "Tests for exception handling and error scenarios."}, {"name": "TestBaseActor", "line": 114, "inherits_from": [], "methods": [{"name": "test_actor_initialization", "line": 133, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor initialization.", "signature": "async test_actor_initialization(self)"}, {"name": "test_actor_start_stop", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor start and stop lifecycle.", "signature": "async test_actor_start_stop(self)"}, {"name": "test_actor_message_handling", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor message handling.", "signature": "async test_actor_message_handling(self)"}, {"name": "test_actor_inactive_message_handling", "line": 163, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when actor is inactive.", "signature": "async test_actor_inactive_message_handling(self)"}, {"name": "test_actor_is_active", "line": 170, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test actor active status check.", "signature": "test_actor_is_active(self)"}], "properties": [], "description": "Tests for the base actor''s behavior and interactions."}, {"name": "TestLifecycleComponent", "line": 176, "inherits_from": [], "methods": [{"name": "test_component_initialization", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialization.", "signature": "async test_component_initialization(self)"}, {"name": "test_component_initialize_shutdown", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialize and shutdown lifecycle.", "signature": "async test_component_initialize_shutdown(self)"}, {"name": "test_component_is_active", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test component active status check.", "signature": "test_component_is_active(self)"}], "properties": [], "description": "Tests for component lifecycle methods and state transitions."}, {"name": "TestBaseAgent", "line": 216, "inherits_from": [], "methods": [{"name": "test_agent_initialization", "line": 227, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent initialization.", "signature": "async test_agent_initialization(self)"}, {"name": "test_agent_activation_deactivation", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent activation and deactivation.", "signature": "async test_agent_activation_deactivation(self)"}, {"name": "test_agent_message_handling", "line": 248, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent message handling.", "signature": "async test_agent_message_handling(self)"}, {"name": "test_agent_inactive_message_handling", "line": 258, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when agent is inactive.", "signature": "async test_agent_inactive_message_handling(self)"}, {"name": "test_agent_plugin_management", "line": 265, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent plugin management.", "signature": "test_agent_plugin_management(self)"}, {"name": "test_agent_get_plugins", "line": 280, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting agent plugins.", "signature": "test_agent_get_plugins(self)"}, {"name": "test_agent_is_active", "line": 291, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent active status check.", "signature": "test_agent_is_active(self)"}], "properties": [], "description": "Tests for the base agent''s core functionalities and processes."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import Mock"}, {"module": "opsvi_core.agents.base_agent", "alias": null, "line": 11, "statement": "from opsvi_core.agents.base_agent import BaseAgent"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import AppConfig"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import config"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import load_config"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ConfigurationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import DatabaseConnectionError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ExternalServiceError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import InitializationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import OpsviError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ValidationError"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import get_logger"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import setup_logging"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import BaseActor"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import LifecycleComponent"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import Mock", "type": "import", "line": 7}, {"name": "from opsvi_core.agents.base_agent import BaseAgent", "type": "import", "line": 11}, {"name": "from opsvi_core.core.config import AppConfig", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import load_config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.exceptions import ConfigurationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import DatabaseConnectionError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ExternalServiceError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import InitializationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import OpsviError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ValidationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.logging import get_logger", "type": "import", "line": 21}, {"name": "from opsvi_core.core.logging import setup_logging", "type": "import", "line": 21}, {"name": "from opsvi_core.core.patterns import BaseActor", "type": "import", "line": 22}, {"name": "from opsvi_core.core.patterns import LifecycleComponent", "type": "import", "line": 22}, {"name": "TestConfiguration", "type": "class", "line": 25}, {"name": "TestLogging", "type": "class", "line": 50}, {"name": "TestExceptions", "type": "class", "line": 73}, {"name": "TestBaseActor", "type": "class", "line": 114}, {"name": "TestLifecycleComponent", "type": "class", "line": 176}, {"name": "TestBaseAgent", "type": "class", "line": 216}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 22}, {"name": "TestConfiguration Class", "description": "Class TestConfiguration definition and methods.", "line_start": 25, "line_end": 46}, {"name": "TestLogging Class", "description": "Class TestLogging definition and methods.", "line_start": 50, "line_end": 67}, {"name": "TestExceptions Class", "description": "Class TestExceptions definition and methods.", "line_start": 73, "line_end": 111}, {"name": "TestBaseActor Class", "description": "Class TestBaseActor definition and methods.", "line_start": 114, "line_end": 173}, {"name": "TestLifecycleComponent Class", "description": "Class TestLifecycleComponent definition and methods.", "line_start": 176, "line_end": 213}, {"name": "TestBaseAgent Class", "description": "Class TestBaseAgent definition and methods.", "line_start": 216, "line_end": 294}], "content_hash": "aee193451511c6b2cac4e03e863ee8aa"}'
- path: libs/opsvi-foundation/opsvi_foundation/__init__.py
  line_count: 48
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 15, "statement": "from config import FoundationConfig"}, {"module": "config", "alias": null, "line": 15, "statement": "from config import config"}, {"module": "security", "alias": null, "line": 16, "statement": "from security import AuthManager"}, {"module": "security", "alias": null, "line": 16, "statement": "from security import AuthConfig"}, {"module": "security", "alias": null, "line": 16, "statement": "from security import TokenPayload"}, {"module": "security", "alias": null, "line": 16, "statement": "from security import sanitize_input"}, {"module": "resilience", "alias": null, "line": 17, "statement": "from resilience import CircuitBreaker"}, {"module": "resilience", "alias": null, "line": 17, "statement": "from resilience import CircuitBreakerConfig"}, {"module": "resilience", "alias": null, "line": 17, "statement": "from resilience import RetryExecutor"}, {"module": "resilience", "alias": null, "line": 17, "statement": "from resilience import RetryConfig"}, {"module": "resilience", "alias": null, "line": 17, "statement": "from resilience import retry"}, {"module": "patterns", "alias": null, "line": 24, "statement": "from patterns import BaseComponent"}, {"module": "patterns", "alias": null, "line": 24, "statement": "from patterns import LifecycleComponent"}, {"module": "patterns", "alias": null, "line": 24, "statement": "from patterns import ComponentError"}, {"module": "observability", "alias": null, "line": 25, "statement": "from observability import setup_logging"}, {"module": "observability", "alias": null, "line": 25, "statement": "from observability import get_logger"}, {"module": "observability", "alias": null, "line": 25, "statement": "from observability import log_context"}], "constants": []}, "key_elements": [{"name": "from config import FoundationConfig", "type": "import", "line": 15}, {"name": "from config import config", "type": "import", "line": 15}, {"name": "from security import AuthManager", "type": "import", "line": 16}, {"name": "from security import AuthConfig", "type": "import", "line": 16}, {"name": "from security import TokenPayload", "type": "import", "line": 16}, {"name": "from security import sanitize_input", "type": "import", "line": 16}, {"name": "from resilience import CircuitBreaker", "type": "import", "line": 17}, {"name": "from resilience import CircuitBreakerConfig", "type": "import", "line": 17}, {"name": "from resilience import RetryExecutor", "type": "import", "line": 17}, {"name": "from resilience import RetryConfig", "type": "import", "line": 17}, {"name": "from resilience import retry", "type": "import", "line": 17}, {"name": "from patterns import BaseComponent", "type": "import", "line": 24}, {"name": "from patterns import LifecycleComponent", "type": "import", "line": 24}, {"name": "from patterns import ComponentError", "type": "import", "line": 24}, {"name": "from observability import setup_logging", "type": "import", "line": 25}, {"name": "from observability import get_logger", "type": "import", "line": 25}, {"name": "from observability import log_context", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "52c5b82173af255cadb7fbe93d03ca3e"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "from logging import setup_logging"}, {"module": "logging", "alias": null, "line": 9, "statement": "from logging import get_logger"}, {"module": "logging", "alias": null, "line": 9, "statement": "from logging import log_context"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import MetricsCollector"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import MetricsConfig"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import TimingContext"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import metrics"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import time_operation"}], "constants": []}, "key_elements": [{"name": "from logging import setup_logging", "type": "import", "line": 9}, {"name": "from logging import get_logger", "type": "import", "line": 9}, {"name": "from logging import log_context", "type": "import", "line": 9}, {"name": "from metrics import MetricsCollector", "type": "import", "line": 10}, {"name": "from metrics import MetricsConfig", "type": "import", "line": 10}, {"name": "from metrics import TimingContext", "type": "import", "line": 10}, {"name": "from metrics import metrics", "type": "import", "line": 10}, {"name": "from metrics import time_operation", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "2ce021c27ebad9c8c37ea9b5bec51afb"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/alerts.py
  line_count: 571
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "alerts.py", "description": "Python module with 1 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "alert_rule", "line": 540, "parameters": [{"name": "name", "type": "str"}, {"name": "condition", "type": "str"}, {"name": "severity", "type": "AlertSeverity", "default": "AlertSeverity.WARNING"}, {"name": "description", "type": "str", "default": ""}, {"name": "cooldown", "type": "float", "default": "300.0"}, {"name": "escalation_delay", "type": "float", "default": "1800.0"}, {"name": "notification_channels", "type": "Optional[List[str]]", "default": "None"}], "is_async": false, "description": "Creates and configures an alert rule with specified parameters including condition, severity, and notification settings.", "signature": "alert_rule(name: str, condition: str, severity: AlertSeverity = AlertSeverity.WARNING, description: str = , cooldown: float = 300.0, escalation_delay: float = 1800.0, notification_channels: Optional[List[str]] = None)"}], "classes": [{"name": "AlertError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for handling alert-related errors."}, {"name": "AlertSeverity", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "INFO", "line": 26, "type": ""}, {"name": "WARNING", "line": 27, "type": ""}, {"name": "ERROR", "line": 28, "type": ""}, {"name": "CRITICAL", "line": 29, "type": ""}], "description": "Enumeration representing the severity levels of alerts."}, {"name": "AlertStatus", "line": 34, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ACTIVE", "line": 34, "type": ""}, {"name": "ACKNOWLEDGED", "line": 35, "type": ""}, {"name": "RESOLVED", "line": 36, "type": ""}, {"name": "SUPPRESSED", "line": 37, "type": ""}], "description": "Enumeration representing the current status of an alert."}, {"name": "AlertRule", "line": 43, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a rule that defines the conditions and parameters for triggering alerts."}, {"name": "Alert", "line": 56, "inherits_from": [], "methods": [], "properties": [], "description": "Represents an individual alert instance generated based on alert rules."}, {"name": "NotificationChannel", "line": 71, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 74, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "Dict[str, Any]):"}], "is_async": false, "description": "\n        Initialize notification channel.\n\n        Args:\n            name: Channel name\n            config: Channel configuration\n        ", "signature": "__init__(self, name: str, config: Dict[str, Any]):)"}, {"name": "send_notification", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Send notification.\n\n        Args:\n            alert: Alert to notify about\n            message: Notification message\n\n        Returns:\n            True if notification sent successfully\n        ", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Base class for different types of notification channels used to send alert notifications."}, {"name": "EmailNotificationChannel", "line": 100, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send email notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel for sending alerts via email."}, {"name": "SlackNotificationChannel", "line": 115, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send Slack notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel for sending alerts to Slack."}, {"name": "WebhookNotificationChannel", "line": 130, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send webhook notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel for sending alerts through webhooks."}, {"name": "AlertManager", "line": 159, "inherits_from": [], "methods": [{"name": "__init__", "line": 162, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize alert manager.", "signature": "__init__(self)"}, {"name": "add_rule", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "rule", "type": "AlertRule"}], "is_async": false, "return_type": "None", "description": "\n        Add alert rule.\n\n        Args:\n            rule: Alert rule to add\n        ", "signature": "add_rule(self, rule: AlertRule) -> None"}, {"name": "remove_rule", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove alert rule.\n\n        Args:\n            name: Rule name\n        ", "signature": "remove_rule(self, name: str) -> None"}, {"name": "add_notification_channel", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "channel", "type": "NotificationChannel"}], "is_async": false, "return_type": "None", "description": "\n        Add notification channel.\n\n        Args:\n            channel: Notification channel to add\n        ", "signature": "add_notification_channel(self, channel: NotificationChannel) -> None"}, {"name": "remove_notification_channel", "line": 198, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove notification channel.\n\n        Args:\n            name: Channel name\n        ", "signature": "remove_notification_channel(self, name: str) -> None"}, {"name": "create_alert", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "rule_name", "type": "str"}, {"name": "message", "type": "str"}, {"name": "severity", "type": "Optional[AlertSeverity]", "default": "None"}, {"name": "details", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": true, "return_type": "Optional[Alert]", "description": "\n        Create a new alert.\n\n        Args:\n            rule_name: Name of the alert rule\n            message: Alert message\n            severity: Alert severity (uses rule severity if None)\n            details: Additional alert details\n\n        Returns:\n            Created alert or None if suppressed\n        ", "signature": "async create_alert(self, rule_name: str, message: str, severity: Optional[AlertSeverity] = None, details: Optional[Dict[str, Any]] = None) -> Optional[Alert]"}, {"name": "acknowledge_alert", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Acknowledge an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User acknowledging the alert\n\n        Returns:\n            True if alert acknowledged successfully\n        ", "signature": "async acknowledge_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "resolve_alert", "line": 294, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Resolve an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User resolving the alert\n\n        Returns:\n            True if alert resolved successfully\n        ", "signature": "async resolve_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "suppress_alert", "line": 323, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Suppress an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User suppressing the alert\n\n        Returns:\n            True if alert suppressed successfully\n        ", "signature": "async suppress_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "_send_notifications", "line": 350, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert"}], "is_async": true, "return_type": "None", "description": "Send notifications for an alert.", "signature": "async _send_notifications(self, alert: Alert) -> None"}, {"name": "_format_notification_message", "line": 366, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert"}], "is_async": false, "return_type": "str", "description": "Format notification message.", "signature": "_format_notification_message(self, alert: Alert) -> str"}, {"name": "_schedule_escalation", "line": 379, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, rule: AlertRule"}, {"name": "rule", "type": "AlertRule"}], "is_async": false, "return_type": "None", "description": "Schedule alert escalation.", "signature": "_schedule_escalation(self, alert: Alert, rule: AlertRule, rule: AlertRule) -> None"}, {"name": "get_active_alerts", "line": 391, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[Alert]", "description": "Get all active alerts.", "signature": "get_active_alerts(self) -> List[Alert]"}, {"name": "get_alerts_by_severity", "line": 398, "parameters": [{"name": "self", "type": "self"}, {"name": "severity", "type": "AlertSeverity"}], "is_async": false, "return_type": "List[Alert]", "description": "Get alerts by severity.", "signature": "get_alerts_by_severity(self, severity: AlertSeverity) -> List[Alert]"}, {"name": "get_alerts_by_rule", "line": 405, "parameters": [{"name": "self", "type": "self"}, {"name": "rule_name", "type": "str"}], "is_async": false, "return_type": "List[Alert]", "description": "Get alerts by rule name.", "signature": "get_alerts_by_rule(self, rule_name: str) -> List[Alert]"}, {"name": "get_alert_summary", "line": 412, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Get alert summary.", "signature": "get_alert_summary(self) -> Dict[str, Any]"}], "properties": [], "description": "Manages alert rules, evaluates conditions, and handles alert lifecycle and notifications."}, {"name": "AlertEvaluator", "line": 439, "inherits_from": [], "methods": [{"name": "__init__", "line": 442, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_manager", "type": "AlertManager):"}], "is_async": false, "description": "\n        Initialize alert evaluator.\n\n        Args:\n            alert_manager: Alert manager instance\n        ", "signature": "__init__(self, alert_manager: AlertManager):)"}, {"name": "register_evaluation_function", "line": 452, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, func: Callable"}, {"name": "func", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register an evaluation function.\n\n        Args:\n            name: Function name\n            func: Evaluation function\n        ", "signature": "register_evaluation_function(self, name: str, func: Callable, func: Callable) -> None"}, {"name": "evaluate_condition", "line": 462, "parameters": [{"name": "self", "type": "self"}, {"name": "condition", "type": "str, context: Dict[str, Any]"}, {"name": "context", "type": "Dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "\n        Evaluate a condition string.\n\n        Args:\n            condition: Condition string to evaluate\n            context: Context data for evaluation\n\n        Returns:\n            True if condition is met\n        ", "signature": "async evaluate_condition(self, condition: str, context: Dict[str, Any], context: Dict[str, Any]) -> bool"}, {"name": "evaluate_all_rules", "line": 512, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "\n        Evaluate all alert rules.\n\n        Args:\n            context: Context data for evaluation\n        ", "signature": "async evaluate_all_rules(self, context: Dict[str, Any]) -> None"}], "properties": [], "description": "Evaluates alert rules against monitored data to determine if alerts should be triggered."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "abc", "alias": null, "line": 16, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 16, "statement": "from abc import abstractmethod"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Callable", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from abc import ABC", "type": "import", "line": 16}, {"name": "from abc import abstractmethod", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "AlertError", "type": "class", "line": 21}, {"name": "AlertSeverity", "type": "class", "line": 26}, {"name": "AlertStatus", "type": "class", "line": 34}, {"name": "AlertRule", "type": "class", "line": 43}, {"name": "Alert", "type": "class", "line": 56}, {"name": "NotificationChannel", "type": "class", "line": 71}, {"name": "EmailNotificationChannel", "type": "class", "line": 100}, {"name": "SlackNotificationChannel", "type": "class", "line": 115}, {"name": "WebhookNotificationChannel", "type": "class", "line": 130}, {"name": "AlertManager", "type": "class", "line": 159}, {"name": "AlertEvaluator", "type": "class", "line": 439}, {"name": "alert_rule", "type": "function", "line": 540}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "alert_rule Function", "description": "Function alert_rule implementation.", "line_start": 540, "line_end": 545}, {"name": "AlertError Class", "description": "Class AlertError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "AlertSeverity Class", "description": "Class AlertSeverity definition and methods.", "line_start": 26, "line_end": 36}, {"name": "AlertStatus Class", "description": "Class AlertStatus definition and methods.", "line_start": 34, "line_end": 44}, {"name": "AlertRule Class", "description": "Class AlertRule definition and methods.", "line_start": 43, "line_end": 53}, {"name": "Alert Class", "description": "Class Alert definition and methods.", "line_start": 56, "line_end": 66}, {"name": "NotificationChannel Class", "description": "Class NotificationChannel definition and methods.", "line_start": 71, "line_end": 89}, {"name": "EmailNotificationChannel Class", "description": "Class EmailNotificationChannel definition and methods.", "line_start": 100, "line_end": 106}, {"name": "SlackNotificationChannel Class", "description": "Class SlackNotificationChannel definition and methods.", "line_start": 115, "line_end": 121}, {"name": "WebhookNotificationChannel Class", "description": "Class WebhookNotificationChannel definition and methods.", "line_start": 130, "line_end": 136}, {"name": "AlertManager Class", "description": "Class AlertManager definition and methods.", "line_start": 159, "line_end": 415}, {"name": "AlertEvaluator Class", "description": "Class AlertEvaluator definition and methods.", "line_start": 439, "line_end": 515}], "content_hash": "d1be3492476d6808ec480d128f44f682"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/profiling.py
  line_count: 514
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "profiling.py", "description": "Python module with 3 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "profile_function", "line": 354, "parameters": [{"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": false, "description": "Profiles the execution of a synchronous function using the specified profiling type and profiler.", "signature": "profile_function(name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}, {"name": "async_profile_function", "line": 376, "parameters": [{"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": true, "description": "Profiles the execution of an asynchronous function using the specified profiling type and profiler.", "signature": "async async_profile_function(name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}, {"name": "profile_decorator", "line": 397, "parameters": [{"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": false, "description": "Creates a decorator to profile functions with the given profiling type and profiler.", "signature": "profile_decorator(profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}], "classes": [{"name": "ProfilingError", "line": 26, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to profiling operations."}, {"name": "ProfilingType", "line": 31, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CPU", "line": 31, "type": ""}, {"name": "MEMORY", "line": 32, "type": ""}, {"name": "ASYNC", "line": 33, "type": ""}, {"name": "COMBINED", "line": 34, "type": ""}], "description": "Enumeration defining different types of profiling methods available."}, {"name": "ProfilingResult", "line": 40, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the outcome and data collected from a profiling session."}, {"name": "CPUProfiler", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize CPU profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start CPU profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 62, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "pstats.Stats", "description": "Stop CPU profiling and return stats.", "signature": "stop(self) -> pstats.Stats"}, {"name": "get_stats_summary", "line": 68, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Get profiling stats summary.", "signature": "get_stats_summary(self) -> Dict[str, Any]"}], "properties": [], "description": "Handles profiling of CPU usage during function execution."}, {"name": "MemoryProfiler", "line": 113, "inherits_from": [], "methods": [{"name": "__init__", "line": 116, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize memory profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 121, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start memory profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 126, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Stop memory profiling and return analysis.", "signature": "stop(self) -> Dict[str, Any]"}], "properties": [], "description": "Handles profiling of memory consumption during function execution."}, {"name": "AsyncProfiler", "line": 158, "inherits_from": [], "methods": [{"name": "__init__", "line": 161, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize async profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 168, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start async profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Stop async profiling and return analysis.", "signature": "stop(self) -> Dict[str, Any]"}, {"name": "track_task", "line": 195, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "asyncio.Task"}], "is_async": false, "return_type": "None", "description": "Track an async task.", "signature": "track_task(self, task: asyncio.Task) -> None"}], "properties": [], "description": "Manages profiling of asynchronous function executions."}, {"name": "PerformanceProfiler", "line": 204, "inherits_from": [], "methods": [{"name": "__init__", "line": 207, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize performance profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "profiling_type", "type": "ProfilingType = ProfilingType.COMBINED", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "None", "description": "\n        Start profiling.\n\n        Args:\n            profiling_type: Type of profiling to perform\n        ", "signature": "start(self, profiling_type: ProfilingType = ProfilingType.COMBINED = ProfilingType.COMBINED) -> None"}, {"name": "stop", "line": 232, "parameters": [{"name": "self", "type": "self"}, {"name": "profiling_type", "type": "ProfilingType = ProfilingType.COMBINED", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "ProfilingResult", "description": "\n        Stop profiling and return results.\n\n        Args:\n            profiling_type: Type of profiling to stop\n\n        Returns:\n            Profiling result\n        ", "signature": "stop(self, profiling_type: ProfilingType = ProfilingType.COMBINED = ProfilingType.COMBINED) -> ProfilingResult"}], "properties": [], "description": "Aggregates various profiling data to analyze overall performance."}, {"name": "ProfilingManager", "line": 279, "inherits_from": [], "methods": [{"name": "__init__", "line": 282, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize profiling manager.", "signature": "__init__(self)"}, {"name": "create_profiler", "line": 287, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "PerformanceProfiler", "description": "\n        Create a new profiler.\n\n        Args:\n            name: Profiler name\n\n        Returns:\n            Created profiler\n        ", "signature": "create_profiler(self, name: str) -> PerformanceProfiler"}, {"name": "get_profiler", "line": 302, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[PerformanceProfiler]", "description": "Get profiler by name.", "signature": "get_profiler(self, name: str) -> Optional[PerformanceProfiler]"}, {"name": "start_profiling", "line": 306, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, profiling_type: ProfilingType = ProfilingType.COMBINED"}, {"name": "profiling_type", "type": "ProfilingType = ProfilingType.COMBINED", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "None", "description": "\n        Start profiling with named profiler.\n\n        Args:\n            name: Profiler name\n            profiling_type: Type of profiling\n        ", "signature": "start_profiling(self, name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiling_type: ProfilingType = ProfilingType.COMBINED = ProfilingType.COMBINED) -> None"}, {"name": "stop_profiling", "line": 320, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, profiling_type: ProfilingType = ProfilingType.COMBINED"}, {"name": "profiling_type", "type": "ProfilingType = ProfilingType.COMBINED", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "ProfilingResult", "description": "\n        Stop profiling with named profiler.\n\n        Args:\n            name: Profiler name\n            profiling_type: Type of profiling\n\n        Returns:\n            Profiling result\n        ", "signature": "stop_profiling(self, name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiling_type: ProfilingType = ProfilingType.COMBINED = ProfilingType.COMBINED) -> ProfilingResult"}, {"name": "get_results", "line": 339, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "List[ProfilingResult]", "description": "Get profiling results for named profiler.", "signature": "get_results(self, name: str) -> List[ProfilingResult]"}, {"name": "clear_results", "line": 343, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Clear profiling results for named profiler.", "signature": "clear_results(self, name: str) -> None"}], "properties": [], "description": "Coordinates and manages multiple profilers and profiling sessions."}, {"name": "PerformanceMonitor", "line": 432, "inherits_from": [], "methods": [{"name": "__init__", "line": 435, "parameters": [{"name": "self", "type": "self"}, {"name": "interval", "type": "float", "default": "60.0"}], "is_async": false, "description": "\n        Initialize performance monitor.\n\n        Args:\n            interval: Monitoring interval in seconds\n        ", "signature": "__init__(self, interval: float = 60.0)"}, {"name": "start_monitoring", "line": 447, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start continuous monitoring.", "signature": "async start_monitoring(self) -> None"}, {"name": "stop_monitoring", "line": 455, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop continuous monitoring.", "signature": "async stop_monitoring(self) -> None"}, {"name": "_monitor_loop", "line": 465, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Background monitoring loop.", "signature": "async _monitor_loop(self) -> None"}, {"name": "get_metrics_summary", "line": 494, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Get metrics summary.", "signature": "get_metrics_summary(self) -> Dict[str, Any]"}], "properties": [], "description": "Monitors and reports on performance metrics during code execution."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "cProfile", "alias": null, "line": 12, "statement": "import cProfile"}, {"module": "pstats", "alias": null, "line": 13, "statement": "import pstats"}, {"module": "io", "alias": null, "line": 14, "statement": "import io"}, {"module": "time", "alias": null, "line": 15, "statement": "import time"}, {"module": "tracemalloc", "alias": null, "line": 16, "statement": "import tracemalloc"}, {"module": "functools", "alias": null, "line": 21, "statement": "import functools"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Union"}, {"module": "contextlib", "alias": null, "line": 18, "statement": "from contextlib import contextmanager"}, {"module": "contextlib", "alias": null, "line": 18, "statement": "from contextlib import asynccontextmanager"}, {"module": "dataclasses", "alias": null, "line": 19, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 20, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 23, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "cProfile", "type": "import", "line": 12}, {"name": "pstats", "type": "import", "line": 13}, {"name": "io", "type": "import", "line": 14}, {"name": "time", "type": "import", "line": 15}, {"name": "tracemalloc", "type": "import", "line": 16}, {"name": "functools", "type": "import", "line": 21}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from typing import Callable", "type": "import", "line": 17}, {"name": "from typing import Dict", "type": "import", "line": 17}, {"name": "from typing import List", "type": "import", "line": 17}, {"name": "from typing import Optional", "type": "import", "line": 17}, {"name": "from typing import TypeVar", "type": "import", "line": 17}, {"name": "from typing import Union", "type": "import", "line": 17}, {"name": "from contextlib import contextmanager", "type": "import", "line": 18}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 18}, {"name": "from dataclasses import dataclass", "type": "import", "line": 19}, {"name": "from enum import Enum", "type": "import", "line": 20}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 23}, {"name": "ProfilingError", "type": "class", "line": 26}, {"name": "ProfilingType", "type": "class", "line": 31}, {"name": "ProfilingResult", "type": "class", "line": 40}, {"name": "CPUProfiler", "type": "class", "line": 50}, {"name": "MemoryProfiler", "type": "class", "line": 113}, {"name": "AsyncProfiler", "type": "class", "line": 158}, {"name": "PerformanceProfiler", "type": "class", "line": 204}, {"name": "ProfilingManager", "type": "class", "line": 279}, {"name": "profile_function", "type": "function", "line": 354}, {"name": "async_profile_function", "type": "function", "line": 376}, {"name": "profile_decorator", "type": "function", "line": 397}, {"name": "PerformanceMonitor", "type": "class", "line": 432}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 23}, {"name": "profile_function Function", "description": "Function profile_function implementation.", "line_start": 354, "line_end": 375}, {"name": "async_profile_function Function", "description": "Function async_profile_function implementation.", "line_start": 376, "line_end": 396}, {"name": "profile_decorator Function", "description": "Function profile_decorator implementation.", "line_start": 397, "line_end": 431}, {"name": "ProfilingError Class", "description": "Class ProfilingError definition and methods.", "line_start": 26, "line_end": 36}, {"name": "ProfilingType Class", "description": "Class ProfilingType definition and methods.", "line_start": 31, "line_end": 41}, {"name": "ProfilingResult Class", "description": "Class ProfilingResult definition and methods.", "line_start": 40, "line_end": 50}, {"name": "CPUProfiler Class", "description": "Class CPUProfiler definition and methods.", "line_start": 50, "line_end": 71}, {"name": "MemoryProfiler Class", "description": "Class MemoryProfiler definition and methods.", "line_start": 113, "line_end": 129}, {"name": "AsyncProfiler Class", "description": "Class AsyncProfiler definition and methods.", "line_start": 158, "line_end": 198}, {"name": "PerformanceProfiler Class", "description": "Class PerformanceProfiler definition and methods.", "line_start": 204, "line_end": 235}, {"name": "ProfilingManager Class", "description": "Class ProfilingManager definition and methods.", "line_start": 279, "line_end": 346}, {"name": "PerformanceMonitor Class", "description": "Class PerformanceMonitor definition and methods.", "line_start": 432, "line_end": 497}], "content_hash": "c950d8fbc29ea4ed451cd34824839427"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/tracing.py
  line_count: 444
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "tracing.py", "description": "Python module with 5 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "trace_span", "line": 341, "parameters": [{"name": "name", "type": "str"}, {"name": "tracer_name", "type": "Optional[str]", "default": "None"}], "is_async": false, "description": "Creates and manages a tracing span with the given name using the specified tracer.", "signature": "trace_span(name: str, tracer_name: Optional[str] = None)"}, {"name": "async_trace_span", "line": 362, "parameters": [{"name": "name", "type": "str"}, {"name": "tracer_name", "type": "Optional[str]", "default": "None"}], "is_async": true, "description": "Asynchronously creates and manages a tracing span with the given name using the specified tracer.", "signature": "async async_trace_span(name: str, tracer_name: Optional[str] = None)"}, {"name": "trace_function", "line": 382, "parameters": [{"name": "name", "type": "Optional[str]", "default": "None"}, {"name": "tracer_name", "type": "Optional[str]", "default": "None"}], "is_async": false, "description": "Decorator that traces the execution of a function, optionally naming the span and specifying the tracer.", "signature": "trace_function(name: Optional[str] = None, tracer_name: Optional[str] = None)"}, {"name": "inject_trace_context", "line": 414, "parameters": [{"name": "carrier", "type": "Dict[str, str], tracer_name: Optional[str] = None"}, {"name": "tracer_name", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Injects the current trace context into the provided carrier for propagation across process boundaries.", "signature": "inject_trace_context(carrier: Dict[str, str], tracer_name: Optional[str] = None, tracer_name: Optional[str] = None = None) -> None"}, {"name": "extract_trace_context", "line": 431, "parameters": [{"name": "carrier", "type": "Dict[str, str], tracer_name: Optional[str] = None"}, {"name": "tracer_name", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "Optional[TraceContext]", "description": "Extracts a trace context from the provided carrier to continue a trace across process boundaries.", "signature": "extract_trace_context(carrier: Dict[str, str], tracer_name: Optional[str] = None, tracer_name: Optional[str] = None = None) -> Optional[TraceContext]"}], "classes": [{"name": "TracingError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class representing errors related to tracing operations."}, {"name": "SamplingStrategy", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ALWAYS", "line": 26, "type": ""}, {"name": "NEVER", "line": 27, "type": ""}, {"name": "PROBABILISTIC", "line": 28, "type": ""}, {"name": "RATE_LIMITING", "line": 29, "type": ""}, {"name": "DYNAMIC", "line": 30, "type": ""}], "description": "Defines the strategy used to decide whether a trace should be sampled or not."}, {"name": "TracingConfig", "line": 36, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for tracing behavior and parameters."}, {"name": "TraceContext", "line": 51, "inherits_from": [], "methods": [{"name": "__init__", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str"}, {"name": "span_id", "type": "str"}, {"name": "sampled", "type": "bool", "default": "True"}], "is_async": false, "description": "\n        Initialize trace context.\n\n        Args:\n            trace_id: Trace ID\n            span_id: Span ID\n            sampled: Whether trace is sampled\n        ", "signature": "__init__(self, trace_id: str, span_id: str, sampled: bool = True)"}, {"name": "to_dict", "line": 67, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, str]", "description": "Convert to dictionary for propagation.", "signature": "to_dict(self) -> Dict[str, str]"}, {"name": "from_dict", "line": 76, "parameters": [{"name": "cls", "type": "self"}, {"name": "data", "type": "Dict[str, str]"}], "is_async": false, "return_type": "TraceContext", "description": "Create from dictionary.", "signature": "from_dict(cls, data: Dict[str, str]) -> TraceContext"}], "properties": [], "description": "Represents the context of a trace, including trace identifiers and metadata."}, {"name": "Span", "line": 85, "inherits_from": [], "methods": [{"name": "__init__", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "context", "type": "Optional[TraceContext]", "default": "None"}], "is_async": false, "description": "\n        Initialize span.\n\n        Args:\n            name: Span name\n            context: Trace context\n        ", "signature": "__init__(self, name: str, context: Optional[TraceContext] = None)"}, {"name": "_generate_context", "line": 107, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "TraceContext", "description": "Generate new trace context.", "signature": "_generate_context(self) -> TraceContext"}, {"name": "start", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start the span.", "signature": "start(self) -> None"}, {"name": "end", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "End the span.", "signature": "end(self) -> None"}, {"name": "set_attribute", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Set span attribute.\n\n        Args:\n            key: Attribute key\n            value: Attribute value\n        ", "signature": "set_attribute(self, key: str, value: Any, value: Any) -> None"}, {"name": "add_event", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, attributes: Optional[Dict[str, Any]] = None"}, {"name": "attributes", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Add event to span.\n\n        Args:\n            name: Event name\n            attributes: Event attributes\n        ", "signature": "add_event(self, name: str, attributes: Optional[Dict[str, Any]] = None, attributes: Optional[Dict[str, Any]] = None = None) -> None"}, {"name": "set_status", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "status", "type": "str, message: str = \"\""}, {"name": "message", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "None", "description": "\n        Set span status.\n\n        Args:\n            status: Status (OK, ERROR, UNSET)\n            message: Status message\n        ", "signature": "set_status(self, status: str, message: str = \"\", message: str = \"\" = ) -> None"}, {"name": "add_link", "line": 165, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str, span_id: str, attributes: Optional[Dict[str, Any]] = None"}, {"name": "span_id", "type": "str, attributes: Optional[Dict[str, Any]] = None"}, {"name": "attributes", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Add link to span.\n\n        Args:\n            trace_id: Linked trace ID\n            span_id: Linked span ID\n            attributes: Link attributes\n        ", "signature": "add_link(self, trace_id: str, span_id: str, attributes: Optional[Dict[str, Any]] = None, span_id: str, attributes: Optional[Dict[str, Any]] = None, attributes: Optional[Dict[str, Any]] = None = None) -> None"}, {"name": "duration", "line": 183, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Optional[float]", "description": "Get span duration in seconds.", "signature": "duration(self) -> Optional[float]"}, {"name": "is_active", "line": 190, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if span is active.", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Represents a single unit of work within a trace, capturing timing and metadata."}, {"name": "Tracer", "line": 195, "inherits_from": [], "methods": [{"name": "__init__", "line": 198, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TracingConfig):"}], "is_async": false, "description": "\n        Initialize tracer.\n\n        Args:\n            config: Tracing configuration\n        ", "signature": "__init__(self, config: TracingConfig):)"}, {"name": "start_span", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, context: Optional[TraceContext] = None"}, {"name": "context", "type": "Optional[TraceContext] = None", "default": "None"}], "is_async": false, "return_type": "Span", "description": "\n        Start a new span.\n\n        Args:\n            name: Span name\n            context: Trace context\n\n        Returns:\n            Started span\n        ", "signature": "start_span(self, name: str, context: Optional[TraceContext] = None, context: Optional[TraceContext] = None = None) -> Span"}, {"name": "end_span", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "span", "type": "Span"}], "is_async": false, "return_type": "None", "description": "\n        End a span.\n\n        Args:\n            span: Span to end\n        ", "signature": "end_span(self, span: Span) -> None"}, {"name": "get_current_span", "line": 242, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Optional[Span]", "description": "Get current active span.", "signature": "get_current_span(self) -> Optional[Span]"}, {"name": "inject_context", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "span", "type": "Span, carrier: Dict[str, str]"}, {"name": "carrier", "type": "Dict[str, str]"}], "is_async": false, "return_type": "None", "description": "\n        Inject trace context into carrier.\n\n        Args:\n            span: Span to inject\n            carrier: Carrier dictionary\n        ", "signature": "inject_context(self, span: Span, carrier: Dict[str, str], carrier: Dict[str, str]) -> None"}, {"name": "extract_context", "line": 260, "parameters": [{"name": "self", "type": "self"}, {"name": "carrier", "type": "Dict[str, str]"}], "is_async": false, "return_type": "Optional[TraceContext]", "description": "\n        Extract trace context from carrier.\n\n        Args:\n            carrier: Carrier dictionary\n\n        Returns:\n            Extracted trace context\n        ", "signature": "extract_context(self, carrier: Dict[str, str]) -> Optional[TraceContext]"}, {"name": "should_sample", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Determine if trace should be sampled.\n\n        Args:\n            trace_id: Trace ID\n\n        Returns:\n            True if should sample, False otherwise\n        ", "signature": "should_sample(self, trace_id: str) -> bool"}], "properties": [], "description": "Manages the creation and lifecycle of spans and trace contexts."}, {"name": "TraceManager", "line": 295, "inherits_from": [], "methods": [{"name": "__init__", "line": 298, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize trace manager.", "signature": "__init__(self)"}, {"name": "add_tracer", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: TracingConfig"}, {"name": "config", "type": "TracingConfig"}], "is_async": false, "return_type": "Tracer", "description": "\n        Add tracer.\n\n        Args:\n            name: Tracer name\n            config: Tracer configuration\n\n        Returns:\n            Created tracer\n        ", "signature": "add_tracer(self, name: str, config: TracingConfig, config: TracingConfig) -> Tracer"}, {"name": "get_tracer", "line": 322, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[Tracer]", "description": "Get tracer by name.", "signature": "get_tracer(self, name: str) -> Optional[Tracer]"}, {"name": "get_default_tracer", "line": 326, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Optional[Tracer]", "description": "Get default tracer.", "signature": "get_default_tracer(self) -> Optional[Tracer]"}, {"name": "set_default_tracer", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set default tracer.", "signature": "set_default_tracer(self, name: str) -> None"}], "properties": [], "description": "Coordinates tracing operations, including span management and context propagation."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "functools", "alias": null, "line": 12, "statement": "import functools"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import asynccontextmanager"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import contextmanager"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 48, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "functools", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Callable", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import TypeVar", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 14}, {"name": "from contextlib import contextmanager", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "TracingError", "type": "class", "line": 21}, {"name": "SamplingStrategy", "type": "class", "line": 26}, {"name": "TracingConfig", "type": "class", "line": 36}, {"name": "T", "type": "constant", "line": 48}, {"name": "TraceContext", "type": "class", "line": 51}, {"name": "Span", "type": "class", "line": 85}, {"name": "Tracer", "type": "class", "line": 195}, {"name": "TraceManager", "type": "class", "line": 295}, {"name": "trace_span", "type": "function", "line": 341}, {"name": "async_trace_span", "type": "function", "line": 362}, {"name": "trace_function", "type": "function", "line": 382}, {"name": "inject_trace_context", "type": "function", "line": 414}, {"name": "extract_trace_context", "type": "function", "line": 431}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "trace_span Function", "description": "Function trace_span implementation.", "line_start": 341, "line_end": 361}, {"name": "async_trace_span Function", "description": "Function async_trace_span implementation.", "line_start": 362, "line_end": 381}, {"name": "trace_function Function", "description": "Function trace_function implementation.", "line_start": 382, "line_end": 413}, {"name": "inject_trace_context Function", "description": "Function inject_trace_context implementation.", "line_start": 414, "line_end": 430}, {"name": "extract_trace_context Function", "description": "Function extract_trace_context implementation.", "line_start": 431, "line_end": 436}, {"name": "TracingError Class", "description": "Class TracingError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "SamplingStrategy Class", "description": "Class SamplingStrategy definition and methods.", "line_start": 26, "line_end": 36}, {"name": "TracingConfig Class", "description": "Class TracingConfig definition and methods.", "line_start": 36, "line_end": 46}, {"name": "TraceContext Class", "description": "Class TraceContext definition and methods.", "line_start": 51, "line_end": 79}, {"name": "Span Class", "description": "Class Span definition and methods.", "line_start": 85, "line_end": 193}, {"name": "Tracer Class", "description": "Class Tracer definition and methods.", "line_start": 195, "line_end": 277}, {"name": "TraceManager Class", "description": "Class TraceManager definition and methods.", "line_start": 295, "line_end": 333}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 48, "line_end": 48}], "content_hash": "c8c17f70b4bb0464a029596be0db972b"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/health.py
  line_count: 566
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "health.py", "description": "Python module with 1 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "health_check", "line": 554, "parameters": [{"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}, {"name": "timeout", "type": "float", "default": "30.0"}, {"name": "critical", "type": "bool", "default": "True"}], "is_async": false, "description": "Performs a health check with the given parameters and returns the status.", "signature": "health_check(name: str, description: str = , timeout: float = 30.0, critical: bool = True)"}], "classes": [{"name": "HealthError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error encountered during a health check."}, {"name": "HealthStatus", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "HEALTHY", "line": 26, "type": ""}, {"name": "UNHEALTHY", "line": 27, "type": ""}, {"name": "DEGRADED", "line": 28, "type": ""}, {"name": "UNKNOWN", "line": 29, "type": ""}], "description": "Encapsulates the status and details of a health check result."}, {"name": "HealthCheck", "line": 35, "inherits_from": [], "methods": [], "properties": [], "description": "Defines a health check with its configuration and execution logic."}, {"name": "HealthChecker", "line": 48, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}, {"name": "timeout", "type": "float", "default": "30.0"}, {"name": "critical", "type": "bool", "default": "True"}], "is_async": false, "description": "\n        Initialize health checker.\n\n        Args:\n            name: Health check name\n            description: Health check description\n            timeout: Health check timeout\n            critical: Whether this check is critical\n        ", "signature": "__init__(self, name: str, description: str = , timeout: float = 30.0, critical: bool = True)"}, {"name": "check", "line": 67, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "\n        Perform health check.\n\n        Returns:\n            Health check result\n        ", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Base class for implementing specific health checkers."}, {"name": "PingHealthChecker", "line": 77, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "host", "type": "str"}, {"name": "port", "type": "int", "default": "80"}], "is_async": false, "description": "\n        Initialize ping health checker.\n\n        Args:\n            host: Host to ping\n            port: Port to check\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, host: str, port: int = 80, **kwargs)"}, {"name": "check", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform ping health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies connectivity via ping."}, {"name": "HttpHealthChecker", "line": 133, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}, {"name": "expected_status", "type": "int", "default": "200"}], "is_async": false, "description": "\n        Initialize HTTP health checker.\n\n        Args:\n            url: URL to check\n            expected_status: Expected HTTP status code\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, url: str, expected_status: int = 200, **kwargs)"}, {"name": "check", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform HTTP health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies service availability via HTTP requests."}, {"name": "DatabaseHealthChecker", "line": 195, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 198, "parameters": [{"name": "self", "type": "self"}, {"name": "connection_func", "type": "Callable"}], "is_async": false, "description": "\n        Initialize database health checker.\n\n        Args:\n            connection_func: Function to test database connection\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, connection_func: Callable, **kwargs)"}, {"name": "check", "line": 209, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform database health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies database connectivity and responsiveness."}, {"name": "CustomHealthChecker", "line": 250, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 253, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "check_func", "type": "Callable"}], "is_async": false, "description": "\n        Initialize custom health checker.\n\n        Args:\n            name: Health check name\n            check_func: Function to perform health check\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, name: str, check_func: Callable, **kwargs)"}, {"name": "check", "line": 265, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform custom health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Allows custom health check implementations with user-defined logic."}, {"name": "HealthMonitor", "line": 326, "inherits_from": [], "methods": [{"name": "__init__", "line": 329, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize health monitor.", "signature": "__init__(self)"}, {"name": "add_checker", "line": 337, "parameters": [{"name": "self", "type": "self"}, {"name": "checker", "type": "HealthChecker"}], "is_async": false, "return_type": "None", "description": "\n        Add health checker.\n\n        Args:\n            checker: Health checker to add\n        ", "signature": "add_checker(self, checker: HealthChecker) -> None"}, {"name": "remove_checker", "line": 346, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove health checker.\n\n        Args:\n            name: Health checker name\n        ", "signature": "remove_checker(self, name: str) -> None"}, {"name": "run_check", "line": 356, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "HealthCheck", "description": "\n        Run specific health check.\n\n        Args:\n            name: Health checker name\n\n        Returns:\n            Health check result\n\n        Raises:\n            ValueError: If checker not found\n        ", "signature": "async run_check(self, name: str) -> HealthCheck"}, {"name": "run_all_checks", "line": 377, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "Dict[str, HealthCheck]", "description": "\n        Run all health checks.\n\n        Returns:\n            Dictionary of health check results\n        ", "signature": "async run_all_checks(self) -> Dict[str, HealthCheck]"}, {"name": "get_overall_status", "line": 407, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "HealthStatus", "description": "\n        Get overall health status.\n\n        Returns:\n            Overall health status\n        ", "signature": "get_overall_status(self) -> HealthStatus"}, {"name": "get_health_summary", "line": 440, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "\n        Get health summary.\n\n        Returns:\n            Health summary dictionary\n        ", "signature": "get_health_summary(self) -> Dict[str, Any]"}, {"name": "start_auto_refresh", "line": 466, "parameters": [{"name": "self", "type": "self"}, {"name": "interval", "type": "Optional[float] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Start automatic health check refresh.\n\n        Args:\n            interval: Refresh interval in seconds\n        ", "signature": "start_auto_refresh(self, interval: Optional[float] = None = None) -> None"}, {"name": "stop_auto_refresh", "line": 480, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Stop automatic health check refresh.", "signature": "stop_auto_refresh(self) -> None"}, {"name": "_refresh_loop", "line": 487, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Background refresh loop.", "signature": "async _refresh_loop(self) -> None"}], "properties": [], "description": "Manages and aggregates multiple health checks to provide overall system health status."}, {"name": "HealthEndpoint", "line": 501, "inherits_from": [], "methods": [{"name": "__init__", "line": 504, "parameters": [{"name": "self", "type": "self"}, {"name": "monitor", "type": "HealthMonitor"}, {"name": "path", "type": "str", "default": "/health"}], "is_async": false, "description": "\n        Initialize health endpoint.\n\n        Args:\n            monitor: Health monitor\n            path: Endpoint path\n        ", "signature": "__init__(self, monitor: HealthMonitor, path: str = /health)"}, {"name": "handle_request", "line": 515, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Dict[str, Any]"}], "is_async": true, "return_type": "Dict[str, Any]", "description": "\n        Handle health check request.\n\n        Args:\n            request: HTTP request\n\n        Returns:\n            HTTP response\n        ", "signature": "async handle_request(self, request: Dict[str, Any]) -> Dict[str, Any]"}], "properties": [], "description": "Exposes health check results through an API endpoint."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "abc", "alias": null, "line": 16, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 16, "statement": "from abc import abstractmethod"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Callable", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from abc import ABC", "type": "import", "line": 16}, {"name": "from abc import abstractmethod", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "HealthError", "type": "class", "line": 21}, {"name": "HealthStatus", "type": "class", "line": 26}, {"name": "HealthCheck", "type": "class", "line": 35}, {"name": "HealthChecker", "type": "class", "line": 48}, {"name": "PingHealthChecker", "type": "class", "line": 77}, {"name": "HttpHealthChecker", "type": "class", "line": 133}, {"name": "DatabaseHealthChecker", "type": "class", "line": 195}, {"name": "CustomHealthChecker", "type": "class", "line": 250}, {"name": "HealthMonitor", "type": "class", "line": 326}, {"name": "HealthEndpoint", "type": "class", "line": 501}, {"name": "health_check", "type": "function", "line": 554}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "health_check Function", "description": "Function health_check implementation.", "line_start": 554, "line_end": 559}, {"name": "HealthError Class", "description": "Class HealthError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "HealthStatus Class", "description": "Class HealthStatus definition and methods.", "line_start": 26, "line_end": 36}, {"name": "HealthCheck Class", "description": "Class HealthCheck definition and methods.", "line_start": 35, "line_end": 45}, {"name": "HealthChecker Class", "description": "Class HealthChecker definition and methods.", "line_start": 48, "line_end": 70}, {"name": "PingHealthChecker Class", "description": "Class PingHealthChecker definition and methods.", "line_start": 77, "line_end": 96}, {"name": "HttpHealthChecker Class", "description": "Class HttpHealthChecker definition and methods.", "line_start": 133, "line_end": 152}, {"name": "DatabaseHealthChecker Class", "description": "Class DatabaseHealthChecker definition and methods.", "line_start": 195, "line_end": 212}, {"name": "CustomHealthChecker Class", "description": "Class CustomHealthChecker definition and methods.", "line_start": 250, "line_end": 268}, {"name": "HealthMonitor Class", "description": "Class HealthMonitor definition and methods.", "line_start": 326, "line_end": 490}, {"name": "HealthEndpoint Class", "description": "Class HealthEndpoint definition and methods.", "line_start": 501, "line_end": 518}], "content_hash": "db82e513055b4a32255d73d918d087aa"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/logging.py
  line_count: 55
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 16, "parameters": [{"name": "log_level", "type": "str = \"INFO\"", "default": "INFO"}], "is_async": false, "return_type": "None", "description": "Configures the logging system with the specified log level.", "signature": "setup_logging(log_level: str = \"INFO\" = INFO) -> None"}, {"name": "get_logger", "line": 46, "parameters": [{"name": "name", "type": "str"}], "is_async": false, "return_type": "structlog.stdlib.BoundLogger", "description": "Retrieves a logger instance with the given name.", "signature": "get_logger(name: str) -> structlog.stdlib.BoundLogger"}, {"name": "log_context", "line": 51, "parameters": [], "is_async": false, "return_type": "structlog.stdlib.BoundLogger", "description": "Creates a logger with additional contextual information.", "signature": "log_context(**kwargs: Any) -> structlog.stdlib.BoundLogger"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "sys", "alias": null, "line": 10, "statement": "import sys"}, {"module": "structlog", "alias": null, "line": 12, "statement": "import structlog"}, {"module": "orjson", "alias": null, "line": 13, "statement": "import orjson"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "sys", "type": "import", "line": 10}, {"name": "structlog", "type": "import", "line": 12}, {"name": "orjson", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "setup_logging", "type": "function", "line": 16}, {"name": "get_logger", "type": "function", "line": 46}, {"name": "log_context", "type": "function", "line": 51}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 16, "line_end": 45}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 46, "line_end": 50}, {"name": "log_context Function", "description": "Function log_context implementation.", "line_start": 51, "line_end": 56}], "content_hash": "7619acb7e0c15e53c5af54613b3cf601"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/metrics.py
  line_count: 320
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "metrics.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "time_operation", "line": 310, "parameters": [{"name": "histogram", "type": "Histogram"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "TimingContext", "description": "Creates a timing context that records the duration of an operation and updates the given histogram with optional labels.", "signature": "time_operation(histogram: Histogram, labels: dict[str, str] | None = None) -> TimingContext"}], "classes": [{"name": "MetricsConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for metrics collection and reporting."}, {"name": "MetricsCollector", "line": 40, "inherits_from": [], "methods": [{"name": "__init__", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MetricsConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: MetricsConfig | None = None)"}, {"name": "_initialize_default_metrics", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize default system metrics.", "signature": "_initialize_default_metrics(self)"}, {"name": "create_counter", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Counter", "description": "Create a Prometheus counter.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Counter instance\n        ", "signature": "create_counter(self, name: str, description: str, labels: list[str] | None = None) -> Counter"}, {"name": "create_gauge", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Gauge", "description": "Create a Prometheus gauge.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Gauge instance\n        ", "signature": "create_gauge(self, name: str, description: str, labels: list[str] | None = None) -> Gauge"}, {"name": "create_histogram", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Histogram", "description": "Create a Prometheus histogram.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Histogram instance\n        ", "signature": "create_histogram(self, name: str, description: str, labels: list[str] | None = None) -> Histogram"}, {"name": "create_enum", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str]"}, {"name": "states", "type": "list[str]"}], "is_async": false, "return_type": "Enum", "description": "Create a Prometheus enum.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n            states: Possible enum states\n\n        Returns:\n            Prometheus Enum instance\n        ", "signature": "create_enum(self, name: str, description: str, labels: list[str], states: list[str]) -> Enum"}, {"name": "_build_metric_name", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "str", "description": "Build full metric name with namespace and subsystem.\n\n        Args:\n            name: Base metric name\n\n        Returns:\n            Full metric name\n        ", "signature": "_build_metric_name(self, name: str) -> str"}, {"name": "record_request", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "method", "type": "str"}, {"name": "endpoint", "type": "str"}, {"name": "status", "type": "str"}, {"name": "duration", "type": "float):"}], "is_async": false, "description": "Record request metrics.\n\n        Args:\n            method: HTTP method\n            endpoint: Request endpoint\n            status: Response status\n            duration: Request duration in seconds\n        ", "signature": "record_request(self, method: str, endpoint: str, status: str, duration: float):)"}, {"name": "record_error", "line": 237, "parameters": [{"name": "self", "type": "self"}, {"name": "error_type", "type": "str"}, {"name": "component", "type": "str):"}], "is_async": false, "description": "Record error metrics.\n\n        Args:\n            error_type: Type of error\n            component: Component that generated the error\n        ", "signature": "record_error(self, error_type: str, component: str):)"}, {"name": "set_component_status", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "str"}, {"name": "status", "type": "str):"}], "is_async": false, "description": "Set component health status.\n\n        Args:\n            component: Component name\n            status: Health status (healthy, degraded, unhealthy)\n        ", "signature": "set_component_status(self, component: str, status: str):)"}, {"name": "get_metrics", "line": 263, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get metrics in Prometheus format.\n\n        Returns:\n            Metrics as Prometheus text format\n        ", "signature": "get_metrics(self) -> str"}, {"name": "get_content_type", "line": 274, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get Prometheus content type.\n\n        Returns:\n            Prometheus content type\n        ", "signature": "get_content_type(self) -> str"}], "properties": [], "description": "Manages the collection, aggregation, and export of application metrics."}, {"name": "TimingContext", "line": 283, "inherits_from": [], "methods": [{"name": "__init__", "line": 286, "parameters": [{"name": "self", "type": "self"}, {"name": "histogram", "type": "Histogram | None"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, histogram: Histogram | None, labels: dict[str, str] | None = None)"}, {"name": "__enter__", "line": 293, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__enter__(self)"}, {"name": "__exit__", "line": 297, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": false, "signature": "__exit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Context manager that measures the elapsed time of a code block and records it to a histogram."}], "imports": [{"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Counter"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Gauge"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Histogram"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Info"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Enum"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import CollectorRegistry"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import generate_latest"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import CONTENT_TYPE_LATEST"}, {"module": "pydantic", "alias": null, "line": 24, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 26, "statement": "from observability import get_logger"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from prometheus_client import Counter", "type": "import", "line": 14}, {"name": "from prometheus_client import Gauge", "type": "import", "line": 14}, {"name": "from prometheus_client import Histogram", "type": "import", "line": 14}, {"name": "from prometheus_client import Info", "type": "import", "line": 14}, {"name": "from prometheus_client import Enum", "type": "import", "line": 14}, {"name": "from prometheus_client import CollectorRegistry", "type": "import", "line": 14}, {"name": "from prometheus_client import generate_latest", "type": "import", "line": 14}, {"name": "from prometheus_client import CONTENT_TYPE_LATEST", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 24}, {"name": "from observability import get_logger", "type": "import", "line": 26}, {"name": "MetricsConfig", "type": "class", "line": 31}, {"name": "MetricsCollector", "type": "class", "line": 40}, {"name": "TimingContext", "type": "class", "line": 283}, {"name": "time_operation", "type": "function", "line": 310}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 26}, {"name": "time_operation Function", "description": "Function time_operation implementation.", "line_start": 310, "line_end": 315}, {"name": "MetricsConfig Class", "description": "Class MetricsConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "MetricsCollector Class", "description": "Class MetricsCollector definition and methods.", "line_start": 40, "line_end": 277}, {"name": "TimingContext Class", "description": "Class TimingContext definition and methods.", "line_start": 283, "line_end": 300}], "content_hash": "94f7fc5858f0e5f5b6a074c5c828857d"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/compression.py
  line_count: 554
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "compression.py", "description": "Python module with 18 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "compress", "line": 380, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "format_type", "type": "Optional[CompressionFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the specified compression format and options.", "signature": "compress(data: Union[str, bytes], format_type: Optional[CompressionFormat] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "decompress", "line": 386, "parameters": [{"name": "data", "type": "bytes"}, {"name": "format_type", "type": "Optional[CompressionFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using the specified compression format and options.", "signature": "decompress(data: bytes, format_type: Optional[CompressionFormat] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "compress_gzip", "line": 392, "parameters": [{"name": "data", "type": "Union[str, bytes], compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the GZIP compression algorithm with a given compression level.", "signature": "compress_gzip(data: Union[str, bytes], compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_gzip", "line": 398, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress GZIP compressed data.", "signature": "decompress_gzip(data: bytes) -> Union[str, bytes]"}, {"name": "compress_bzip2", "line": 404, "parameters": [{"name": "data", "type": "Union[str, bytes], compression_level: int = 9"}, {"name": "compression_level", "type": "int = 9", "default": "9"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the BZIP2 compression algorithm with a given compression level.", "signature": "compress_bzip2(data: Union[str, bytes], compression_level: int = 9, compression_level: int = 9 = 9) -> bytes"}, {"name": "decompress_bzip2", "line": 410, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress BZIP2 compressed data.", "signature": "decompress_bzip2(data: bytes) -> Union[str, bytes]"}, {"name": "compress_lzma", "line": 416, "parameters": [{"name": "data", "type": "Union[str, bytes], compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the LZMA compression algorithm with a given compression level.", "signature": "compress_lzma(data: Union[str, bytes], compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_lzma", "line": 422, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress LZMA compressed data.", "signature": "decompress_lzma(data: bytes) -> Union[str, bytes]"}, {"name": "compress_zlib", "line": 428, "parameters": [{"name": "data", "type": "Union[str, bytes], compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the ZLIB compression algorithm with a given compression level.", "signature": "compress_zlib(data: Union[str, bytes], compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_zlib", "line": 434, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress ZLIB compressed data.", "signature": "decompress_zlib(data: bytes) -> Union[str, bytes]"}, {"name": "compress_brotli", "line": 440, "parameters": [{"name": "data", "type": "Union[str, bytes], quality: int = 11"}, {"name": "quality", "type": "int = 11", "default": "11"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the Brotli compression algorithm with a specified quality level.", "signature": "compress_brotli(data: Union[str, bytes], quality: int = 11, quality: int = 11 = 11) -> bytes"}, {"name": "decompress_brotli", "line": 446, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress Brotli compressed data.", "signature": "decompress_brotli(data: bytes) -> Union[str, bytes]"}, {"name": "compress_file", "line": 454, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "CompressionFormat = CompressionFormat.GZIP, **kwargs", "default": "CompressionFormat.GZIP, **kwargs"}], "is_async": false, "return_type": "None", "description": "Compress a file from input path to output path using the specified compression format and options.", "signature": "compress_file(input_path: str, output_path: str, format_type: CompressionFormat = CompressionFormat.GZIP, **kwargs = CompressionFormat.GZIP, **kwargs, **kwargs) -> None"}, {"name": "decompress_file", "line": 471, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "Optional[CompressionFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "None", "description": "Decompress a file from input path to output path using the specified compression format and options.", "signature": "decompress_file(input_path: str, output_path: str, format_type: Optional[CompressionFormat] = None, **kwargs = None, **kwargs) -> None"}, {"name": "analyze_compression", "line": 502, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Dict[str, Dict[str, Any]]", "description": "Analyze compression ratios and statistics for various compression formats on the given data.", "signature": "analyze_compression(data: Union[str, bytes]) -> Dict[str, Dict[str, Any]]"}, {"name": "get_best_compression", "line": 507, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "tuple[CompressionFormat, bytes, float]", "description": "Determine the best compression format for the data and return the format, compressed data, and compression ratio.", "signature": "get_best_compression(data: Union[str, bytes]) -> tuple[CompressionFormat, bytes, float]"}, {"name": "is_compressed", "line": 529, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "bool", "description": "Check if the given data is in a recognized compressed format.", "signature": "is_compressed(data: bytes) -> bool"}, {"name": "get_compression_info", "line": 534, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Optional[Dict[str, Any]]", "description": "Retrieve metadata and information about the compression format of the given data if available.", "signature": "get_compression_info(data: bytes) -> Optional[Dict[str, Any]]"}], "classes": [{"name": "CompressionFormat", "line": 22, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "GZIP", "line": 22, "type": ""}, {"name": "BZIP2", "line": 23, "type": ""}, {"name": "LZMA", "line": 24, "type": ""}, {"name": "ZLIB", "line": 25, "type": ""}, {"name": "BROTLI", "line": 26, "type": ""}, {"name": "NONE", "line": 27, "type": ""}], "description": "Enumeration of supported compression formats."}, {"name": "CompressionError", "line": 32, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during compression."}, {"name": "DecompressionError", "line": 37, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decompression."}, {"name": "Compressor", "line": 42, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: CompressionFormat) -> None"}, {"name": "compress", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Base class defining the interface for compression and decompression operations."}, {"name": "GzipCompressor", "line": 64, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using gzip.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using gzip.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for the GZIP compression format."}, {"name": "Bzip2Compressor", "line": 102, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 105, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 9", "default": "9"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 9 = 9) -> None"}, {"name": "compress", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using bzip2.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using bzip2.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for the BZIP2 compression format."}, {"name": "LzmaCompressor", "line": 140, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 143, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using LZMA.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using LZMA.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for the LZMA compression format."}, {"name": "ZlibCompressor", "line": 178, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using zlib.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 196, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using zlib.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for the ZLIB compression format."}, {"name": "BrotliCompressor", "line": 216, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 219, "parameters": [{"name": "self", "type": "self"}, {"name": "quality", "type": "int = 11", "default": "11"}], "is_async": false, "return_type": "None", "signature": "__init__(self, quality: int = 11 = 11) -> None"}, {"name": "compress", "line": 223, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using Brotli.", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using Brotli.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 247, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for the Brotli compression format."}, {"name": "NoCompressor", "line": 254, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 257, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "compress", "line": 260, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Return data as-is (no compression).", "signature": "compress(self, data: Union[str, bytes], **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 266, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Return data as-is (no decompression).", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "get_compression_ratio", "line": 273, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio (always 0 for no compression).", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation that performs no compression (pass-through)."}, {"name": "CompressionManager", "line": 278, "inherits_from": [], "methods": [{"name": "__init__", "line": 281, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_compressor", "line": 292, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "Compressor", "description": "Get a compressor for the specified format.", "signature": "get_compressor(self, format_type: CompressionFormat) -> Compressor"}, {"name": "register_compressor", "line": 298, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat, compressor: Compressor"}, {"name": "compressor", "type": "Compressor"}], "is_async": false, "return_type": "None", "description": "Register a custom compressor.", "signature": "register_compressor(self, format_type: CompressionFormat, compressor: Compressor, compressor: Compressor) -> None"}, {"name": "set_default_format", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "None", "description": "Set the default compression format.", "signature": "set_default_format(self, format_type: CompressionFormat) -> None"}, {"name": "get_default_format", "line": 310, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "CompressionFormat", "description": "Get the default compression format.", "signature": "get_default_format(self) -> CompressionFormat"}, {"name": "compress", "line": 314, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "format_type", "type": "Optional[CompressionFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the specified format.", "signature": "compress(self, data: Union[str, bytes], format_type: Optional[CompressionFormat] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "decompress", "line": 321, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}, {"name": "format_type", "type": "Optional[CompressionFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decompress data using the specified format.", "signature": "decompress(self, data: bytes, format_type: Optional[CompressionFormat] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "auto_detect_format", "line": 328, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}], "is_async": false, "return_type": "Optional[CompressionFormat]", "description": "Auto-detect the compression format of data.", "signature": "auto_detect_format(self, data: bytes) -> Optional[CompressionFormat]"}, {"name": "benchmark_compression", "line": 343, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "formats", "type": "Optional[list] = None", "default": "None"}], "is_async": false, "return_type": "Dict[str, Dict[str, Any]]", "description": "Benchmark compression across different formats.", "signature": "benchmark_compression(self, data: Union[str, bytes], formats: Optional[list] = None = None) -> Dict[str, Dict[str, Any]]"}], "properties": [], "description": "Manager class to handle compression and decompression across multiple formats."}], "imports": [{"module": "bz2", "alias": null, "line": 9, "statement": "import bz2"}, {"module": "gzip", "alias": null, "line": 10, "statement": "import gzip"}, {"module": "lzma", "alias": null, "line": 11, "statement": "import lzma"}, {"module": "zlib", "alias": null, "line": 12, "statement": "import zlib"}, {"module": "brotli", "alias": null, "line": 17, "statement": "import brotli"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Union"}], "constants": []}, "key_elements": [{"name": "bz2", "type": "import", "line": 9}, {"name": "gzip", "type": "import", "line": 10}, {"name": "lzma", "type": "import", "line": 11}, {"name": "zlib", "type": "import", "line": 12}, {"name": "brotli", "type": "import", "line": 17}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Dict", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from typing import Union", "type": "import", "line": 15}, {"name": "CompressionFormat", "type": "class", "line": 22}, {"name": "CompressionError", "type": "class", "line": 32}, {"name": "DecompressionError", "type": "class", "line": 37}, {"name": "Compressor", "type": "class", "line": 42}, {"name": "GzipCompressor", "type": "class", "line": 64}, {"name": "Bzip2Compressor", "type": "class", "line": 102}, {"name": "LzmaCompressor", "type": "class", "line": 140}, {"name": "ZlibCompressor", "type": "class", "line": 178}, {"name": "BrotliCompressor", "type": "class", "line": 216}, {"name": "NoCompressor", "type": "class", "line": 254}, {"name": "CompressionManager", "type": "class", "line": 278}, {"name": "compress", "type": "function", "line": 380}, {"name": "decompress", "type": "function", "line": 386}, {"name": "compress_gzip", "type": "function", "line": 392}, {"name": "decompress_gzip", "type": "function", "line": 398}, {"name": "compress_bzip2", "type": "function", "line": 404}, {"name": "decompress_bzip2", "type": "function", "line": 410}, {"name": "compress_lzma", "type": "function", "line": 416}, {"name": "decompress_lzma", "type": "function", "line": 422}, {"name": "compress_zlib", "type": "function", "line": 428}, {"name": "decompress_zlib", "type": "function", "line": 434}, {"name": "compress_brotli", "type": "function", "line": 440}, {"name": "decompress_brotli", "type": "function", "line": 446}, {"name": "compress_file", "type": "function", "line": 454}, {"name": "decompress_file", "type": "function", "line": 471}, {"name": "analyze_compression", "type": "function", "line": 502}, {"name": "get_best_compression", "type": "function", "line": 507}, {"name": "is_compressed", "type": "function", "line": 529}, {"name": "get_compression_info", "type": "function", "line": 534}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "compress Function", "description": "Function compress implementation.", "line_start": 380, "line_end": 385}, {"name": "decompress Function", "description": "Function decompress implementation.", "line_start": 386, "line_end": 391}, {"name": "compress_gzip Function", "description": "Function compress_gzip implementation.", "line_start": 392, "line_end": 397}, {"name": "decompress_gzip Function", "description": "Function decompress_gzip implementation.", "line_start": 398, "line_end": 403}, {"name": "compress_bzip2 Function", "description": "Function compress_bzip2 implementation.", "line_start": 404, "line_end": 409}, {"name": "decompress_bzip2 Function", "description": "Function decompress_bzip2 implementation.", "line_start": 410, "line_end": 415}, {"name": "compress_lzma Function", "description": "Function compress_lzma implementation.", "line_start": 416, "line_end": 421}, {"name": "decompress_lzma Function", "description": "Function decompress_lzma implementation.", "line_start": 422, "line_end": 427}, {"name": "compress_zlib Function", "description": "Function compress_zlib implementation.", "line_start": 428, "line_end": 433}, {"name": "decompress_zlib Function", "description": "Function decompress_zlib implementation.", "line_start": 434, "line_end": 439}, {"name": "compress_brotli Function", "description": "Function compress_brotli implementation.", "line_start": 440, "line_end": 445}, {"name": "decompress_brotli Function", "description": "Function decompress_brotli implementation.", "line_start": 446, "line_end": 453}, {"name": "compress_file Function", "description": "Function compress_file implementation.", "line_start": 454, "line_end": 470}, {"name": "decompress_file Function", "description": "Function decompress_file implementation.", "line_start": 471, "line_end": 501}, {"name": "analyze_compression Function", "description": "Function analyze_compression implementation.", "line_start": 502, "line_end": 506}, {"name": "get_best_compression Function", "description": "Function get_best_compression implementation.", "line_start": 507, "line_end": 528}, {"name": "is_compressed Function", "description": "Function is_compressed implementation.", "line_start": 529, "line_end": 533}, {"name": "get_compression_info Function", "description": "Function get_compression_info implementation.", "line_start": 534, "line_end": 539}, {"name": "CompressionFormat Class", "description": "Class CompressionFormat definition and methods.", "line_start": 22, "line_end": 32}, {"name": "CompressionError Class", "description": "Class CompressionError definition and methods.", "line_start": 32, "line_end": 42}, {"name": "DecompressionError Class", "description": "Class DecompressionError definition and methods.", "line_start": 37, "line_end": 47}, {"name": "Compressor Class", "description": "Class Compressor definition and methods.", "line_start": 42, "line_end": 62}, {"name": "GzipCompressor Class", "description": "Class GzipCompressor definition and methods.", "line_start": 64, "line_end": 98}, {"name": "Bzip2Compressor Class", "description": "Class Bzip2Compressor definition and methods.", "line_start": 102, "line_end": 136}, {"name": "LzmaCompressor Class", "description": "Class LzmaCompressor definition and methods.", "line_start": 140, "line_end": 174}, {"name": "ZlibCompressor Class", "description": "Class ZlibCompressor definition and methods.", "line_start": 178, "line_end": 212}, {"name": "BrotliCompressor Class", "description": "Class BrotliCompressor definition and methods.", "line_start": 216, "line_end": 250}, {"name": "NoCompressor Class", "description": "Class NoCompressor definition and methods.", "line_start": 254, "line_end": 276}, {"name": "CompressionManager Class", "description": "Class CompressionManager definition and methods.", "line_start": 278, "line_end": 346}], "content_hash": "489e43ed381c5849417a17f7bcf45c8d"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
  line_count: 718
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encoding.py", "description": "Python module with 37 functions and 15 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "encode_data", "line": 433, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "format_type", "type": "Optional[EncodingFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "str", "description": "Encodes input data into the specified encoding format.", "signature": "encode_data(data: Union[str, bytes], format_type: Optional[EncodingFormat] = None, **kwargs = None, **kwargs) -> str"}, {"name": "decode_data", "line": 439, "parameters": [{"name": "data", "type": "str"}, {"name": "format_type", "type": "Optional[EncodingFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes encoded data from the specified encoding format.", "signature": "decode_data(data: str, format_type: Optional[EncodingFormat] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "encode_base64", "line": 445, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base64 encoding.", "signature": "encode_base64(data: Union[str, bytes]) -> str"}, {"name": "decode_base64", "line": 451, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes Base64 encoded data.", "signature": "decode_base64(data: str) -> Union[str, bytes]"}, {"name": "encode_base32", "line": 457, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base32 encoding.", "signature": "encode_base32(data: Union[str, bytes]) -> str"}, {"name": "decode_base32", "line": 463, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes Base32 encoded data.", "signature": "decode_base32(data: str) -> Union[str, bytes]"}, {"name": "encode_base16", "line": 469, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base16 encoding.", "signature": "encode_base16(data: Union[str, bytes]) -> str"}, {"name": "decode_base16", "line": 475, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes Base16 encoded data.", "signature": "decode_base16(data: str) -> Union[str, bytes]"}, {"name": "encode_hex", "line": 481, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data into hexadecimal representation.", "signature": "encode_hex(data: Union[str, bytes]) -> str"}, {"name": "decode_hex", "line": 487, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes hexadecimal encoded data.", "signature": "decode_hex(data: str) -> Union[str, bytes]"}, {"name": "encode_url", "line": 493, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe inclusion in URLs.", "signature": "encode_url(data: Union[str, bytes]) -> str"}, {"name": "decode_url", "line": 499, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes URL-encoded data.", "signature": "decode_url(data: str) -> Union[str, bytes]"}, {"name": "encode_quoted_printable", "line": 505, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using quoted-printable encoding.", "signature": "encode_quoted_printable(data: Union[str, bytes]) -> str"}, {"name": "decode_quoted_printable", "line": 511, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes quoted-printable encoded data.", "signature": "decode_quoted_printable(data: str) -> Union[str, bytes]"}, {"name": "encode_json", "line": 517, "parameters": [{"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encodes data into JSON format.", "signature": "encode_json(data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode_json", "line": 523, "parameters": [{"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes JSON formatted data.", "signature": "decode_json(data: str, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "encode_utf8", "line": 529, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using UTF-8 encoding.", "signature": "encode_utf8(data: Union[str, bytes]) -> str"}, {"name": "decode_utf8", "line": 535, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes UTF-8 encoded data.", "signature": "decode_utf8(data: str) -> Union[str, bytes]"}, {"name": "encode_ascii", "line": 541, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using ASCII encoding.", "signature": "encode_ascii(data: Union[str, bytes]) -> str"}, {"name": "decode_ascii", "line": 547, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes ASCII encoded data.", "signature": "decode_ascii(data: str) -> Union[str, bytes]"}, {"name": "encode_latin1", "line": 553, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data using Latin-1 encoding.", "signature": "encode_latin1(data: Union[str, bytes]) -> str"}, {"name": "decode_latin1", "line": 559, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes Latin-1 encoded data.", "signature": "decode_latin1(data: str) -> Union[str, bytes]"}, {"name": "encode_multiple_formats", "line": 567, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "formats", "type": "list[EncodingFormat]"}], "is_async": false, "return_type": "Dict[str, str]", "description": "Encodes data into multiple specified encoding formats.", "signature": "encode_multiple_formats(data: Union[str, bytes], formats: list[EncodingFormat]) -> Dict[str, str]"}, {"name": "decode_multiple_formats", "line": 583, "parameters": [{"name": "data", "type": "str"}, {"name": "formats", "type": "list[EncodingFormat]"}], "is_async": false, "return_type": "Dict[str, Union[str, bytes]]", "description": "Decodes data from multiple specified encoding formats.", "signature": "decode_multiple_formats(data: str, formats: list[EncodingFormat]) -> Dict[str, Union[str, bytes]]"}, {"name": "detect_encoding_format", "line": 601, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Optional[EncodingFormat]", "description": "Detects the encoding format of the given data.", "signature": "detect_encoding_format(data: str) -> Optional[EncodingFormat]"}, {"name": "is_valid_encoding", "line": 606, "parameters": [{"name": "data", "type": "str, format_type: EncodingFormat"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "bool", "description": "Checks if the data is valid for the specified encoding format.", "signature": "is_valid_encoding(data: str, format_type: EncodingFormat, format_type: EncodingFormat) -> bool"}, {"name": "get_encoding_info", "line": 615, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Retrieves information about the encoding of the data.", "signature": "get_encoding_info(data: str) -> Dict[str, Any]"}, {"name": "encode_file", "line": 635, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "EncodingFormat = EncodingFormat.BASE64", "default": "EncodingFormat.BASE64"}], "is_async": false, "return_type": "None", "description": "Encodes the contents of a file into the specified encoding format and writes to output.", "signature": "encode_file(input_path: str, output_path: str, format_type: EncodingFormat = EncodingFormat.BASE64 = EncodingFormat.BASE64) -> None"}, {"name": "decode_file", "line": 652, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "Optional[EncodingFormat] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Decodes the contents of a file from the specified encoding format and writes to output.", "signature": "decode_file(input_path: str, output_path: str, format_type: Optional[EncodingFormat] = None = None) -> None"}, {"name": "encode_for_transmission", "line": 683, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe transmission over networks.", "signature": "encode_for_transmission(data: Union[str, bytes]) -> str"}, {"name": "decode_from_transmission", "line": 688, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes data received from transmission.", "signature": "decode_from_transmission(data: str) -> Union[str, bytes]"}, {"name": "encode_for_url", "line": 693, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data specifically for URL usage.", "signature": "encode_for_url(data: Union[str, bytes]) -> str"}, {"name": "decode_from_url", "line": 698, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes data received from URL encoding.", "signature": "decode_from_url(data: str) -> Union[str, bytes]"}, {"name": "encode_for_json", "line": 703, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data for JSON compatibility.", "signature": "encode_for_json(data: Union[str, bytes]) -> str"}, {"name": "decode_from_json", "line": 708, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes data from JSON format.", "signature": "decode_from_json(data: str) -> Union[str, bytes]"}, {"name": "encode_for_storage", "line": 713, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe storage.", "signature": "encode_for_storage(data: Union[str, bytes]) -> str"}, {"name": "decode_from_storage", "line": 718, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decodes data retrieved from storage.", "signature": "decode_from_storage(data: str) -> Union[str, bytes]"}], "classes": [{"name": "EncodingFormat", "line": 22, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "BASE64", "line": 22, "type": ""}, {"name": "BASE32", "line": 23, "type": ""}, {"name": "BASE16", "line": 24, "type": ""}, {"name": "HEX", "line": 25, "type": ""}, {"name": "URL_ENCODE", "line": 26, "type": ""}, {"name": "QUOTED_PRINTABLE", "line": 27, "type": ""}, {"name": "JSON", "line": 28, "type": ""}, {"name": "UTF8", "line": 29, "type": ""}, {"name": "ASCII", "line": 30, "type": ""}, {"name": "LATIN1", "line": 31, "type": ""}], "description": "Enumeration representing supported encoding formats."}, {"name": "EncodingError", "line": 36, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during encoding processes."}, {"name": "DecodingError", "line": 41, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decoding processes."}, {"name": "Encoder", "line": 46, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: EncodingFormat) -> None"}, {"name": "encode", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Base class providing interface for encoding and decoding data."}, {"name": "Base64Encoder", "line": 63, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 66, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 69, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base64.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using base64.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for Base64 encoding and decoding."}, {"name": "Base32Encoder", "line": 92, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 95, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base32.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using base32.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for Base32 encoding and decoding."}, {"name": "Base16Encoder", "line": 121, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 124, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base16.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using base16.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for Base16 encoding and decoding."}, {"name": "HexEncoder", "line": 150, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 156, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using hex.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 165, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using hex.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for hexadecimal encoding and decoding."}, {"name": "URLEncoder", "line": 179, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 182, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using URL encoding.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 194, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using URL decoding.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for URL encoding and decoding."}, {"name": "QuotedPrintableEncoder", "line": 203, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 206, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using quoted-printable.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 218, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using quoted-printable.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for quoted-printable encoding and decoding."}, {"name": "JSONEncoder", "line": 232, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 238, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using JSON.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 247, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using JSON.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for JSON encoding and decoding."}, {"name": "UTF8Encoder", "line": 256, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 259, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using UTF-8.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using UTF-8.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for UTF-8 encoding and decoding."}, {"name": "ASCIIEncoder", "line": 279, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 282, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 285, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using ASCII.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 294, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using ASCII.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for ASCII encoding and decoding."}, {"name": "Latin1Encoder", "line": 302, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 305, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using Latin-1.", "signature": "encode(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 317, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using Latin-1.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> Union[str, bytes]"}], "properties": [], "description": "Encoder class for Latin-1 encoding and decoding."}, {"name": "EncodingManager", "line": 325, "inherits_from": [], "methods": [{"name": "__init__", "line": 328, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_encoder", "line": 343, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "Encoder", "description": "Get an encoder for the specified format.", "signature": "get_encoder(self, format_type: EncodingFormat) -> Encoder"}, {"name": "register_encoder", "line": 349, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat, encoder: Encoder"}, {"name": "encoder", "type": "Encoder"}], "is_async": false, "return_type": "None", "description": "Register a custom encoder.", "signature": "register_encoder(self, format_type: EncodingFormat, encoder: Encoder, encoder: Encoder) -> None"}, {"name": "set_default_format", "line": 354, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "None", "description": "Set the default encoding format.", "signature": "set_default_format(self, format_type: EncodingFormat) -> None"}, {"name": "get_default_format", "line": 361, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EncodingFormat", "description": "Get the default encoding format.", "signature": "get_default_format(self) -> EncodingFormat"}, {"name": "encode", "line": 365, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "format_type", "type": "Optional[EncodingFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "str", "description": "Encode data using the specified format.", "signature": "encode(self, data: Union[str, bytes], format_type: Optional[EncodingFormat] = None, **kwargs = None, **kwargs) -> str"}, {"name": "decode", "line": 372, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}, {"name": "format_type", "type": "Optional[EncodingFormat] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decode data using the specified format.", "signature": "decode(self, data: str, format_type: Optional[EncodingFormat] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "auto_detect_format", "line": 379, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "Optional[EncodingFormat]", "description": "Auto-detect the encoding format of data.", "signature": "auto_detect_format(self, data: str) -> Optional[EncodingFormat]"}], "properties": [], "description": "Manager class handling multiple encoding formats and operations."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "binascii", "alias": null, "line": 10, "statement": "import binascii"}, {"module": "codecs", "alias": null, "line": 11, "statement": "import codecs"}, {"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "quopri", "alias": null, "line": 13, "statement": "import quopri"}, {"module": "urllib.parse", "alias": null, "line": 14, "statement": "import urllib.parse"}, {"module": "abc", "alias": null, "line": 15, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 15, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Union"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "binascii", "type": "import", "line": 10}, {"name": "codecs", "type": "import", "line": 11}, {"name": "json", "type": "import", "line": 12}, {"name": "quopri", "type": "import", "line": 13}, {"name": "urllib.parse", "type": "import", "line": 14}, {"name": "from abc import ABC", "type": "import", "line": 15}, {"name": "from abc import abstractmethod", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from typing import Dict", "type": "import", "line": 17}, {"name": "from typing import Optional", "type": "import", "line": 17}, {"name": "from typing import Union", "type": "import", "line": 17}, {"name": "EncodingFormat", "type": "class", "line": 22}, {"name": "EncodingError", "type": "class", "line": 36}, {"name": "DecodingError", "type": "class", "line": 41}, {"name": "Encoder", "type": "class", "line": 46}, {"name": "Base64Encoder", "type": "class", "line": 63}, {"name": "Base32Encoder", "type": "class", "line": 92}, {"name": "Base16Encoder", "type": "class", "line": 121}, {"name": "HexEncoder", "type": "class", "line": 150}, {"name": "URLEncoder", "type": "class", "line": 179}, {"name": "QuotedPrintableEncoder", "type": "class", "line": 203}, {"name": "JSONEncoder", "type": "class", "line": 232}, {"name": "UTF8Encoder", "type": "class", "line": 256}, {"name": "ASCIIEncoder", "type": "class", "line": 279}, {"name": "Latin1Encoder", "type": "class", "line": 302}, {"name": "EncodingManager", "type": "class", "line": 325}, {"name": "encode_data", "type": "function", "line": 433}, {"name": "decode_data", "type": "function", "line": 439}, {"name": "encode_base64", "type": "function", "line": 445}, {"name": "decode_base64", "type": "function", "line": 451}, {"name": "encode_base32", "type": "function", "line": 457}, {"name": "decode_base32", "type": "function", "line": 463}, {"name": "encode_base16", "type": "function", "line": 469}, {"name": "decode_base16", "type": "function", "line": 475}, {"name": "encode_hex", "type": "function", "line": 481}, {"name": "decode_hex", "type": "function", "line": 487}, {"name": "encode_url", "type": "function", "line": 493}, {"name": "decode_url", "type": "function", "line": 499}, {"name": "encode_quoted_printable", "type": "function", "line": 505}, {"name": "decode_quoted_printable", "type": "function", "line": 511}, {"name": "encode_json", "type": "function", "line": 517}, {"name": "decode_json", "type": "function", "line": 523}, {"name": "encode_utf8", "type": "function", "line": 529}, {"name": "decode_utf8", "type": "function", "line": 535}, {"name": "encode_ascii", "type": "function", "line": 541}, {"name": "decode_ascii", "type": "function", "line": 547}, {"name": "encode_latin1", "type": "function", "line": 553}, {"name": "decode_latin1", "type": "function", "line": 559}, {"name": "encode_multiple_formats", "type": "function", "line": 567}, {"name": "decode_multiple_formats", "type": "function", "line": 583}, {"name": "detect_encoding_format", "type": "function", "line": 601}, {"name": "is_valid_encoding", "type": "function", "line": 606}, {"name": "get_encoding_info", "type": "function", "line": 615}, {"name": "encode_file", "type": "function", "line": 635}, {"name": "decode_file", "type": "function", "line": 652}, {"name": "encode_for_transmission", "type": "function", "line": 683}, {"name": "decode_from_transmission", "type": "function", "line": 688}, {"name": "encode_for_url", "type": "function", "line": 693}, {"name": "decode_from_url", "type": "function", "line": 698}, {"name": "encode_for_json", "type": "function", "line": 703}, {"name": "decode_from_json", "type": "function", "line": 708}, {"name": "encode_for_storage", "type": "function", "line": 713}, {"name": "decode_from_storage", "type": "function", "line": 718}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "encode_data Function", "description": "Function encode_data implementation.", "line_start": 433, "line_end": 438}, {"name": "decode_data Function", "description": "Function decode_data implementation.", "line_start": 439, "line_end": 444}, {"name": "encode_base64 Function", "description": "Function encode_base64 implementation.", "line_start": 445, "line_end": 450}, {"name": "decode_base64 Function", "description": "Function decode_base64 implementation.", "line_start": 451, "line_end": 456}, {"name": "encode_base32 Function", "description": "Function encode_base32 implementation.", "line_start": 457, "line_end": 462}, {"name": "decode_base32 Function", "description": "Function decode_base32 implementation.", "line_start": 463, "line_end": 468}, {"name": "encode_base16 Function", "description": "Function encode_base16 implementation.", "line_start": 469, "line_end": 474}, {"name": "decode_base16 Function", "description": "Function decode_base16 implementation.", "line_start": 475, "line_end": 480}, {"name": "encode_hex Function", "description": "Function encode_hex implementation.", "line_start": 481, "line_end": 486}, {"name": "decode_hex Function", "description": "Function decode_hex implementation.", "line_start": 487, "line_end": 492}, {"name": "encode_url Function", "description": "Function encode_url implementation.", "line_start": 493, "line_end": 498}, {"name": "decode_url Function", "description": "Function decode_url implementation.", "line_start": 499, "line_end": 504}, {"name": "encode_quoted_printable Function", "description": "Function encode_quoted_printable implementation.", "line_start": 505, "line_end": 510}, {"name": "decode_quoted_printable Function", "description": "Function decode_quoted_printable implementation.", "line_start": 511, "line_end": 516}, {"name": "encode_json Function", "description": "Function encode_json implementation.", "line_start": 517, "line_end": 522}, {"name": "decode_json Function", "description": "Function decode_json implementation.", "line_start": 523, "line_end": 528}, {"name": "encode_utf8 Function", "description": "Function encode_utf8 implementation.", "line_start": 529, "line_end": 534}, {"name": "decode_utf8 Function", "description": "Function decode_utf8 implementation.", "line_start": 535, "line_end": 540}, {"name": "encode_ascii Function", "description": "Function encode_ascii implementation.", "line_start": 541, "line_end": 546}, {"name": "decode_ascii Function", "description": "Function decode_ascii implementation.", "line_start": 547, "line_end": 552}, {"name": "encode_latin1 Function", "description": "Function encode_latin1 implementation.", "line_start": 553, "line_end": 558}, {"name": "decode_latin1 Function", "description": "Function decode_latin1 implementation.", "line_start": 559, "line_end": 566}, {"name": "encode_multiple_formats Function", "description": "Function encode_multiple_formats implementation.", "line_start": 567, "line_end": 582}, {"name": "decode_multiple_formats Function", "description": "Function decode_multiple_formats implementation.", "line_start": 583, "line_end": 600}, {"name": "detect_encoding_format Function", "description": "Function detect_encoding_format implementation.", "line_start": 601, "line_end": 605}, {"name": "is_valid_encoding Function", "description": "Function is_valid_encoding implementation.", "line_start": 606, "line_end": 614}, {"name": "get_encoding_info Function", "description": "Function get_encoding_info implementation.", "line_start": 615, "line_end": 634}, {"name": "encode_file Function", "description": "Function encode_file implementation.", "line_start": 635, "line_end": 651}, {"name": "decode_file Function", "description": "Function decode_file implementation.", "line_start": 652, "line_end": 682}, {"name": "encode_for_transmission Function", "description": "Function encode_for_transmission implementation.", "line_start": 683, "line_end": 687}, {"name": "decode_from_transmission Function", "description": "Function decode_from_transmission implementation.", "line_start": 688, "line_end": 692}, {"name": "encode_for_url Function", "description": "Function encode_for_url implementation.", "line_start": 693, "line_end": 697}, {"name": "decode_from_url Function", "description": "Function decode_from_url implementation.", "line_start": 698, "line_end": 702}, {"name": "encode_for_json Function", "description": "Function encode_for_json implementation.", "line_start": 703, "line_end": 707}, {"name": "decode_from_json Function", "description": "Function decode_from_json implementation.", "line_start": 708, "line_end": 712}, {"name": "encode_for_storage Function", "description": "Function encode_for_storage implementation.", "line_start": 713, "line_end": 717}, {"name": "decode_from_storage Function", "description": "Function decode_from_storage implementation.", "line_start": 718, "line_end": 723}, {"name": "EncodingFormat Class", "description": "Class EncodingFormat definition and methods.", "line_start": 22, "line_end": 32}, {"name": "EncodingError Class", "description": "Class EncodingError definition and methods.", "line_start": 36, "line_end": 46}, {"name": "DecodingError Class", "description": "Class DecodingError definition and methods.", "line_start": 41, "line_end": 51}, {"name": "Encoder Class", "description": "Class Encoder definition and methods.", "line_start": 46, "line_end": 61}, {"name": "Base64Encoder Class", "description": "Class Base64Encoder definition and methods.", "line_start": 63, "line_end": 81}, {"name": "Base32Encoder Class", "description": "Class Base32Encoder definition and methods.", "line_start": 92, "line_end": 110}, {"name": "Base16Encoder Class", "description": "Class Base16Encoder definition and methods.", "line_start": 121, "line_end": 139}, {"name": "HexEncoder Class", "description": "Class HexEncoder definition and methods.", "line_start": 150, "line_end": 168}, {"name": "URLEncoder Class", "description": "Class URLEncoder definition and methods.", "line_start": 179, "line_end": 197}, {"name": "QuotedPrintableEncoder Class", "description": "Class QuotedPrintableEncoder definition and methods.", "line_start": 203, "line_end": 221}, {"name": "JSONEncoder Class", "description": "Class JSONEncoder definition and methods.", "line_start": 232, "line_end": 250}, {"name": "UTF8Encoder Class", "description": "Class UTF8Encoder definition and methods.", "line_start": 256, "line_end": 274}, {"name": "ASCIIEncoder Class", "description": "Class ASCIIEncoder definition and methods.", "line_start": 279, "line_end": 297}, {"name": "Latin1Encoder Class", "description": "Class Latin1Encoder definition and methods.", "line_start": 302, "line_end": 320}, {"name": "EncodingManager Class", "description": "Class EncodingManager definition and methods.", "line_start": 325, "line_end": 382}], "content_hash": "31d5e0284c9a4947f027e15e87cd6c98"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
  line_count: 612
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "hashing.py", "description": "Python module with 12 functions and 15 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "hash_data", "line": 435, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "algorithm", "type": "Optional[HashAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "str", "description": "Generates a hash string for the given data using the specified algorithm.", "signature": "hash_data(data: Union[str, bytes], algorithm: Optional[HashAlgorithm] = None, **kwargs = None, **kwargs) -> str"}, {"name": "verify_hash", "line": 441, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "Optional[HashAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Checks if the hash of the given data matches the provided hash value.", "signature": "verify_hash(data: Union[str, bytes], hash_value: str, algorithm: Optional[HashAlgorithm] = None, **kwargs = None, **kwargs) -> bool"}, {"name": "hash_password", "line": 447, "parameters": [{"name": "password", "type": "str, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs"}, {"name": "algorithm", "type": "HashAlgorithm = HashAlgorithm.ARGON2, **kwargs", "default": "HashAlgorithm.ARGON2, **kwargs"}], "is_async": false, "return_type": "str", "description": "Creates a secure hash of a password using the specified hashing algorithm.", "signature": "hash_password(password: str, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs = HashAlgorithm.ARGON2, **kwargs, **kwargs) -> str"}, {"name": "verify_password", "line": 454, "parameters": [{"name": "password", "type": "str"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm = HashAlgorithm.ARGON2, **kwargs", "default": "HashAlgorithm.ARGON2, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verifies a password against its hashed value using the specified algorithm.", "signature": "verify_password(password: str, hash_value: str, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs = HashAlgorithm.ARGON2, **kwargs, **kwargs) -> bool"}, {"name": "generate_salt", "line": 462, "parameters": [{"name": "length", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "str", "description": "Generates a random salt string of the specified length for cryptographic use.", "signature": "generate_salt(length: int = 32 = 32) -> str"}, {"name": "generate_hmac", "line": 467, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "key", "type": "Union[str, bytes]"}, {"name": "algorithm", "type": "HashAlgorithm = HashAlgorithm.SHA256", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "str", "description": "Generates an HMAC for the given data and key using the specified algorithm.", "signature": "generate_hmac(data: Union[str, bytes], key: Union[str, bytes], algorithm: HashAlgorithm = HashAlgorithm.SHA256 = HashAlgorithm.SHA256) -> str"}, {"name": "verify_hmac", "line": 488, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "key", "type": "Union[str, bytes]"}, {"name": "hmac_value", "type": "str, algorithm: HashAlgorithm = HashAlgorithm.SHA256"}, {"name": "algorithm", "type": "HashAlgorithm = HashAlgorithm.SHA256", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "bool", "description": "Verifies that the provided HMAC matches the HMAC of the data and key.", "signature": "verify_hmac(data: Union[str, bytes], key: Union[str, bytes], hmac_value: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256, algorithm: HashAlgorithm = HashAlgorithm.SHA256 = HashAlgorithm.SHA256) -> bool"}, {"name": "hash_file", "line": 500, "parameters": [{"name": "file_path", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.SHA256"}, {"name": "chunk_size", "type": "int = 8192", "default": "8192"}], "is_async": false, "return_type": "str", "description": "Computes the hash of a file''s contents using the specified algorithm and chunk size.", "signature": "hash_file(file_path: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256, chunk_size: int = 8192 = 8192) -> str"}, {"name": "verify_file_hash", "line": 538, "parameters": [{"name": "file_path", "type": "str"}, {"name": "expected_hash", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm = HashAlgorithm.SHA256", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "bool", "description": "Verifies that a file''s hash matches the expected hash value.", "signature": "verify_file_hash(file_path: str, expected_hash: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256 = HashAlgorithm.SHA256) -> bool"}, {"name": "analyze_hash", "line": 550, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Analyzes a hash string and returns detailed information about it.", "signature": "analyze_hash(hash_value: str) -> Dict[str, Any]"}, {"name": "is_secure_hash", "line": 588, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if a given hash string is considered secure.", "signature": "is_secure_hash(hash_value: str) -> bool"}, {"name": "get_hash_info", "line": 594, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Retrieves metadata and details about the given hash string.", "signature": "get_hash_info(hash_value: str) -> Dict[str, Any]"}], "classes": [{"name": "HashAlgorithm", "line": 22, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "MD5", "line": 22, "type": ""}, {"name": "SHA1", "line": 23, "type": ""}, {"name": "SHA256", "line": 24, "type": ""}, {"name": "SHA512", "line": 25, "type": ""}, {"name": "BLAKE2B", "line": 26, "type": ""}, {"name": "BLAKE2S", "line": 27, "type": ""}, {"name": "SHA3_256", "line": 28, "type": ""}, {"name": "SHA3_512", "line": 29, "type": ""}, {"name": "BCRYPT", "line": 30, "type": ""}, {"name": "ARGON2", "line": 31, "type": ""}], "description": "Enumeration of supported hashing algorithms."}, {"name": "HashingError", "line": 36, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for general hashing-related errors."}, {"name": "HashVerificationError", "line": 41, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when hash verification fails."}, {"name": "Hasher", "line": 46, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "None", "signature": "__init__(self, algorithm: HashAlgorithm) -> None"}, {"name": "hash", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the hashing algorithm is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Base class providing interface for hashing operations."}, {"name": "MD5Hasher", "line": 68, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 71, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 74, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using MD5.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against MD5 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 91, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "MD5 is not secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the MD5 algorithm."}, {"name": "SHA1Hasher", "line": 96, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 99, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA1.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 111, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA1 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 119, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA1 is not secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-1 algorithm."}, {"name": "SHA256Hasher", "line": 124, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 127, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA256.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA256 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 147, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA256 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-256 algorithm."}, {"name": "SHA512Hasher", "line": 152, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 155, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA512.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA512 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 175, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA512 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-512 algorithm."}, {"name": "Blake2bHasher", "line": 180, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 183, "parameters": [{"name": "self", "type": "self"}, {"name": "digest_size", "type": "int = 64", "default": "64"}], "is_async": false, "return_type": "None", "signature": "__init__(self, digest_size: int = 64 = 64) -> None"}, {"name": "hash", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Blake2b.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Blake2b hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 205, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Blake2b is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the Blake2b algorithm."}, {"name": "Blake2sHasher", "line": 210, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 213, "parameters": [{"name": "self", "type": "self"}, {"name": "digest_size", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "None", "signature": "__init__(self, digest_size: int = 32 = 32) -> None"}, {"name": "hash", "line": 217, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Blake2s.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 227, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Blake2s hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Blake2s is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the Blake2s algorithm."}, {"name": "SHA3_256Hasher", "line": 240, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 243, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 246, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA3-256.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 255, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA3-256 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 263, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA3-256 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA3-256 algorithm."}, {"name": "SHA3_512Hasher", "line": 268, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 271, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA3-512.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 283, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA3-512 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 291, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA3-512 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA3-512 algorithm."}, {"name": "BcryptHasher", "line": 296, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 299, "parameters": [{"name": "self", "type": "self"}, {"name": "rounds", "type": "int = 12", "default": "12"}], "is_async": false, "return_type": "None", "signature": "__init__(self, rounds: int = 12 = 12) -> None"}, {"name": "hash", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using bcrypt.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 314, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against bcrypt hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Bcrypt is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the bcrypt password hashing algorithm."}, {"name": "Argon2Hasher", "line": 330, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 333, "parameters": [{"name": "self", "type": "self"}, {"name": "time_cost", "type": "int = 3, memory_cost: int = 65536, parallelism: int = 4", "default": "3"}, {"name": "memory_cost", "type": "int = 65536, parallelism: int = 4", "default": "65536"}, {"name": "parallelism", "type": "int = 4", "default": "4"}], "is_async": false, "return_type": "None", "signature": "__init__(self, time_cost: int = 3, memory_cost: int = 65536, parallelism: int = 4 = 3, memory_cost: int = 65536, parallelism: int = 4 = 65536, parallelism: int = 4 = 4) -> None"}, {"name": "hash", "line": 344, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Argon2.", "signature": "hash(self, data: Union[str, bytes], **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 353, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Argon2 hash.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 365, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Argon2 is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the Argon2 password hashing algorithm."}, {"name": "HashingManager", "line": 370, "inherits_from": [], "methods": [{"name": "__init__", "line": 373, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_hasher", "line": 388, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "Hasher", "description": "Get a hasher for the specified algorithm.", "signature": "get_hasher(self, algorithm: HashAlgorithm) -> Hasher"}, {"name": "register_hasher", "line": 394, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm, hasher: Hasher"}, {"name": "hasher", "type": "Hasher"}], "is_async": false, "return_type": "None", "description": "Register a custom hasher.", "signature": "register_hasher(self, algorithm: HashAlgorithm, hasher: Hasher, hasher: Hasher) -> None"}, {"name": "set_default_algorithm", "line": 399, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "None", "description": "Set the default hashing algorithm.", "signature": "set_default_algorithm(self, algorithm: HashAlgorithm) -> None"}, {"name": "get_default_algorithm", "line": 406, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "HashAlgorithm", "description": "Get the default hashing algorithm.", "signature": "get_default_algorithm(self) -> HashAlgorithm"}, {"name": "hash", "line": 410, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "algorithm", "type": "Optional[HashAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "str", "description": "Hash data using the specified algorithm.", "signature": "hash(self, data: Union[str, bytes], algorithm: Optional[HashAlgorithm] = None, **kwargs = None, **kwargs) -> str"}, {"name": "verify", "line": 417, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "Optional[HashAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Verify data against hash using the specified algorithm.", "signature": "verify(self, data: Union[str, bytes], hash_value: str, algorithm: Optional[HashAlgorithm] = None, **kwargs = None, **kwargs) -> bool"}, {"name": "get_secure_algorithms", "line": 424, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[HashAlgorithm]", "description": "Get list of algorithms secure for password hashing.", "signature": "get_secure_algorithms(self) -> list[HashAlgorithm]"}], "properties": [], "description": "Manager class coordinating hashing operations and algorithm selection."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "secrets", "alias": null, "line": 11, "statement": "import secrets"}, {"module": "bcrypt", "alias": null, "line": 16, "statement": "import bcrypt"}, {"module": "argon2", "alias": null, "line": 17, "statement": "import argon2"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Union"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "secrets", "type": "import", "line": 11}, {"name": "bcrypt", "type": "import", "line": 16}, {"name": "argon2", "type": "import", "line": 17}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Dict", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from typing import Union", "type": "import", "line": 14}, {"name": "HashAlgorithm", "type": "class", "line": 22}, {"name": "HashingError", "type": "class", "line": 36}, {"name": "HashVerificationError", "type": "class", "line": 41}, {"name": "Hasher", "type": "class", "line": 46}, {"name": "MD5Hasher", "type": "class", "line": 68}, {"name": "SHA1Hasher", "type": "class", "line": 96}, {"name": "SHA256Hasher", "type": "class", "line": 124}, {"name": "SHA512Hasher", "type": "class", "line": 152}, {"name": "Blake2bHasher", "type": "class", "line": 180}, {"name": "Blake2sHasher", "type": "class", "line": 210}, {"name": "SHA3_256Hasher", "type": "class", "line": 240}, {"name": "SHA3_512Hasher", "type": "class", "line": 268}, {"name": "BcryptHasher", "type": "class", "line": 296}, {"name": "Argon2Hasher", "type": "class", "line": 330}, {"name": "HashingManager", "type": "class", "line": 370}, {"name": "hash_data", "type": "function", "line": 435}, {"name": "verify_hash", "type": "function", "line": 441}, {"name": "hash_password", "type": "function", "line": 447}, {"name": "verify_password", "type": "function", "line": 454}, {"name": "generate_salt", "type": "function", "line": 462}, {"name": "generate_hmac", "type": "function", "line": 467}, {"name": "verify_hmac", "type": "function", "line": 488}, {"name": "hash_file", "type": "function", "line": 500}, {"name": "verify_file_hash", "type": "function", "line": 538}, {"name": "analyze_hash", "type": "function", "line": 550}, {"name": "is_secure_hash", "type": "function", "line": 588}, {"name": "get_hash_info", "type": "function", "line": 594}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "hash_data Function", "description": "Function hash_data implementation.", "line_start": 435, "line_end": 440}, {"name": "verify_hash Function", "description": "Function verify_hash implementation.", "line_start": 441, "line_end": 446}, {"name": "hash_password Function", "description": "Function hash_password implementation.", "line_start": 447, "line_end": 453}, {"name": "verify_password Function", "description": "Function verify_password implementation.", "line_start": 454, "line_end": 461}, {"name": "generate_salt Function", "description": "Function generate_salt implementation.", "line_start": 462, "line_end": 466}, {"name": "generate_hmac Function", "description": "Function generate_hmac implementation.", "line_start": 467, "line_end": 487}, {"name": "verify_hmac Function", "description": "Function verify_hmac implementation.", "line_start": 488, "line_end": 499}, {"name": "hash_file Function", "description": "Function hash_file implementation.", "line_start": 500, "line_end": 537}, {"name": "verify_file_hash Function", "description": "Function verify_file_hash implementation.", "line_start": 538, "line_end": 549}, {"name": "analyze_hash Function", "description": "Function analyze_hash implementation.", "line_start": 550, "line_end": 587}, {"name": "is_secure_hash Function", "description": "Function is_secure_hash implementation.", "line_start": 588, "line_end": 593}, {"name": "get_hash_info Function", "description": "Function get_hash_info implementation.", "line_start": 594, "line_end": 599}, {"name": "HashAlgorithm Class", "description": "Class HashAlgorithm definition and methods.", "line_start": 22, "line_end": 32}, {"name": "HashingError Class", "description": "Class HashingError definition and methods.", "line_start": 36, "line_end": 46}, {"name": "HashVerificationError Class", "description": "Class HashVerificationError definition and methods.", "line_start": 41, "line_end": 51}, {"name": "Hasher Class", "description": "Class Hasher definition and methods.", "line_start": 46, "line_end": 66}, {"name": "MD5Hasher Class", "description": "Class MD5Hasher definition and methods.", "line_start": 68, "line_end": 94}, {"name": "SHA1Hasher Class", "description": "Class SHA1Hasher definition and methods.", "line_start": 96, "line_end": 122}, {"name": "SHA256Hasher Class", "description": "Class SHA256Hasher definition and methods.", "line_start": 124, "line_end": 150}, {"name": "SHA512Hasher Class", "description": "Class SHA512Hasher definition and methods.", "line_start": 152, "line_end": 178}, {"name": "Blake2bHasher Class", "description": "Class Blake2bHasher definition and methods.", "line_start": 180, "line_end": 208}, {"name": "Blake2sHasher Class", "description": "Class Blake2sHasher definition and methods.", "line_start": 210, "line_end": 238}, {"name": "SHA3_256Hasher Class", "description": "Class SHA3_256Hasher definition and methods.", "line_start": 240, "line_end": 266}, {"name": "SHA3_512Hasher Class", "description": "Class SHA3_512Hasher definition and methods.", "line_start": 268, "line_end": 294}, {"name": "BcryptHasher Class", "description": "Class BcryptHasher definition and methods.", "line_start": 296, "line_end": 328}, {"name": "Argon2Hasher Class", "description": "Class Argon2Hasher definition and methods.", "line_start": 330, "line_end": 368}, {"name": "HashingManager Class", "description": "Class HashingManager definition and methods.", "line_start": 370, "line_end": 427}], "content_hash": "8f8349e968760078d6220d860b86a6ae"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/encryption.py
  line_count: 695
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encryption.py", "description": "Python module with 23 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "generate_key", "line": 482, "parameters": [{"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Generate a cryptographic key using the specified encryption algorithm and parameters.", "signature": "generate_key(algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "encrypt_data", "line": 487, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the specified key and encryption algorithm.", "signature": "encrypt_data(data: Union[str, bytes], key: bytes, algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "decrypt_data", "line": 493, "parameters": [{"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using the specified key and encryption algorithm.", "signature": "decrypt_data(data: bytes, key: bytes, algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "encrypt_aes", "line": 499, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "key", "type": "bytes"}, {"name": "mode", "type": "EncryptionMode = EncryptionMode.GCM", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES encryption with the specified mode.", "signature": "encrypt_aes(data: Union[str, bytes], key: bytes, mode: EncryptionMode = EncryptionMode.GCM = EncryptionMode.GCM) -> bytes"}, {"name": "decrypt_aes", "line": 506, "parameters": [{"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "mode", "type": "EncryptionMode = EncryptionMode.GCM", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt AES-encrypted data with the specified mode.", "signature": "decrypt_aes(data: bytes, key: bytes, mode: EncryptionMode = EncryptionMode.GCM = EncryptionMode.GCM) -> Union[str, bytes]"}, {"name": "generate_rsa_key_pair", "line": 513, "parameters": [{"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate an RSA public and private key pair of the given key size.", "signature": "generate_rsa_key_pair(key_size: int = 2048 = 2048) -> tuple[bytes, bytes]"}, {"name": "encrypt_rsa", "line": 521, "parameters": [{"name": "data", "type": "Union[str, bytes], public_key: bytes"}, {"name": "public_key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using an RSA public key.", "signature": "encrypt_rsa(data: Union[str, bytes], public_key: bytes, public_key: bytes) -> bytes"}, {"name": "decrypt_rsa", "line": 527, "parameters": [{"name": "data", "type": "bytes, private_key: bytes"}, {"name": "private_key", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt RSA-encrypted data using a private key.", "signature": "decrypt_rsa(data: bytes, private_key: bytes, private_key: bytes) -> Union[str, bytes]"}, {"name": "encrypt_fernet", "line": 533, "parameters": [{"name": "data", "type": "Union[str, bytes], key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the Fernet symmetric encryption scheme.", "signature": "encrypt_fernet(data: Union[str, bytes], key: bytes, key: bytes) -> bytes"}, {"name": "decrypt_fernet", "line": 539, "parameters": [{"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data encrypted with Fernet using the provided key.", "signature": "decrypt_fernet(data: bytes, key: bytes, key: bytes) -> Union[str, bytes]"}, {"name": "encrypt_chacha20", "line": 545, "parameters": [{"name": "data", "type": "Union[str, bytes], key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the ChaCha20 stream cipher with the given key.", "signature": "encrypt_chacha20(data: Union[str, bytes], key: bytes, key: bytes) -> bytes"}, {"name": "decrypt_chacha20", "line": 551, "parameters": [{"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data encrypted with ChaCha20 using the given key.", "signature": "decrypt_chacha20(data: bytes, key: bytes, key: bytes) -> Union[str, bytes]"}, {"name": "derive_key_from_password", "line": 559, "parameters": [{"name": "password", "type": "str"}, {"name": "salt", "type": "Optional[bytes]", "default": "None"}, {"name": "key_length", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Derive a cryptographic key and salt from a password using a key derivation function.", "signature": "derive_key_from_password(password: str, salt: Optional[bytes] = None, key_length: int = 32 = 32) -> tuple[bytes, bytes]"}, {"name": "derive_key_from_password_with_encryption", "line": 576, "parameters": [{"name": "password", "type": "str"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "salt", "type": "Optional[bytes] = None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Derive a key from a password and encrypt data with it, optionally using a salt.", "signature": "derive_key_from_password_with_encryption(password: str, data: Union[str, bytes], salt: Optional[bytes] = None = None) -> bytes"}, {"name": "decrypt_with_password", "line": 586, "parameters": [{"name": "password", "type": "str"}, {"name": "encrypted_data", "type": "bytes"}, {"name": "salt_length", "type": "int = 16", "default": "16"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data encrypted with a password-derived key, using the provided salt length.", "signature": "decrypt_with_password(password: str, encrypted_data: bytes, salt_length: int = 16 = 16) -> Union[str, bytes]"}, {"name": "encode_key", "line": 601, "parameters": [{"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encode a binary key into a string representation.", "signature": "encode_key(key: bytes) -> str"}, {"name": "decode_key", "line": 606, "parameters": [{"name": "key_str", "type": "str"}], "is_async": false, "return_type": "bytes", "description": "Decode a string representation of a key back into bytes.", "signature": "decode_key(key_str: str) -> bytes"}, {"name": "encode_encrypted_data", "line": 611, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encode encrypted binary data into a string format.", "signature": "encode_encrypted_data(data: bytes) -> str"}, {"name": "decode_encrypted_data", "line": 616, "parameters": [{"name": "data_str", "type": "str"}], "is_async": false, "return_type": "bytes", "description": "Decode a string representation of encrypted data back into bytes.", "signature": "decode_encrypted_data(data_str: str) -> bytes"}, {"name": "encrypt_file", "line": 623, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm = EncryptionAlgorithm.AES", "default": "EncryptionAlgorithm.AES"}], "is_async": false, "return_type": "None", "description": "Encrypt the contents of a file and save the encrypted output to another file.", "signature": "encrypt_file(input_path: str, output_path: str, key: bytes, algorithm: EncryptionAlgorithm = EncryptionAlgorithm.AES = EncryptionAlgorithm.AES) -> None"}, {"name": "decrypt_file", "line": 640, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm = EncryptionAlgorithm.AES", "default": "EncryptionAlgorithm.AES"}], "is_async": false, "return_type": "None", "description": "Decrypt an encrypted file and save the decrypted output to another file.", "signature": "decrypt_file(input_path: str, output_path: str, key: bytes, algorithm: EncryptionAlgorithm = EncryptionAlgorithm.AES = EncryptionAlgorithm.AES) -> None"}, {"name": "is_secure_algorithm", "line": 666, "parameters": [{"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "bool", "description": "Check if the specified encryption algorithm is considered secure.", "signature": "is_secure_algorithm(algorithm: EncryptionAlgorithm) -> bool"}, {"name": "get_algorithm_info", "line": 677, "parameters": [{"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Retrieve detailed information about the specified encryption algorithm.", "signature": "get_algorithm_info(algorithm: EncryptionAlgorithm) -> Dict[str, Any]"}], "classes": [{"name": "EncryptionAlgorithm", "line": 24, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "AES", "line": 24, "type": ""}, {"name": "RSA", "line": 25, "type": ""}, {"name": "FERNET", "line": 26, "type": ""}, {"name": "CHACHA20", "line": 27, "type": ""}], "description": "Enumeration of supported encryption algorithms."}, {"name": "EncryptionMode", "line": 32, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CBC", "line": 32, "type": ""}, {"name": "GCM", "line": 33, "type": ""}, {"name": "CTR", "line": 34, "type": ""}], "description": "Enumeration of supported encryption modes for block ciphers."}, {"name": "EncryptionError", "line": 39, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during encryption operations."}, {"name": "DecryptionError", "line": 44, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decryption operations."}, {"name": "KeyGenerationError", "line": 49, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when key generation fails."}, {"name": "Encryptor", "line": 54, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "None", "signature": "__init__(self, algorithm: EncryptionAlgorithm) -> None"}, {"name": "generate_key", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an encryption key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 66, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data.", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "is_symmetric", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the encryption is symmetric.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Base class defining the interface for encryption and decryption operations."}, {"name": "AESEncryptor", "line": 81, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int = 256, mode: EncryptionMode = EncryptionMode.GCM", "default": "256"}, {"name": "mode", "type": "EncryptionMode = EncryptionMode.GCM", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "None", "signature": "__init__(self, key_size: int = 256, mode: EncryptionMode = EncryptionMode.GCM = 256, mode: EncryptionMode = EncryptionMode.GCM = EncryptionMode.GCM) -> None"}, {"name": "generate_key", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an AES key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 100, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES.", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using AES.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "_encrypt_gcm", "line": 141, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-GCM.", "signature": "_encrypt_gcm(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_gcm", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-GCM.", "signature": "_decrypt_gcm(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_encrypt_cbc", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-CBC.", "signature": "_encrypt_cbc(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_cbc", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-CBC.", "signature": "_decrypt_cbc(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_encrypt_ctr", "line": 198, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-CTR.", "signature": "_encrypt_ctr(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_ctr", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-CTR.", "signature": "_decrypt_ctr(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "is_symmetric", "line": 220, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "AES is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation for AES encryption with various modes."}, {"name": "RSAEncryptor", "line": 225, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 228, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "None", "signature": "__init__(self, key_size: int = 2048 = 2048) -> None"}, {"name": "generate_key", "line": 232, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an RSA key pair.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "generate_public_key", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "private_key_pem", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Generate public key from private key.", "signature": "generate_public_key(self, private_key_pem: bytes) -> bytes"}, {"name": "encrypt", "line": 263, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using RSA (public key).", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 286, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using RSA (private key).", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "is_symmetric", "line": 310, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "RSA is asymmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation for RSA public-key encryption and decryption."}, {"name": "FernetEncryptor", "line": 315, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 318, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "generate_key", "line": 321, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate a Fernet key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 328, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using Fernet.", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 339, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using Fernet.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "is_symmetric", "line": 353, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Fernet is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation using the Fernet symmetric encryption scheme."}, {"name": "ChaCha20Encryptor", "line": 358, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 361, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "generate_key", "line": 364, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate a ChaCha20 key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 371, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using ChaCha20.", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 386, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using ChaCha20.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> Union[str, bytes]"}, {"name": "is_symmetric", "line": 408, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "ChaCha20 is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation for ChaCha20 stream cipher encryption and decryption."}, {"name": "EncryptionManager", "line": 413, "inherits_from": [], "methods": [{"name": "__init__", "line": 416, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_encryptor", "line": 425, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "Encryptor", "description": "Get an encryptor for the specified algorithm.", "signature": "get_encryptor(self, algorithm: EncryptionAlgorithm) -> Encryptor"}, {"name": "register_encryptor", "line": 431, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm, encryptor: Encryptor"}, {"name": "encryptor", "type": "Encryptor"}], "is_async": false, "return_type": "None", "description": "Register a custom encryptor.", "signature": "register_encryptor(self, algorithm: EncryptionAlgorithm, encryptor: Encryptor, encryptor: Encryptor) -> None"}, {"name": "set_default_algorithm", "line": 436, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "None", "description": "Set the default encryption algorithm.", "signature": "set_default_algorithm(self, algorithm: EncryptionAlgorithm) -> None"}, {"name": "get_default_algorithm", "line": 443, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EncryptionAlgorithm", "description": "Get the default encryption algorithm.", "signature": "get_default_algorithm(self) -> EncryptionAlgorithm"}, {"name": "generate_key", "line": 447, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Generate a key for the specified algorithm.", "signature": "generate_key(self, algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "encrypt", "line": 453, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the specified algorithm.", "signature": "encrypt(self, data: Union[str, bytes], key: bytes, algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "decrypt", "line": 460, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "Optional[EncryptionAlgorithm] = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Decrypt data using the specified algorithm.", "signature": "decrypt(self, data: bytes, key: bytes, algorithm: Optional[EncryptionAlgorithm] = None, **kwargs = None, **kwargs) -> Union[str, bytes]"}, {"name": "get_symmetric_algorithms", "line": 467, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[EncryptionAlgorithm]", "description": "Get list of symmetric encryption algorithms.", "signature": "get_symmetric_algorithms(self) -> list[EncryptionAlgorithm]"}, {"name": "get_asymmetric_algorithms", "line": 471, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[EncryptionAlgorithm]", "description": "Get list of asymmetric encryption algorithms.", "signature": "get_asymmetric_algorithms(self) -> list[EncryptionAlgorithm]"}], "properties": [], "description": "Manager class to coordinate encryption and decryption using various algorithms and keys."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "cryptography.fernet", "alias": null, "line": 15, "statement": "from cryptography.fernet import Fernet"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 16, "statement": "from cryptography.hazmat.primitives import hashes"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 16, "statement": "from cryptography.hazmat.primitives import serialization"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives.asymmetric import padding"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives.asymmetric import rsa"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.ciphers import Cipher"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.ciphers import algorithms"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.ciphers import modes"}, {"module": "cryptography.hazmat.primitives.kdf.pbkdf2", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 15}, {"name": "from cryptography.hazmat.primitives import hashes", "type": "import", "line": 16}, {"name": "from cryptography.hazmat.primitives import serialization", "type": "import", "line": 16}, {"name": "from cryptography.hazmat.primitives.asymmetric import padding", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives.asymmetric import rsa", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives.ciphers import Cipher", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.ciphers import algorithms", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.ciphers import modes", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC", "type": "import", "line": 19}, {"name": "EncryptionAlgorithm", "type": "class", "line": 24}, {"name": "EncryptionMode", "type": "class", "line": 32}, {"name": "EncryptionError", "type": "class", "line": 39}, {"name": "DecryptionError", "type": "class", "line": 44}, {"name": "KeyGenerationError", "type": "class", "line": 49}, {"name": "Encryptor", "type": "class", "line": 54}, {"name": "AESEncryptor", "type": "class", "line": 81}, {"name": "RSAEncryptor", "type": "class", "line": 225}, {"name": "FernetEncryptor", "type": "class", "line": 315}, {"name": "ChaCha20Encryptor", "type": "class", "line": 358}, {"name": "EncryptionManager", "type": "class", "line": 413}, {"name": "generate_key", "type": "function", "line": 482}, {"name": "encrypt_data", "type": "function", "line": 487}, {"name": "decrypt_data", "type": "function", "line": 493}, {"name": "encrypt_aes", "type": "function", "line": 499}, {"name": "decrypt_aes", "type": "function", "line": 506}, {"name": "generate_rsa_key_pair", "type": "function", "line": 513}, {"name": "encrypt_rsa", "type": "function", "line": 521}, {"name": "decrypt_rsa", "type": "function", "line": 527}, {"name": "encrypt_fernet", "type": "function", "line": 533}, {"name": "decrypt_fernet", "type": "function", "line": 539}, {"name": "encrypt_chacha20", "type": "function", "line": 545}, {"name": "decrypt_chacha20", "type": "function", "line": 551}, {"name": "derive_key_from_password", "type": "function", "line": 559}, {"name": "derive_key_from_password_with_encryption", "type": "function", "line": 576}, {"name": "decrypt_with_password", "type": "function", "line": 586}, {"name": "encode_key", "type": "function", "line": 601}, {"name": "decode_key", "type": "function", "line": 606}, {"name": "encode_encrypted_data", "type": "function", "line": 611}, {"name": "decode_encrypted_data", "type": "function", "line": 616}, {"name": "encrypt_file", "type": "function", "line": 623}, {"name": "decrypt_file", "type": "function", "line": 640}, {"name": "is_secure_algorithm", "type": "function", "line": 666}, {"name": "get_algorithm_info", "type": "function", "line": 677}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "generate_key Function", "description": "Function generate_key implementation.", "line_start": 482, "line_end": 486}, {"name": "encrypt_data Function", "description": "Function encrypt_data implementation.", "line_start": 487, "line_end": 492}, {"name": "decrypt_data Function", "description": "Function decrypt_data implementation.", "line_start": 493, "line_end": 498}, {"name": "encrypt_aes Function", "description": "Function encrypt_aes implementation.", "line_start": 499, "line_end": 505}, {"name": "decrypt_aes Function", "description": "Function decrypt_aes implementation.", "line_start": 506, "line_end": 512}, {"name": "generate_rsa_key_pair Function", "description": "Function generate_rsa_key_pair implementation.", "line_start": 513, "line_end": 520}, {"name": "encrypt_rsa Function", "description": "Function encrypt_rsa implementation.", "line_start": 521, "line_end": 526}, {"name": "decrypt_rsa Function", "description": "Function decrypt_rsa implementation.", "line_start": 527, "line_end": 532}, {"name": "encrypt_fernet Function", "description": "Function encrypt_fernet implementation.", "line_start": 533, "line_end": 538}, {"name": "decrypt_fernet Function", "description": "Function decrypt_fernet implementation.", "line_start": 539, "line_end": 544}, {"name": "encrypt_chacha20 Function", "description": "Function encrypt_chacha20 implementation.", "line_start": 545, "line_end": 550}, {"name": "decrypt_chacha20 Function", "description": "Function decrypt_chacha20 implementation.", "line_start": 551, "line_end": 558}, {"name": "derive_key_from_password Function", "description": "Function derive_key_from_password implementation.", "line_start": 559, "line_end": 575}, {"name": "derive_key_from_password_with_encryption Function", "description": "Function derive_key_from_password_with_encryption implementation.", "line_start": 576, "line_end": 585}, {"name": "decrypt_with_password Function", "description": "Function decrypt_with_password implementation.", "line_start": 586, "line_end": 600}, {"name": "encode_key Function", "description": "Function encode_key implementation.", "line_start": 601, "line_end": 605}, {"name": "decode_key Function", "description": "Function decode_key implementation.", "line_start": 606, "line_end": 610}, {"name": "encode_encrypted_data Function", "description": "Function encode_encrypted_data implementation.", "line_start": 611, "line_end": 615}, {"name": "decode_encrypted_data Function", "description": "Function decode_encrypted_data implementation.", "line_start": 616, "line_end": 622}, {"name": "encrypt_file Function", "description": "Function encrypt_file implementation.", "line_start": 623, "line_end": 639}, {"name": "decrypt_file Function", "description": "Function decrypt_file implementation.", "line_start": 640, "line_end": 665}, {"name": "is_secure_algorithm Function", "description": "Function is_secure_algorithm implementation.", "line_start": 666, "line_end": 676}, {"name": "get_algorithm_info Function", "description": "Function get_algorithm_info implementation.", "line_start": 677, "line_end": 682}, {"name": "EncryptionAlgorithm Class", "description": "Class EncryptionAlgorithm definition and methods.", "line_start": 24, "line_end": 34}, {"name": "EncryptionMode Class", "description": "Class EncryptionMode definition and methods.", "line_start": 32, "line_end": 42}, {"name": "EncryptionError Class", "description": "Class EncryptionError definition and methods.", "line_start": 39, "line_end": 49}, {"name": "DecryptionError Class", "description": "Class DecryptionError definition and methods.", "line_start": 44, "line_end": 54}, {"name": "KeyGenerationError Class", "description": "Class KeyGenerationError definition and methods.", "line_start": 49, "line_end": 59}, {"name": "Encryptor Class", "description": "Class Encryptor definition and methods.", "line_start": 54, "line_end": 79}, {"name": "AESEncryptor Class", "description": "Class AESEncryptor definition and methods.", "line_start": 81, "line_end": 223}, {"name": "RSAEncryptor Class", "description": "Class RSAEncryptor definition and methods.", "line_start": 225, "line_end": 313}, {"name": "FernetEncryptor Class", "description": "Class FernetEncryptor definition and methods.", "line_start": 315, "line_end": 356}, {"name": "ChaCha20Encryptor Class", "description": "Class ChaCha20Encryptor definition and methods.", "line_start": 358, "line_end": 411}, {"name": "EncryptionManager Class", "description": "Class EncryptionManager definition and methods.", "line_start": 413, "line_end": 474}], "content_hash": "2a1684187cadbe2135cd7d332fb65012"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/caching.py
  line_count: 549
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "caching.py", "description": "Python module with 9 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "cached", "line": 426, "parameters": [{"name": "ttl", "type": "Optional[int]", "default": "None"}, {"name": "key_prefix", "type": "str", "default": ""}, {"name": "cache_name", "type": "Optional[str]", "default": "None"}], "is_async": false, "description": "Decorator to cache the result of a function with optional TTL and cache configuration.", "signature": "cached(ttl: Optional[int] = None, key_prefix: str = , cache_name: Optional[str] = None)"}, {"name": "cache_key", "line": 485, "parameters": [{"name": "key_func", "type": "callable):"}], "is_async": false, "description": "Decorator to specify a custom function for generating cache keys.", "signature": "cache_key(key_func: callable):)"}, {"name": "generate_cache_key", "line": 495, "parameters": [], "is_async": false, "return_type": "str", "description": "Generates a unique cache key based on function arguments.", "signature": "generate_cache_key(*args, **kwargs) -> str"}, {"name": "create_memory_cache", "line": 515, "parameters": [{"name": "max_size", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "Cache", "description": "Creates an in-memory cache instance with a maximum size limit.", "signature": "create_memory_cache(max_size: int = 1000 = 1000) -> Cache"}, {"name": "create_redis_cache", "line": 521, "parameters": [{"name": "redis_url", "type": "str = \"redis://localhost:6379/0\"", "default": "redis://localhost:6379/0"}], "is_async": false, "return_type": "Cache", "description": "Creates a Redis-backed cache instance using the provided Redis URL.", "signature": "create_redis_cache(redis_url: str = \"redis://localhost:6379/0\" = redis://localhost:6379/0) -> Cache"}, {"name": "get_cached", "line": 529, "parameters": [{"name": "key", "type": "str, cache_name: Optional[str] = None"}, {"name": "cache_name", "type": "Optional[str] = None", "default": "None"}], "is_async": true, "return_type": "Optional[Any]", "description": "Asynchronously retrieves a cached value by key from the specified cache.", "signature": "async get_cached(key: str, cache_name: Optional[str] = None, cache_name: Optional[str] = None = None) -> Optional[Any]"}, {"name": "set_cached", "line": 535, "parameters": [{"name": "key", "type": "str"}, {"name": "value", "type": "Any"}, {"name": "ttl", "type": "Optional[int]", "default": "None"}, {"name": "cache_name", "type": "Optional[str] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously sets a value in the cache with an optional TTL.", "signature": "async set_cached(key: str, value: Any, ttl: Optional[int] = None, cache_name: Optional[str] = None = None) -> bool"}, {"name": "delete_cached", "line": 542, "parameters": [{"name": "key", "type": "str, cache_name: Optional[str] = None"}, {"name": "cache_name", "type": "Optional[str] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously deletes a cached value by key from the specified cache.", "signature": "async delete_cached(key: str, cache_name: Optional[str] = None, cache_name: Optional[str] = None = None) -> bool"}, {"name": "exists_cached", "line": 548, "parameters": [{"name": "key", "type": "str, cache_name: Optional[str] = None"}, {"name": "cache_name", "type": "Optional[str] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously checks if a cache key exists in the specified cache.", "signature": "async exists_cached(key: str, cache_name: Optional[str] = None, cache_name: Optional[str] = None = None) -> bool"}], "classes": [{"name": "CacheError", "line": 23, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Base exception class for cache-related errors."}, {"name": "CacheKeyError", "line": 28, "inherits_from": ["CacheError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to cache key generation or usage."}, {"name": "CacheValueError", "line": 33, "inherits_from": ["CacheError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to cache value handling."}, {"name": "CacheBackend", "line": 41, "inherits_from": ["ABC):"], "methods": [{"name": "get", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Optional[Any]", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Optional[Any]"}, {"name": "set", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: Optional[int] = None"}, {"name": "value", "type": "Any, ttl: Optional[int] = None"}, {"name": "ttl", "type": "Optional[int] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in cache.", "signature": "async set(self, key: str, value: Any, ttl: Optional[int] = None, value: Any, ttl: Optional[int] = None, ttl: Optional[int] = None = None) -> bool"}, {"name": "delete", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 65, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "List[str]", "description": "Get keys matching a pattern.", "signature": "async keys(self, pattern: str = \"*\" = *) -> List[str]"}], "properties": [], "description": "Abstract base class defining the interface for cache backend implementations."}, {"name": "MemoryCacheBackend", "line": 75, "inherits_from": ["CacheBackend):"], "methods": [{"name": "__init__", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "max_size", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "None", "signature": "__init__(self, max_size: int = 1000 = 1000) -> None"}, {"name": "get", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Optional[Any]", "description": "Get a value from memory cache.", "signature": "async get(self, key: str) -> Optional[Any]"}, {"name": "set", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: Optional[int] = None"}, {"name": "value", "type": "Any, ttl: Optional[int] = None"}, {"name": "ttl", "type": "Optional[int] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in memory cache.", "signature": "async set(self, key: str, value: Any, ttl: Optional[int] = None, value: Any, ttl: Optional[int] = None, ttl: Optional[int] = None = None) -> bool"}, {"name": "delete", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from memory cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 141, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in memory cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 154, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from memory cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "List[str]", "description": "Get keys matching a pattern (simplified implementation).", "signature": "async keys(self, pattern: str = \"*\" = *) -> List[str]"}, {"name": "_evict_lru", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Evict least recently used items.", "signature": "async _evict_lru(self) -> None"}], "properties": [], "description": "In-memory cache backend implementation with size management."}, {"name": "RedisCacheBackend", "line": 186, "inherits_from": ["CacheBackend):"], "methods": [{"name": "__init__", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "redis_url", "type": "str", "default": "redis://localhost:6379/0"}, {"name": "connection_pool_size", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "None", "signature": "__init__(self, redis_url: str = redis://localhost:6379/0, connection_pool_size: int = 10 = 10) -> None"}, {"name": "_get_redis", "line": 195, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "redis.Redis", "description": "Get Redis connection.", "signature": "async _get_redis(self) -> redis.Redis"}, {"name": "get", "line": 205, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Optional[Any]", "description": "Get a value from Redis cache.", "signature": "async get(self, key: str) -> Optional[Any]"}, {"name": "set", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: Optional[int] = None"}, {"name": "value", "type": "Any, ttl: Optional[int] = None"}, {"name": "ttl", "type": "Optional[int] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in Redis cache.", "signature": "async set(self, key: str, value: Any, ttl: Optional[int] = None, value: Any, ttl: Optional[int] = None, ttl: Optional[int] = None = None) -> bool"}, {"name": "delete", "line": 241, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from Redis cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 251, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in Redis cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 260, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from Redis cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 270, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "List[str]", "description": "Get keys matching a pattern from Redis cache.", "signature": "async keys(self, pattern: str = \"*\" = *) -> List[str]"}, {"name": "close", "line": 279, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close Redis connection.", "signature": "async close(self) -> None"}], "properties": [], "description": "Redis cache backend implementation supporting asynchronous operations."}, {"name": "Cache", "line": 286, "inherits_from": [], "methods": [{"name": "__init__", "line": 289, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "CacheBackend"}], "is_async": false, "return_type": "None", "signature": "__init__(self, backend: CacheBackend) -> None"}, {"name": "set_key_prefix", "line": 294, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set a prefix for all cache keys.", "signature": "set_key_prefix(self, prefix: str) -> None"}, {"name": "set_default_ttl", "line": 298, "parameters": [{"name": "self", "type": "self"}, {"name": "ttl", "type": "int"}], "is_async": false, "return_type": "None", "description": "Set default TTL for cache entries.", "signature": "set_default_ttl(self, ttl: int) -> None"}, {"name": "_make_key", "line": 302, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "str", "description": "Make a full cache key with prefix.", "signature": "_make_key(self, key: str) -> str"}, {"name": "get", "line": 306, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Optional[Any]", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Optional[Any]"}, {"name": "set", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: Optional[int] = None"}, {"name": "value", "type": "Any, ttl: Optional[int] = None"}, {"name": "ttl", "type": "Optional[int] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in cache.", "signature": "async set(self, key: str, value: Any, ttl: Optional[int] = None, value: Any, ttl: Optional[int] = None, ttl: Optional[int] = None = None) -> bool"}, {"name": "delete", "line": 317, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 322, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 327, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 331, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "List[str]", "description": "Get keys matching a pattern.", "signature": "async keys(self, pattern: str = \"*\" = *) -> List[str]"}, {"name": "get_or_set", "line": 342, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default_func: callable, ttl: Optional[int] = None"}, {"name": "default_func", "type": "callable, ttl: Optional[int] = None"}, {"name": "ttl", "type": "Optional[int] = None", "default": "None"}], "is_async": true, "return_type": "Any", "description": "Get a value from cache or set it using a default function.", "signature": "async get_or_set(self, key: str, default_func: callable, ttl: Optional[int] = None, default_func: callable, ttl: Optional[int] = None, ttl: Optional[int] = None = None) -> Any"}, {"name": "increment", "line": 358, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, amount: int = 1"}, {"name": "amount", "type": "int = 1", "default": "1"}], "is_async": true, "return_type": "Optional[int]", "description": "Increment a numeric value in cache.", "signature": "async increment(self, key: str, amount: int = 1, amount: int = 1 = 1) -> Optional[int]"}, {"name": "decrement", "line": 372, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, amount: int = 1"}, {"name": "amount", "type": "int = 1", "default": "1"}], "is_async": true, "return_type": "Optional[int]", "description": "Decrement a numeric value in cache.", "signature": "async decrement(self, key: str, amount: int = 1, amount: int = 1 = 1) -> Optional[int]"}], "properties": [], "description": "High-level cache interface managing backend operations and cache logic."}, {"name": "CacheManager", "line": 377, "inherits_from": [], "methods": [{"name": "__init__", "line": 380, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register_cache", "line": 384, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, cache: Cache"}, {"name": "cache", "type": "Cache"}], "is_async": false, "return_type": "None", "description": "Register a cache instance.", "signature": "register_cache(self, name: str, cache: Cache, cache: Cache) -> None"}, {"name": "get_cache", "line": 391, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "Cache", "description": "Get a cache instance by name.", "signature": "get_cache(self, name: Optional[str] = None = None) -> Cache"}, {"name": "set_default_cache", "line": 402, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set the default cache.", "signature": "set_default_cache(self, name: str) -> None"}, {"name": "list_caches", "line": 409, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "List all registered cache names.", "signature": "list_caches(self) -> List[str]"}, {"name": "clear_all_caches", "line": 413, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Clear all registered caches.", "signature": "async clear_all_caches(self) -> None"}], "properties": [], "description": "Manages multiple cache instances and coordinates cache operations."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "hashlib", "alias": null, "line": 10, "statement": "import hashlib"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "redis.asyncio", "alias": "redis", "line": 18, "statement": "import redis.asyncio as redis"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Set"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Union"}, {"module": "weakref", "alias": null, "line": 16, "statement": "from weakref import WeakValueDictionary"}], "constants": [{"name": "T", "line": 38, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "hashlib", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "redis.asyncio", "type": "import", "line": 18}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from datetime import timedelta", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Dict", "type": "import", "line": 15}, {"name": "from typing import List", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from typing import Set", "type": "import", "line": 15}, {"name": "from typing import Type", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from typing import Union", "type": "import", "line": 15}, {"name": "from weakref import WeakValueDictionary", "type": "import", "line": 16}, {"name": "CacheError", "type": "class", "line": 23}, {"name": "CacheKeyError", "type": "class", "line": 28}, {"name": "CacheValueError", "type": "class", "line": 33}, {"name": "T", "type": "constant", "line": 38}, {"name": "CacheBackend", "type": "class", "line": 41}, {"name": "MemoryCacheBackend", "type": "class", "line": 75}, {"name": "RedisCacheBackend", "type": "class", "line": 186}, {"name": "Cache", "type": "class", "line": 286}, {"name": "CacheManager", "type": "class", "line": 377}, {"name": "cached", "type": "function", "line": 426}, {"name": "cache_key", "type": "function", "line": 485}, {"name": "generate_cache_key", "type": "function", "line": 495}, {"name": "create_memory_cache", "type": "function", "line": 515}, {"name": "create_redis_cache", "type": "function", "line": 521}, {"name": "get_cached", "type": "function", "line": 529}, {"name": "set_cached", "type": "function", "line": 535}, {"name": "delete_cached", "type": "function", "line": 542}, {"name": "exists_cached", "type": "function", "line": 548}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "cached Function", "description": "Function cached implementation.", "line_start": 426, "line_end": 484}, {"name": "cache_key Function", "description": "Function cache_key implementation.", "line_start": 485, "line_end": 494}, {"name": "generate_cache_key Function", "description": "Function generate_cache_key implementation.", "line_start": 495, "line_end": 514}, {"name": "create_memory_cache Function", "description": "Function create_memory_cache implementation.", "line_start": 515, "line_end": 520}, {"name": "create_redis_cache Function", "description": "Function create_redis_cache implementation.", "line_start": 521, "line_end": 528}, {"name": "get_cached Function", "description": "Function get_cached implementation.", "line_start": 529, "line_end": 534}, {"name": "set_cached Function", "description": "Function set_cached implementation.", "line_start": 535, "line_end": 541}, {"name": "delete_cached Function", "description": "Function delete_cached implementation.", "line_start": 542, "line_end": 547}, {"name": "exists_cached Function", "description": "Function exists_cached implementation.", "line_start": 548, "line_end": 553}, {"name": "CacheError Class", "description": "Class CacheError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "CacheKeyError Class", "description": "Class CacheKeyError definition and methods.", "line_start": 28, "line_end": 38}, {"name": "CacheValueError Class", "description": "Class CacheValueError definition and methods.", "line_start": 33, "line_end": 43}, {"name": "CacheBackend Class", "description": "Class CacheBackend definition and methods.", "line_start": 41, "line_end": 73}, {"name": "MemoryCacheBackend Class", "description": "Class MemoryCacheBackend definition and methods.", "line_start": 75, "line_end": 181}, {"name": "RedisCacheBackend Class", "description": "Class RedisCacheBackend definition and methods.", "line_start": 186, "line_end": 282}, {"name": "Cache Class", "description": "Class Cache definition and methods.", "line_start": 286, "line_end": 375}, {"name": "CacheManager Class", "description": "Class CacheManager definition and methods.", "line_start": 377, "line_end": 416}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 38, "line_end": 38}], "content_hash": "c9ef3f828f3eb21fb3e487cf25a101ea"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
  line_count: 460
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "serialization.py", "description": "Python module with 16 functions and 12 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "serialize", "line": 362, "parameters": [{"name": "data", "type": "Any, format_type: SerializationFormat = SerializationFormat.JSON"}, {"name": "format_type", "type": "SerializationFormat = SerializationFormat.JSON", "default": "SerializationFormat.JSON"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Serialize data into the specified format (default JSON).", "signature": "serialize(data: Any, format_type: SerializationFormat = SerializationFormat.JSON, format_type: SerializationFormat = SerializationFormat.JSON = SerializationFormat.JSON) -> Union[str, bytes]"}, {"name": "deserialize", "line": 367, "parameters": [{"name": "data", "type": "Union[str, bytes], format_type: Optional[SerializationFormat] = None"}, {"name": "format_type", "type": "Optional[SerializationFormat] = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from the specified format into a Python object.", "signature": "deserialize(data: Union[str, bytes], format_type: Optional[SerializationFormat] = None, format_type: Optional[SerializationFormat] = None = None) -> Any"}, {"name": "to_json", "line": 377, "parameters": [{"name": "data", "type": "Any, indent: Optional[int] = None"}, {"name": "indent", "type": "Optional[int] = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Convert data to a JSON-formatted string with optional indentation.", "signature": "to_json(data: Any, indent: Optional[int] = None, indent: Optional[int] = None = None) -> str"}, {"name": "from_json", "line": 383, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Parse JSON-formatted string or bytes into a Python object.", "signature": "from_json(data: Union[str, bytes]) -> Any"}, {"name": "to_yaml", "line": 389, "parameters": [{"name": "data", "type": "Any, indent: int = 2"}, {"name": "indent", "type": "int = 2", "default": "2"}], "is_async": false, "return_type": "str", "description": "Convert data to a YAML-formatted string with specified indentation.", "signature": "to_yaml(data: Any, indent: int = 2, indent: int = 2 = 2) -> str"}, {"name": "from_yaml", "line": 395, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Parse YAML-formatted string or bytes into a Python object.", "signature": "from_yaml(data: Union[str, bytes]) -> Any"}, {"name": "to_msgpack", "line": 401, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data into MessagePack binary format.", "signature": "to_msgpack(data: Any) -> bytes"}, {"name": "from_msgpack", "line": 407, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize MessagePack binary data into a Python object.", "signature": "from_msgpack(data: Union[str, bytes]) -> Any"}, {"name": "to_pickle", "line": 413, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data into Python pickle binary format.", "signature": "to_pickle(data: Any) -> bytes"}, {"name": "from_pickle", "line": 419, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize pickle binary data into a Python object.", "signature": "from_pickle(data: Union[str, bytes]) -> Any"}, {"name": "to_base64", "line": 425, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Encode data into a Base64 string representation.", "signature": "to_base64(data: Any) -> str"}, {"name": "from_base64", "line": 431, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "bytes", "description": "Decode Base64 string or bytes back into binary data.", "signature": "from_base64(data: Union[str, bytes]) -> bytes"}, {"name": "to_compressed_json", "line": 437, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to compressed JSON binary format.", "signature": "to_compressed_json(data: Any) -> bytes"}, {"name": "from_compressed_json", "line": 443, "parameters": [{"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize compressed JSON binary data into a Python object.", "signature": "from_compressed_json(data: Union[str, bytes]) -> Any"}, {"name": "serialize_typed", "line": 451, "parameters": [{"name": "data", "type": "T, format_type: SerializationFormat = SerializationFormat.JSON"}, {"name": "format_type", "type": "SerializationFormat = SerializationFormat.JSON", "default": "SerializationFormat.JSON"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Serialize typed data into the specified format with type safety.", "signature": "serialize_typed(data: T, format_type: SerializationFormat = SerializationFormat.JSON, format_type: SerializationFormat = SerializationFormat.JSON = SerializationFormat.JSON) -> Union[str, bytes]"}, {"name": "deserialize_typed", "line": 456, "parameters": [{"name": "data", "type": "Union[str, bytes]"}, {"name": "target_type", "type": "Type[T]"}, {"name": "format_type", "type": "Optional[SerializationFormat] = None", "default": "None"}], "is_async": false, "return_type": "T", "description": "Deserialize data into a specified target type with optional format.", "signature": "deserialize_typed(data: Union[str, bytes], target_type: Type[T], format_type: Optional[SerializationFormat] = None = None) -> T"}], "classes": [{"name": "SerializationFormat", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "JSON", "line": 25, "type": ""}, {"name": "ORJSON", "line": 26, "type": ""}, {"name": "MSGPACK", "line": 27, "type": ""}, {"name": "YAML", "line": 28, "type": ""}, {"name": "PICKLE", "line": 29, "type": ""}, {"name": "BASE64", "line": 30, "type": ""}, {"name": "COMPRESSED_JSON", "line": 31, "type": ""}], "description": "Enumeration of supported serialization formats."}, {"name": "SerializationError", "line": 36, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during serialization."}, {"name": "DeserializationError", "line": 41, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during deserialization."}, {"name": "Serializer", "line": 49, "inherits_from": [], "methods": [{"name": "__init__", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: SerializationFormat) -> None"}, {"name": "serialize", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Serialize data to the specified format.", "signature": "serialize(self, data: Any) -> Union[str, bytes]"}, {"name": "deserialize", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from the specified format.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}], "properties": [], "description": "Base class defining the interface for serializers."}, {"name": "JSONSerializer", "line": 64, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "indent", "type": "Optional[int] = None, ensure_ascii: bool = False", "default": "None"}, {"name": "ensure_ascii", "type": "bool = False", "default": "False"}], "is_async": false, "return_type": "None", "signature": "__init__(self, indent: Optional[int] = None, ensure_ascii: bool = False = None, ensure_ascii: bool = False = False) -> None"}, {"name": "serialize", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to JSON string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from JSON string.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}, {"name": "_json_serializer", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom JSON serializer for special types.", "signature": "_json_serializer(self, obj: Any) -> Any"}, {"name": "_json_deserializer", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Dict[str, Any]"}], "is_async": false, "return_type": "Any", "description": "Custom JSON deserializer for special types.", "signature": "_json_deserializer(self, obj: Dict[str, Any]) -> Any"}], "properties": [], "description": "Serializer implementation for JSON format."}, {"name": "ORJSONSerializer", "line": 107, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "option", "type": "Optional[int] = None", "default": "None"}], "is_async": false, "return_type": "None", "signature": "__init__(self, option: Optional[int] = None = None) -> None"}, {"name": "serialize", "line": 114, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to ORJSON bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from ORJSON bytes.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}], "properties": [], "description": "Serializer implementation using the orjson library for JSON."}, {"name": "MessagePackSerializer", "line": 131, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 134, "parameters": [{"name": "self", "type": "self"}, {"name": "use_bin_type", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "None", "signature": "__init__(self, use_bin_type: bool = True = True) -> None"}, {"name": "serialize", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to MessagePack bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 145, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from MessagePack bytes.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}, {"name": "_msgpack_serializer", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom MessagePack serializer for special types.", "signature": "_msgpack_serializer(self, obj: Any) -> Any"}], "properties": [], "description": "Serializer implementation for MessagePack format."}, {"name": "YAMLSerializer", "line": 165, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 168, "parameters": [{"name": "self", "type": "self"}, {"name": "default_flow_style", "type": "bool = False, indent: int = 2", "default": "False"}, {"name": "indent", "type": "int = 2", "default": "2"}], "is_async": false, "return_type": "None", "signature": "__init__(self, default_flow_style: bool = False, indent: int = 2 = False, indent: int = 2 = 2) -> None"}, {"name": "serialize", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to YAML string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from YAML string.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}, {"name": "_yaml_representer", "line": 190, "parameters": [{"name": "self", "type": "self"}, {"name": "representer", "type": "Any, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom YAML representer for special types.", "signature": "_yaml_representer(self, representer: Any, data: Any, data: Any) -> Any"}], "properties": [], "description": "Serializer implementation for YAML format."}, {"name": "PickleSerializer", "line": 201, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 204, "parameters": [{"name": "self", "type": "self"}, {"name": "protocol", "type": "int = pickle.HIGHEST_PROTOCOL", "default": "pickle.HIGHEST_PROTOCOL"}], "is_async": false, "return_type": "None", "signature": "__init__(self, protocol: int = pickle.HIGHEST_PROTOCOL = pickle.HIGHEST_PROTOCOL) -> None"}, {"name": "serialize", "line": 208, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to pickle bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 215, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from pickle bytes.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}], "properties": [], "description": "Serializer implementation for Python pickle format."}, {"name": "Base64Serializer", "line": 225, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 228, "parameters": [{"name": "self", "type": "self"}, {"name": "encoding", "type": "str = ''utf-8''", "default": "utf-8"}], "is_async": false, "return_type": "None", "signature": "__init__(self, encoding: str = ''utf-8'' = utf-8) -> None"}, {"name": "serialize", "line": 232, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to base64 string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "bytes", "description": "Deserialize data from base64 string.", "signature": "deserialize(self, data: Union[str, bytes]) -> bytes"}], "properties": [], "description": "Serializer implementation for Base64 encoding and decoding."}, {"name": "CompressedJSONSerializer", "line": 253, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 256, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "serialize", "line": 261, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to compressed JSON bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from compressed JSON bytes.", "signature": "deserialize(self, data: Union[str, bytes]) -> Any"}], "properties": [], "description": "Serializer implementation for compressed JSON format."}, {"name": "SerializationManager", "line": 283, "inherits_from": [], "methods": [{"name": "__init__", "line": 286, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_serializer", "line": 297, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "Serializer", "description": "Get a serializer for the specified format.", "signature": "get_serializer(self, format_type: SerializationFormat) -> Serializer"}, {"name": "register_serializer", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat, serializer: Serializer"}, {"name": "serializer", "type": "Serializer"}], "is_async": false, "return_type": "None", "description": "Register a custom serializer.", "signature": "register_serializer(self, format_type: SerializationFormat, serializer: Serializer, serializer: Serializer) -> None"}, {"name": "serialize", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any, format_type: SerializationFormat"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "Union[str, bytes]", "description": "Serialize data using the specified format.", "signature": "serialize(self, data: Any, format_type: SerializationFormat, format_type: SerializationFormat) -> Union[str, bytes]"}, {"name": "deserialize", "line": 313, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes], format_type: SerializationFormat"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "Any", "description": "Deserialize data using the specified format.", "signature": "deserialize(self, data: Union[str, bytes], format_type: SerializationFormat, format_type: SerializationFormat) -> Any"}, {"name": "auto_detect_format", "line": 318, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "Optional[SerializationFormat]", "description": "Auto-detect the format of serialized data.", "signature": "auto_detect_format(self, data: Union[str, bytes]) -> Optional[SerializationFormat]"}, {"name": "_detect_string_format", "line": 336, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "Optional[SerializationFormat]", "description": "Detect format from string data.", "signature": "_detect_string_format(self, data: str) -> Optional[SerializationFormat]"}], "properties": [], "description": "Manager class to handle multiple serializers and coordinate serialization tasks."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "pickle", "alias": null, "line": 11, "statement": "import pickle"}, {"module": "zlib", "alias": null, "line": 12, "statement": "import zlib"}, {"module": "msgpack", "alias": null, "line": 18, "statement": "import msgpack"}, {"module": "orjson", "alias": null, "line": 19, "statement": "import orjson"}, {"module": "yaml", "alias": null, "line": 20, "statement": "import yaml"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import timezone"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Union"}, {"module": "uuid", "alias": null, "line": 16, "statement": "from uuid import UUID"}], "constants": [{"name": "T", "line": 46, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "pickle", "type": "import", "line": 11}, {"name": "zlib", "type": "import", "line": 12}, {"name": "msgpack", "type": "import", "line": 18}, {"name": "orjson", "type": "import", "line": 19}, {"name": "yaml", "type": "import", "line": 20}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from datetime import timezone", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Dict", "type": "import", "line": 15}, {"name": "from typing import List", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from typing import Type", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from typing import Union", "type": "import", "line": 15}, {"name": "from uuid import UUID", "type": "import", "line": 16}, {"name": "SerializationFormat", "type": "class", "line": 25}, {"name": "SerializationError", "type": "class", "line": 36}, {"name": "DeserializationError", "type": "class", "line": 41}, {"name": "T", "type": "constant", "line": 46}, {"name": "Serializer", "type": "class", "line": 49}, {"name": "JSONSerializer", "type": "class", "line": 64}, {"name": "ORJSONSerializer", "type": "class", "line": 107}, {"name": "MessagePackSerializer", "type": "class", "line": 131}, {"name": "YAMLSerializer", "type": "class", "line": 165}, {"name": "PickleSerializer", "type": "class", "line": 201}, {"name": "Base64Serializer", "type": "class", "line": 225}, {"name": "CompressedJSONSerializer", "type": "class", "line": 253}, {"name": "SerializationManager", "type": "class", "line": 283}, {"name": "serialize", "type": "function", "line": 362}, {"name": "deserialize", "type": "function", "line": 367}, {"name": "to_json", "type": "function", "line": 377}, {"name": "from_json", "type": "function", "line": 383}, {"name": "to_yaml", "type": "function", "line": 389}, {"name": "from_yaml", "type": "function", "line": 395}, {"name": "to_msgpack", "type": "function", "line": 401}, {"name": "from_msgpack", "type": "function", "line": 407}, {"name": "to_pickle", "type": "function", "line": 413}, {"name": "from_pickle", "type": "function", "line": 419}, {"name": "to_base64", "type": "function", "line": 425}, {"name": "from_base64", "type": "function", "line": 431}, {"name": "to_compressed_json", "type": "function", "line": 437}, {"name": "from_compressed_json", "type": "function", "line": 443}, {"name": "serialize_typed", "type": "function", "line": 451}, {"name": "deserialize_typed", "type": "function", "line": 456}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "serialize Function", "description": "Function serialize implementation.", "line_start": 362, "line_end": 366}, {"name": "deserialize Function", "description": "Function deserialize implementation.", "line_start": 367, "line_end": 376}, {"name": "to_json Function", "description": "Function to_json implementation.", "line_start": 377, "line_end": 382}, {"name": "from_json Function", "description": "Function from_json implementation.", "line_start": 383, "line_end": 388}, {"name": "to_yaml Function", "description": "Function to_yaml implementation.", "line_start": 389, "line_end": 394}, {"name": "from_yaml Function", "description": "Function from_yaml implementation.", "line_start": 395, "line_end": 400}, {"name": "to_msgpack Function", "description": "Function to_msgpack implementation.", "line_start": 401, "line_end": 406}, {"name": "from_msgpack Function", "description": "Function from_msgpack implementation.", "line_start": 407, "line_end": 412}, {"name": "to_pickle Function", "description": "Function to_pickle implementation.", "line_start": 413, "line_end": 418}, {"name": "from_pickle Function", "description": "Function from_pickle implementation.", "line_start": 419, "line_end": 424}, {"name": "to_base64 Function", "description": "Function to_base64 implementation.", "line_start": 425, "line_end": 430}, {"name": "from_base64 Function", "description": "Function from_base64 implementation.", "line_start": 431, "line_end": 436}, {"name": "to_compressed_json Function", "description": "Function to_compressed_json implementation.", "line_start": 437, "line_end": 442}, {"name": "from_compressed_json Function", "description": "Function from_compressed_json implementation.", "line_start": 443, "line_end": 450}, {"name": "serialize_typed Function", "description": "Function serialize_typed implementation.", "line_start": 451, "line_end": 455}, {"name": "deserialize_typed Function", "description": "Function deserialize_typed implementation.", "line_start": 456, "line_end": 461}, {"name": "SerializationFormat Class", "description": "Class SerializationFormat definition and methods.", "line_start": 25, "line_end": 35}, {"name": "SerializationError Class", "description": "Class SerializationError definition and methods.", "line_start": 36, "line_end": 46}, {"name": "DeserializationError Class", "description": "Class DeserializationError definition and methods.", "line_start": 41, "line_end": 51}, {"name": "Serializer Class", "description": "Class Serializer definition and methods.", "line_start": 49, "line_end": 62}, {"name": "JSONSerializer Class", "description": "Class JSONSerializer definition and methods.", "line_start": 64, "line_end": 104}, {"name": "ORJSONSerializer Class", "description": "Class ORJSONSerializer definition and methods.", "line_start": 107, "line_end": 124}, {"name": "MessagePackSerializer Class", "description": "Class MessagePackSerializer definition and methods.", "line_start": 131, "line_end": 157}, {"name": "YAMLSerializer Class", "description": "Class YAMLSerializer definition and methods.", "line_start": 165, "line_end": 193}, {"name": "PickleSerializer Class", "description": "Class PickleSerializer definition and methods.", "line_start": 201, "line_end": 218}, {"name": "Base64Serializer Class", "description": "Class Base64Serializer definition and methods.", "line_start": 225, "line_end": 246}, {"name": "CompressedJSONSerializer Class", "description": "Class CompressedJSONSerializer definition and methods.", "line_start": 253, "line_end": 274}, {"name": "SerializationManager Class", "description": "Class SerializationManager definition and methods.", "line_start": 283, "line_end": 339}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 46, "line_end": 46}], "content_hash": "d459718078e3a44f57038946954226e8"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/validation.py
  line_count: 485
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 21 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "is_not_empty", "line": 83, "parameters": [{"name": "value", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Checks if the given value is not empty.", "signature": "is_not_empty(value: Any) -> bool"}, {"name": "is_valid_email", "line": 96, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates whether the given string is a properly formatted email address.", "signature": "is_valid_email(value: str) -> bool"}, {"name": "is_valid_url", "line": 105, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if the given string is a valid URL.", "signature": "is_valid_url(value: str) -> bool"}, {"name": "is_valid_uuid", "line": 117, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string is a valid UUID.", "signature": "is_valid_uuid(value: str) -> bool"}, {"name": "is_valid_phone", "line": 129, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates if the given string is a valid phone number.", "signature": "is_valid_phone(value: str) -> bool"}, {"name": "is_valid_date", "line": 139, "parameters": [{"name": "value", "type": "str, format_str: str = \"%Y-%m-%d\""}, {"name": "format_str", "type": "str = \"%Y-%m-%d\"", "default": "%Y-%m-%d"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string matches the specified date format.", "signature": "is_valid_date(value: str, format_str: str = \"%Y-%m-%d\", format_str: str = \"%Y-%m-%d\" = %Y-%m-%d) -> bool"}, {"name": "is_valid_datetime", "line": 151, "parameters": [{"name": "value", "type": "str, format_str: str = \"%Y-%m-%d %H:%M:%S\""}, {"name": "format_str", "type": "str = \"%Y-%m-%d %H:%M:%S\"", "default": "%Y-%m-%d %H:%M:%S"}], "is_async": false, "return_type": "bool", "description": "Validates if the given string matches the specified datetime format.", "signature": "is_valid_datetime(value: str, format_str: str = \"%Y-%m-%d %H:%M:%S\", format_str: str = \"%Y-%m-%d %H:%M:%S\" = %Y-%m-%d %H:%M:%S) -> bool"}, {"name": "is_valid_json", "line": 163, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if the given string is valid JSON.", "signature": "is_valid_json(value: str) -> bool"}, {"name": "is_valid_ip_address", "line": 176, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string is a valid IP address.", "signature": "is_valid_ip_address(value: str) -> bool"}, {"name": "is_valid_credit_card", "line": 192, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates whether the given string is a valid credit card number.", "signature": "is_valid_credit_card(value: str) -> bool"}, {"name": "is_valid_password", "line": 219, "parameters": [{"name": "value", "type": "str, min_length: int = 8"}, {"name": "min_length", "type": "int = 8", "default": "8"}], "is_async": false, "return_type": "bool", "description": "Checks if the password meets the minimum length and complexity requirements.", "signature": "is_valid_password(value: str, min_length: int = 8, min_length: int = 8 = 8) -> bool"}, {"name": "validate_input", "line": 248, "parameters": [{"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates input data against a given validation schema.", "signature": "validate_input(schema: ValidationSchema):)"}, {"name": "validate_output", "line": 263, "parameters": [{"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates output data against a given validation schema.", "signature": "validate_output(schema: ValidationSchema):)"}, {"name": "validate_field", "line": 276, "parameters": [{"name": "field_name", "type": "str"}, {"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates a specific field against the provided validation schema.", "signature": "validate_field(field_name: str, schema: ValidationSchema):)"}, {"name": "validate_type", "line": 415, "parameters": [{"name": "value", "type": "Any, expected_type: Type[T]"}, {"name": "expected_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Ensures the value matches the expected type and returns it.", "signature": "validate_type(value: Any, expected_type: Type[T], expected_type: Type[T]) -> T"}, {"name": "validate_optional_type", "line": 422, "parameters": [{"name": "value", "type": "Any, expected_type: Type[T]"}, {"name": "expected_type", "type": "Type[T]"}], "is_async": false, "return_type": "Optional[T]", "description": "Validates that the value is either None or matches the expected type.", "signature": "validate_optional_type(value: Any, expected_type: Type[T], expected_type: Type[T]) -> Optional[T]"}, {"name": "validate_union_type", "line": 429, "parameters": [{"name": "value", "type": "Any, expected_types: List[Type]"}, {"name": "expected_types", "type": "List[Type]"}], "is_async": false, "return_type": "Any", "description": "Validates that the value matches one of the expected types in a union.", "signature": "validate_union_type(value: Any, expected_types: List[Type], expected_types: List[Type]) -> Any"}, {"name": "validate_range", "line": 439, "parameters": [{"name": "value", "type": "Union[int, float]"}, {"name": "min_value", "type": "Optional[Union[int, float]]", "default": "None"}, {"name": "max_value", "type": "Optional[Union[int, float]] = None", "default": "None"}], "is_async": false, "return_type": "Union[int, float]", "description": "Checks if a numeric value falls within the specified range.", "signature": "validate_range(value: Union[int, float], min_value: Optional[Union[int, float]] = None, max_value: Optional[Union[int, float]] = None = None) -> Union[int, float]"}, {"name": "validate_length", "line": 451, "parameters": [{"name": "value", "type": "Union[str, List, Dict]"}, {"name": "min_length", "type": "Optional[int]", "default": "None"}, {"name": "max_length", "type": "Optional[int] = None", "default": "None"}], "is_async": false, "return_type": "Union[str, List, Dict]", "description": "Validates that the length of a string, list, or dictionary is within specified bounds.", "signature": "validate_length(value: Union[str, List, Dict], min_length: Optional[int] = None, max_length: Optional[int] = None = None) -> Union[str, List, Dict]"}, {"name": "validate_pattern", "line": 467, "parameters": [{"name": "value", "type": "str, pattern: str, flags: int = 0"}, {"name": "pattern", "type": "str, flags: int = 0"}, {"name": "flags", "type": "int = 0", "default": "0"}], "is_async": false, "return_type": "str", "description": "Ensures the string matches the given regular expression pattern.", "signature": "validate_pattern(value: str, pattern: str, flags: int = 0, pattern: str, flags: int = 0, flags: int = 0 = 0) -> str"}, {"name": "validate_enum", "line": 478, "parameters": [{"name": "value", "type": "Any, enum_class: Type"}, {"name": "enum_class", "type": "Type"}], "is_async": false, "return_type": "Any", "description": "Validates that the value is a member of the specified enumeration.", "signature": "validate_enum(value: Any, enum_class: Type, enum_class: Type) -> Any"}], "classes": [{"name": "ValidationError", "line": 21, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Represents an error that occurs during validation."}, {"name": "ValidationRule", "line": 26, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, validator_func: Callable, error_message: str"}, {"name": "validator_func", "type": "Callable, error_message: str"}, {"name": "error_message", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str, validator_func: Callable, error_message: str, validator_func: Callable, error_message: str, error_message: str) -> None"}, {"name": "validate", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Validate a value.", "signature": "validate(self, value: Any) -> bool"}, {"name": "get_error_message", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Get error message for validation failure.", "signature": "get_error_message(self, value: Any) -> str"}], "properties": [], "description": "Defines a single validation rule with associated logic."}, {"name": "ValidationSchema", "line": 46, "inherits_from": [], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_rule", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "rule", "type": "ValidationRule"}], "is_async": false, "return_type": "''ValidationSchema''", "description": "Add a validation rule.", "signature": "add_rule(self, rule: ValidationRule) -> ''ValidationSchema''"}, {"name": "add_custom_validator", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, validator_func: Callable"}, {"name": "validator_func", "type": "Callable"}], "is_async": false, "return_type": "''ValidationSchema''", "description": "Add a custom validator.", "signature": "add_custom_validator(self, name: str, validator_func: Callable, validator_func: Callable) -> ''ValidationSchema''"}, {"name": "validate", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "List[str]", "description": "Validate data against all rules.", "signature": "validate(self, data: Any) -> List[str]"}], "properties": [], "description": "Represents a collection of validation rules for structured data."}, {"name": "EmailValidator", "line": 291, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_email", "line": 296, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_email(cls, v)"}], "properties": [], "description": "Provides functionality to validate email addresses."}, {"name": "URLValidator", "line": 302, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_url", "line": 307, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_url(cls, v)"}], "properties": [], "description": "Provides functionality to validate URLs."}, {"name": "PhoneValidator", "line": 313, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_phone", "line": 318, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_phone(cls, v)"}], "properties": [], "description": "Provides functionality to validate phone numbers."}, {"name": "PasswordValidator", "line": 324, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_password", "line": 329, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_password(cls, v)"}], "properties": [], "description": "Provides functionality to validate passwords against criteria."}, {"name": "CreditCardValidator", "line": 335, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_credit_card", "line": 340, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_credit_card(cls, v)"}], "properties": [], "description": "Provides functionality to validate credit card numbers."}, {"name": "ValidationUtils", "line": 348, "inherits_from": [], "methods": [{"name": "create_email_schema", "line": 352, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create email validation schema.", "signature": "create_email_schema() -> ValidationSchema"}, {"name": "create_password_schema", "line": 360, "parameters": [{"name": "min_length", "type": "int = 8", "default": "8"}], "is_async": false, "return_type": "ValidationSchema", "description": "Create password validation schema.", "signature": "create_password_schema(min_length: int = 8 = 8) -> ValidationSchema"}, {"name": "create_url_schema", "line": 369, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create URL validation schema.", "signature": "create_url_schema() -> ValidationSchema"}, {"name": "create_phone_schema", "line": 377, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create phone validation schema.", "signature": "create_phone_schema() -> ValidationSchema"}, {"name": "validate_dict", "line": 385, "parameters": [{"name": "data", "type": "Dict[str, Any], validators: Dict[str, ValidationSchema]"}, {"name": "validators", "type": "Dict[str, ValidationSchema]"}], "is_async": false, "return_type": "Dict[str, List[str]]", "description": "Validate a dictionary against multiple schemas.", "signature": "validate_dict(data: Dict[str, Any], validators: Dict[str, ValidationSchema], validators: Dict[str, ValidationSchema]) -> Dict[str, List[str]]"}, {"name": "validate_list", "line": 398, "parameters": [{"name": "data", "type": "List[Any], schema: ValidationSchema"}, {"name": "schema", "type": "ValidationSchema"}], "is_async": false, "return_type": "List[str]", "description": "Validate a list of items against a schema.", "signature": "validate_list(data: List[Any], schema: ValidationSchema, schema: ValidationSchema) -> List[str]"}], "properties": [], "description": "Contains utility methods to assist with various validation tasks."}], "imports": [{"module": "re", "alias": null, "line": 9, "statement": "import re"}, {"module": "uuid", "alias": null, "line": 10, "statement": "import uuid"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "import pydantic"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import timezone"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Set"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Union"}, {"module": "urllib.parse", "alias": null, "line": 13, "statement": "from urllib.parse import urlparse"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import ValidationError"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import validator"}], "constants": [{"name": "T", "line": 412, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "re", "type": "import", "line": 9}, {"name": "uuid", "type": "import", "line": 10}, {"name": "pydantic", "type": "import", "line": 15}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "from datetime import timezone", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Callable", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import List", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import Set", "type": "import", "line": 12}, {"name": "from typing import Type", "type": "import", "line": 12}, {"name": "from typing import TypeVar", "type": "import", "line": 12}, {"name": "from typing import Union", "type": "import", "line": 12}, {"name": "from urllib.parse import urlparse", "type": "import", "line": 13}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "from pydantic import Field", "type": "import", "line": 16}, {"name": "from pydantic import ValidationError", "type": "import", "line": 16}, {"name": "from pydantic import validator", "type": "import", "line": 16}, {"name": "ValidationError", "type": "class", "line": 21}, {"name": "ValidationRule", "type": "class", "line": 26}, {"name": "ValidationSchema", "type": "class", "line": 46}, {"name": "is_not_empty", "type": "function", "line": 83}, {"name": "is_valid_email", "type": "function", "line": 96}, {"name": "is_valid_url", "type": "function", "line": 105}, {"name": "is_valid_uuid", "type": "function", "line": 117}, {"name": "is_valid_phone", "type": "function", "line": 129}, {"name": "is_valid_date", "type": "function", "line": 139}, {"name": "is_valid_datetime", "type": "function", "line": 151}, {"name": "is_valid_json", "type": "function", "line": 163}, {"name": "is_valid_ip_address", "type": "function", "line": 176}, {"name": "is_valid_credit_card", "type": "function", "line": 192}, {"name": "is_valid_password", "type": "function", "line": 219}, {"name": "validate_input", "type": "function", "line": 248}, {"name": "validate_output", "type": "function", "line": 263}, {"name": "validate_field", "type": "function", "line": 276}, {"name": "EmailValidator", "type": "class", "line": 291}, {"name": "URLValidator", "type": "class", "line": 302}, {"name": "PhoneValidator", "type": "class", "line": 313}, {"name": "PasswordValidator", "type": "class", "line": 324}, {"name": "CreditCardValidator", "type": "class", "line": 335}, {"name": "ValidationUtils", "type": "class", "line": 348}, {"name": "T", "type": "constant", "line": 412}, {"name": "validate_type", "type": "function", "line": 415}, {"name": "validate_optional_type", "type": "function", "line": 422}, {"name": "validate_union_type", "type": "function", "line": 429}, {"name": "validate_range", "type": "function", "line": 439}, {"name": "validate_length", "type": "function", "line": 451}, {"name": "validate_pattern", "type": "function", "line": 467}, {"name": "validate_enum", "type": "function", "line": 478}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "is_not_empty Function", "description": "Function is_not_empty implementation.", "line_start": 83, "line_end": 95}, {"name": "is_valid_email Function", "description": "Function is_valid_email implementation.", "line_start": 96, "line_end": 104}, {"name": "is_valid_url Function", "description": "Function is_valid_url implementation.", "line_start": 105, "line_end": 116}, {"name": "is_valid_uuid Function", "description": "Function is_valid_uuid implementation.", "line_start": 117, "line_end": 128}, {"name": "is_valid_phone Function", "description": "Function is_valid_phone implementation.", "line_start": 129, "line_end": 138}, {"name": "is_valid_date Function", "description": "Function is_valid_date implementation.", "line_start": 139, "line_end": 150}, {"name": "is_valid_datetime Function", "description": "Function is_valid_datetime implementation.", "line_start": 151, "line_end": 162}, {"name": "is_valid_json Function", "description": "Function is_valid_json implementation.", "line_start": 163, "line_end": 175}, {"name": "is_valid_ip_address Function", "description": "Function is_valid_ip_address implementation.", "line_start": 176, "line_end": 191}, {"name": "is_valid_credit_card Function", "description": "Function is_valid_credit_card implementation.", "line_start": 192, "line_end": 218}, {"name": "is_valid_password Function", "description": "Function is_valid_password implementation.", "line_start": 219, "line_end": 247}, {"name": "validate_input Function", "description": "Function validate_input implementation.", "line_start": 248, "line_end": 262}, {"name": "validate_output Function", "description": "Function validate_output implementation.", "line_start": 263, "line_end": 275}, {"name": "validate_field Function", "description": "Function validate_field implementation.", "line_start": 276, "line_end": 290}, {"name": "validate_type Function", "description": "Function validate_type implementation.", "line_start": 415, "line_end": 421}, {"name": "validate_optional_type Function", "description": "Function validate_optional_type implementation.", "line_start": 422, "line_end": 428}, {"name": "validate_union_type Function", "description": "Function validate_union_type implementation.", "line_start": 429, "line_end": 438}, {"name": "validate_range Function", "description": "Function validate_range implementation.", "line_start": 439, "line_end": 450}, {"name": "validate_length Function", "description": "Function validate_length implementation.", "line_start": 451, "line_end": 466}, {"name": "validate_pattern Function", "description": "Function validate_pattern implementation.", "line_start": 467, "line_end": 477}, {"name": "validate_enum Function", "description": "Function validate_enum implementation.", "line_start": 478, "line_end": 483}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "ValidationRule Class", "description": "Class ValidationRule definition and methods.", "line_start": 26, "line_end": 44}, {"name": "ValidationSchema Class", "description": "Class ValidationSchema definition and methods.", "line_start": 46, "line_end": 66}, {"name": "EmailValidator Class", "description": "Class EmailValidator definition and methods.", "line_start": 291, "line_end": 299}, {"name": "URLValidator Class", "description": "Class URLValidator definition and methods.", "line_start": 302, "line_end": 310}, {"name": "PhoneValidator Class", "description": "Class PhoneValidator definition and methods.", "line_start": 313, "line_end": 321}, {"name": "PasswordValidator Class", "description": "Class PasswordValidator definition and methods.", "line_start": 324, "line_end": 332}, {"name": "CreditCardValidator Class", "description": "Class CreditCardValidator definition and methods.", "line_start": 335, "line_end": 343}, {"name": "ValidationUtils Class", "description": "Class ValidationUtils definition and methods.", "line_start": 348, "line_end": 401}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 412, "line_end": 412}], "content_hash": "45830bfa46d1726f3d307bcb33cbbbe0"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/permissions.py
  line_count: 453
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "permissions.py", "description": "Python module with 1 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "require_permission", "line": 442, "parameters": [{"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "description": "Decorator to enforce that a user has the specified permission level for a given resource and action.", "signature": "require_permission(resource: str, action: str, level: PermissionLevel = PermissionLevel.READ)"}], "classes": [{"name": "PermissionError", "line": 18, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a permission-related error occurs."}, {"name": "RoleError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a role-related error occurs."}, {"name": "PermissionLevel", "line": 28, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "NONE", "line": 28, "type": ""}, {"name": "READ", "line": 29, "type": ""}, {"name": "WRITE", "line": 30, "type": ""}, {"name": "ADMIN", "line": 31, "type": ""}, {"name": "OWNER", "line": 32, "type": ""}], "description": "Enumeration representing different levels of permissions."}, {"name": "Permission", "line": 37, "inherits_from": [], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ):"}], "is_async": false, "description": "\n        Initialize permission.\n\n        Args:\n            resource: Resource being accessed\n            action: Action being performed\n            level: Permission level\n        ", "signature": "__init__(self, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ):)"}, {"name": "__str__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}, {"name": "__eq__", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "other", "type": "Any"}], "is_async": false, "return_type": "bool", "signature": "__eq__(self, other: Any) -> bool"}, {"name": "__hash__", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "signature": "__hash__(self) -> int"}], "properties": [], "description": "Represents a permission with associated resource, action, and level."}, {"name": "Role", "line": 67, "inherits_from": [], "methods": [{"name": "__init__", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}], "is_async": false, "description": "\n        Initialize role.\n\n        Args:\n            name: Role name\n            description: Role description\n        ", "signature": "__init__(self, name: str, description: str = )"}, {"name": "add_permission", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Add permission to role.\n\n        Args:\n            permission: Permission to add\n        ", "signature": "add_permission(self, permission: Permission) -> None"}, {"name": "remove_permission", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Remove permission from role.\n\n        Args:\n            permission: Permission to remove\n        ", "signature": "remove_permission(self, permission: Permission) -> None"}, {"name": "has_permission", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "bool", "description": "\n        Check if role has specific permission.\n\n        Args:\n            permission: Permission to check\n\n        Returns:\n            True if role has permission, False otherwise\n        ", "signature": "has_permission(self, permission: Permission) -> bool"}, {"name": "inherit_from", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Inherit permissions from another role.\n\n        Args:\n            role_name: Name of role to inherit from\n        ", "signature": "inherit_from(self, role_name: str) -> None"}], "properties": [], "description": "Represents a user role that aggregates multiple permissions."}, {"name": "User", "line": 123, "inherits_from": [], "methods": [{"name": "__init__", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "username", "type": "str):"}], "is_async": false, "description": "\n        Initialize user.\n\n        Args:\n            user_id: Unique user identifier\n            username: User''s username\n        ", "signature": "__init__(self, user_id: str, username: str):)"}, {"name": "add_role", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Add role to user.\n\n        Args:\n            role_name: Name of role to add\n        ", "signature": "add_role(self, role_name: str) -> None"}, {"name": "remove_role", "line": 148, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove role from user.\n\n        Args:\n            role_name: Name of role to remove\n        ", "signature": "remove_role(self, role_name: str) -> None"}, {"name": "add_custom_permission", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Add custom permission to user.\n\n        Args:\n            permission: Permission to add\n        ", "signature": "add_custom_permission(self, permission: Permission) -> None"}, {"name": "remove_custom_permission", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Remove custom permission from user.\n\n        Args:\n            permission: Permission to remove\n        ", "signature": "remove_custom_permission(self, permission: Permission) -> None"}], "properties": [], "description": "Represents a system user with assigned roles and permissions."}, {"name": "PolicyEngine", "line": 176, "inherits_from": [], "methods": [{"name": "__init__", "line": 179, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize policy engine.", "signature": "__init__(self)"}, {"name": "add_role", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "role", "type": "Role"}], "is_async": false, "return_type": "None", "description": "\n        Add role to policy engine.\n\n        Args:\n            role: Role to add\n        ", "signature": "add_role(self, role: Role) -> None"}, {"name": "remove_role", "line": 194, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove role from policy engine.\n\n        Args:\n            role_name: Name of role to remove\n        ", "signature": "remove_role(self, role_name: str) -> None"}, {"name": "add_user", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "user", "type": "User"}], "is_async": false, "return_type": "None", "description": "\n        Add user to policy engine.\n\n        Args:\n            user: User to add\n        ", "signature": "add_user(self, user: User) -> None"}, {"name": "remove_user", "line": 216, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove user from policy engine.\n\n        Args:\n            user_id: ID of user to remove\n        ", "signature": "remove_user(self, user_id: str) -> None"}, {"name": "add_policy", "line": 226, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, policy_func: Callable"}, {"name": "policy_func", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Add custom policy function.\n\n        Args:\n            name: Policy name\n            policy_func: Policy function to execute\n        ", "signature": "add_policy(self, name: str, policy_func: Callable, policy_func: Callable) -> None"}, {"name": "check_permission", "line": 236, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "return_type": "bool", "description": "\n        Check if user has permission for resource and action.\n\n        Args:\n            user_id: User ID\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n\n        Returns:\n            True if user has permission, False otherwise\n        ", "signature": "check_permission(self, user_id: str, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ) -> bool"}, {"name": "get_user_permissions", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}], "is_async": false, "return_type": "Set[Permission]", "description": "\n        Get all permissions for a user.\n\n        Args:\n            user_id: User ID\n\n        Returns:\n            Set of user permissions\n        ", "signature": "get_user_permissions(self, user_id: str) -> Set[Permission]"}], "properties": [], "description": "Engine responsible for evaluating and enforcing access control policies."}, {"name": "RBACManager", "line": 312, "inherits_from": [], "methods": [{"name": "__init__", "line": 315, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize RBAC manager.", "signature": "__init__(self)"}, {"name": "_setup_default_roles", "line": 320, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup default roles and permissions.", "signature": "_setup_default_roles(self) -> None"}, {"name": "create_user", "line": 338, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, username: str, roles: Optional[List[str]] = None"}, {"name": "username", "type": "str, roles: Optional[List[str]] = None"}, {"name": "roles", "type": "Optional[List[str]] = None", "default": "None"}], "is_async": false, "return_type": "User", "description": "\n        Create a new user.\n\n        Args:\n            user_id: Unique user identifier\n            username: User''s username\n            roles: List of role names to assign\n\n        Returns:\n            Created user\n        ", "signature": "create_user(self, user_id: str, username: str, roles: Optional[List[str]] = None, username: str, roles: Optional[List[str]] = None, roles: Optional[List[str]] = None = None) -> User"}, {"name": "assign_role", "line": 358, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, role_name: str"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Assign role to user.\n\n        Args:\n            user_id: User ID\n            role_name: Role name to assign\n        ", "signature": "assign_role(self, user_id: str, role_name: str, role_name: str) -> None"}, {"name": "revoke_role", "line": 369, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, role_name: str"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Revoke role from user.\n\n        Args:\n            user_id: User ID\n            role_name: Role name to revoke\n        ", "signature": "revoke_role(self, user_id: str, role_name: str, role_name: str) -> None"}, {"name": "has_permission", "line": 380, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "return_type": "bool", "description": "\n        Check if user has permission.\n\n        Args:\n            user_id: User ID\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n\n        Returns:\n            True if user has permission, False otherwise\n        ", "signature": "has_permission(self, user_id: str, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ) -> bool"}, {"name": "require_permission", "line": 401, "parameters": [{"name": "self", "type": "self"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "description": "\n        Decorator to require permission for function execution.\n\n        Args:\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n        ", "signature": "require_permission(self, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ)"}], "properties": [], "description": "Manager class for handling role-based access control operations."}], "imports": [{"module": "functools", "alias": null, "line": 11, "statement": "import functools"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Set"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Union"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Callable"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 15, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "functools", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import List", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import Set", "type": "import", "line": 12}, {"name": "from typing import Union", "type": "import", "line": 12}, {"name": "from typing import Callable", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 15}, {"name": "PermissionError", "type": "class", "line": 18}, {"name": "RoleError", "type": "class", "line": 23}, {"name": "PermissionLevel", "type": "class", "line": 28}, {"name": "Permission", "type": "class", "line": 37}, {"name": "Role", "type": "class", "line": 67}, {"name": "User", "type": "class", "line": 123}, {"name": "PolicyEngine", "type": "class", "line": 176}, {"name": "RBACManager", "type": "class", "line": 312}, {"name": "require_permission", "type": "function", "line": 442}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 15}, {"name": "require_permission Function", "description": "Function require_permission implementation.", "line_start": 442, "line_end": 447}, {"name": "PermissionError Class", "description": "Class PermissionError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "RoleError Class", "description": "Class RoleError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "PermissionLevel Class", "description": "Class PermissionLevel definition and methods.", "line_start": 28, "line_end": 38}, {"name": "Permission Class", "description": "Class Permission definition and methods.", "line_start": 37, "line_end": 66}, {"name": "Role Class", "description": "Class Role definition and methods.", "line_start": 67, "line_end": 116}, {"name": "User Class", "description": "Class User definition and methods.", "line_start": 123, "line_end": 169}, {"name": "PolicyEngine Class", "description": "Class PolicyEngine definition and methods.", "line_start": 176, "line_end": 284}, {"name": "RBACManager Class", "description": "Class RBACManager definition and methods.", "line_start": 312, "line_end": 404}], "content_hash": "31c20bdf4b2e4a670c13f3c6f6956c19"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/__init__.py
  line_count: 26
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "auth", "alias": null, "line": 9, "statement": "from auth import AuthManager"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import AuthConfig"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import TokenPayload"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import sanitize_input"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import AdvancedEncryption"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import EncryptionConfig"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import generate_secure_token"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import hash_password"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import verify_password"}], "constants": []}, "key_elements": [{"name": "from auth import AuthManager", "type": "import", "line": 9}, {"name": "from auth import AuthConfig", "type": "import", "line": 9}, {"name": "from auth import TokenPayload", "type": "import", "line": 9}, {"name": "from auth import sanitize_input", "type": "import", "line": 9}, {"name": "from encryption import AdvancedEncryption", "type": "import", "line": 10}, {"name": "from encryption import EncryptionConfig", "type": "import", "line": 10}, {"name": "from encryption import generate_secure_token", "type": "import", "line": 10}, {"name": "from encryption import hash_password", "type": "import", "line": 10}, {"name": "from encryption import verify_password", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "b34258042e084339a3658fc4bb4675ea"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/oauth.py
  line_count: 395
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "oauth.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OAuthError", "line": 20, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to OAuth operations."}, {"name": "TokenValidationError", "line": 25, "inherits_from": ["OAuthError):"], "methods": [], "properties": [], "description": "Indicates errors encountered during token validation."}, {"name": "PKCEError", "line": 30, "inherits_from": ["OAuthError):"], "methods": [], "properties": [], "description": "Represents errors specific to the PKCE (Proof Key for Code Exchange) process."}, {"name": "OAuthConfig", "line": 35, "inherits_from": [], "methods": [{"name": "__init__", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "client_id", "type": "str"}, {"name": "client_secret", "type": "str"}, {"name": "redirect_uri", "type": "str"}, {"name": "authorization_endpoint", "type": "str"}, {"name": "token_endpoint", "type": "str"}, {"name": "scope", "type": "Optional[str]", "default": "None"}, {"name": "response_type", "type": "str", "default": "code"}, {"name": "grant_type", "type": "str", "default": "authorization_code"}], "is_async": false, "description": "\n        Initialize OAuth configuration.\n\n        Args:\n            client_id: OAuth client ID\n            client_secret: OAuth client secret\n            redirect_uri: Redirect URI for authorization\n            authorization_endpoint: Authorization server endpoint\n            token_endpoint: Token server endpoint\n            scope: Requested scopes\n            response_type: Response type (code, token)\n            grant_type: Grant type for token exchange\n        ", "signature": "__init__(self, client_id: str, client_secret: str, redirect_uri: str, authorization_endpoint: str, token_endpoint: str, scope: Optional[str] = None, response_type: str = code, grant_type: str = authorization_code)"}], "properties": [], "description": "Holds configuration settings required for OAuth authentication."}, {"name": "PKCE", "line": 72, "inherits_from": [], "methods": [{"name": "generate_code_verifier", "line": 76, "parameters": [], "is_async": false, "return_type": "str", "description": "\n        Generate a random code verifier for PKCE.\n\n        Returns:\n            Random code verifier string\n        ", "signature": "generate_code_verifier() -> str"}, {"name": "generate_code_challenge", "line": 87, "parameters": [{"name": "code_verifier", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Generate code challenge from code verifier.\n\n        Args:\n            code_verifier: The code verifier\n\n        Returns:\n            Base64 URL-encoded code challenge\n        ", "signature": "generate_code_challenge(code_verifier: str) -> str"}, {"name": "verify_code_challenge", "line": 101, "parameters": [{"name": "code_verifier", "type": "str, code_challenge: str"}, {"name": "code_challenge", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Verify code challenge against code verifier.\n\n        Args:\n            code_verifier: The code verifier\n            code_challenge: The code challenge to verify\n\n        Returns:\n            True if verification succeeds, False otherwise\n        ", "signature": "verify_code_challenge(code_verifier: str, code_challenge: str, code_challenge: str) -> bool"}], "properties": [], "description": "Manages the generation and verification of PKCE code challenges and verifiers."}, {"name": "OAuthClient", "line": 116, "inherits_from": [], "methods": [{"name": "__init__", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OAuthConfig):"}], "is_async": false, "description": "\n        Initialize OAuth client.\n\n        Args:\n            config: OAuth configuration\n        ", "signature": "__init__(self, config: OAuthConfig):)"}, {"name": "generate_authorization_url", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "Optional[str]", "default": "None"}, {"name": "use_pkce", "type": "bool", "default": "True"}, {"name": "additional_params", "type": "Optional[Dict[str, str]]", "default": "None"}], "is_async": false, "return_type": "str", "description": "\n        Generate authorization URL for OAuth flow.\n\n        Args:\n            state: State parameter for CSRF protection\n            use_pkce: Whether to use PKCE\n            additional_params: Additional parameters to include\n\n        Returns:\n            Authorization URL\n        ", "signature": "generate_authorization_url(self, state: Optional[str] = None, use_pkce: bool = True, additional_params: Optional[Dict[str, str]] = None) -> str"}, {"name": "exchange_code_for_token", "line": 178, "parameters": [{"name": "self", "type": "self"}, {"name": "authorization_code", "type": "str"}, {"name": "state", "type": "Optional[str]", "default": "None"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "\n        Exchange authorization code for access token.\n\n        Args:\n            authorization_code: Authorization code from callback\n            state: State parameter for verification\n\n        Returns:\n            Token response dictionary\n\n        Raises:\n            OAuthError: If token exchange fails\n        ", "signature": "exchange_code_for_token(self, authorization_code: str, state: Optional[str] = None) -> Dict[str, Any]"}, {"name": "refresh_token", "line": 224, "parameters": [{"name": "self", "type": "self"}, {"name": "refresh_token", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "\n        Refresh access token using refresh token.\n\n        Args:\n            refresh_token: Refresh token\n\n        Returns:\n            New token response dictionary\n        ", "signature": "refresh_token(self, refresh_token: str) -> Dict[str, Any]"}], "properties": [], "description": "Handles OAuth authentication flows and token acquisition."}, {"name": "TokenValidator", "line": 253, "inherits_from": [], "methods": [{"name": "validate_access_token", "line": 257, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Validate access token format and structure.\n\n        Args:\n            token: Access token to validate\n\n        Returns:\n            True if token appears valid, False otherwise\n        ", "signature": "validate_access_token(token: str) -> bool"}, {"name": "extract_token_claims", "line": 285, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "\n        Extract claims from JWT token.\n\n        Args:\n            token: JWT token\n\n        Returns:\n            Token claims dictionary\n\n        Raises:\n            TokenValidationError: If token is invalid\n        ", "signature": "extract_token_claims(token: str) -> Dict[str, Any]"}, {"name": "is_token_expired", "line": 319, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if token is expired.\n\n        Args:\n            token: JWT token\n\n        Returns:\n            True if expired, False otherwise\n        ", "signature": "is_token_expired(token: str) -> bool"}], "properties": [], "description": "Validates OAuth tokens to ensure their authenticity and integrity."}, {"name": "OIDCClient", "line": 344, "inherits_from": ["OAuthClient):"], "methods": [{"name": "__init__", "line": 347, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OAuthConfig"}, {"name": "issuer", "type": "str):"}], "is_async": false, "description": "\n        Initialize OIDC client.\n\n        Args:\n            config: OAuth configuration\n            issuer: OIDC issuer URL\n        ", "signature": "__init__(self, config: OAuthConfig, issuer: str):)"}, {"name": "discover_endpoints", "line": 360, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, str]", "description": "\n        Discover OIDC endpoints from issuer.\n\n        Returns:\n            Dictionary of discovered endpoints\n        ", "signature": "discover_endpoints(self) -> Dict[str, str]"}, {"name": "get_user_info", "line": 378, "parameters": [{"name": "self", "type": "self"}, {"name": "access_token", "type": "str"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "\n        Get user information using access token.\n\n        Args:\n            access_token: Valid access token\n\n        Returns:\n            User information dictionary\n        ", "signature": "get_user_info(self, access_token: str) -> Dict[str, Any]"}], "properties": [], "description": "Extends OAuthClient to support OpenID Connect authentication flows."}], "imports": [{"module": "base64", "alias": null, "line": 11, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 12, "statement": "import hashlib"}, {"module": "secrets", "alias": null, "line": 13, "statement": "import secrets"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Union"}, {"module": "urllib.parse", "alias": null, "line": 15, "statement": "from urllib.parse import urlencode"}, {"module": "urllib.parse", "alias": null, "line": 15, "statement": "from urllib.parse import parse_qs"}, {"module": "urllib.parse", "alias": null, "line": 15, "statement": "from urllib.parse import urlparse"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 17, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 11}, {"name": "hashlib", "type": "import", "line": 12}, {"name": "secrets", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Dict", "type": "import", "line": 14}, {"name": "from typing import List", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from typing import Union", "type": "import", "line": 14}, {"name": "from urllib.parse import urlencode", "type": "import", "line": 15}, {"name": "from urllib.parse import parse_qs", "type": "import", "line": 15}, {"name": "from urllib.parse import urlparse", "type": "import", "line": 15}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 17}, {"name": "OAuthError", "type": "class", "line": 20}, {"name": "TokenValidationError", "type": "class", "line": 25}, {"name": "PKCEError", "type": "class", "line": 30}, {"name": "OAuthConfig", "type": "class", "line": 35}, {"name": "PKCE", "type": "class", "line": 72}, {"name": "OAuthClient", "type": "class", "line": 116}, {"name": "TokenValidator", "type": "class", "line": 253}, {"name": "OIDCClient", "type": "class", "line": 344}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "OAuthError Class", "description": "Class OAuthError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "TokenValidationError Class", "description": "Class TokenValidationError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "PKCEError Class", "description": "Class PKCEError definition and methods.", "line_start": 30, "line_end": 40}, {"name": "OAuthConfig Class", "description": "Class OAuthConfig definition and methods.", "line_start": 35, "line_end": 41}, {"name": "PKCE Class", "description": "Class PKCE definition and methods.", "line_start": 72, "line_end": 104}, {"name": "OAuthClient Class", "description": "Class OAuthClient definition and methods.", "line_start": 116, "line_end": 227}, {"name": "TokenValidator Class", "description": "Class TokenValidator definition and methods.", "line_start": 253, "line_end": 322}, {"name": "OIDCClient Class", "description": "Class OIDCClient definition and methods.", "line_start": 344, "line_end": 381}], "content_hash": "bf57ee740ede6941cfbbc48093fa1ac3"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/encryption.py
  line_count: 205
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encryption.py", "description": "Python module with 3 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "generate_secure_token", "line": 151, "parameters": [{"name": "length", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "str", "description": "Generates a cryptographically secure random token of specified length.", "signature": "generate_secure_token(length: int = 32 = 32) -> str"}, {"name": "hash_password", "line": 165, "parameters": [{"name": "password", "type": "str, salt: bytes | None = None"}, {"name": "salt", "type": "bytes | None = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Creates a hashed password with an optional salt, returning both hash and salt in hexadecimal format.", "signature": "hash_password(password: str, salt: bytes | None = None, salt: bytes | None = None = None) -> tuple[str, str]"}, {"name": "verify_password", "line": 184, "parameters": [{"name": "password", "type": "str, hash_hex: str, salt_hex: str"}, {"name": "hash_hex", "type": "str, salt_hex: str"}, {"name": "salt_hex", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verifies if a given password matches the stored hash using the provided salt.", "signature": "verify_password(password: str, hash_hex: str, salt_hex: str, hash_hex: str, salt_hex: str, salt_hex: str) -> bool"}], "classes": [{"name": "EncryptionConfig", "line": 28, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for encryption operations."}, {"name": "AdvancedEncryption", "line": 37, "inherits_from": [], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EncryptionConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: EncryptionConfig | None = None)"}, {"name": "generate_key", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "password", "type": "str"}, {"name": "salt", "type": "bytes | None", "default": "None"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate encryption key from password using PBKDF2.\n\n        Args:\n            password: Password to derive key from\n            salt: Optional salt, generated if not provided\n\n        Returns:\n            Tuple of (key, salt)\n        ", "signature": "generate_key(self, password: str, salt: bytes | None = None) -> tuple[bytes, bytes]"}, {"name": "encrypt_data", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encrypt data using Fernet symmetric encryption.\n\n        Args:\n            data: Data to encrypt\n            key: Encryption key\n\n        Returns:\n            Base64 encoded encrypted data\n        ", "signature": "encrypt_data(self, data: str | bytes, key: bytes, key: bytes) -> str"}, {"name": "decrypt_data", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using Fernet symmetric encryption.\n\n        Args:\n            encrypted_data: Base64 encoded encrypted data\n            key: Encryption key\n\n        Returns:\n            Decrypted data as bytes\n\n        Raises:\n            ValueError: If decryption fails\n        ", "signature": "decrypt_data(self, encrypted_data: str, key: bytes, key: bytes) -> bytes"}, {"name": "generate_rsa_keypair", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate RSA public/private key pair.\n\n        Args:\n            key_size: RSA key size in bits\n\n        Returns:\n            Tuple of (private_key_pem, public_key_pem)\n        ", "signature": "generate_rsa_keypair(self, key_size: int = 2048 = 2048) -> tuple[bytes, bytes]"}], "properties": [], "description": "Provides advanced encryption and decryption methods using specified algorithms and keys."}], "imports": [{"module": "base64", "alias": null, "line": 11, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 12, "statement": "import hashlib"}, {"module": "os", "alias": null, "line": 13, "statement": "import os"}, {"module": "secrets", "alias": null, "line": 14, "statement": "import secrets"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "cryptography.fernet", "alias": null, "line": 17, "statement": "from cryptography.fernet import Fernet"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives import hashes"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives import serialization"}, {"module": "cryptography.hazmat.primitives.kdf.pbkdf2", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 20, "statement": "from cryptography.hazmat.primitives.asymmetric import rsa"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 20, "statement": "from cryptography.hazmat.primitives.asymmetric import padding"}, {"module": "pydantic", "alias": null, "line": 21, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 23, "statement": "from observability import get_logger"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 11}, {"name": "hashlib", "type": "import", "line": 12}, {"name": "os", "type": "import", "line": 13}, {"name": "secrets", "type": "import", "line": 14}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives import hashes", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives import serialization", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC", "type": "import", "line": 19}, {"name": "from cryptography.hazmat.primitives.asymmetric import rsa", "type": "import", "line": 20}, {"name": "from cryptography.hazmat.primitives.asymmetric import padding", "type": "import", "line": 20}, {"name": "from pydantic import BaseModel", "type": "import", "line": 21}, {"name": "from observability import get_logger", "type": "import", "line": 23}, {"name": "EncryptionConfig", "type": "class", "line": 28}, {"name": "AdvancedEncryption", "type": "class", "line": 37}, {"name": "generate_secure_token", "type": "function", "line": 151}, {"name": "hash_password", "type": "function", "line": 165}, {"name": "verify_password", "type": "function", "line": 184}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 23}, {"name": "generate_secure_token Function", "description": "Function generate_secure_token implementation.", "line_start": 151, "line_end": 164}, {"name": "hash_password Function", "description": "Function hash_password implementation.", "line_start": 165, "line_end": 183}, {"name": "verify_password Function", "description": "Function verify_password implementation.", "line_start": 184, "line_end": 189}, {"name": "EncryptionConfig Class", "description": "Class EncryptionConfig definition and methods.", "line_start": 28, "line_end": 38}, {"name": "AdvancedEncryption Class", "description": "Class AdvancedEncryption definition and methods.", "line_start": 37, "line_end": 124}], "content_hash": "a0df641278fb046b08ac1cd327510d24"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/auth.py
  line_count: 128
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "auth.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 119, "parameters": [{"name": "data", "type": "str, max_length: int = 1000"}, {"name": "max_length", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "str", "description": "Cleans and truncates input string to a specified maximum length to ensure safe processing.", "signature": "sanitize_input(data: str, max_length: int = 1000, max_length: int = 1000 = 1000) -> str"}], "classes": [{"name": "AuthConfig", "line": 20, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings related to authentication."}, {"name": "TokenPayload", "line": 30, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the data contained within an authentication token."}, {"name": "AuthManager", "line": 40, "inherits_from": [], "methods": [{"name": "__init__", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AuthConfig):"}], "is_async": false, "signature": "__init__(self, config: AuthConfig):)"}, {"name": "generate_jwt", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, email: str, roles: list[str]"}, {"name": "email", "type": "str, roles: list[str]"}, {"name": "roles", "type": "list[str]"}], "is_async": false, "return_type": "str", "description": "Generate a JWT token for the user.", "signature": "generate_jwt(self, user_id: str, email: str, roles: list[str], email: str, roles: list[str], roles: list[str]) -> str"}, {"name": "validate_jwt", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "token", "type": "str"}], "is_async": false, "return_type": "TokenPayload", "description": "Validate and decode a JWT token.", "signature": "validate_jwt(self, token: str) -> TokenPayload"}, {"name": "generate_api_key", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"opsvi\"", "default": "opsvi"}], "is_async": false, "return_type": "str", "description": "Generate a secure API key.", "signature": "generate_api_key(self, prefix: str = \"opsvi\" = opsvi) -> str"}, {"name": "hash_api_key", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, salt: Optional[str] = None"}, {"name": "salt", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Hash an API key for secure storage.", "signature": "hash_api_key(self, api_key: str, salt: Optional[str] = None, salt: Optional[str] = None = None) -> tuple[str, str]"}, {"name": "verify_api_key", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, stored_hash: str, salt: str"}, {"name": "stored_hash", "type": "str, salt: str"}, {"name": "salt", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verify an API key against its stored hash.", "signature": "verify_api_key(self, api_key: str, stored_hash: str, salt: str, stored_hash: str, salt: str, salt: str) -> bool"}, {"name": "encrypt_data", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Encrypt sensitive data.", "signature": "encrypt_data(self, data: str) -> str"}, {"name": "decrypt_data", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Decrypt sensitive data.", "signature": "decrypt_data(self, encrypted_data: str) -> str"}], "properties": [], "description": "Manages authentication processes including token generation, validation, and user session handling."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "secrets", "alias": null, "line": 11, "statement": "import secrets"}, {"module": "jwt", "alias": null, "line": 15, "statement": "import jwt"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "cryptography.fernet", "alias": null, "line": 16, "statement": "from cryptography.fernet import Fernet"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "secrets", "type": "import", "line": 11}, {"name": "jwt", "type": "import", "line": 15}, {"name": "from datetime import datetime", "type": "import", "line": 12}, {"name": "from datetime import timedelta", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "AuthConfig", "type": "class", "line": 20}, {"name": "TokenPayload", "type": "class", "line": 30}, {"name": "AuthManager", "type": "class", "line": 40}, {"name": "sanitize_input", "type": "function", "line": 119}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 119, "line_end": 124}, {"name": "AuthConfig Class", "description": "Class AuthConfig definition and methods.", "line_start": 20, "line_end": 30}, {"name": "TokenPayload Class", "description": "Class TokenPayload definition and methods.", "line_start": 30, "line_end": 40}, {"name": "AuthManager Class", "description": "Class AuthManager definition and methods.", "line_start": 40, "line_end": 113}], "content_hash": "809979b1ba2e0a140f7bbf6b5df5e9a6"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/validation.py
  line_count: 261
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 8 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 29, "parameters": [{"name": "data", "type": "Any, max_length: Optional[int] = None"}, {"name": "max_length", "type": "Optional[int] = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Cleans and trims input data to a safe string format, optionally limiting its length.", "signature": "sanitize_input(data: Any, max_length: Optional[int] = None, max_length: Optional[int] = None = None) -> str"}, {"name": "validate_email", "line": 59, "parameters": [{"name": "email", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the provided string is a valid email address format.", "signature": "validate_email(email: str) -> bool"}, {"name": "validate_url", "line": 73, "parameters": [{"name": "url", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if the given string is a properly formatted URL.", "signature": "validate_url(url: str) -> bool"}, {"name": "sanitize_sql_input", "line": 87, "parameters": [{"name": "value", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Escapes and cleans input to prevent SQL injection attacks.", "signature": "sanitize_sql_input(value: Any) -> str"}, {"name": "validate_json_schema", "line": 109, "parameters": [{"name": "data", "type": "Dict[str, Any], schema: Dict[str, Any]"}, {"name": "schema", "type": "Dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Validates data against a specified JSON schema to ensure structure and types.", "signature": "validate_json_schema(data: Dict[str, Any], schema: Dict[str, Any], schema: Dict[str, Any]) -> bool"}, {"name": "sanitize_filename", "line": 129, "parameters": [{"name": "filename", "type": "str"}], "is_async": false, "return_type": "str", "description": "Removes unsafe characters from filenames to ensure safe file handling.", "signature": "sanitize_filename(filename: str) -> str"}, {"name": "validate_phone_number", "line": 152, "parameters": [{"name": "phone", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verifies if the string is a valid phone number format.", "signature": "validate_phone_number(phone: str) -> bool"}, {"name": "sanitize_html", "line": 169, "parameters": [{"name": "html_content", "type": "str, allowed_tags: Optional[List[str]] = None"}, {"name": "allowed_tags", "type": "Optional[List[str]] = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Cleans HTML content by removing disallowed tags and attributes, allowing only specified tags.", "signature": "sanitize_html(html_content: str, allowed_tags: Optional[List[str]] = None, allowed_tags: Optional[List[str]] = None = None) -> str"}], "classes": [{"name": "ValidationError", "line": 19, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors encountered during validation processes."}, {"name": "SanitizationError", "line": 24, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors encountered during sanitization processes."}, {"name": "InputValidator", "line": 194, "inherits_from": [], "methods": [{"name": "__init__", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "description": "\n        Initialize the input validator.\n\n        Args:\n            config: Configuration options for validation\n        ", "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "validate_and_sanitize", "line": 208, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any, field_name: str, field_type: str = \"string\""}, {"name": "field_name", "type": "str, field_type: str = \"string\""}, {"name": "field_type", "type": "str = \"string\"", "default": "string"}], "is_async": false, "return_type": "Any", "description": "\n        Validate and sanitize input data based on field type.\n\n        Args:\n            data: Input data\n            field_name: Name of the field for error reporting\n            field_type: Type of field (string, email, url, etc.)\n\n        Returns:\n            Validated and sanitized data\n\n        Raises:\n            ValidationError: If validation fails\n        ", "signature": "validate_and_sanitize(self, data: Any, field_name: str, field_type: str = \"string\", field_name: str, field_type: str = \"string\", field_type: str = \"string\" = string) -> Any"}, {"name": "validate_required_fields", "line": 247, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Dict[str, Any], required_fields: List[str]"}, {"name": "required_fields", "type": "List[str]"}], "is_async": false, "return_type": "None", "description": "\n        Validate that all required fields are present and not empty.\n\n        Args:\n            data: Data dictionary to validate\n            required_fields: List of required field names\n\n        Raises:\n            ValidationError: If any required field is missing or empty\n        ", "signature": "validate_required_fields(self, data: Dict[str, Any], required_fields: List[str], required_fields: List[str]) -> None"}], "properties": [], "description": "Provides methods to validate various types of input data."}], "imports": [{"module": "re", "alias": null, "line": 11, "statement": "import re"}, {"module": "html", "alias": null, "line": 12, "statement": "import html"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "urllib.parse", "alias": null, "line": 14, "statement": "from urllib.parse import quote"}, {"module": "urllib.parse", "alias": null, "line": 14, "statement": "from urllib.parse import unquote"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 16, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "re", "type": "import", "line": 11}, {"name": "html", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from urllib.parse import quote", "type": "import", "line": 14}, {"name": "from urllib.parse import unquote", "type": "import", "line": 14}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 16}, {"name": "ValidationError", "type": "class", "line": 19}, {"name": "SanitizationError", "type": "class", "line": 24}, {"name": "sanitize_input", "type": "function", "line": 29}, {"name": "validate_email", "type": "function", "line": 59}, {"name": "validate_url", "type": "function", "line": 73}, {"name": "sanitize_sql_input", "type": "function", "line": 87}, {"name": "validate_json_schema", "type": "function", "line": 109}, {"name": "sanitize_filename", "type": "function", "line": 129}, {"name": "validate_phone_number", "type": "function", "line": 152}, {"name": "sanitize_html", "type": "function", "line": 169}, {"name": "InputValidator", "type": "class", "line": 194}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 29, "line_end": 58}, {"name": "validate_email Function", "description": "Function validate_email implementation.", "line_start": 59, "line_end": 72}, {"name": "validate_url Function", "description": "Function validate_url implementation.", "line_start": 73, "line_end": 86}, {"name": "sanitize_sql_input Function", "description": "Function sanitize_sql_input implementation.", "line_start": 87, "line_end": 108}, {"name": "validate_json_schema Function", "description": "Function validate_json_schema implementation.", "line_start": 109, "line_end": 128}, {"name": "sanitize_filename Function", "description": "Function sanitize_filename implementation.", "line_start": 129, "line_end": 151}, {"name": "validate_phone_number Function", "description": "Function validate_phone_number implementation.", "line_start": 152, "line_end": 168}, {"name": "sanitize_html Function", "description": "Function sanitize_html implementation.", "line_start": 169, "line_end": 193}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "SanitizationError Class", "description": "Class SanitizationError definition and methods.", "line_start": 24, "line_end": 34}, {"name": "InputValidator Class", "description": "Class InputValidator definition and methods.", "line_start": 194, "line_end": 250}], "content_hash": "dc8e9137a0a1433f3b209e0b893ba712"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/__init__.py
  line_count: 34
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitBreaker"}, {"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitBreakerConfig"}, {"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitState"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import RetryExecutor"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import RetryConfig"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import ExponentialBackoff"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import retry"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import Timeout"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import TimeoutConfig"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import TimeoutError"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import DeadlineContext"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import timeout_manager"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import with_timeout"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import wait_for"}], "constants": []}, "key_elements": [{"name": "from circuit_breaker import CircuitBreaker", "type": "import", "line": 9}, {"name": "from circuit_breaker import CircuitBreakerConfig", "type": "import", "line": 9}, {"name": "from circuit_breaker import CircuitState", "type": "import", "line": 9}, {"name": "from retry import RetryExecutor", "type": "import", "line": 10}, {"name": "from retry import RetryConfig", "type": "import", "line": 10}, {"name": "from retry import ExponentialBackoff", "type": "import", "line": 10}, {"name": "from retry import retry", "type": "import", "line": 10}, {"name": "from timeout import Timeout", "type": "import", "line": 11}, {"name": "from timeout import TimeoutConfig", "type": "import", "line": 11}, {"name": "from timeout import TimeoutError", "type": "import", "line": 11}, {"name": "from timeout import DeadlineContext", "type": "import", "line": 11}, {"name": "from timeout import timeout_manager", "type": "import", "line": 11}, {"name": "from timeout import with_timeout", "type": "import", "line": 11}, {"name": "from timeout import wait_for", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "fb5ee7859c33f01d4bc7126085add1ee"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/rate_limiter.py
  line_count: 490
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rate_limiter.py", "description": "Python module with 1 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "rate_limit", "line": 459, "parameters": [{"name": "name", "type": "str"}, {"name": "rate", "type": "int", "default": "100"}, {"name": "window", "type": "float", "default": "60.0"}, {"name": "strategy", "type": "RateLimitStrategy", "default": "RateLimitStrategy.TOKEN_BUCKET"}], "is_async": false, "description": "Decorator to apply rate limiting to a function based on the specified strategy, rate, and time window.", "signature": "rate_limit(name: str, rate: int = 100, window: float = 60.0, strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET)"}], "classes": [{"name": "RateLimitError", "line": 20, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a rate limit is exceeded."}, {"name": "RateLimitStrategy", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "TOKEN_BUCKET", "line": 25, "type": ""}, {"name": "SLIDING_WINDOW", "line": 26, "type": ""}, {"name": "FIXED_WINDOW", "line": 27, "type": ""}, {"name": "LEAKY_BUCKET", "line": 28, "type": ""}], "description": "Enumeration of available rate limiting strategies."}, {"name": "RateLimitConfig", "line": 34, "inherits_from": [], "methods": [], "properties": [], "description": "Configuration settings for rate limiting parameters."}, {"name": "TokenBucket", "line": 43, "inherits_from": [], "methods": [{"name": "__init__", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "capacity", "type": "int):"}], "is_async": false, "description": "\n        Initialize token bucket.\n\n        Args:\n            rate: Tokens per second\n            capacity: Maximum bucket capacity\n        ", "signature": "__init__(self, rate: int, capacity: int):)"}, {"name": "acquire", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "tokens", "type": "int = 1, timeout: Optional[float] = None", "default": "1"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire tokens from bucket.\n\n        Args:\n            tokens: Number of tokens to acquire\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if tokens acquired, False if timeout\n        ", "signature": "async acquire(self, tokens: int = 1, timeout: Optional[float] = None = 1, timeout: Optional[float] = None = None) -> bool"}, {"name": "_refill_tokens", "line": 98, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Refill tokens based on elapsed time.", "signature": "async _refill_tokens(self) -> None"}, {"name": "available_tokens", "line": 108, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get number of available tokens.", "signature": "available_tokens(self) -> float"}], "properties": [], "description": "Implements the token bucket algorithm for rate limiting."}, {"name": "SlidingWindow", "line": 113, "inherits_from": [], "methods": [{"name": "__init__", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "window", "type": "float):"}], "is_async": false, "description": "\n        Initialize sliding window.\n\n        Args:\n            rate: Maximum requests per window\n            window: Time window in seconds\n        ", "signature": "__init__(self, rate: int, window: float):)"}, {"name": "acquire", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: Optional[float] = None = None) -> bool"}, {"name": "current_requests", "line": 165, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get current number of requests in window.", "signature": "current_requests(self) -> int"}], "properties": [], "description": "Implements the sliding window algorithm for rate limiting."}, {"name": "FixedWindow", "line": 172, "inherits_from": [], "methods": [{"name": "__init__", "line": 175, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "window", "type": "float):"}], "is_async": false, "description": "\n        Initialize fixed window.\n\n        Args:\n            rate: Maximum requests per window\n            window: Time window in seconds\n        ", "signature": "__init__(self, rate: int, window: float):)"}, {"name": "acquire", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: Optional[float] = None = None) -> bool"}, {"name": "remaining_requests", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get remaining requests in current window.", "signature": "remaining_requests(self) -> int"}], "properties": [], "description": "Implements the fixed window algorithm for rate limiting."}, {"name": "LeakyBucket", "line": 231, "inherits_from": [], "methods": [{"name": "__init__", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "capacity", "type": "int):"}], "is_async": false, "description": "\n        Initialize leaky bucket.\n\n        Args:\n            rate: Requests per second (leak rate)\n            capacity: Maximum bucket capacity\n        ", "signature": "__init__(self, rate: int, capacity: int):)"}, {"name": "acquire", "line": 248, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: Optional[float] = None = None) -> bool"}, {"name": "_leak", "line": 284, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Leak water from bucket based on elapsed time.", "signature": "async _leak(self) -> None"}, {"name": "current_level", "line": 294, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get current bucket level.", "signature": "current_level(self) -> float"}], "properties": [], "description": "Implements the leaky bucket algorithm for rate limiting."}, {"name": "RateLimiter", "line": 299, "inherits_from": [], "methods": [{"name": "__init__", "line": 302, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RateLimitConfig):"}], "is_async": false, "description": "\n        Initialize rate limiter.\n\n        Args:\n            config: Rate limiter configuration\n        ", "signature": "__init__(self, config: RateLimitConfig):)"}, {"name": "acquire", "line": 322, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: Optional[float] = None = None) -> bool"}, {"name": "__aenter__", "line": 334, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Async context manager entry.", "signature": "async __aenter__(self)"}, {"name": "__aexit__", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": true, "description": "Async context manager exit.", "signature": "async __aexit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Manages rate limiting logic using a chosen strategy."}, {"name": "DistributedRateLimiter", "line": 345, "inherits_from": [], "methods": [{"name": "__init__", "line": 348, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RateLimitConfig"}, {"name": "storage_backend", "type": "Any", "default": "None"}], "is_async": false, "description": "\n        Initialize distributed rate limiter.\n\n        Args:\n            config: Rate limiter configuration\n            storage_backend: Storage backend for distributed state\n        ", "signature": "__init__(self, config: RateLimitConfig, storage_backend: Any = None)"}, {"name": "acquire", "line": 360, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, timeout: Optional[float] = None"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission for a specific key.\n\n        Args:\n            key: Rate limiting key (e.g., user ID, IP address)\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, key: str, timeout: Optional[float] = None, timeout: Optional[float] = None = None) -> bool"}], "properties": [], "description": "Handles rate limiting across distributed systems."}, {"name": "RateLimitManager", "line": 381, "inherits_from": [], "methods": [{"name": "__init__", "line": 384, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize rate limit manager.", "signature": "__init__(self)"}, {"name": "add_limiter", "line": 389, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: RateLimitConfig"}, {"name": "config", "type": "RateLimitConfig"}], "is_async": false, "return_type": "RateLimiter", "description": "\n        Add a rate limiter.\n\n        Args:\n            name: Limiter name\n            config: Rate limiter configuration\n\n        Returns:\n            Created rate limiter\n        ", "signature": "add_limiter(self, name: str, config: RateLimitConfig, config: RateLimitConfig) -> RateLimiter"}, {"name": "add_distributed_limiter", "line": 404, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "RateLimitConfig"}, {"name": "storage_backend", "type": "Any", "default": "None"}], "is_async": false, "return_type": "DistributedRateLimiter", "description": "\n        Add a distributed rate limiter.\n\n        Args:\n            name: Limiter name\n            config: Rate limiter configuration\n            storage_backend: Storage backend for distributed state\n\n        Returns:\n            Created distributed rate limiter\n        ", "signature": "add_distributed_limiter(self, name: str, config: RateLimitConfig, storage_backend: Any = None) -> DistributedRateLimiter"}, {"name": "get_limiter", "line": 425, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[RateLimiter]", "description": "Get rate limiter by name.", "signature": "get_limiter(self, name: str) -> Optional[RateLimiter]"}, {"name": "get_distributed_limiter", "line": 429, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[DistributedRateLimiter]", "description": "Get distributed rate limiter by name.", "signature": "get_distributed_limiter(self, name: str) -> Optional[DistributedRateLimiter]"}, {"name": "acquire", "line": 433, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, timeout: Optional[float] = None"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission from named limiter.\n\n        Args:\n            name: Limiter name\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, name: str, timeout: Optional[float] = None, timeout: Optional[float] = None = None) -> bool"}], "properties": [], "description": "Coordinates multiple rate limiters and manages their lifecycle."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 17, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 17}, {"name": "RateLimitError", "type": "class", "line": 20}, {"name": "RateLimitStrategy", "type": "class", "line": 25}, {"name": "RateLimitConfig", "type": "class", "line": 34}, {"name": "TokenBucket", "type": "class", "line": 43}, {"name": "SlidingWindow", "type": "class", "line": 113}, {"name": "FixedWindow", "type": "class", "line": 172}, {"name": "LeakyBucket", "type": "class", "line": 231}, {"name": "RateLimiter", "type": "class", "line": 299}, {"name": "DistributedRateLimiter", "type": "class", "line": 345}, {"name": "RateLimitManager", "type": "class", "line": 381}, {"name": "rate_limit", "type": "function", "line": 459}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "rate_limit Function", "description": "Function rate_limit implementation.", "line_start": 459, "line_end": 464}, {"name": "RateLimitError Class", "description": "Class RateLimitError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "RateLimitStrategy Class", "description": "Class RateLimitStrategy definition and methods.", "line_start": 25, "line_end": 35}, {"name": "RateLimitConfig Class", "description": "Class RateLimitConfig definition and methods.", "line_start": 34, "line_end": 44}, {"name": "TokenBucket Class", "description": "Class TokenBucket definition and methods.", "line_start": 43, "line_end": 111}, {"name": "SlidingWindow Class", "description": "Class SlidingWindow definition and methods.", "line_start": 113, "line_end": 168}, {"name": "FixedWindow Class", "description": "Class FixedWindow definition and methods.", "line_start": 172, "line_end": 229}, {"name": "LeakyBucket Class", "description": "Class LeakyBucket definition and methods.", "line_start": 231, "line_end": 297}, {"name": "RateLimiter Class", "description": "Class RateLimiter definition and methods.", "line_start": 299, "line_end": 343}, {"name": "DistributedRateLimiter Class", "description": "Class DistributedRateLimiter definition and methods.", "line_start": 345, "line_end": 363}, {"name": "RateLimitManager Class", "description": "Class RateLimitManager definition and methods.", "line_start": 381, "line_end": 436}], "content_hash": "511985f2044cd86f58ef9ad761404ae9"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/fallback.py
  line_count: 537
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "fallback.py", "description": "Python module with 1 functions and 12 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "fallback", "line": 511, "parameters": [{"name": "strategy", "type": "FallbackStrategy", "default": "FallbackStrategy.FAST_FAIL"}], "is_async": false, "description": "Creates and configures a fallback mechanism based on the specified strategy and additional parameters.", "signature": "fallback(strategy: FallbackStrategy = FallbackStrategy.FAST_FAIL, **config_kwargs)"}], "classes": [{"name": "FallbackError", "line": 19, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors that occur during the fallback process."}, {"name": "FallbackStrategy", "line": 24, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "FAST_FAIL", "line": 24, "type": ""}, {"name": "RETRY", "line": 25, "type": ""}, {"name": "CACHE", "line": 26, "type": ""}, {"name": "DEFAULT_VALUE", "line": 27, "type": ""}, {"name": "ALTERNATIVE_SERVICE", "line": 28, "type": ""}, {"name": "DEGRADED_MODE", "line": 29, "type": ""}], "description": "Defines various strategies for handling fallback scenarios."}, {"name": "FallbackConfig", "line": 35, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for fallback behavior."}, {"name": "FallbackHandler", "line": 48, "inherits_from": [], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig):"}], "is_async": false, "description": "\n        Initialize fallback handler.\n\n        Args:\n            config: Fallback configuration\n        ", "signature": "__init__(self, config: FallbackConfig):)"}, {"name": "execute", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fallback strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or fallback value\n\n        Raises:\n            FallbackError: If all fallback strategies fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Base class for handling fallback logic with common interface methods."}, {"name": "FastFailHandler", "line": 78, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 81, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fast fail strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            FallbackError: If function fails\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Implements a fallback handler that immediately fails without retries."}, {"name": "RetryHandler", "line": 112, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with retry strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            FallbackError: If all retry attempts fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handles fallback by retrying the operation according to configured policies."}, {"name": "CacheHandler", "line": 155, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig):"}], "is_async": false, "description": "Initialize cache handler.", "signature": "__init__(self, config: FallbackConfig):)"}, {"name": "execute", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with cache strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or cached value\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages fallback by caching results and serving cached data when needed."}, {"name": "DefaultValueHandler", "line": 219, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with default value strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or default value\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Provides a default value as a fallback when the primary operation fails."}, {"name": "AlternativeServiceHandler", "line": 250, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 253, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig"}, {"name": "services", "type": "Dict[str, Callable]):"}], "is_async": false, "description": "\n        Initialize alternative service handler.\n\n        Args:\n            config: Fallback configuration\n            services: Dictionary of service name to function mapping\n        ", "signature": "__init__(self, config: FallbackConfig, services: Dict[str, Callable]):)"}, {"name": "execute", "line": 264, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with alternative service strategy.\n\n        Args:\n            func: Primary function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from primary or alternative service\n\n        Raises:\n            FallbackError: If all services fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Routes fallback requests to an alternative service endpoint."}, {"name": "DegradedModeHandler", "line": 316, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 319, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig"}, {"name": "degraded_func", "type": "Callable):"}], "is_async": false, "description": "\n        Initialize degraded mode handler.\n\n        Args:\n            config: Fallback configuration\n            degraded_func: Function to execute in degraded mode\n        ", "signature": "__init__(self, config: FallbackConfig, degraded_func: Callable):)"}, {"name": "execute", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with degraded mode strategy.\n\n        Args:\n            func: Primary function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from primary or degraded function\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handles fallback by switching the system into a degraded operational mode."}, {"name": "FallbackChain", "line": 369, "inherits_from": [], "methods": [{"name": "__init__", "line": 372, "parameters": [{"name": "self", "type": "self"}, {"name": "handlers", "type": "List[FallbackHandler]):"}], "is_async": false, "description": "\n        Initialize fallback chain.\n\n        Args:\n            handlers: List of fallback handlers in order of preference\n        ", "signature": "__init__(self, handlers: List[FallbackHandler]):)"}, {"name": "execute", "line": 381, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fallback chain.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from first successful handler\n\n        Raises:\n            FallbackError: If all handlers fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages a sequence of fallback handlers to be executed in order."}, {"name": "FallbackManager", "line": 408, "inherits_from": [], "methods": [{"name": "__init__", "line": 411, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize fallback manager.", "signature": "__init__(self)"}, {"name": "add_handler", "line": 416, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, handler: FallbackHandler"}, {"name": "handler", "type": "FallbackHandler"}], "is_async": false, "return_type": "None", "description": "\n        Add fallback handler.\n\n        Args:\n            name: Handler name\n            handler: Fallback handler\n        ", "signature": "add_handler(self, name: str, handler: FallbackHandler, handler: FallbackHandler) -> None"}, {"name": "create_chain", "line": 426, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, handler_names: List[str]"}, {"name": "handler_names", "type": "List[str]"}], "is_async": false, "return_type": "FallbackChain", "description": "\n        Create fallback chain from handler names.\n\n        Args:\n            name: Chain name\n            handler_names: List of handler names in order\n\n        Returns:\n            Created fallback chain\n        ", "signature": "create_chain(self, name: str, handler_names: List[str], handler_names: List[str]) -> FallbackChain"}, {"name": "get_handler", "line": 442, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[FallbackHandler]", "description": "Get fallback handler by name.", "signature": "get_handler(self, name: str) -> Optional[FallbackHandler]"}, {"name": "get_chain", "line": 446, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[FallbackChain]", "description": "Get fallback chain by name.", "signature": "get_chain(self, name: str) -> Optional[FallbackChain]"}, {"name": "execute_with_handler", "line": 450, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with named handler.\n\n        Args:\n            name: Handler name\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ValueError: If handler not found\n        ", "signature": "async execute_with_handler(self, name: str, func: Callable[..., T], *args, **kwargs) -> T"}, {"name": "execute_with_chain", "line": 478, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with named chain.\n\n        Args:\n            name: Chain name\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ValueError: If chain not found\n        ", "signature": "async execute_with_chain(self, name: str, func: Callable[..., T], *args, **kwargs) -> T"}], "properties": [], "description": "Coordinates multiple fallback handlers and manages the overall fallback process."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 16, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 45, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Callable", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import List", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import TypeVar", "type": "import", "line": 12}, {"name": "from typing import Union", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 16}, {"name": "FallbackError", "type": "class", "line": 19}, {"name": "FallbackStrategy", "type": "class", "line": 24}, {"name": "FallbackConfig", "type": "class", "line": 35}, {"name": "T", "type": "constant", "line": 45}, {"name": "FallbackHandler", "type": "class", "line": 48}, {"name": "FastFailHandler", "type": "class", "line": 78}, {"name": "RetryHandler", "type": "class", "line": 112}, {"name": "CacheHandler", "type": "class", "line": 155}, {"name": "DefaultValueHandler", "type": "class", "line": 219}, {"name": "AlternativeServiceHandler", "type": "class", "line": 250}, {"name": "DegradedModeHandler", "type": "class", "line": 316}, {"name": "FallbackChain", "type": "class", "line": 369}, {"name": "FallbackManager", "type": "class", "line": 408}, {"name": "fallback", "type": "function", "line": 511}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "fallback Function", "description": "Function fallback implementation.", "line_start": 511, "line_end": 516}, {"name": "FallbackError Class", "description": "Class FallbackError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "FallbackStrategy Class", "description": "Class FallbackStrategy definition and methods.", "line_start": 24, "line_end": 34}, {"name": "FallbackConfig Class", "description": "Class FallbackConfig definition and methods.", "line_start": 35, "line_end": 45}, {"name": "FallbackHandler Class", "description": "Class FallbackHandler definition and methods.", "line_start": 48, "line_end": 63}, {"name": "FastFailHandler Class", "description": "Class FastFailHandler definition and methods.", "line_start": 78, "line_end": 84}, {"name": "RetryHandler Class", "description": "Class RetryHandler definition and methods.", "line_start": 112, "line_end": 118}, {"name": "CacheHandler Class", "description": "Class CacheHandler definition and methods.", "line_start": 155, "line_end": 167}, {"name": "DefaultValueHandler Class", "description": "Class DefaultValueHandler definition and methods.", "line_start": 219, "line_end": 225}, {"name": "AlternativeServiceHandler Class", "description": "Class AlternativeServiceHandler definition and methods.", "line_start": 250, "line_end": 267}, {"name": "DegradedModeHandler Class", "description": "Class DegradedModeHandler definition and methods.", "line_start": 316, "line_end": 333}, {"name": "FallbackChain Class", "description": "Class FallbackChain definition and methods.", "line_start": 369, "line_end": 384}, {"name": "FallbackManager Class", "description": "Class FallbackManager definition and methods.", "line_start": 408, "line_end": 481}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 45, "line_end": 45}], "content_hash": "3ee04013c93f4ccd5bfbaccf6604f24e"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/circuit_breaker.py
  line_count: 123
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "circuit_breaker.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CircuitState", "line": 19, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 20, "type": ""}, {"name": "OPEN", "line": 21, "type": ""}, {"name": "HALF_OPEN", "line": 22, "type": ""}], "description": "Represents the possible states of a circuit breaker."}, {"name": "CircuitBreakerConfig", "line": 28, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a circuit breaker."}, {"name": "CircuitBreaker", "line": 38, "inherits_from": [], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CircuitBreakerConfig):"}], "is_async": false, "signature": "__init__(self, config: CircuitBreakerConfig):)"}, {"name": "call", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with circuit breaker protection.", "signature": "async call(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_check_state", "line": 86, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Check and update circuit breaker state.", "signature": "async _check_state(self) -> None"}, {"name": "_on_success", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle successful call.", "signature": "async _on_success(self) -> None"}, {"name": "_on_failure", "line": 104, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle failed call.", "signature": "async _on_failure(self) -> None"}, {"name": "get_state", "line": 118, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current circuit breaker state information.", "signature": "get_state(self) -> dict[str, Any]"}], "properties": [], "description": "Implements the circuit breaker pattern to manage fault tolerance in service calls."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 12, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 16, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from dataclasses import dataclass", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Callable", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 14}, {"name": "T", "type": "constant", "line": 16}, {"name": "CircuitState", "type": "class", "line": 19}, {"name": "CircuitBreakerConfig", "type": "class", "line": 28}, {"name": "CircuitBreaker", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "CircuitState Class", "description": "Class CircuitState definition and methods.", "line_start": 19, "line_end": 29}, {"name": "CircuitBreakerConfig Class", "description": "Class CircuitBreakerConfig definition and methods.", "line_start": 28, "line_end": 38}, {"name": "CircuitBreaker Class", "description": "Class CircuitBreaker definition and methods.", "line_start": 38, "line_end": 121}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 16, "line_end": 16}], "content_hash": "e02907b4f34416981ee4cb0b0f54b3da"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/retry.py
  line_count: 132
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retry.py", "description": "Python module with 1 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "retry", "line": 121, "parameters": [{"name": "config", "type": "Optional[RetryConfig]", "default": "None"}], "is_async": false, "description": "Retries a function execution based on the provided retry configuration.", "signature": "retry(config: Optional[RetryConfig] = None)"}], "classes": [{"name": "BackoffStrategy", "line": 20, "inherits_from": ["ABC):"], "methods": [{"name": "get_delay", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Get delay for the given attempt number.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Defines the interface for backoff strategies used to calculate delay intervals between retries."}, {"name": "ExponentialBackoff", "line": 29, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 32, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True)"}, {"name": "get_delay", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate exponential backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements an exponential backoff strategy with optional jitter for retry delays."}, {"name": "RetryConfig", "line": 57, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 65, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__post_init__(self)"}], "properties": [], "description": "Holds configuration settings for retry behavior including max attempts and backoff strategy."}, {"name": "RetryExecutor", "line": 70, "inherits_from": [], "methods": [{"name": "__init__", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RetryConfig):"}], "is_async": false, "signature": "__init__(self, config: RetryConfig):)"}, {"name": "execute", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with retry logic.", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages the execution of retry logic, handling retries according to the specified configuration."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "random", "alias": null, "line": 10, "statement": "import random"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "functools", "alias": null, "line": 14, "statement": "from functools import wraps"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 17, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "random", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from functools import wraps", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import Callable", "type": "import", "line": 15}, {"name": "from typing import Optional", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "T", "type": "constant", "line": 17}, {"name": "BackoffStrategy", "type": "class", "line": 20}, {"name": "ExponentialBackoff", "type": "class", "line": 29}, {"name": "RetryConfig", "type": "class", "line": 57}, {"name": "RetryExecutor", "type": "class", "line": 70}, {"name": "retry", "type": "function", "line": 121}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "retry Function", "description": "Function retry implementation.", "line_start": 121, "line_end": 126}, {"name": "BackoffStrategy Class", "description": "Class BackoffStrategy definition and methods.", "line_start": 20, "line_end": 27}, {"name": "ExponentialBackoff Class", "description": "Class ExponentialBackoff definition and methods.", "line_start": 29, "line_end": 47}, {"name": "RetryConfig Class", "description": "Class RetryConfig definition and methods.", "line_start": 57, "line_end": 68}, {"name": "RetryExecutor Class", "description": "Class RetryExecutor definition and methods.", "line_start": 70, "line_end": 116}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 17, "line_end": 17}], "content_hash": "41c872ca580ed94a290bae80de206e0d"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/bulkhead.py
  line_count: 372
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "bulkhead.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "BulkheadError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to bulkhead operations."}, {"name": "ResourceExhaustedError", "line": 26, "inherits_from": ["BulkheadError):"], "methods": [], "properties": [], "description": "Exception indicating that a resource limit has been exceeded."}, {"name": "BulkheadState", "line": 31, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 31, "type": ""}, {"name": "OPEN", "line": 32, "type": ""}, {"name": "HALF_OPEN", "line": 33, "type": ""}], "description": "Represents the current state of a bulkhead, tracking resource usage and availability."}, {"name": "BulkheadConfig", "line": 39, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a bulkhead, such as limits and timeouts."}, {"name": "Bulkhead", "line": 52, "inherits_from": [], "methods": [{"name": "__init__", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "BulkheadConfig):"}], "is_async": false, "description": "\n        Initialize bulkhead.\n\n        Args:\n            config: Bulkhead configuration\n        ", "signature": "__init__(self, config: BulkheadConfig):)"}, {"name": "execute", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with bulkhead protection.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ResourceExhaustedError: If bulkhead is exhausted\n            BulkheadError: If execution fails\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_with_timeout", "line": 99, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T]"}], "is_async": true, "return_type": "T", "description": "Execute function with timeout.", "signature": "async _execute_with_timeout(self, func: Callable[..., T], *args, **kwargs) -> T"}, {"name": "_record_failure", "line": 119, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Record a failure and potentially close the bulkhead.", "signature": "async _record_failure(self) -> None"}, {"name": "_schedule_recovery", "line": 130, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Schedule bulkhead recovery.", "signature": "async _schedule_recovery(self) -> None"}, {"name": "reset", "line": 137, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset bulkhead to open state.", "signature": "async reset(self) -> None"}, {"name": "is_open", "line": 144, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if bulkhead is open.", "signature": "is_open(self) -> bool"}, {"name": "is_closed", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if bulkhead is closed.", "signature": "is_closed(self) -> bool"}, {"name": "available_permits", "line": 154, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of available permits.", "signature": "available_permits(self) -> int"}], "properties": [], "description": "Manages access to a limited resource pool to prevent system overload."}, {"name": "ThreadPoolBulkhead", "line": 159, "inherits_from": [], "methods": [{"name": "__init__", "line": 162, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "BulkheadConfig):"}], "is_async": false, "description": "\n        Initialize thread pool bulkhead.\n\n        Args:\n            config: Bulkhead configuration\n        ", "signature": "__init__(self, config: BulkheadConfig):)"}, {"name": "execute", "line": 177, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": false, "return_type": "Future[T]", "description": "\n        Execute function in thread pool.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Future containing the result\n\n        Raises:\n            ResourceExhaustedError: If thread pool is exhausted\n        ", "signature": "execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> Future[T]"}, {"name": "_on_task_complete", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "future", "type": "Future"}], "is_async": false, "return_type": "None", "description": "Callback when task completes.", "signature": "_on_task_complete(self, future: Future) -> None"}, {"name": "shutdown", "line": 211, "parameters": [{"name": "self", "type": "self"}, {"name": "wait", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "None", "description": "\n        Shutdown thread pool.\n\n        Args:\n            wait: Whether to wait for tasks to complete\n        ", "signature": "shutdown(self, wait: bool = True = True) -> None"}, {"name": "active_task_count", "line": 221, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of active tasks.", "signature": "active_task_count(self) -> int"}], "properties": [], "description": "Implements a bulkhead using a thread pool to isolate and limit concurrent tasks."}, {"name": "ResourceLimiter", "line": 227, "inherits_from": [], "methods": [{"name": "__init__", "line": 230, "parameters": [{"name": "self", "type": "self"}, {"name": "max_resources", "type": "int):"}], "is_async": false, "description": "\n        Initialize resource limiter.\n\n        Args:\n            max_resources: Maximum number of resources\n        ", "signature": "__init__(self, max_resources: int):)"}, {"name": "acquire", "line": 242, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "Optional[float] = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire a resource.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if resource acquired, False if timeout\n        ", "signature": "async acquire(self, timeout: Optional[float] = None = None) -> bool"}, {"name": "release", "line": 274, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Release a resource.", "signature": "async release(self) -> None"}, {"name": "available_resources", "line": 286, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of available resources.", "signature": "available_resources(self) -> int"}, {"name": "utilization", "line": 291, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get resource utilization percentage.", "signature": "utilization(self) -> float"}], "properties": [], "description": "Controls and enforces limits on resource usage to maintain system stability."}, {"name": "IsolationManager", "line": 296, "inherits_from": [], "methods": [{"name": "__init__", "line": 299, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize isolation manager.", "signature": "__init__(self)"}, {"name": "add_bulkhead", "line": 305, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: BulkheadConfig"}, {"name": "config", "type": "BulkheadConfig"}], "is_async": false, "return_type": "Bulkhead", "description": "\n        Add a bulkhead.\n\n        Args:\n            name: Bulkhead name\n            config: Bulkhead configuration\n\n        Returns:\n            Created bulkhead\n        ", "signature": "add_bulkhead(self, name: str, config: BulkheadConfig, config: BulkheadConfig) -> Bulkhead"}, {"name": "add_thread_pool", "line": 320, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: BulkheadConfig"}, {"name": "config", "type": "BulkheadConfig"}], "is_async": false, "return_type": "ThreadPoolBulkhead", "description": "\n        Add a thread pool bulkhead.\n\n        Args:\n            name: Thread pool name\n            config: Bulkhead configuration\n\n        Returns:\n            Created thread pool bulkhead\n        ", "signature": "add_thread_pool(self, name: str, config: BulkheadConfig, config: BulkheadConfig) -> ThreadPoolBulkhead"}, {"name": "add_resource_limiter", "line": 335, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, max_resources: int"}, {"name": "max_resources", "type": "int"}], "is_async": false, "return_type": "ResourceLimiter", "description": "\n        Add a resource limiter.\n\n        Args:\n            name: Limiter name\n            max_resources: Maximum resources\n\n        Returns:\n            Created resource limiter\n        ", "signature": "add_resource_limiter(self, name: str, max_resources: int, max_resources: int) -> ResourceLimiter"}, {"name": "get_bulkhead", "line": 350, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[Bulkhead]", "description": "Get bulkhead by name.", "signature": "get_bulkhead(self, name: str) -> Optional[Bulkhead]"}, {"name": "get_thread_pool", "line": 354, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[ThreadPoolBulkhead]", "description": "Get thread pool by name.", "signature": "get_thread_pool(self, name: str) -> Optional[ThreadPoolBulkhead]"}, {"name": "get_resource_limiter", "line": 358, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[ResourceLimiter]", "description": "Get resource limiter by name.", "signature": "get_resource_limiter(self, name: str) -> Optional[ResourceLimiter]"}, {"name": "reset_all", "line": 362, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset all bulkheads.", "signature": "async reset_all(self) -> None"}, {"name": "shutdown_all", "line": 367, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Shutdown all thread pools.", "signature": "shutdown_all(self) -> None"}], "properties": [], "description": "Coordinates isolation mechanisms to ensure fault containment and resource segregation."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "threading", "alias": null, "line": 12, "statement": "import threading"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "concurrent.futures", "alias": null, "line": 14, "statement": "from concurrent.futures import ThreadPoolExecutor"}, {"module": "concurrent.futures", "alias": null, "line": 14, "statement": "from concurrent.futures import Future"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 49, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "threading", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Callable", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import TypeVar", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from concurrent.futures import ThreadPoolExecutor", "type": "import", "line": 14}, {"name": "from concurrent.futures import Future", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "BulkheadError", "type": "class", "line": 21}, {"name": "ResourceExhaustedError", "type": "class", "line": 26}, {"name": "BulkheadState", "type": "class", "line": 31}, {"name": "BulkheadConfig", "type": "class", "line": 39}, {"name": "T", "type": "constant", "line": 49}, {"name": "Bulkhead", "type": "class", "line": 52}, {"name": "ThreadPoolBulkhead", "type": "class", "line": 159}, {"name": "ResourceLimiter", "type": "class", "line": 227}, {"name": "IsolationManager", "type": "class", "line": 296}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "BulkheadError Class", "description": "Class BulkheadError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "ResourceExhaustedError Class", "description": "Class ResourceExhaustedError definition and methods.", "line_start": 26, "line_end": 36}, {"name": "BulkheadState Class", "description": "Class BulkheadState definition and methods.", "line_start": 31, "line_end": 41}, {"name": "BulkheadConfig Class", "description": "Class BulkheadConfig definition and methods.", "line_start": 39, "line_end": 49}, {"name": "Bulkhead Class", "description": "Class Bulkhead definition and methods.", "line_start": 52, "line_end": 157}, {"name": "ThreadPoolBulkhead Class", "description": "Class ThreadPoolBulkhead definition and methods.", "line_start": 159, "line_end": 224}, {"name": "ResourceLimiter Class", "description": "Class ResourceLimiter definition and methods.", "line_start": 227, "line_end": 294}, {"name": "IsolationManager Class", "description": "Class IsolationManager definition and methods.", "line_start": 296, "line_end": 370}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 49, "line_end": 49}], "content_hash": "ad349c69d84b61e7a42942b50a919639"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/timeout.py
  line_count: 212
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "timeout.py", "description": "Python module with 2 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "with_timeout", "line": 188, "parameters": [{"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str | None", "default": "None"}], "is_async": false, "description": "Context manager to apply a timeout to a block of code or operation.", "signature": "with_timeout(timeout: float | None = None, operation: str | None = None)"}, {"name": "wait_for", "line": 198, "parameters": [{"name": "coro", "type": "Awaitable[T]"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "return_type": "T", "description": "Asynchronously wait for a coroutine to complete within a specified timeout period.", "signature": "async wait_for(coro: Awaitable[T], timeout: float, operation: str = operation) -> T"}], "classes": [{"name": "TimeoutConfig", "line": 25, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for managing timeout behavior."}, {"name": "TimeoutError", "line": 33, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": false, "signature": "__init__(self, timeout: float, operation: str = operation)"}], "properties": [], "description": "Exception raised when an operation exceeds the allowed timeout duration."}, {"name": "Timeout", "line": 42, "inherits_from": [], "methods": [{"name": "__init__", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TimeoutConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: TimeoutConfig | None = None)"}, {"name": "timeout_context", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "description": "Async context manager for timeout operations.\n\n        Args:\n            timeout: Timeout in seconds\n            operation: Operation name for error messages\n\n        Raises:\n            TimeoutError: If operation times out\n        ", "signature": "async timeout_context(self, timeout: float, operation: str = operation)"}, {"name": "run_with_timeout", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "coro", "type": "Awaitable[T]"}, {"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "return_type": "T", "description": "Run coroutine with timeout.\n\n        Args:\n            coro: Coroutine to run\n            timeout: Timeout in seconds, uses default if None\n            operation: Operation name for error messages\n\n        Returns:\n            Result of the coroutine\n\n        Raises:\n            TimeoutError: If operation times out\n        ", "signature": "async run_with_timeout(self, coro: Awaitable[T], timeout: float | None = None, operation: str = operation) -> T"}, {"name": "timeout_decorator", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str | None", "default": "None"}], "is_async": false, "description": "Decorator to add timeout to async functions.\n\n        Args:\n            timeout: Timeout in seconds, uses default if None\n            operation: Operation name, uses function name if None\n        ", "signature": "timeout_decorator(self, timeout: float | None = None, operation: str | None = None)"}], "properties": [], "description": "Utility class for handling timeout logic and enforcement."}, {"name": "DeadlineContext", "line": 139, "inherits_from": [], "methods": [{"name": "__init__", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "deadline", "type": "float):"}], "is_async": false, "signature": "__init__(self, deadline: float):)"}, {"name": "remaining_time", "line": 146, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get remaining time until deadline.\n\n        Returns:\n            Remaining seconds, 0 if deadline passed\n        ", "signature": "remaining_time(self) -> float"}, {"name": "is_expired", "line": 155, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if deadline has passed.\n\n        Returns:\n            True if deadline has passed\n        ", "signature": "is_expired(self) -> bool"}, {"name": "timeout_remaining", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "description": "Create timeout context for remaining time.\n\n        Args:\n            operation: Operation name for error messages\n\n        Raises:\n            TimeoutError: If deadline has passed or operation times out\n        ", "signature": "async timeout_remaining(self, operation: str = operation)"}], "properties": [], "description": "Context manager that tracks and enforces operation deadlines."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "contextlib", "alias": null, "line": 13, "statement": "from contextlib import asynccontextmanager"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Awaitable"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import TypeVar"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 18, "statement": "from observability import get_logger"}], "constants": [{"name": "T", "line": 22, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Awaitable", "type": "import", "line": 14}, {"name": "from typing import Callable", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "from observability import get_logger", "type": "import", "line": 18}, {"name": "T", "type": "constant", "line": 22}, {"name": "TimeoutConfig", "type": "class", "line": 25}, {"name": "TimeoutError", "type": "class", "line": 33}, {"name": "Timeout", "type": "class", "line": 42}, {"name": "DeadlineContext", "type": "class", "line": 139}, {"name": "with_timeout", "type": "function", "line": 188}, {"name": "wait_for", "type": "function", "line": 198}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "with_timeout Function", "description": "Function with_timeout implementation.", "line_start": 188, "line_end": 197}, {"name": "wait_for Function", "description": "Function wait_for implementation.", "line_start": 198, "line_end": 203}, {"name": "TimeoutConfig Class", "description": "Class TimeoutConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "TimeoutError Class", "description": "Class TimeoutError definition and methods.", "line_start": 33, "line_end": 39}, {"name": "Timeout Class", "description": "Class Timeout definition and methods.", "line_start": 42, "line_end": 121}, {"name": "DeadlineContext Class", "description": "Class DeadlineContext definition and methods.", "line_start": 139, "line_end": 167}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 22, "line_end": 22}], "content_hash": "52a01aaa24895e7f32e9d424e1fe56f5"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/__init__.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import foundation_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import auth_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import auth_manager"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import circuit_breaker_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import circuit_breaker"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import mock_async_function"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import mock_sync_function"}], "constants": []}, "key_elements": [{"name": "from fixtures import foundation_config", "type": "import", "line": 9}, {"name": "from fixtures import auth_config", "type": "import", "line": 9}, {"name": "from fixtures import auth_manager", "type": "import", "line": 9}, {"name": "from fixtures import circuit_breaker_config", "type": "import", "line": 9}, {"name": "from fixtures import circuit_breaker", "type": "import", "line": 9}, {"name": "from fixtures import mock_async_function", "type": "import", "line": 9}, {"name": "from fixtures import mock_sync_function", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "198f9f2b28325185cda4f37e891a75f7"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
  line_count: 357
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "assertions.py", "description": "Python module with 0 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AsyncAssertions", "line": 19, "inherits_from": [], "methods": [{"name": "assert_async_called_with", "line": 23, "parameters": [{"name": "mock", "type": "AsyncMock, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called with specific arguments.", "signature": "async assert_async_called_with(mock: AsyncMock, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_async_called_once", "line": 28, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called exactly once.", "signature": "async assert_async_called_once(mock: AsyncMock) -> None"}, {"name": "assert_async_not_called", "line": 33, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was not called.", "signature": "async assert_async_not_called(mock: AsyncMock) -> None"}, {"name": "assert_async_called_times", "line": 38, "parameters": [{"name": "mock", "type": "AsyncMock, expected_calls: int"}, {"name": "expected_calls", "type": "int"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called a specific number of times.", "signature": "async assert_async_called_times(mock: AsyncMock, expected_calls: int, expected_calls: int) -> None"}, {"name": "assert_async_called_with_any_order", "line": 44, "parameters": [{"name": "mock", "type": "AsyncMock, *expected_calls"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called with arguments in any order.", "signature": "async assert_async_called_with_any_order(mock: AsyncMock, *expected_calls, *expected_calls) -> None"}], "properties": [], "description": "Provides assertion methods for testing asynchronous code behavior."}, {"name": "EventAssertions", "line": 58, "inherits_from": [], "methods": [{"name": "assert_event_published", "line": 62, "parameters": [{"name": "event_bus", "type": "MagicMock, event_type: str, **kwargs"}, {"name": "event_type", "type": "str, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that an event was published.", "signature": "assert_event_published(event_bus: MagicMock, event_type: str, **kwargs, event_type: str, **kwargs, **kwargs) -> None"}, {"name": "assert_event_not_published", "line": 78, "parameters": [{"name": "event_bus", "type": "MagicMock, event_type: str"}, {"name": "event_type", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that an event was not published.", "signature": "assert_event_not_published(event_bus: MagicMock, event_type: str, event_type: str) -> None"}, {"name": "assert_event_count", "line": 90, "parameters": [{"name": "event_bus", "type": "MagicMock, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of events were published.", "signature": "assert_event_count(event_bus: MagicMock, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Contains assertions related to event handling and event-driven logic."}, {"name": "LoggingAssertions", "line": 96, "inherits_from": [], "methods": [{"name": "assert_logged", "line": 100, "parameters": [{"name": "logger", "type": "MagicMock, level: str, message: str"}, {"name": "level", "type": "str, message: str"}, {"name": "message", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log message was recorded.", "signature": "assert_logged(logger: MagicMock, level: str, message: str, level: str, message: str, message: str) -> None"}, {"name": "assert_logged_with_level", "line": 113, "parameters": [{"name": "logger", "type": "MagicMock, level: str"}, {"name": "level", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log level was used.", "signature": "assert_logged_with_level(logger: MagicMock, level: str, level: str) -> None"}, {"name": "assert_not_logged", "line": 119, "parameters": [{"name": "logger", "type": "MagicMock, level: str, message: str"}, {"name": "level", "type": "str, message: str"}, {"name": "message", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log message was not recorded.", "signature": "assert_not_logged(logger: MagicMock, level: str, message: str, level: str, message: str, message: str) -> None"}, {"name": "assert_log_count", "line": 131, "parameters": [{"name": "logger", "type": "MagicMock, level: str, expected_count: int"}, {"name": "level", "type": "str, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of log messages were recorded.", "signature": "assert_log_count(logger: MagicMock, level: str, expected_count: int, level: str, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Offers assertions to verify logging outputs and log message contents."}, {"name": "ConfigAssertions", "line": 138, "inherits_from": [], "methods": [{"name": "assert_config_value", "line": 142, "parameters": [{"name": "config", "type": "MagicMock, key: str, expected_value: Any"}, {"name": "key", "type": "str, expected_value: Any"}, {"name": "expected_value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration value matches expected value.", "signature": "assert_config_value(config: MagicMock, key: str, expected_value: Any, key: str, expected_value: Any, expected_value: Any) -> None"}, {"name": "assert_config_has_key", "line": 154, "parameters": [{"name": "config", "type": "MagicMock, key: str"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration key exists.", "signature": "assert_config_has_key(config: MagicMock, key: str, key: str) -> None"}, {"name": "assert_config_set", "line": 160, "parameters": [{"name": "config", "type": "MagicMock, key: str, value: Any"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration value was set.", "signature": "assert_config_set(config: MagicMock, key: str, value: Any, key: str, value: Any, value: Any) -> None"}], "properties": [], "description": "Includes assertions for validating configuration settings and parameters."}, {"name": "MetricsAssertions", "line": 165, "inherits_from": [], "methods": [{"name": "assert_counter_incremented", "line": 169, "parameters": [{"name": "metrics_collector", "type": "MagicMock"}, {"name": "counter_name", "type": "str"}, {"name": "expected_increment", "type": "int = 1", "default": "1"}], "is_async": false, "return_type": "None", "description": "Assert that a counter was incremented.", "signature": "assert_counter_incremented(metrics_collector: MagicMock, counter_name: str, expected_increment: int = 1 = 1) -> None"}, {"name": "assert_gauge_set", "line": 175, "parameters": [{"name": "metrics_collector", "type": "MagicMock, gauge_name: str, expected_value: float"}, {"name": "gauge_name", "type": "str, expected_value: float"}, {"name": "expected_value", "type": "float"}], "is_async": false, "return_type": "None", "description": "Assert that a gauge was set to a specific value.", "signature": "assert_gauge_set(metrics_collector: MagicMock, gauge_name: str, expected_value: float, gauge_name: str, expected_value: float, expected_value: float) -> None"}, {"name": "assert_histogram_recorded", "line": 180, "parameters": [{"name": "metrics_collector", "type": "MagicMock"}, {"name": "histogram_name", "type": "str"}, {"name": "expected_value", "type": "float"}], "is_async": false, "return_type": "None", "description": "Assert that a histogram value was recorded.", "signature": "assert_histogram_recorded(metrics_collector: MagicMock, histogram_name: str, expected_value: float) -> None"}, {"name": "assert_metrics_count", "line": 186, "parameters": [{"name": "metrics_collector", "type": "MagicMock, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of metrics were recorded.", "signature": "assert_metrics_count(metrics_collector: MagicMock, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Provides assertions to check metrics collection and reporting accuracy."}, {"name": "TimeAssertions", "line": 194, "inherits_from": [], "methods": [{"name": "assert_completes_within_timeout", "line": 198, "parameters": [{"name": "func", "type": "Callable, timeout: float, *args, **kwargs"}, {"name": "timeout", "type": "float, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that a function completes within a timeout.", "signature": "async assert_completes_within_timeout(func: Callable, timeout: float, *args, **kwargs, timeout: float, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_takes_at_least", "line": 216, "parameters": [{"name": "func", "type": "Callable, min_time: float, *args, **kwargs"}, {"name": "min_time", "type": "float, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that a function takes at least a minimum time.", "signature": "async assert_takes_at_least(func: Callable, min_time: float, *args, **kwargs, min_time: float, *args, **kwargs, *args, **kwargs) -> None"}], "properties": [], "description": "Contains assertions related to timing and duration checks."}, {"name": "DataAssertions", "line": 234, "inherits_from": [], "methods": [{"name": "assert_dict_contains", "line": 238, "parameters": [{"name": "dict_obj", "type": "Dict[str, Any], expected_items: Dict[str, Any]"}, {"name": "expected_items", "type": "Dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Assert that a dictionary contains specific key-value pairs.", "signature": "assert_dict_contains(dict_obj: Dict[str, Any], expected_items: Dict[str, Any], expected_items: Dict[str, Any]) -> None"}, {"name": "assert_list_contains", "line": 246, "parameters": [{"name": "list_obj", "type": "List[Any], expected_item: Any"}, {"name": "expected_item", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a list contains a specific item.", "signature": "assert_list_contains(list_obj: List[Any], expected_item: Any, expected_item: Any) -> None"}, {"name": "assert_list_length", "line": 251, "parameters": [{"name": "list_obj", "type": "List[Any], expected_length: int"}, {"name": "expected_length", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a list has a specific length.", "signature": "assert_list_length(list_obj: List[Any], expected_length: int, expected_length: int) -> None"}, {"name": "assert_json_equals", "line": 257, "parameters": [{"name": "json_str", "type": "str, expected_data: Any"}, {"name": "expected_data", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a JSON string equals expected data.", "signature": "assert_json_equals(json_str: str, expected_data: Any, expected_data: Any) -> None"}, {"name": "assert_string_contains", "line": 266, "parameters": [{"name": "text", "type": "str, substring: str"}, {"name": "substring", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a string contains a substring.", "signature": "assert_string_contains(text: str, substring: str, substring: str) -> None"}, {"name": "assert_string_matches_pattern", "line": 271, "parameters": [{"name": "text", "type": "str, pattern: str"}, {"name": "pattern", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a string matches a regex pattern.", "signature": "assert_string_matches_pattern(text: str, pattern: str, pattern: str) -> None"}], "properties": [], "description": "Offers a variety of assertions for validating data integrity and structure."}, {"name": "ExceptionAssertions", "line": 277, "inherits_from": [], "methods": [{"name": "assert_raises_exception", "line": 281, "parameters": [{"name": "func", "type": "Callable, exception_type: type, *args, **kwargs"}, {"name": "exception_type", "type": "type, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that a function raises a specific exception.", "signature": "assert_raises_exception(func: Callable, exception_type: type, *args, **kwargs, exception_type: type, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_raises_async_exception", "line": 287, "parameters": [{"name": "func", "type": "Callable, exception_type: type, *args, **kwargs"}, {"name": "exception_type", "type": "type, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that an async function raises a specific exception.", "signature": "async assert_raises_async_exception(func: Callable, exception_type: type, *args, **kwargs, exception_type: type, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_raises_with_message", "line": 298, "parameters": [{"name": "func", "type": "Callable, exception_type: type, expected_message: str, *args, **kwargs"}, {"name": "exception_type", "type": "type, expected_message: str, *args, **kwargs"}, {"name": "expected_message", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that a function raises an exception with a specific message.", "signature": "assert_raises_with_message(func: Callable, exception_type: type, expected_message: str, *args, **kwargs, exception_type: type, expected_message: str, *args, **kwargs, expected_message: str, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_no_exception", "line": 304, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that a function does not raise any exception.", "signature": "assert_no_exception(func: Callable, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_no_async_exception", "line": 312, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that an async function does not raise any exception.", "signature": "async assert_no_async_exception(func: Callable, *args, **kwargs, *args, **kwargs) -> None"}], "properties": [], "description": "Includes assertions to verify exception raising and error handling."}, {"name": "MockAssertions", "line": 325, "inherits_from": [], "methods": [{"name": "assert_mock_called_with_args", "line": 329, "parameters": [{"name": "mock", "type": "MagicMock, *expected_args, **expected_kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called with specific arguments.", "signature": "assert_mock_called_with_args(mock: MagicMock, *expected_args, **expected_kwargs, *expected_args, **expected_kwargs) -> None"}, {"name": "assert_mock_called_times", "line": 334, "parameters": [{"name": "mock", "type": "MagicMock, expected_calls: int"}, {"name": "expected_calls", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called a specific number of times.", "signature": "assert_mock_called_times(mock: MagicMock, expected_calls: int, expected_calls: int) -> None"}, {"name": "assert_mock_not_called", "line": 340, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was not called.", "signature": "assert_mock_not_called(mock: MagicMock) -> None"}, {"name": "assert_mock_called_once", "line": 345, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called exactly once.", "signature": "assert_mock_called_once(mock: MagicMock) -> None"}, {"name": "assert_mock_return_value", "line": 350, "parameters": [{"name": "mock", "type": "MagicMock, expected_value: Any"}, {"name": "expected_value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a mock returns a specific value.", "signature": "assert_mock_return_value(mock: MagicMock, expected_value: Any, expected_value: Any) -> None"}, {"name": "assert_mock_side_effect_called", "line": 355, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock''s side effect was called.", "signature": "assert_mock_side_effect_called(mock: MagicMock) -> None"}], "properties": [], "description": "Provides assertions for verifying mock object interactions and behaviors."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "pytest", "alias": null, "line": 16, "statement": "import pytest"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "unittest.mock", "alias": null, "line": 14, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 14, "statement": "from unittest.mock import MagicMock"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "pytest", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Callable", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 14}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 14}, {"name": "AsyncAssertions", "type": "class", "line": 19}, {"name": "EventAssertions", "type": "class", "line": 58}, {"name": "LoggingAssertions", "type": "class", "line": 96}, {"name": "ConfigAssertions", "type": "class", "line": 138}, {"name": "MetricsAssertions", "type": "class", "line": 165}, {"name": "TimeAssertions", "type": "class", "line": 194}, {"name": "DataAssertions", "type": "class", "line": 234}, {"name": "ExceptionAssertions", "type": "class", "line": 277}, {"name": "MockAssertions", "type": "class", "line": 325}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "AsyncAssertions Class", "description": "Class AsyncAssertions definition and methods.", "line_start": 19, "line_end": 47}, {"name": "EventAssertions Class", "description": "Class EventAssertions definition and methods.", "line_start": 58, "line_end": 93}, {"name": "LoggingAssertions Class", "description": "Class LoggingAssertions definition and methods.", "line_start": 96, "line_end": 134}, {"name": "ConfigAssertions Class", "description": "Class ConfigAssertions definition and methods.", "line_start": 138, "line_end": 163}, {"name": "MetricsAssertions Class", "description": "Class MetricsAssertions definition and methods.", "line_start": 165, "line_end": 189}, {"name": "TimeAssertions Class", "description": "Class TimeAssertions definition and methods.", "line_start": 194, "line_end": 219}, {"name": "DataAssertions Class", "description": "Class DataAssertions definition and methods.", "line_start": 234, "line_end": 274}, {"name": "ExceptionAssertions Class", "description": "Class ExceptionAssertions definition and methods.", "line_start": 277, "line_end": 315}, {"name": "MockAssertions Class", "description": "Class MockAssertions definition and methods.", "line_start": 325, "line_end": 358}], "content_hash": "1c754579ea9c3a9e6f12ae65f18b6598"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
  line_count: 69
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "fixtures.py", "description": "Python module with 7 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "foundation_config", "line": 17, "parameters": [], "is_async": false, "description": "Returns the configuration settings for the foundation module.", "signature": "foundation_config()"}, {"name": "auth_config", "line": 30, "parameters": [], "is_async": false, "description": "Provides the configuration parameters required for authentication.", "signature": "auth_config()"}, {"name": "auth_manager", "line": 40, "parameters": [{"name": "auth_config", "type": "unknown"}], "is_async": false, "description": "Initializes and returns an authentication manager using the provided auth configuration.", "signature": "auth_manager(auth_config)"}, {"name": "circuit_breaker_config", "line": 46, "parameters": [], "is_async": false, "description": "Generates configuration settings for the circuit breaker mechanism.", "signature": "circuit_breaker_config()"}, {"name": "circuit_breaker", "line": 57, "parameters": [{"name": "circuit_breaker_config", "type": "unknown"}], "is_async": false, "description": "Creates and returns a circuit breaker instance based on the given configuration.", "signature": "circuit_breaker(circuit_breaker_config)"}, {"name": "mock_async_function", "line": 63, "parameters": [], "is_async": false, "description": "Simulates an asynchronous function for testing purposes.", "signature": "mock_async_function()"}, {"name": "mock_sync_function", "line": 69, "parameters": [], "is_async": false, "description": "Simulates a synchronous function for testing purposes.", "signature": "mock_sync_function()"}], "classes": [], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import MagicMock"}, {"module": "config", "alias": null, "line": 11, "statement": "from config import FoundationConfig"}, {"module": "security", "alias": null, "line": 12, "statement": "from security import AuthManager"}, {"module": "security", "alias": null, "line": 12, "statement": "from security import AuthConfig"}, {"module": "resilience", "alias": null, "line": 13, "statement": "from resilience import CircuitBreaker"}, {"module": "resilience", "alias": null, "line": 13, "statement": "from resilience import CircuitBreakerConfig"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 10}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 10}, {"name": "from config import FoundationConfig", "type": "import", "line": 11}, {"name": "from security import AuthManager", "type": "import", "line": 12}, {"name": "from security import AuthConfig", "type": "import", "line": 12}, {"name": "from resilience import CircuitBreaker", "type": "import", "line": 13}, {"name": "from resilience import CircuitBreakerConfig", "type": "import", "line": 13}, {"name": "foundation_config", "type": "function", "line": 17}, {"name": "auth_config", "type": "function", "line": 30}, {"name": "auth_manager", "type": "function", "line": 40}, {"name": "circuit_breaker_config", "type": "function", "line": 46}, {"name": "circuit_breaker", "type": "function", "line": 57}, {"name": "mock_async_function", "type": "function", "line": 63}, {"name": "mock_sync_function", "type": "function", "line": 69}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "foundation_config Function", "description": "Function foundation_config implementation.", "line_start": 17, "line_end": 29}, {"name": "auth_config Function", "description": "Function auth_config implementation.", "line_start": 30, "line_end": 39}, {"name": "auth_manager Function", "description": "Function auth_manager implementation.", "line_start": 40, "line_end": 45}, {"name": "circuit_breaker_config Function", "description": "Function circuit_breaker_config implementation.", "line_start": 46, "line_end": 56}, {"name": "circuit_breaker Function", "description": "Function circuit_breaker implementation.", "line_start": 57, "line_end": 62}, {"name": "mock_async_function Function", "description": "Function mock_async_function implementation.", "line_start": 63, "line_end": 68}, {"name": "mock_sync_function Function", "description": "Function mock_sync_function implementation.", "line_start": 69, "line_end": 74}], "content_hash": "91c90e5ee93983abb1e9ef6bda37b4ac"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
  line_count: 376
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "helpers.py", "description": "Python module with 2 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "mock_time", "line": 244, "parameters": [{"name": "timestamp", "type": "float):"}], "is_async": false, "description": "Mocks the current time to a specified timestamp for testing purposes.", "signature": "mock_time(timestamp: float):)"}, {"name": "async_context_manager", "line": 251, "parameters": [], "is_async": true, "description": "An asynchronous context manager for managing async resource setup and cleanup.", "signature": "async async_context_manager()"}], "classes": [{"name": "AsyncTestCase", "line": 21, "inherits_from": [], "methods": [{"name": "setup_class", "line": 25, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "None", "description": "Set up the test class.", "signature": "setup_class(cls) -> None"}, {"name": "setup_method", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Set up each test method.", "signature": "setup_method(self) -> None"}, {"name": "teardown_method", "line": 34, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Tear down each test method.", "signature": "teardown_method(self) -> None"}], "properties": [], "description": "Base class for writing asynchronous test cases with setup and teardown support."}, {"name": "MockFactory", "line": 39, "inherits_from": [], "methods": [{"name": "create_logger", "line": 43, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock logger.", "signature": "create_logger() -> MagicMock"}, {"name": "create_async_logger", "line": 54, "parameters": [], "is_async": false, "return_type": "AsyncMock", "description": "Create a mock async logger.", "signature": "create_async_logger() -> AsyncMock"}, {"name": "create_config", "line": 65, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock configuration object.", "signature": "create_config() -> MagicMock"}, {"name": "create_event_bus", "line": 74, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock event bus.", "signature": "create_event_bus() -> MagicMock"}], "properties": [], "description": "Factory class for creating various mock objects used in testing."}, {"name": "TestUtils", "line": 83, "inherits_from": [], "methods": [{"name": "assert_async_called_with", "line": 87, "parameters": [{"name": "mock", "type": "AsyncMock, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was called with specific arguments.", "signature": "assert_async_called_with(mock: AsyncMock, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_async_called_once", "line": 92, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was called exactly once.", "signature": "assert_async_called_once(mock: AsyncMock) -> None"}, {"name": "assert_async_not_called", "line": 97, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was not called.", "signature": "assert_async_not_called(mock: AsyncMock) -> None"}, {"name": "wait_for_condition", "line": 102, "parameters": [{"name": "condition", "type": "Callable[[], bool]"}, {"name": "timeout", "type": "float", "default": "5.0"}, {"name": "interval", "type": "float = 0.1", "default": "0.1"}], "is_async": true, "return_type": "None", "description": "Wait for a condition to become true.", "signature": "async wait_for_condition(condition: Callable[[], bool], timeout: float = 5.0, interval: float = 0.1 = 0.1) -> None"}, {"name": "create_temp_file", "line": 113, "parameters": [{"name": "content", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "str", "description": "Create a temporary file with content.", "signature": "create_temp_file(content: str = \"\" = ) -> str"}, {"name": "create_temp_directory", "line": 120, "parameters": [], "is_async": false, "return_type": "str", "description": "Create a temporary directory.", "signature": "create_temp_directory() -> str"}], "properties": [], "description": "Utility class providing helper methods for common test operations."}, {"name": "AsyncTestRunner", "line": 125, "inherits_from": [], "methods": [{"name": "run_async_test", "line": 129, "parameters": [{"name": "test_func", "type": "Callable"}], "is_async": true, "return_type": "Any", "description": "Run an async test function.", "signature": "async run_async_test(test_func: Callable) -> Any"}, {"name": "run_sync_test", "line": 137, "parameters": [{"name": "test_func", "type": "Callable"}], "is_async": false, "return_type": "Any", "description": "Run a sync test function.", "signature": "run_sync_test(test_func: Callable) -> Any"}], "properties": [], "description": "Runs asynchronous tests and manages their execution lifecycle."}, {"name": "TestDataFactory", "line": 145, "inherits_from": [], "methods": [{"name": "create_test_event", "line": 149, "parameters": [{"name": "event_type", "type": "str", "default": "test_event"}, {"name": "data", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "Create a test event.", "signature": "create_test_event(event_type: str = test_event, data: Any = None = None) -> Dict[str, Any]"}, {"name": "create_test_config", "line": 160, "parameters": [], "is_async": false, "return_type": "Dict[str, Any]", "description": "Create test configuration data.", "signature": "create_test_config() -> Dict[str, Any]"}, {"name": "create_test_user", "line": 177, "parameters": [], "is_async": false, "return_type": "Dict[str, Any]", "description": "Create test user data.", "signature": "create_test_user() -> Dict[str, Any]"}], "properties": [], "description": "Generates test data objects for use in unit tests."}, {"name": "PerformanceTestHelper", "line": 188, "inherits_from": [], "methods": [{"name": "measure_execution_time", "line": 192, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": true, "return_type": "float", "description": "Measure the execution time of a function.", "signature": "async measure_execution_time(func: Callable, *args, **kwargs, *args, **kwargs) -> float"}, {"name": "benchmark_function", "line": 203, "parameters": [{"name": "func", "type": "Callable"}, {"name": "iterations", "type": "int", "default": "1000"}], "is_async": true, "return_type": "Dict[str, float]", "description": "Benchmark a function over multiple iterations.", "signature": "async benchmark_function(func: Callable, iterations: int = 1000, *args, **kwargs) -> Dict[str, float]"}], "properties": [], "description": "Provides tools to measure and analyze performance during tests."}, {"name": "MockContextManager", "line": 223, "inherits_from": [], "methods": [{"name": "__init__", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self, *patches: str) -> None"}, {"name": "__enter__", "line": 230, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Enter the context.", "signature": "__enter__(self)"}, {"name": "__exit__", "line": 237, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": false, "description": "Exit the context.", "signature": "__exit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Context manager that mocks resources within a controlled scope."}, {"name": "TestEventBus", "line": 260, "inherits_from": [], "methods": [{"name": "__init__", "line": 263, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "publish", "line": 267, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "Publish an event.", "signature": "async publish(self, event: Dict[str, Any]) -> None"}, {"name": "subscribe", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, callback: Callable"}, {"name": "callback", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Subscribe to events.", "signature": "subscribe(self, event_type: str, callback: Callable, callback: Callable) -> None"}, {"name": "unsubscribe", "line": 287, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, callback: Callable"}, {"name": "callback", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Unsubscribe from events.", "signature": "unsubscribe(self, event_type: str, callback: Callable, callback: Callable) -> None"}, {"name": "get_events", "line": 292, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "List[Dict[str, Any]]", "description": "Get published events.", "signature": "get_events(self, event_type: Optional[str] = None = None) -> List[Dict[str, Any]]"}, {"name": "clear_events", "line": 298, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all events.", "signature": "clear_events(self) -> None"}], "properties": [], "description": "Simulates an event bus for testing event-driven components."}, {"name": "TestMetricsCollector", "line": 303, "inherits_from": [], "methods": [{"name": "__init__", "line": 306, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "increment_counter", "line": 312, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: int = 1, labels: Optional[Dict[str, str]] = None"}, {"name": "value", "type": "int = 1, labels: Optional[Dict[str, str]] = None", "default": "1"}, {"name": "labels", "type": "Optional[Dict[str, str]] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Increment a counter.", "signature": "increment_counter(self, name: str, value: int = 1, labels: Optional[Dict[str, str]] = None, value: int = 1, labels: Optional[Dict[str, str]] = None = 1, labels: Optional[Dict[str, str]] = None = None) -> None"}, {"name": "set_gauge", "line": 327, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: float, labels: Optional[Dict[str, str]] = None"}, {"name": "value", "type": "float, labels: Optional[Dict[str, str]] = None"}, {"name": "labels", "type": "Optional[Dict[str, str]] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Set a gauge value.", "signature": "set_gauge(self, name: str, value: float, labels: Optional[Dict[str, str]] = None, value: float, labels: Optional[Dict[str, str]] = None, labels: Optional[Dict[str, str]] = None = None) -> None"}, {"name": "record_histogram", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: float, labels: Optional[Dict[str, str]] = None"}, {"name": "value", "type": "float, labels: Optional[Dict[str, str]] = None"}, {"name": "labels", "type": "Optional[Dict[str, str]] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Record a histogram value.", "signature": "record_histogram(self, name: str, value: float, labels: Optional[Dict[str, str]] = None, value: float, labels: Optional[Dict[str, str]] = None, labels: Optional[Dict[str, str]] = None = None) -> None"}, {"name": "get_counter", "line": 355, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "int", "description": "Get counter value.", "signature": "get_counter(self, name: str) -> int"}, {"name": "get_gauge", "line": 359, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "float", "description": "Get gauge value.", "signature": "get_gauge(self, name: str) -> float"}, {"name": "get_histogram", "line": 363, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "List[float]", "description": "Get histogram values.", "signature": "get_histogram(self, name: str) -> List[float]"}, {"name": "get_metrics", "line": 367, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "Dict[str, List[Dict[str, Any]]]", "description": "Get all metrics.", "signature": "get_metrics(self, name: Optional[str] = None = None) -> Dict[str, List[Dict[str, Any]]]"}, {"name": "clear_metrics", "line": 373, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all metrics.", "signature": "clear_metrics(self) -> None"}], "properties": [], "description": "Collects and reports metrics during test execution for analysis."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "tempfile", "alias": null, "line": 11, "statement": "import tempfile"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "pytest", "alias": null, "line": 17, "statement": "import pytest"}, {"module": "contextlib", "alias": null, "line": 13, "statement": "from contextlib import asynccontextmanager"}, {"module": "contextlib", "alias": null, "line": 13, "statement": "from contextlib import contextmanager"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import AsyncGenerator"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Generator"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "unittest.mock", "alias": null, "line": 15, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 15, "statement": "from unittest.mock import MagicMock"}, {"module": "unittest.mock", "alias": null, "line": 15, "statement": "from unittest.mock import patch"}, {"module": "freezegun", "alias": null, "line": 18, "statement": "from freezegun import freeze_time"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "tempfile", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "pytest", "type": "import", "line": 17}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 13}, {"name": "from contextlib import contextmanager", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import AsyncGenerator", "type": "import", "line": 14}, {"name": "from typing import Callable", "type": "import", "line": 14}, {"name": "from typing import Dict", "type": "import", "line": 14}, {"name": "from typing import Generator", "type": "import", "line": 14}, {"name": "from typing import List", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 15}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 15}, {"name": "from unittest.mock import patch", "type": "import", "line": 15}, {"name": "from freezegun import freeze_time", "type": "import", "line": 18}, {"name": "AsyncTestCase", "type": "class", "line": 21}, {"name": "MockFactory", "type": "class", "line": 39}, {"name": "TestUtils", "type": "class", "line": 83}, {"name": "AsyncTestRunner", "type": "class", "line": 125}, {"name": "TestDataFactory", "type": "class", "line": 145}, {"name": "PerformanceTestHelper", "type": "class", "line": 188}, {"name": "MockContextManager", "type": "class", "line": 223}, {"name": "mock_time", "type": "function", "line": 244}, {"name": "async_context_manager", "type": "function", "line": 251}, {"name": "TestEventBus", "type": "class", "line": 260}, {"name": "TestMetricsCollector", "type": "class", "line": 303}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "mock_time Function", "description": "Function mock_time implementation.", "line_start": 244, "line_end": 250}, {"name": "async_context_manager Function", "description": "Function async_context_manager implementation.", "line_start": 251, "line_end": 259}, {"name": "AsyncTestCase Class", "description": "Class AsyncTestCase definition and methods.", "line_start": 21, "line_end": 37}, {"name": "MockFactory Class", "description": "Class MockFactory definition and methods.", "line_start": 39, "line_end": 77}, {"name": "TestUtils Class", "description": "Class TestUtils definition and methods.", "line_start": 83, "line_end": 123}, {"name": "AsyncTestRunner Class", "description": "Class AsyncTestRunner definition and methods.", "line_start": 125, "line_end": 140}, {"name": "TestDataFactory Class", "description": "Class TestDataFactory definition and methods.", "line_start": 145, "line_end": 180}, {"name": "PerformanceTestHelper Class", "description": "Class PerformanceTestHelper definition and methods.", "line_start": 188, "line_end": 206}, {"name": "MockContextManager Class", "description": "Class MockContextManager definition and methods.", "line_start": 223, "line_end": 240}, {"name": "TestEventBus Class", "description": "Class TestEventBus definition and methods.", "line_start": 260, "line_end": 301}, {"name": "TestMetricsCollector Class", "description": "Class TestMetricsCollector definition and methods.", "line_start": 303, "line_end": 376}], "content_hash": "d6d525dd40318224931a13da78bb4eb7"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
  line_count: 13
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "base", "alias": null, "line": 9, "statement": "from base import BaseComponent"}, {"module": "base", "alias": null, "line": 9, "statement": "from base import LifecycleComponent"}, {"module": "base", "alias": null, "line": 9, "statement": "from base import ComponentError"}], "constants": []}, "key_elements": [{"name": "from base import BaseComponent", "type": "import", "line": 9}, {"name": "from base import LifecycleComponent", "type": "import", "line": 9}, {"name": "from base import ComponentError", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "e0424efb7820ac3f661c051793977abd"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
  line_count: 162
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "observer.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "EventPriority", "line": 20, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "LOW", "line": 20, "type": ""}, {"name": "NORMAL", "line": 21, "type": ""}, {"name": "HIGH", "line": 22, "type": ""}, {"name": "CRITICAL", "line": 23, "type": ""}], "description": "Defines priority levels for events to control their handling order."}, {"name": "Event", "line": 29, "inherits_from": [], "methods": [], "properties": [], "description": "Represents an event with associated data to be processed by observers."}, {"name": "Observer", "line": 39, "inherits_from": ["ABC):"], "methods": [{"name": "on_event", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Handle an event.", "signature": "async on_event(self, event: Event) -> None"}], "properties": [], "description": "Defines an interface for objects that should be notified of events."}, {"name": "Subject", "line": 48, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "attach", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Attach an observer to an event type.", "signature": "attach(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "detach", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Detach an observer from an event type.", "signature": "detach(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "notify", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Notify all observers of an event.", "signature": "async notify(self, event: Event) -> None"}], "properties": [], "description": "Manages observers and notifies them about events."}, {"name": "EventBus", "line": 95, "inherits_from": [], "methods": [{"name": "__init__", "line": 98, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register_subject", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, subject: Subject"}, {"name": "subject", "type": "Subject"}], "is_async": false, "return_type": "None", "description": "Register a subject with the event bus.", "signature": "register_subject(self, name: str, subject: Subject, subject: Subject) -> None"}, {"name": "unregister_subject", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a subject from the event bus.", "signature": "unregister_subject(self, name: str) -> None"}, {"name": "subscribe", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Subscribe to events globally.", "signature": "subscribe(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "unsubscribe", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Unsubscribe from global events.", "signature": "unsubscribe(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "publish", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Publish an event to all relevant observers.", "signature": "async publish(self, event: Event) -> None"}, {"name": "get_event_history", "line": 151, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "List[Event]", "description": "Get event history, optionally filtered by type.", "signature": "get_event_history(self, event_type: Optional[str] = None = None) -> List[Event]"}, {"name": "clear_history", "line": 157, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear event history.", "signature": "clear_history(self) -> None"}], "properties": [], "description": "Coordinates event publishing and subscription, managing event dispatching to observers."}], "imports": [{"module": "asyncio", "alias": null, "line": 13, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 14, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Set"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import datetime"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 13}, {"name": "logging", "type": "import", "line": 14}, {"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Callable", "type": "import", "line": 10}, {"name": "from typing import Dict", "type": "import", "line": 10}, {"name": "from typing import List", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from typing import Set", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 11}, {"name": "from dataclasses import field", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 15}, {"name": "EventPriority", "type": "class", "line": 20}, {"name": "Event", "type": "class", "line": 29}, {"name": "Observer", "type": "class", "line": 39}, {"name": "Subject", "type": "class", "line": 48}, {"name": "EventBus", "type": "class", "line": 95}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "EventPriority Class", "description": "Class EventPriority definition and methods.", "line_start": 20, "line_end": 30}, {"name": "Event Class", "description": "Class Event definition and methods.", "line_start": 29, "line_end": 39}, {"name": "Observer Class", "description": "Class Observer definition and methods.", "line_start": 39, "line_end": 46}, {"name": "Subject Class", "description": "Class Subject definition and methods.", "line_start": 48, "line_end": 73}, {"name": "EventBus Class", "description": "Class EventBus definition and methods.", "line_start": 95, "line_end": 160}], "content_hash": "ddd49f7bc96254f822696cb080593a89"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/base.py
  line_count: 94
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ComponentError", "line": 14, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 17, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Exception class for component-related errors."}, {"name": "BaseComponent", "line": 23, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "initialize", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "start", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the component.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the component.", "signature": "async stop(self) -> None"}, {"name": "cleanup", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup component resources.", "signature": "async cleanup(self) -> None"}, {"name": "is_active", "line": 65, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if component is active.", "signature": "is_active(self) -> bool"}, {"name": "is_initialized", "line": 69, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if component is initialized.", "signature": "is_initialized(self) -> bool"}, {"name": "_initialize", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific initialization logic.", "signature": "async _initialize(self) -> None"}, {"name": "_start", "line": 78, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific start logic.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 82, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific stop logic.", "signature": "async _stop(self) -> None"}, {"name": "_cleanup", "line": 86, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific cleanup logic.", "signature": "async _cleanup(self) -> None"}], "properties": [], "description": "Base class providing core functionality for components."}, {"name": "LifecycleComponent", "line": 91, "inherits_from": ["BaseComponent):"], "methods": [{"name": "_initialize", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Default initialization - override if needed.", "signature": "async _initialize(self) -> None"}], "properties": [], "description": "Component class managing lifecycle events."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "ComponentError", "type": "class", "line": 14}, {"name": "BaseComponent", "type": "class", "line": 23}, {"name": "LifecycleComponent", "type": "class", "line": 91}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "ComponentError Class", "description": "Class ComponentError definition and methods.", "line_start": 14, "line_end": 20}, {"name": "BaseComponent Class", "description": "Class BaseComponent definition and methods.", "line_start": 23, "line_end": 89}, {"name": "LifecycleComponent Class", "description": "Class LifecycleComponent definition and methods.", "line_start": 91, "line_end": 97}], "content_hash": "4e03a5193da36395fde7088c6290203d"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/factory.py
  line_count: 591
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "factory.py", "description": "Python module with 3 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "inject", "line": 555, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to mark a function or method parameter for dependency injection by name.", "signature": "inject(name: str):)"}, {"name": "singleton", "line": 570, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to register a class or factory as a singleton instance under a given name.", "signature": "singleton(name: str):)"}, {"name": "factory_method", "line": 583, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to register a factory method for creating instances associated with a given name.", "signature": "factory_method(name: str):)"}], "classes": [{"name": "FactoryError", "line": 20, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to factory operations."}, {"name": "FactoryType", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "SIMPLE", "line": 25, "type": ""}, {"name": "ABSTRACT", "line": 26, "type": ""}, {"name": "BUILDER", "line": 27, "type": ""}, {"name": "PROTOTYPE", "line": 28, "type": ""}], "description": "Enumeration or type class defining different factory types."}, {"name": "Factory", "line": 36, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "\n        Initialize factory.\n\n        Args:\n            name: Factory name\n        ", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 50, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "T", "description": "\n        Create an instance.\n\n        Args:\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, *args, **kwargs) -> T"}, {"name": "register", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, cls: Type[T]"}, {"name": "cls", "type": "Type[T]"}], "is_async": false, "return_type": "None", "description": "\n        Register a class with the factory.\n\n        Args:\n            name: Registration name\n            cls: Class to register\n        ", "signature": "register(self, name: str, cls: Type[T], cls: Type[T]) -> None"}, {"name": "unregister", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Unregister a class from the factory.\n\n        Args:\n            name: Registration name\n        ", "signature": "unregister(self, name: str) -> None"}, {"name": "get_registered", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[Type[T]]", "description": "\n        Get registered class by name.\n\n        Args:\n            name: Registration name\n\n        Returns:\n            Registered class or None if not found\n        ", "signature": "get_registered(self, name: str) -> Optional[Type[T]]"}, {"name": "list_registered", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "\n        List all registered names.\n\n        Returns:\n            List of registered names\n        ", "signature": "list_registered(self) -> List[str]"}], "properties": [], "description": "Base class providing core factory methods for object creation and registration."}, {"name": "SimpleFactory", "line": 104, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "base_class", "type": "Optional[Type[T]]", "default": "None"}], "is_async": false, "description": "\n        Initialize simple factory.\n\n        Args:\n            name: Factory name\n            base_class: Base class for validation\n        ", "signature": "__init__(self, name: str, base_class: Optional[Type[T]] = None)"}, {"name": "create", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by name.\n\n        Args:\n            name: Registration name\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n\n        Raises:\n            FactoryError: If class not found or invalid\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "create_with_config", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: Dict[str, Any]"}, {"name": "config", "type": "Dict[str, Any]"}], "is_async": false, "return_type": "T", "description": "\n        Create instance with configuration.\n\n        Args:\n            name: Registration name\n            config: Configuration dictionary\n\n        Returns:\n            Created instance\n        ", "signature": "create_with_config(self, name: str, config: Dict[str, Any], config: Dict[str, Any]) -> T"}], "properties": [], "description": "Concrete factory class implementing basic object creation logic."}, {"name": "AbstractFactory", "line": 161, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize abstract factory.", "signature": "__init__(self, name: str):)"}, {"name": "register_factory", "line": 169, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str, factory: Factory"}, {"name": "factory", "type": "Factory"}], "is_async": false, "return_type": "None", "description": "\n        Register a factory for a category.\n\n        Args:\n            category: Category name\n            factory: Factory instance\n        ", "signature": "register_factory(self, category: str, factory: Factory, factory: Factory) -> None"}, {"name": "create", "line": 179, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str, name: str, *args, **kwargs"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by category and name.\n\n        Args:\n            category: Category name\n            name: Registration name\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n\n        Raises:\n            FactoryError: If category or class not found\n        ", "signature": "create(self, category: str, name: str, *args, **kwargs, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "get_factory", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str"}], "is_async": false, "return_type": "Optional[Factory]", "description": "\n        Get factory for category.\n\n        Args:\n            category: Category name\n\n        Returns:\n            Factory instance or None if not found\n        ", "signature": "get_factory(self, category: str) -> Optional[Factory]"}, {"name": "list_categories", "line": 213, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "\n        List all categories.\n\n        Returns:\n            List of category names\n        ", "signature": "list_categories(self) -> List[str]"}], "properties": [], "description": "Factory class defining an interface for creating families of related objects."}, {"name": "Builder", "line": 223, "inherits_from": [], "methods": [{"name": "__init__", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize builder.", "signature": "__init__(self)"}, {"name": "add_part", "line": 230, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "Builder", "description": "\n        Add a part to the builder.\n\n        Args:\n            name: Part name\n            value: Part value\n\n        Returns:\n            Self for chaining\n        ", "signature": "add_part(self, name: str, value: Any, value: Any) -> Builder"}, {"name": "add_parts", "line": 244, "parameters": [{"name": "self", "type": "self"}, {"name": "parts", "type": "Dict[str, Any]"}], "is_async": false, "return_type": "Builder", "description": "\n        Add multiple parts to the builder.\n\n        Args:\n            parts: Dictionary of parts\n\n        Returns:\n            Self for chaining\n        ", "signature": "add_parts(self, parts: Dict[str, Any]) -> Builder"}, {"name": "get_part", "line": 257, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Get a part from the builder.\n\n        Args:\n            name: Part name\n\n        Returns:\n            Part value\n        ", "signature": "get_part(self, name: str) -> Any"}, {"name": "has_part", "line": 269, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if builder has a part.\n\n        Args:\n            name: Part name\n\n        Returns:\n            True if part exists\n        ", "signature": "has_part(self, name: str) -> bool"}, {"name": "remove_part", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Builder", "description": "\n        Remove a part from the builder.\n\n        Args:\n            name: Part name\n\n        Returns:\n            Self for chaining\n        ", "signature": "remove_part(self, name: str) -> Builder"}, {"name": "clear", "line": 294, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Builder", "description": "\n        Clear all parts.\n\n        Returns:\n            Self for chaining\n        ", "signature": "clear(self) -> Builder"}, {"name": "build", "line": 304, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "\n        Build an instance using the collected parts.\n\n        Args:\n            cls: Class to instantiate\n\n        Returns:\n            Built instance\n        ", "signature": "build(self, cls: Type[T]) -> T"}], "properties": [], "description": "Class implementing the builder pattern to construct complex objects step-by-step."}, {"name": "BuilderFactory", "line": 320, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 323, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize builder factory.", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 327, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance using builder pattern.\n\n        Args:\n            name: Registration name\n            *args: Positional arguments (ignored)\n            **kwargs: Keyword arguments for parts\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Factory class specialized in creating builder instances."}, {"name": "Prototype", "line": 348, "inherits_from": [], "methods": [{"name": "__init__", "line": 351, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize prototype.", "signature": "__init__(self)"}, {"name": "register_prototype", "line": 355, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, prototype: Any"}, {"name": "prototype", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Register a prototype.\n\n        Args:\n            name: Prototype name\n            prototype: Prototype instance\n        ", "signature": "register_prototype(self, name: str, prototype: Any, prototype: Any) -> None"}, {"name": "clone", "line": 365, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Clone a prototype.\n\n        Args:\n            name: Prototype name\n\n        Returns:\n            Cloned instance\n\n        Raises:\n            FactoryError: If prototype not found\n        ", "signature": "clone(self, name: str) -> Any"}, {"name": "list_prototypes", "line": 396, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "\n        List all prototype names.\n\n        Returns:\n            List of prototype names\n        ", "signature": "list_prototypes(self) -> List[str]"}], "properties": [], "description": "Class implementing the prototype pattern to clone existing objects."}, {"name": "PrototypeFactory", "line": 406, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 409, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize prototype factory.", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 414, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by cloning prototype.\n\n        Args:\n            name: Prototype name\n            *args: Positional arguments (ignored)\n            **kwargs: Keyword arguments for customization\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "register_prototype", "line": 435, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, prototype: T"}, {"name": "prototype", "type": "T"}], "is_async": false, "return_type": "None", "description": "\n        Register a prototype.\n\n        Args:\n            name: Prototype name\n            prototype: Prototype instance\n        ", "signature": "register_prototype(self, name: str, prototype: T, prototype: T) -> None"}], "properties": [], "description": "Factory class managing prototype instances and cloning them on demand."}, {"name": "DependencyInjector", "line": 446, "inherits_from": [], "methods": [{"name": "__init__", "line": 449, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize dependency injector.", "signature": "__init__(self)"}, {"name": "register_service", "line": 455, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, service: Any"}, {"name": "service", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Register a service instance.\n\n        Args:\n            name: Service name\n            service: Service instance\n        ", "signature": "register_service(self, name: str, service: Any, service: Any) -> None"}, {"name": "register_factory", "line": 465, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, factory: Callable"}, {"name": "factory", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register a service factory.\n\n        Args:\n            name: Service name\n            factory: Factory function\n        ", "signature": "register_factory(self, name: str, factory: Callable, factory: Callable) -> None"}, {"name": "register_singleton", "line": 475, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, factory: Callable"}, {"name": "factory", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register a singleton factory.\n\n        Args:\n            name: Service name\n            factory: Factory function\n        ", "signature": "register_singleton(self, name: str, factory: Callable, factory: Callable) -> None"}, {"name": "get_service", "line": 486, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Get a service by name.\n\n        Args:\n            name: Service name\n\n        Returns:\n            Service instance\n\n        Raises:\n            FactoryError: If service not found\n        ", "signature": "get_service(self, name: str) -> Any"}, {"name": "inject_dependencies", "line": 521, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Inject dependencies into an object.\n\n        Args:\n            obj: Object to inject dependencies into\n        ", "signature": "inject_dependencies(self, obj: Any) -> None"}, {"name": "create_with_dependencies", "line": 535, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "Type[T], **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create an instance and inject dependencies.\n\n        Args:\n            cls: Class to instantiate\n            **kwargs: Additional keyword arguments\n\n        Returns:\n            Created instance with dependencies injected\n        ", "signature": "create_with_dependencies(self, cls: Type[T], **kwargs, **kwargs) -> T"}], "properties": [], "description": "Class managing dependency injection, resolving and providing dependencies to clients."}], "imports": [{"module": "inspect", "alias": null, "line": 11, "statement": "import inspect"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 17, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 33, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "inspect", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Callable", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import List", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import Type", "type": "import", "line": 12}, {"name": "from typing import TypeVar", "type": "import", "line": 12}, {"name": "from typing import Union", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from abc import ABC", "type": "import", "line": 14}, {"name": "from abc import abstractmethod", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 17}, {"name": "FactoryError", "type": "class", "line": 20}, {"name": "FactoryType", "type": "class", "line": 25}, {"name": "T", "type": "constant", "line": 33}, {"name": "Factory", "type": "class", "line": 36}, {"name": "SimpleFactory", "type": "class", "line": 104}, {"name": "AbstractFactory", "type": "class", "line": 161}, {"name": "Builder", "type": "class", "line": 223}, {"name": "BuilderFactory", "type": "class", "line": 320}, {"name": "Prototype", "type": "class", "line": 348}, {"name": "PrototypeFactory", "type": "class", "line": 406}, {"name": "DependencyInjector", "type": "class", "line": 446}, {"name": "inject", "type": "function", "line": 555}, {"name": "singleton", "type": "function", "line": 570}, {"name": "factory_method", "type": "function", "line": 583}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "inject Function", "description": "Function inject implementation.", "line_start": 555, "line_end": 569}, {"name": "singleton Function", "description": "Function singleton implementation.", "line_start": 570, "line_end": 582}, {"name": "factory_method Function", "description": "Function factory_method implementation.", "line_start": 583, "line_end": 588}, {"name": "FactoryError Class", "description": "Class FactoryError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "FactoryType Class", "description": "Class FactoryType definition and methods.", "line_start": 25, "line_end": 35}, {"name": "Factory Class", "description": "Class Factory definition and methods.", "line_start": 36, "line_end": 97}, {"name": "SimpleFactory Class", "description": "Class SimpleFactory definition and methods.", "line_start": 104, "line_end": 150}, {"name": "AbstractFactory Class", "description": "Class AbstractFactory definition and methods.", "line_start": 161, "line_end": 216}, {"name": "Builder Class", "description": "Class Builder definition and methods.", "line_start": 223, "line_end": 307}, {"name": "BuilderFactory Class", "description": "Class BuilderFactory definition and methods.", "line_start": 320, "line_end": 330}, {"name": "Prototype Class", "description": "Class Prototype definition and methods.", "line_start": 348, "line_end": 399}, {"name": "PrototypeFactory Class", "description": "Class PrototypeFactory definition and methods.", "line_start": 406, "line_end": 438}, {"name": "DependencyInjector Class", "description": "Class DependencyInjector definition and methods.", "line_start": 446, "line_end": 538}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 33, "line_end": 33}], "content_hash": "c0435306325fd3eb8c246f738f746528"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
  line_count: 315
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "state_machine.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StateTransitionError", "line": 20, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for invalid state transitions."}, {"name": "StateTransition", "line": 26, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a transition between two states in the state machine."}, {"name": "StateEvent", "line": 37, "inherits_from": [], "methods": [], "properties": [], "description": "Defines an event that triggers state transitions."}, {"name": "State", "line": 45, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str) -> None"}, {"name": "add_entry_action", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an action to execute when entering this state.", "signature": "add_entry_action(self, action: Callable) -> None"}, {"name": "add_exit_action", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an action to execute when exiting this state.", "signature": "add_exit_action(self, action: Callable) -> None"}, {"name": "add_internal_action", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, action: Callable"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an internal action for this state.", "signature": "add_internal_action(self, trigger: str, action: Callable, action: Callable) -> None"}, {"name": "on_entry", "line": 66, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Execute entry actions.", "signature": "async on_entry(self, context: Any) -> None"}, {"name": "on_exit", "line": 77, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Execute exit actions.", "signature": "async on_exit(self, context: Any) -> None"}, {"name": "on_internal_event", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, context: Any"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Handle internal events within this state.", "signature": "async on_internal_event(self, trigger: str, context: Any, context: Any) -> bool"}], "properties": [], "description": "Represents a state within the state machine, managing entry, exit, and transitions."}, {"name": "StateMachine", "line": 103, "inherits_from": [], "methods": [{"name": "__init__", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "initial_state", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, initial_state: str) -> None"}, {"name": "add_state", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "State"}], "is_async": false, "return_type": "None", "description": "Add a state to the state machine.", "signature": "add_state(self, state: State) -> None"}, {"name": "add_transition", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "transition", "type": "StateTransition"}], "is_async": false, "return_type": "None", "description": "Add a transition to the state machine.", "signature": "add_transition(self, transition: StateTransition) -> None"}, {"name": "get_valid_transitions", "line": 125, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "str"}], "is_async": false, "return_type": "List[StateTransition]", "description": "Get all valid transitions from a state.", "signature": "get_valid_transitions(self, state: str) -> List[StateTransition]"}, {"name": "can_transition", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "from_state", "type": "str, trigger: str"}, {"name": "trigger", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if a transition is valid.", "signature": "can_transition(self, from_state: str, trigger: str, trigger: str) -> bool"}, {"name": "start", "line": 145, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any = None", "default": "None"}], "is_async": true, "return_type": "None", "description": "Start the state machine.", "signature": "async start(self, context: Any = None = None) -> None"}, {"name": "trigger", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, event_data: Any = None"}, {"name": "event_data", "type": "Any = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Trigger a state transition.", "signature": "async trigger(self, trigger: str, event_data: Any = None, event_data: Any = None = None) -> bool"}, {"name": "_execute_transition", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "transition", "type": "StateTransition, event_data: Any"}, {"name": "event_data", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Execute a state transition.", "signature": "async _execute_transition(self, transition: StateTransition, event_data: Any, event_data: Any) -> bool"}, {"name": "get_current_state", "line": 221, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Optional[str]", "description": "Get the current state.", "signature": "get_current_state(self) -> Optional[str]"}, {"name": "get_state_history", "line": 225, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[Tuple[str, str, datetime]]", "description": "Get the state transition history.", "signature": "get_state_history(self) -> List[Tuple[str, str, datetime]]"}, {"name": "is_in_state", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if the state machine is in a specific state.", "signature": "is_in_state(self, state: str) -> bool"}, {"name": "get_available_triggers", "line": 233, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[str]", "description": "Get all available triggers for the current state.", "signature": "get_available_triggers(self) -> List[str]"}], "properties": [], "description": "Manages states and transitions, handling events to change states accordingly."}, {"name": "StateMachineBuilder", "line": 245, "inherits_from": [], "methods": [{"name": "__init__", "line": 248, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_state", "line": 253, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "State"}], "is_async": false, "return_type": "''StateMachineBuilder''", "description": "Add a state to the builder.", "signature": "add_state(self, state: State) -> ''StateMachineBuilder''"}, {"name": "set_initial_state", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "state_name", "type": "str"}], "is_async": false, "return_type": "''StateMachineBuilder''", "description": "Set the initial state.", "signature": "set_initial_state(self, state_name: str) -> ''StateMachineBuilder''"}, {"name": "add_transition", "line": 263, "parameters": [{"name": "self", "type": "self"}, {"name": "from_state", "type": "str"}, {"name": "to_state", "type": "str"}, {"name": "trigger", "type": "str"}, {"name": "condition", "type": "Optional[Callable]", "default": "None"}, {"name": "action", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "''StateMachineBuilder''", "description": "Add a transition to the builder.", "signature": "add_transition(self, from_state: str, to_state: str, trigger: str, condition: Optional[Callable] = None, action: Optional[Callable] = None = None) -> ''StateMachineBuilder''"}, {"name": "build", "line": 277, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "StateMachine", "description": "Build the state machine.", "signature": "build(self) -> StateMachine"}], "properties": [], "description": "Facilitates the construction and configuration of a state machine."}, {"name": "SimpleState", "line": 300, "inherits_from": ["State):"], "methods": [{"name": "__init__", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str) -> None"}], "properties": [], "description": "A basic implementation of a state with minimal behavior."}, {"name": "WorkflowState", "line": 307, "inherits_from": ["State):"], "methods": [{"name": "__init__", "line": 310, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, description: str = \"\""}, {"name": "description", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str, description: str = \"\", description: str = \"\" = ) -> None"}, {"name": "add_metadata", "line": 315, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Add metadata to the state.", "signature": "add_metadata(self, key: str, value: Any, value: Any) -> None"}], "properties": [], "description": "Represents a state within a workflow, supporting additional workflow-specific logic."}], "imports": [{"module": "asyncio", "alias": null, "line": 13, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 14, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Set"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Tuple"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import datetime"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 13}, {"name": "logging", "type": "import", "line": 14}, {"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Callable", "type": "import", "line": 10}, {"name": "from typing import Dict", "type": "import", "line": 10}, {"name": "from typing import List", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from typing import Set", "type": "import", "line": 10}, {"name": "from typing import Tuple", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 11}, {"name": "from dataclasses import field", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 15}, {"name": "StateTransitionError", "type": "class", "line": 20}, {"name": "StateTransition", "type": "class", "line": 26}, {"name": "StateEvent", "type": "class", "line": 37}, {"name": "State", "type": "class", "line": 45}, {"name": "StateMachine", "type": "class", "line": 103}, {"name": "StateMachineBuilder", "type": "class", "line": 245}, {"name": "SimpleState", "type": "class", "line": 300}, {"name": "WorkflowState", "type": "class", "line": 307}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "StateTransitionError Class", "description": "Class StateTransitionError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "StateTransition Class", "description": "Class StateTransition definition and methods.", "line_start": 26, "line_end": 36}, {"name": "StateEvent Class", "description": "Class StateEvent definition and methods.", "line_start": 37, "line_end": 47}, {"name": "State Class", "description": "Class State definition and methods.", "line_start": 45, "line_end": 91}, {"name": "StateMachine Class", "description": "Class StateMachine definition and methods.", "line_start": 103, "line_end": 236}, {"name": "StateMachineBuilder Class", "description": "Class StateMachineBuilder definition and methods.", "line_start": 245, "line_end": 280}, {"name": "SimpleState Class", "description": "Class SimpleState definition and methods.", "line_start": 300, "line_end": 306}, {"name": "WorkflowState Class", "description": "Class WorkflowState definition and methods.", "line_start": 307, "line_end": 318}], "content_hash": "d1cd442fb64d0294d63740118ad2b994"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "dependency_injection.py", "description": "Python module with 4 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "inject", "line": 197, "parameters": [{"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Retrieves an instance of the specified service type from the current dependency container.", "signature": "inject(service_type: Type[T]) -> T"}, {"name": "get_container", "line": 278, "parameters": [], "is_async": false, "return_type": "DependencyContainer", "description": "Returns the current global dependency container instance.", "signature": "get_container() -> DependencyContainer"}, {"name": "set_container", "line": 286, "parameters": [{"name": "container", "type": "DependencyContainer"}], "is_async": false, "return_type": "None", "description": "Sets the global dependency container to the provided container instance.", "signature": "set_container(container: DependencyContainer) -> None"}, {"name": "resolve", "line": 292, "parameters": [{"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Resolves and returns an instance of the specified service type from the dependency container.", "signature": "resolve(service_type: Type[T]) -> T"}], "classes": [{"name": "LifecycleScope", "line": 20, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "SINGLETON", "line": 20, "type": ""}, {"name": "TRANSIENT", "line": 21, "type": ""}, {"name": "REQUEST", "line": 22, "type": ""}, {"name": "SESSION", "line": 23, "type": ""}], "description": "Represents the lifecycle scope of a service instance within the dependency injection system."}, {"name": "DependencyResolutionError", "line": 28, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when a dependency cannot be resolved from the container."}, {"name": "ServiceDescriptor", "line": 34, "inherits_from": [], "methods": [], "properties": [], "description": "Describes a service registration including its type, implementation, and lifecycle."}, {"name": "DependencyContainer", "line": 47, "inherits_from": [], "methods": [{"name": "__init__", "line": 50, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable]", "default": "None"}, {"name": "scope", "type": "LifecycleScope = LifecycleScope.TRANSIENT", "default": "LifecycleScope.TRANSIENT"}], "is_async": false, "return_type": "None", "description": "Register a service with the container.", "signature": "register(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None, scope: LifecycleScope = LifecycleScope.TRANSIENT = LifecycleScope.TRANSIENT) -> None"}, {"name": "register_singleton", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a singleton service.", "signature": "register_singleton(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> None"}, {"name": "register_transient", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a transient service.", "signature": "register_transient(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> None"}, {"name": "register_scoped", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a scoped service.", "signature": "register_scoped(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> None"}, {"name": "resolve", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Resolve a service instance.", "signature": "resolve(self, service_type: Type[T]) -> T"}, {"name": "_create_instance", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "descriptor", "type": "ServiceDescriptor"}], "is_async": false, "return_type": "Any", "description": "Create a new instance of a service.", "signature": "_create_instance(self, descriptor: ServiceDescriptor) -> Any"}, {"name": "_create_instance_from_type", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "type_class", "type": "Type"}], "is_async": false, "return_type": "Any", "description": "Create an instance from a type, resolving dependencies.", "signature": "_create_instance_from_type(self, type_class: Type) -> Any"}, {"name": "scope", "line": 159, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create a new scope for scoped services.", "signature": "scope(self)"}, {"name": "is_registered", "line": 168, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type"}], "is_async": false, "return_type": "bool", "description": "Check if a service is registered.", "signature": "is_registered(self, service_type: Type) -> bool"}, {"name": "get_registered_services", "line": 172, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "List[Type]", "description": "Get all registered service types.", "signature": "get_registered_services(self) -> List[Type]"}, {"name": "clear", "line": 176, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all registrations and instances.", "signature": "clear(self) -> None"}], "properties": [], "description": "Manages service registrations and resolves service instances based on their lifecycles."}, {"name": "Injectable", "line": 185, "inherits_from": [], "methods": [{"name": "__init__", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "scope", "type": "LifecycleScope = LifecycleScope.TRANSIENT", "default": "LifecycleScope.TRANSIENT"}], "is_async": false, "return_type": "None", "signature": "__init__(self, scope: LifecycleScope = LifecycleScope.TRANSIENT = LifecycleScope.TRANSIENT) -> None"}, {"name": "__call__", "line": 191, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "Type[T]"}], "is_async": false, "return_type": "Type[T]", "description": "Mark a class as injectable.", "signature": "__call__(self, cls: Type[T]) -> Type[T]"}], "properties": [], "description": "Base class or mixin indicating that a class supports dependency injection."}, {"name": "ServiceProvider", "line": 219, "inherits_from": [], "methods": [{"name": "__init__", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "container", "type": "DependencyContainer"}], "is_async": false, "return_type": "None", "signature": "__init__(self, container: DependencyContainer) -> None"}, {"name": "get_service", "line": 225, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Get a service instance.", "signature": "get_service(self, service_type: Type[T]) -> T"}, {"name": "get_required_service", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "T", "description": "Get a required service instance.", "signature": "get_required_service(self, service_type: Type[T]) -> T"}, {"name": "get_optional_service", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}], "is_async": false, "return_type": "Optional[T]", "description": "Get an optional service instance.", "signature": "get_optional_service(self, service_type: Type[T]) -> Optional[T]"}], "properties": [], "description": "Provides access to service instances, typically resolving dependencies on demand."}, {"name": "ServiceCollection", "line": 242, "inherits_from": [], "methods": [{"name": "__init__", "line": 245, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_singleton", "line": 248, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "''ServiceCollection''", "description": "Add a singleton service.", "signature": "add_singleton(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> ''ServiceCollection''"}, {"name": "add_transient", "line": 255, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "''ServiceCollection''", "description": "Add a transient service.", "signature": "add_transient(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> ''ServiceCollection''"}, {"name": "add_scoped", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "Type[T]"}, {"name": "implementation_type", "type": "Optional[Type[T]]", "default": "None"}, {"name": "factory", "type": "Optional[Callable] = None", "default": "None"}], "is_async": false, "return_type": "''ServiceCollection''", "description": "Add a scoped service.", "signature": "add_scoped(self, service_type: Type[T], implementation_type: Optional[Type[T]] = None, factory: Optional[Callable] = None = None) -> ''ServiceCollection''"}, {"name": "build_service_provider", "line": 269, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "ServiceProvider", "description": "Build the service provider.", "signature": "build_service_provider(self) -> ServiceProvider"}], "properties": [], "description": "Collects and manages service registrations before building a dependency container."}], "imports": [{"module": "inspect", "alias": null, "line": 13, "statement": "import inspect"}, {"module": "logging", "alias": null, "line": 14, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Callable"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "contextlib", "alias": null, "line": 15, "statement": "from contextlib import contextmanager"}], "constants": [{"name": "T", "line": 44, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "inspect", "type": "import", "line": 13}, {"name": "logging", "type": "import", "line": 14}, {"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Callable", "type": "import", "line": 10}, {"name": "from typing import Dict", "type": "import", "line": 10}, {"name": "from typing import List", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from typing import Type", "type": "import", "line": 10}, {"name": "from typing import TypeVar", "type": "import", "line": 10}, {"name": "from typing import Union", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 11}, {"name": "from dataclasses import field", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from contextlib import contextmanager", "type": "import", "line": 15}, {"name": "LifecycleScope", "type": "class", "line": 20}, {"name": "DependencyResolutionError", "type": "class", "line": 28}, {"name": "ServiceDescriptor", "type": "class", "line": 34}, {"name": "T", "type": "constant", "line": 44}, {"name": "DependencyContainer", "type": "class", "line": 47}, {"name": "Injectable", "type": "class", "line": 185}, {"name": "inject", "type": "function", "line": 197}, {"name": "ServiceProvider", "type": "class", "line": 219}, {"name": "ServiceCollection", "type": "class", "line": 242}, {"name": "get_container", "type": "function", "line": 278}, {"name": "set_container", "type": "function", "line": 286}, {"name": "resolve", "type": "function", "line": 292}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "inject Function", "description": "Function inject implementation.", "line_start": 197, "line_end": 218}, {"name": "get_container Function", "description": "Function get_container implementation.", "line_start": 278, "line_end": 285}, {"name": "set_container Function", "description": "Function set_container implementation.", "line_start": 286, "line_end": 291}, {"name": "resolve Function", "description": "Function resolve implementation.", "line_start": 292, "line_end": 297}, {"name": "LifecycleScope Class", "description": "Class LifecycleScope definition and methods.", "line_start": 20, "line_end": 30}, {"name": "DependencyResolutionError Class", "description": "Class DependencyResolutionError definition and methods.", "line_start": 28, "line_end": 38}, {"name": "ServiceDescriptor Class", "description": "Class ServiceDescriptor definition and methods.", "line_start": 34, "line_end": 44}, {"name": "DependencyContainer Class", "description": "Class DependencyContainer definition and methods.", "line_start": 47, "line_end": 179}, {"name": "Injectable Class", "description": "Class Injectable definition and methods.", "line_start": 185, "line_end": 194}, {"name": "ServiceProvider Class", "description": "Class ServiceProvider definition and methods.", "line_start": 219, "line_end": 238}, {"name": "ServiceCollection Class", "description": "Class ServiceCollection definition and methods.", "line_start": 242, "line_end": 272}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 44, "line_end": 44}], "content_hash": "6e4a2ce05e1c5a2d76eca1412b2473a4"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
  line_count: 242
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "strategy.py", "description": "Python module with 0 functions and 13 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StrategyType", "line": 18, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CACHING", "line": 18, "type": ""}, {"name": "ENCRYPTION", "line": 19, "type": ""}, {"name": "COMPRESSION", "line": 20, "type": ""}, {"name": "SERIALIZATION", "line": 21, "type": ""}, {"name": "VALIDATION", "line": 22, "type": ""}, {"name": "AUTHENTICATION", "line": 23, "type": ""}, {"name": "RATE_LIMITING", "line": 24, "type": ""}, {"name": "RETRY", "line": 25, "type": ""}, {"name": "FALLBACK", "line": 26, "type": ""}], "description": "Defines different types of strategies available."}, {"name": "Strategy", "line": 34, "inherits_from": ["ABC", "Generic[T]):"], "methods": [{"name": "execute", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "T", "description": "Execute the strategy with given context.", "signature": "execute(self, context: Any) -> T"}, {"name": "get_name", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get the strategy name.", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class representing a generic strategy with core methods."}, {"name": "StrategyContext", "line": 48, "inherits_from": [], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy", "type": "Strategy"}], "is_async": false, "return_type": "None", "signature": "__init__(self, strategy: Strategy) -> None"}, {"name": "set_strategy", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy", "type": "Strategy"}], "is_async": false, "return_type": "None", "description": "Set a new strategy.", "signature": "set_strategy(self, strategy: Strategy) -> None"}, {"name": "execute_strategy", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the current strategy.", "signature": "execute_strategy(self, context: Any) -> Any"}], "properties": [], "description": "Manages the execution context for a given strategy."}, {"name": "StrategyRegistry", "line": 71, "inherits_from": [], "methods": [{"name": "__init__", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str, strategy_class: Type[Strategy]"}, {"name": "name", "type": "str, strategy_class: Type[Strategy]"}, {"name": "strategy_class", "type": "Type[Strategy]"}], "is_async": false, "return_type": "None", "description": "Register a strategy.", "signature": "register(self, strategy_type: str, name: str, strategy_class: Type[Strategy], name: str, strategy_class: Type[Strategy], strategy_class: Type[Strategy]) -> None"}, {"name": "unregister", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a strategy.", "signature": "unregister(self, strategy_type: str, name: str, name: str) -> None"}, {"name": "get_strategy", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Get a strategy instance by type and name.", "signature": "get_strategy(self, strategy_type: str, name: str, name: str) -> Strategy"}, {"name": "get_default_strategy", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Get the default strategy for a type.", "signature": "get_default_strategy(self, strategy_type: str) -> Strategy"}, {"name": "set_default_strategy", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set the default strategy for a type.", "signature": "set_default_strategy(self, strategy_type: str, name: str, name: str) -> None"}, {"name": "list_strategies", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "Optional[str] = None", "default": "None"}], "is_async": false, "return_type": "Dict[str, Any]", "description": "List all registered strategies.", "signature": "list_strategies(self, strategy_type: Optional[str] = None = None) -> Dict[str, Any]"}], "properties": [], "description": "Maintains a registry of available strategies and provides lookup functionality."}, {"name": "StrategyFactory", "line": 139, "inherits_from": [], "methods": [{"name": "create_strategy", "line": 143, "parameters": [{"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Create a strategy instance.", "signature": "create_strategy(strategy_type: str, name: str, name: str) -> Strategy"}, {"name": "create_default_strategy", "line": 148, "parameters": [{"name": "strategy_type", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Create a default strategy instance.", "signature": "create_default_strategy(strategy_type: str) -> Strategy"}], "properties": [], "description": "Creates instances of strategies based on specified criteria."}, {"name": "StrategyConfig", "line": 154, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 160, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__post_init__(self) -> None"}], "properties": [], "description": "Holds configuration settings for strategies."}, {"name": "StrategySelector", "line": 165, "inherits_from": [], "methods": [{"name": "__init__", "line": 168, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_rule", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, rule: callable"}, {"name": "rule", "type": "callable"}], "is_async": false, "return_type": "None", "description": "Add a selection rule for a strategy type.", "signature": "add_rule(self, strategy_type: str, rule: callable, rule: callable) -> None"}, {"name": "select_strategy", "line": 176, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, context: Any"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "Strategy", "description": "Select the best strategy based on context.", "signature": "select_strategy(self, strategy_type: str, context: Any, context: Any) -> Strategy"}], "properties": [], "description": "Selects the most appropriate strategy based on context or criteria."}, {"name": "CachingStrategy", "line": 189, "inherits_from": ["Strategy[bool]):"], "methods": [{"name": "get_name", "line": 192, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class for caching strategies."}, {"name": "MemoryCachingStrategy", "line": 196, "inherits_from": ["CachingStrategy):"], "methods": [{"name": "execute", "line": 199, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bool", "signature": "execute(self, context: Any) -> bool"}, {"name": "get_name", "line": 203, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Implements caching strategy using in-memory storage."}, {"name": "RedisCachingStrategy", "line": 207, "inherits_from": ["CachingStrategy):"], "methods": [{"name": "execute", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bool", "signature": "execute(self, context: Any) -> bool"}, {"name": "get_name", "line": 214, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Implements caching strategy using Redis as backend storage."}, {"name": "EncryptionStrategy", "line": 218, "inherits_from": ["Strategy[bytes]):"], "methods": [{"name": "get_name", "line": 221, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class for encryption strategies."}, {"name": "AESEncryptionStrategy", "line": 225, "inherits_from": ["EncryptionStrategy):"], "methods": [{"name": "execute", "line": 228, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bytes", "signature": "execute(self, context: Any) -> bytes"}, {"name": "get_name", "line": 232, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Implements encryption strategy using AES algorithm."}, {"name": "ChaCha20EncryptionStrategy", "line": 236, "inherits_from": ["EncryptionStrategy):"], "methods": [{"name": "execute", "line": 239, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bytes", "signature": "execute(self, context: Any) -> bytes"}, {"name": "get_name", "line": 243, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Implements encryption strategy using ChaCha20 algorithm."}], "imports": [{"module": "logging", "alias": null, "line": 13, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Generic"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import TypeVar"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}], "constants": [{"name": "T", "line": 31, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "logging", "type": "import", "line": 13}, {"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Dict", "type": "import", "line": 10}, {"name": "from typing import Generic", "type": "import", "line": 10}, {"name": "from typing import TypeVar", "type": "import", "line": 10}, {"name": "from typing import Type", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "StrategyType", "type": "class", "line": 18}, {"name": "T", "type": "constant", "line": 31}, {"name": "Strategy", "type": "class", "line": 34}, {"name": "StrategyContext", "type": "class", "line": 48}, {"name": "StrategyRegistry", "type": "class", "line": 71}, {"name": "StrategyFactory", "type": "class", "line": 139}, {"name": "StrategyConfig", "type": "class", "line": 154}, {"name": "StrategySelector", "type": "class", "line": 165}, {"name": "CachingStrategy", "type": "class", "line": 189}, {"name": "MemoryCachingStrategy", "type": "class", "line": 196}, {"name": "RedisCachingStrategy", "type": "class", "line": 207}, {"name": "EncryptionStrategy", "type": "class", "line": 218}, {"name": "AESEncryptionStrategy", "type": "class", "line": 225}, {"name": "ChaCha20EncryptionStrategy", "type": "class", "line": 236}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "StrategyType Class", "description": "Class StrategyType definition and methods.", "line_start": 18, "line_end": 28}, {"name": "Strategy Class", "description": "Class Strategy definition and methods.", "line_start": 34, "line_end": 46}, {"name": "StrategyContext Class", "description": "Class StrategyContext definition and methods.", "line_start": 48, "line_end": 63}, {"name": "StrategyRegistry Class", "description": "Class StrategyRegistry definition and methods.", "line_start": 71, "line_end": 121}, {"name": "StrategyFactory Class", "description": "Class StrategyFactory definition and methods.", "line_start": 139, "line_end": 151}, {"name": "StrategyConfig Class", "description": "Class StrategyConfig definition and methods.", "line_start": 154, "line_end": 163}, {"name": "StrategySelector Class", "description": "Class StrategySelector definition and methods.", "line_start": 165, "line_end": 179}, {"name": "CachingStrategy Class", "description": "Class CachingStrategy definition and methods.", "line_start": 189, "line_end": 195}, {"name": "MemoryCachingStrategy Class", "description": "Class MemoryCachingStrategy definition and methods.", "line_start": 196, "line_end": 206}, {"name": "RedisCachingStrategy Class", "description": "Class RedisCachingStrategy definition and methods.", "line_start": 207, "line_end": 217}, {"name": "EncryptionStrategy Class", "description": "Class EncryptionStrategy definition and methods.", "line_start": 218, "line_end": 224}, {"name": "AESEncryptionStrategy Class", "description": "Class AESEncryptionStrategy definition and methods.", "line_start": 225, "line_end": 235}, {"name": "ChaCha20EncryptionStrategy Class", "description": "Class ChaCha20EncryptionStrategy definition and methods.", "line_start": 236, "line_end": 246}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 31, "line_end": 31}], "content_hash": "e4fecd5b44916d0b19589d49c6ee165d"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/__init__.py
  line_count: 12
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "settings", "alias": null, "line": 9, "statement": "from settings import FoundationConfig"}, {"module": "settings", "alias": null, "line": 9, "statement": "from settings import config"}], "constants": []}, "key_elements": [{"name": "from settings import FoundationConfig", "type": "import", "line": 9}, {"name": "from settings import config", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "0dfa0d395b75aa40fb4f584e65899b9d"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/settings.py
  line_count: 68
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "settings.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "FoundationConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 39, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"FoundationConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"FoundationConfig\""}, {"name": "validate", "line": 60, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Validate configuration settings.", "signature": "validate(self) -> None"}], "properties": [], "description": "Manages configuration settings for the foundation module."}], "imports": [{"module": "os", "alias": null, "line": 9, "statement": "import os"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from pydantic import BaseModel", "type": "import", "line": 11}, {"name": "from pydantic import Field", "type": "import", "line": 11}, {"name": "FoundationConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "FoundationConfig Class", "description": "Class FoundationConfig definition and methods.", "line_start": 14, "line_end": 63}], "content_hash": "1604f342b991b8649a26587e5e4b97bd"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/secrets.py
  line_count: 506
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "secrets.py", "description": "Python module with 2 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "secret", "line": 472, "parameters": [{"name": "name", "type": "str"}, {"name": "source", "type": "SecretSource"}, {"name": "key", "type": "str"}], "is_async": false, "description": "Retrieves a secret value by name, source, and key, with optional parameters.", "signature": "secret(name: str, source: SecretSource, key: str, **kwargs)"}, {"name": "require_secret", "line": 494, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Ensures that a secret with the given name exists and is accessible.", "signature": "require_secret(name: str):)"}], "classes": [{"name": "SecretError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to secret handling."}, {"name": "SecretSource", "line": 28, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ENVIRONMENT", "line": 28, "type": ""}, {"name": "FILE", "line": 29, "type": ""}, {"name": "VAULT", "line": 30, "type": ""}, {"name": "AWS_SECRETS_MANAGER", "line": 31, "type": ""}, {"name": "AZURE_KEY_VAULT", "line": 32, "type": ""}, {"name": "GOOGLE_SECRET_MANAGER", "line": 33, "type": ""}], "description": "Represents a source from which secrets can be retrieved."}, {"name": "SecretConfig", "line": 39, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for secret management."}, {"name": "SecretManager", "line": 51, "inherits_from": [], "methods": [{"name": "__init__", "line": 54, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize secret manager.", "signature": "__init__(self)"}, {"name": "add_secret", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "None", "description": "\n        Add secret configuration.\n\n        Args:\n            config: Secret configuration\n        ", "signature": "add_secret(self, config: SecretConfig) -> None"}, {"name": "remove_secret", "line": 69, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove secret configuration.\n\n        Args:\n            name: Secret name\n        ", "signature": "remove_secret(self, name: str) -> None"}, {"name": "get_secret", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, refresh: bool = False"}, {"name": "refresh", "type": "bool = False", "default": "False"}], "is_async": false, "return_type": "Optional[str]", "description": "\n        Get secret value.\n\n        Args:\n            name: Secret name\n            refresh: Whether to refresh from source\n\n        Returns:\n            Secret value or None if not found\n        ", "signature": "get_secret(self, name: str, refresh: bool = False, refresh: bool = False = False) -> Optional[str]"}, {"name": "_load_secret", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "\n        Load secret from source.\n\n        Args:\n            config: Secret configuration\n\n        Returns:\n            Secret value or None if not found\n        ", "signature": "_load_secret(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_environment", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from environment variable.", "signature": "_load_from_environment(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_file", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from file.", "signature": "_load_from_file(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_vault", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from HashiCorp Vault.", "signature": "_load_from_vault(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_aws_secrets_manager", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from AWS Secrets Manager.", "signature": "_load_from_aws_secrets_manager(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_azure_key_vault", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from Azure Key Vault.", "signature": "_load_from_azure_key_vault(self, config: SecretConfig) -> Optional[str]"}, {"name": "_load_from_google_secret_manager", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "Optional[str]", "description": "Load secret from Google Secret Manager.", "signature": "_load_from_google_secret_manager(self, config: SecretConfig) -> Optional[str]"}, {"name": "set_encryption_key", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "Union[str, bytes]"}], "is_async": false, "return_type": "None", "description": "\n        Set encryption key for decrypting secrets.\n\n        Args:\n            key: Encryption key\n        ", "signature": "set_encryption_key(self, key: Union[str, bytes]) -> None"}, {"name": "_decrypt_value", "line": 283, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_value", "type": "str"}], "is_async": false, "return_type": "Optional[str]", "description": "\n        Decrypt a value.\n\n        Args:\n            encrypted_value: Encrypted value\n\n        Returns:\n            Decrypted value or None if decryption fails\n        ", "signature": "_decrypt_value(self, encrypted_value: str) -> Optional[str]"}, {"name": "encrypt_value", "line": 306, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Encrypt a value.\n\n        Args:\n            value: Value to encrypt\n\n        Returns:\n            Encrypted value\n        ", "signature": "encrypt_value(self, value: str) -> str"}, {"name": "refresh_secrets", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Refresh all secrets from their sources.", "signature": "refresh_secrets(self) -> None"}, {"name": "get_secret_hash", "line": 331, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Optional[str]", "description": "\n        Get hash of secret value for comparison.\n\n        Args:\n            name: Secret name\n\n        Returns:\n            Hash of secret value or None if not found\n        ", "signature": "get_secret_hash(self, name: str) -> Optional[str]"}, {"name": "validate_secrets", "line": 346, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, bool]", "description": "\n        Validate all configured secrets.\n\n        Returns:\n            Dictionary mapping secret names to validation status\n        ", "signature": "validate_secrets(self) -> Dict[str, bool]"}], "properties": [], "description": "Manages the lifecycle, retrieval, and storage of secrets."}, {"name": "SecretRotator", "line": 363, "inherits_from": [], "methods": [{"name": "__init__", "line": 366, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_manager", "type": "SecretManager):"}], "is_async": false, "description": "\n        Initialize secret rotator.\n\n        Args:\n            secret_manager: Secret manager instance\n        ", "signature": "__init__(self, secret_manager: SecretManager):)"}, {"name": "should_rotate", "line": 376, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if secret should be rotated.\n\n        Args:\n            secret_name: Secret name\n\n        Returns:\n            True if secret should be rotated\n        ", "signature": "should_rotate(self, secret_name: str) -> bool"}, {"name": "rotate_secret", "line": 402, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str, new_value: str"}, {"name": "new_value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Rotate a secret.\n\n        Args:\n            secret_name: Secret name\n            new_value: New secret value\n\n        Returns:\n            True if rotation successful\n        ", "signature": "rotate_secret(self, secret_name: str, new_value: str, new_value: str) -> bool"}, {"name": "get_rotation_history", "line": 455, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str"}], "is_async": false, "return_type": "list", "description": "\n        Get rotation history for a secret.\n\n        Args:\n            secret_name: Secret name\n\n        Returns:\n            List of rotation records\n        ", "signature": "get_rotation_history(self, secret_name: str) -> list"}], "properties": [], "description": "Handles automatic rotation and updating of secrets."}], "imports": [{"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "base64", "alias": null, "line": 13, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 18, "statement": "import hashlib"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 17, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 20, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 11}, {"name": "json", "type": "import", "line": 12}, {"name": "base64", "type": "import", "line": 13}, {"name": "hashlib", "type": "import", "line": 18}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import Dict", "type": "import", "line": 14}, {"name": "from typing import Optional", "type": "import", "line": 14}, {"name": "from typing import Union", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from dataclasses import field", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 17}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 20}, {"name": "SecretError", "type": "class", "line": 23}, {"name": "SecretSource", "type": "class", "line": 28}, {"name": "SecretConfig", "type": "class", "line": 39}, {"name": "SecretManager", "type": "class", "line": 51}, {"name": "SecretRotator", "type": "class", "line": 363}, {"name": "secret", "type": "function", "line": 472}, {"name": "require_secret", "type": "function", "line": 494}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 20}, {"name": "secret Function", "description": "Function secret implementation.", "line_start": 472, "line_end": 493}, {"name": "require_secret Function", "description": "Function require_secret implementation.", "line_start": 494, "line_end": 499}, {"name": "SecretError Class", "description": "Class SecretError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "SecretSource Class", "description": "Class SecretSource definition and methods.", "line_start": 28, "line_end": 38}, {"name": "SecretConfig Class", "description": "Class SecretConfig definition and methods.", "line_start": 39, "line_end": 49}, {"name": "SecretManager Class", "description": "Class SecretManager definition and methods.", "line_start": 51, "line_end": 349}, {"name": "SecretRotator Class", "description": "Class SecretRotator definition and methods.", "line_start": 363, "line_end": 458}], "content_hash": "f41671c4b970f83512037674c300f19c"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/environments.py
  line_count: 505
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "environments.py", "description": "Python module with 2 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "environment_config", "line": 469, "parameters": [{"name": "environment", "type": "Environment):"}], "is_async": false, "description": "Retrieves the configuration settings for a given environment.", "signature": "environment_config(environment: Environment):)"}, {"name": "feature_flag", "line": 491, "parameters": [{"name": "flag_name", "type": "str"}, {"name": "default", "type": "bool", "default": "False"}], "is_async": false, "description": "Checks the status of a feature flag, returning a default value if not set.", "signature": "feature_flag(flag_name: str, default: bool = False)"}], "classes": [{"name": "EnvironmentError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to environment operations."}, {"name": "Environment", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "DEVELOPMENT", "line": 26, "type": ""}, {"name": "STAGING", "line": 27, "type": ""}, {"name": "PRODUCTION", "line": 28, "type": ""}, {"name": "TESTING", "line": 29, "type": ""}], "description": "Defines the properties and behavior of an application environment."}, {"name": "EnvironmentConfig", "line": 35, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration details for a specific environment."}, {"name": "EnvironmentDetector", "line": 48, "inherits_from": [], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize environment detector.", "signature": "__init__(self)"}, {"name": "detect_environment", "line": 56, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "\n        Detect current environment.\n\n        Returns:\n            Current environment\n        ", "signature": "detect_environment(self) -> Environment"}, {"name": "set_environment", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "None", "description": "\n        Set current environment.\n\n        Args:\n            environment: Environment to set\n        ", "signature": "set_environment(self, environment: Environment) -> None"}, {"name": "get_environment", "line": 101, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "Get current environment.", "signature": "get_environment(self) -> Environment"}, {"name": "is_development", "line": 105, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is development.", "signature": "is_development(self) -> bool"}, {"name": "is_staging", "line": 109, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is staging.", "signature": "is_staging(self) -> bool"}, {"name": "is_production", "line": 113, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is production.", "signature": "is_production(self) -> bool"}, {"name": "is_testing", "line": 117, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is testing.", "signature": "is_testing(self) -> bool"}], "properties": [], "description": "Detects and identifies the current running environment."}, {"name": "EnvironmentConfigLoader", "line": 122, "inherits_from": [], "methods": [{"name": "__init__", "line": 125, "parameters": [{"name": "self", "type": "self"}, {"name": "config_dir", "type": "Optional[str]", "default": "None"}], "is_async": false, "description": "\n        Initialize config loader.\n\n        Args:\n            config_dir: Configuration directory path\n        ", "signature": "__init__(self, config_dir: Optional[str] = None)"}, {"name": "load_config", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Optional[Environment] = None", "default": "None"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Load configuration for environment.\n\n        Args:\n            environment: Environment to load config for (uses detected if None)\n\n        Returns:\n            Environment configuration\n        ", "signature": "load_config(self, environment: Optional[Environment] = None = None) -> EnvironmentConfig"}, {"name": "_load_from_file", "line": 163, "parameters": [{"name": "self", "type": "self"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "Optional[EnvironmentConfig]", "description": "\n        Load configuration from file.\n\n        Args:\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration or None if not found\n        ", "signature": "_load_from_file(self, environment_name: str) -> Optional[EnvironmentConfig]"}, {"name": "_parse_config_file", "line": 190, "parameters": [{"name": "self", "type": "self"}, {"name": "config_path", "type": "Path, environment_name: str"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Parse configuration file.\n\n        Args:\n            config_path: Path to configuration file\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration\n        ", "signature": "_parse_config_file(self, config_path: Path, environment_name: str, environment_name: str) -> EnvironmentConfig"}, {"name": "_create_config_from_dict", "line": 224, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Dict[str, Any], environment_name: str"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Create configuration from dictionary.\n\n        Args:\n            data: Configuration data\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration\n        ", "signature": "_create_config_from_dict(self, data: Dict[str, Any], environment_name: str, environment_name: str) -> EnvironmentConfig"}, {"name": "_create_default_config", "line": 249, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Create default configuration for environment.\n\n        Args:\n            environment: Environment\n\n        Returns:\n            Default environment configuration\n        ", "signature": "_create_default_config(self, environment: Environment) -> EnvironmentConfig"}, {"name": "save_config", "line": 316, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EnvironmentConfig"}], "is_async": false, "return_type": "None", "description": "\n        Save configuration to file.\n\n        Args:\n            config: Configuration to save\n        ", "signature": "save_config(self, config: EnvironmentConfig) -> None"}, {"name": "reload_config", "line": 341, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Optional[Environment] = None", "default": "None"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Reload configuration for environment.\n\n        Args:\n            environment: Environment to reload config for\n\n        Returns:\n            Reloaded environment configuration\n        ", "signature": "reload_config(self, environment: Optional[Environment] = None = None) -> EnvironmentConfig"}], "properties": [], "description": "Loads environment configuration data from various sources."}, {"name": "EnvironmentManager", "line": 361, "inherits_from": [], "methods": [{"name": "__init__", "line": 364, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize environment manager.", "signature": "__init__(self)"}, {"name": "get_current_config", "line": 370, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Get current environment configuration.\n\n        Returns:\n            Current environment configuration\n        ", "signature": "get_current_config(self) -> EnvironmentConfig"}, {"name": "get_config", "line": 381, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Get configuration for specific environment.\n\n        Args:\n            environment: Environment\n\n        Returns:\n            Environment configuration\n        ", "signature": "get_config(self, environment: Environment) -> EnvironmentConfig"}, {"name": "set_environment", "line": 393, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "None", "description": "\n        Set current environment.\n\n        Args:\n            environment: Environment to set\n        ", "signature": "set_environment(self, environment: Environment) -> None"}, {"name": "get_environment", "line": 403, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "Get current environment.", "signature": "get_environment(self) -> Environment"}, {"name": "is_development", "line": 407, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is development.", "signature": "is_development(self) -> bool"}, {"name": "is_staging", "line": 411, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is staging.", "signature": "is_staging(self) -> bool"}, {"name": "is_production", "line": 415, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is production.", "signature": "is_production(self) -> bool"}, {"name": "is_testing", "line": 419, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is testing.", "signature": "is_testing(self) -> bool"}, {"name": "get_feature_flag", "line": 423, "parameters": [{"name": "self", "type": "self"}, {"name": "flag_name", "type": "str, default: bool = False"}, {"name": "default", "type": "bool = False", "default": "False"}], "is_async": false, "return_type": "bool", "description": "\n        Get feature flag value.\n\n        Args:\n            flag_name: Feature flag name\n            default: Default value if flag not found\n\n        Returns:\n            Feature flag value\n        ", "signature": "get_feature_flag(self, flag_name: str, default: bool = False, default: bool = False = False) -> bool"}, {"name": "get_api_key", "line": 437, "parameters": [{"name": "self", "type": "self"}, {"name": "service_name", "type": "str"}], "is_async": false, "return_type": "Optional[str]", "description": "\n        Get API key for service.\n\n        Args:\n            service_name: Service name\n\n        Returns:\n            API key or None if not found\n        ", "signature": "get_api_key(self, service_name: str) -> Optional[str]"}, {"name": "get_custom_setting", "line": 450, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "\n        Get custom setting value.\n\n        Args:\n            key: Setting key\n            default: Default value if setting not found\n\n        Returns:\n            Setting value\n        ", "signature": "get_custom_setting(self, key: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Manages environment settings, configurations, and lifecycle."}], "imports": [{"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Union"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 16, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 11}, {"name": "json", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Union", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from pathlib import Path", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "EnvironmentError", "type": "class", "line": 21}, {"name": "Environment", "type": "class", "line": 26}, {"name": "EnvironmentConfig", "type": "class", "line": 35}, {"name": "EnvironmentDetector", "type": "class", "line": 48}, {"name": "EnvironmentConfigLoader", "type": "class", "line": 122}, {"name": "EnvironmentManager", "type": "class", "line": 361}, {"name": "environment_config", "type": "function", "line": 469}, {"name": "feature_flag", "type": "function", "line": 491}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "environment_config Function", "description": "Function environment_config implementation.", "line_start": 469, "line_end": 490}, {"name": "feature_flag Function", "description": "Function feature_flag implementation.", "line_start": 491, "line_end": 496}, {"name": "EnvironmentError Class", "description": "Class EnvironmentError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "Environment Class", "description": "Class Environment definition and methods.", "line_start": 26, "line_end": 36}, {"name": "EnvironmentConfig Class", "description": "Class EnvironmentConfig definition and methods.", "line_start": 35, "line_end": 45}, {"name": "EnvironmentDetector Class", "description": "Class EnvironmentDetector definition and methods.", "line_start": 48, "line_end": 120}, {"name": "EnvironmentConfigLoader Class", "description": "Class EnvironmentConfigLoader definition and methods.", "line_start": 122, "line_end": 344}, {"name": "EnvironmentManager Class", "description": "Class EnvironmentManager definition and methods.", "line_start": 361, "line_end": 453}], "content_hash": "fc811683b6d930e91d76534c04eac38f"}'
- path: libs/opsvi-agents/opsvi_agents/__init__.py
  line_count: 42
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import FoundationConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import AuthManager"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import AgentsConfig"}, {"module": "core", "alias": null, "line": 24, "statement": "from core import config"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import AgentsError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import AgentsValidationError"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import AgentsConfigurationError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 15}, {"name": "from opsvi_foundation import AuthManager", "type": "import", "line": 15}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from core import AgentsConfig", "type": "import", "line": 24}, {"name": "from core import config", "type": "import", "line": 24}, {"name": "from core.exceptions import AgentsError", "type": "import", "line": 25}, {"name": "from core.exceptions import AgentsValidationError", "type": "import", "line": 25}, {"name": "from core.exceptions import AgentsConfigurationError", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "b96f65581d082cff8033e1d5862c9296"}'
- path: libs/opsvi-agents/opsvi_agents/adapters/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "d6bc34616bbc370b8d07b664d3996116"}'
- path: libs/opsvi-agents/opsvi_agents/monitoring/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "b54eeef628c46fa143ef023f8316f1a7"}'
- path: libs/opsvi-agents/opsvi_agents/communication/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "70988e55ec4d3a0bcd6d3bb122f66df9"}'
- path: libs/opsvi-agents/opsvi_agents/core/__init__.py
  line_count: 16
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import AgentsConfig"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import config"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import AgentsError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import AgentsValidationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import AgentsConfigurationError"}], "constants": []}, "key_elements": [{"name": "from config import AgentsConfig", "type": "import", "line": 9}, {"name": "from config import config", "type": "import", "line": 9}, {"name": "from exceptions import AgentsError", "type": "import", "line": 10}, {"name": "from exceptions import AgentsValidationError", "type": "import", "line": 10}, {"name": "from exceptions import AgentsConfigurationError", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "35ce9e611d747413a03a188887f8c6d0"}'
- path: libs/opsvi-agents/opsvi_agents/core/exceptions.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentsError", "line": 12, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Base exception class for agent-related errors."}, {"name": "AgentsValidationError", "line": 18, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised for validation errors in agents."}, {"name": "AgentsConfigurationError", "line": 24, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised for configuration errors in agents."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "AgentsError", "type": "class", "line": 12}, {"name": "AgentsValidationError", "type": "class", "line": 18}, {"name": "AgentsConfigurationError", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}, {"name": "AgentsError Class", "description": "Class AgentsError definition and methods.", "line_start": 12, "line_end": 22}, {"name": "AgentsValidationError Class", "description": "Class AgentsValidationError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "AgentsConfigurationError Class", "description": "Class AgentsConfigurationError definition and methods.", "line_start": 24, "line_end": 34}], "content_hash": "6a67f23ca90f27302e40c01c38865a46"}'
- path: libs/opsvi-agents/opsvi_agents/core/config.py
  line_count: 29
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentsConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 23, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"AgentsConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"AgentsConfig\""}], "properties": [], "description": "Configuration class for managing agent settings."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import FoundationConfig"}], "constants": []}, "key_elements": [{"name": "from typing import Optional", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from opsvi_foundation import FoundationConfig", "type": "import", "line": 11}, {"name": "AgentsConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "AgentsConfig Class", "description": "Class AgentsConfig definition and methods.", "line_start": 14, "line_end": 26}], "content_hash": "c8e30f74511c90b1212166e7b51c9995"}'
- path: libs/opsvi-agents/opsvi_agents/workflows/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "6d5a4ce9c2a78fa1e0db2f34d2ce3836"}'
- path: libs/opsvi-agents/opsvi_agents/utils/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "e038db8d11f05f505fe5db78d663b7b6"}'
- path: libs/opsvi-agents/opsvi_agents/tests/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "01b26828cfbb1298813cec288d366800"}'
- path: libs/opsvi-agents/opsvi_agents/types/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "e0e5f02c089fd8c382ee4e54cfd3c008"}'
- path: libs/opsvi-agents/opsvi_agents/registry/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "3ca69f010581f7562920ddf0f3c2a0e7"}'
- path: libs/opsvi-agents/opsvi_agents/deployment/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "6b75fa02beb2e666d60e22c9ee152c05"}'
- path: libs/opsvi-agents/opsvi_agents/orchestration/__init__.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1782b556861bf1b888c63ff60a5c1efd"}'
- path: libs/opsvi-agents/tests/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "63c0451e46689ea038c19b64797f165d"}'
- path: libs/opsvi-agents/tests/test_agents.py
  line_count: 266
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_agents.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MockAgent", "line": 23, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str", "default": "test-agent"}], "is_async": false, "signature": "__init__(self, agent_id: str = test-agent, **kwargs)"}, {"name": "_initialize", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize mock agent.", "signature": "async _initialize(self) -> None"}, {"name": "_cleanup", "line": 34, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup mock agent.", "signature": "async _cleanup(self) -> None"}, {"name": "process", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "str", "description": "Process message.", "signature": "async process(self, message: str) -> str"}, {"name": "is_active", "line": 42, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if agent is active.", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Simulates an agent for testing purposes with predefined behaviors."}, {"name": "TestCrewAdapter", "line": 47, "inherits_from": [], "methods": [{"name": "crew_adapter", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create CrewAdapter instance for testing.", "signature": "crew_adapter(self)"}, {"name": "mock_agents", "line": 56, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create mock agents for testing.", "signature": "mock_agents(self)"}, {"name": "test_create_crew_success", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test successful crew creation.", "signature": "async test_create_crew_success(self, crew_adapter, mock_agents)"}, {"name": "test_create_crew_no_agents", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}], "is_async": true, "description": "Test crew creation with no agents.", "signature": "async test_create_crew_no_agents(self, crew_adapter)"}, {"name": "test_create_crew_no_tasks", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test crew creation with no tasks.", "signature": "async test_create_crew_no_tasks(self, crew_adapter, mock_agents)"}, {"name": "test_get_crew", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test getting crew information.", "signature": "async test_get_crew(self, crew_adapter, mock_agents)"}, {"name": "test_delete_crew", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test crew deletion.", "signature": "async test_delete_crew(self, crew_adapter, mock_agents)"}], "properties": [], "description": "Tests the CrewAdapter functionality, ensuring correct integration and data handling."}, {"name": "TestGraphAdapter", "line": 130, "inherits_from": [], "methods": [{"name": "graph_adapter", "line": 134, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create GraphAdapter instance for testing.", "signature": "graph_adapter(self)"}, {"name": "test_create_graph_success", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test successful graph creation.", "signature": "async test_create_graph_success(self, graph_adapter)"}, {"name": "test_create_graph_no_nodes", "line": 159, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph creation with no nodes.", "signature": "async test_create_graph_no_nodes(self, graph_adapter)"}, {"name": "test_create_graph_invalid_node", "line": 165, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph creation with invalid node.", "signature": "async test_create_graph_invalid_node(self, graph_adapter)"}, {"name": "test_execute_graph", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph execution.", "signature": "async test_execute_graph(self, graph_adapter)"}, {"name": "test_execute_nonexistent_graph", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test executing non-existent graph.", "signature": "async test_execute_nonexistent_graph(self, graph_adapter)"}], "properties": [], "description": "Validates the GraphAdapter''s methods for graph data manipulation and retrieval."}, {"name": "TestAgentRegistry", "line": 194, "inherits_from": [], "methods": [{"name": "registry", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create AgentRegistry instance for testing.", "signature": "registry(self)"}, {"name": "test_register_agent_type", "line": 202, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test agent type registration.", "signature": "test_register_agent_type(self, registry)"}, {"name": "test_register_duplicate_type", "line": 213, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test registering duplicate agent type.", "signature": "test_register_duplicate_type(self, registry)"}, {"name": "test_create_agent", "line": 221, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test agent creation.", "signature": "async test_create_agent(self, registry)"}, {"name": "test_create_unknown_agent_type", "line": 232, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test creating agent with unknown type.", "signature": "async test_create_unknown_agent_type(self, registry)"}, {"name": "test_create_duplicate_agent_id", "line": 238, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test creating agent with duplicate ID.", "signature": "async test_create_duplicate_agent_id(self, registry)"}, {"name": "test_remove_agent", "line": 247, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test agent removal.", "signature": "async test_remove_agent(self, registry)"}, {"name": "test_get_stats", "line": 261, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test registry statistics.", "signature": "test_get_stats(self, registry)"}], "properties": [], "description": "Tests the AgentRegistry for proper registration, lookup, and management of agents."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 10, "statement": "from unittest.mock import MagicMock"}, {"module": "opsvi_core.agents.base_agent", "alias": null, "line": 12, "statement": "from opsvi_core.agents.base_agent import BaseAgent"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.exceptions import ValidationError"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.exceptions import InitializationError"}, {"module": "opsvi_agents", "alias": null, "line": 15, "statement": "from opsvi_agents import CrewAdapter"}, {"module": "opsvi_agents", "alias": null, "line": 15, "statement": "from opsvi_agents import GraphAdapter"}, {"module": "opsvi_agents", "alias": null, "line": 15, "statement": "from opsvi_agents import BaseOrchestrator"}, {"module": "opsvi_agents", "alias": null, "line": 15, "statement": "from opsvi_agents import AgentRegistry"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 10}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 10}, {"name": "from opsvi_core.agents.base_agent import BaseAgent", "type": "import", "line": 12}, {"name": "from opsvi_core.exceptions import ValidationError", "type": "import", "line": 13}, {"name": "from opsvi_core.exceptions import InitializationError", "type": "import", "line": 13}, {"name": "from opsvi_agents import CrewAdapter", "type": "import", "line": 15}, {"name": "from opsvi_agents import GraphAdapter", "type": "import", "line": 15}, {"name": "from opsvi_agents import BaseOrchestrator", "type": "import", "line": 15}, {"name": "from opsvi_agents import AgentRegistry", "type": "import", "line": 15}, {"name": "MockAgent", "type": "class", "line": 23}, {"name": "TestCrewAdapter", "type": "class", "line": 47}, {"name": "TestGraphAdapter", "type": "class", "line": 130}, {"name": "TestAgentRegistry", "type": "class", "line": 194}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "MockAgent Class", "description": "Class MockAgent definition and methods.", "line_start": 23, "line_end": 45}, {"name": "TestCrewAdapter Class", "description": "Class TestCrewAdapter definition and methods.", "line_start": 47, "line_end": 116}, {"name": "TestGraphAdapter Class", "description": "Class TestGraphAdapter definition and methods.", "line_start": 130, "line_end": 191}, {"name": "TestAgentRegistry Class", "description": "Class TestAgentRegistry definition and methods.", "line_start": 194, "line_end": 264}], "content_hash": "657d10b9ddacfa9551a7bc0fc30ebf34"}'
- path: libs/templates/create_opsvi_library.py
  line_count: 368
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "create_opsvi_library.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library", "line": 279, "parameters": [{"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "domain", "type": "str"}, {"name": "custom_dependencies", "type": "list", "default": "None"}, {"name": "custom_config_fields", "type": "str", "default": ""}, {"name": "custom_imports", "type": "str", "default": ""}, {"name": "custom_exports", "type": "str", "default": ""}, {"name": "custom_config_values", "type": "str", "default": ""}], "is_async": false, "return_type": "None", "description": "Creates a new library with specified metadata and optional custom configurations.", "signature": "create_library(name: str, description: str, domain: str, custom_dependencies: list = None, custom_config_fields: str = , custom_imports: str = , custom_exports: str = , custom_config_values: str = ) -> None"}, {"name": "main", "line": 351, "parameters": [], "is_async": false, "description": "Entry point of the program that executes the primary workflow.", "signature": "main()"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 10, "statement": "import argparse"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "shutil", "alias": null, "line": 12, "statement": "import shutil"}, {"module": "pathlib", "alias": null, "line": 13, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}], "constants": [{"name": "LIBRARY_TEMPLATE", "line": 16, "value": "{''directories'': [''{lib_name}'', ''{lib_name}/core'', ''{lib_name}/utils'', ''tests'', ''docs'']}", "type": "dict"}]}, "key_elements": [{"name": "argparse", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "shutil", "type": "import", "line": 12}, {"name": "from pathlib import Path", "type": "import", "line": 13}, {"name": "from typing import Dict", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "LIBRARY_TEMPLATE", "type": "constant", "line": 16}, {"name": "create_library", "type": "function", "line": 279}, {"name": "main", "type": "function", "line": 351}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "create_library Function", "description": "Function create_library implementation.", "line_start": 279, "line_end": 350}, {"name": "main Function", "description": "Function main implementation.", "line_start": 351, "line_end": 356}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 16, "line_end": 16}], "content_hash": "2bc80fb5d1daced9e489420bbcb01ad8"}'
- path: tests/opsvi_core/test_logging.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_logging.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "test_get_logger_returns_logger", "line": 6, "parameters": [], "is_async": false, "return_type": "None", "signature": "test_get_logger_returns_logger() -> None", "description": "Tests that the get_logger function returns a valid logger instance."}], "classes": [], "imports": [{"module": "opsvi_core.logging", "alias": "log_mod", "line": 3, "statement": "import opsvi_core.logging as log_mod"}], "constants": []}, "key_elements": [{"name": "opsvi_core.logging", "type": "import", "line": 3}, {"name": "test_get_logger_returns_logger", "type": "function", "line": 6}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 3}, {"name": "test_get_logger_returns_logger Function", "description": "Function test_get_logger_returns_logger implementation.", "line_start": 6, "line_end": 11}], "content_hash": "944ebe676ed84ac91ffe6c096fbe9e20"}'
- path: tools/rag_init.py
  line_count: 129
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rag_init.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "init_rag_system", "line": 22, "parameters": [{"name": "collection_name", "type": "str = \"global__demo\"", "default": "global__demo"}], "is_async": true, "return_type": "None", "description": "Initializes the RAG (Retrieval-Augmented Generation) system with the specified collection name.", "signature": "async init_rag_system(collection_name: str = \"global__demo\" = global__demo) -> None"}, {"name": "main", "line": 114, "parameters": [], "is_async": false, "return_type": "None", "description": "Entry point of the program that runs the main application logic.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 6, "statement": "import asyncio"}, {"module": "sys", "alias": null, "line": 7, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 8, "statement": "from pathlib import Path"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import get_logger"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import setup_logging"}, {"module": "qdrant_client", "alias": null, "line": 16, "statement": "from qdrant_client import QdrantClient"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import Distance"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import VectorParams"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 6}, {"name": "sys", "type": "import", "line": 7}, {"name": "from pathlib import Path", "type": "import", "line": 8}, {"name": "from opsvi_core import get_logger", "type": "import", "line": 15}, {"name": "from opsvi_core import setup_logging", "type": "import", "line": 15}, {"name": "from qdrant_client import QdrantClient", "type": "import", "line": 16}, {"name": "from qdrant_client.models import Distance", "type": "import", "line": 17}, {"name": "from qdrant_client.models import VectorParams", "type": "import", "line": 17}, {"name": "init_rag_system", "type": "function", "line": 22}, {"name": "main", "type": "function", "line": 114}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 6, "line_end": 17}, {"name": "init_rag_system Function", "description": "Function init_rag_system implementation.", "line_start": 22, "line_end": 113}, {"name": "main Function", "description": "Function main implementation.", "line_start": 114, "line_end": 119}], "content_hash": "39167ba7fbb839ddb12cdbf519704ce8"}'
