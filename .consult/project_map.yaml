# PROJECT MAP - AI AGENT OPTIMIZED
# ===============================
# Comprehensive project analysis for AI agents
# Generated by genfilemap utility
#
# AGENT USAGE:
# - project_structure: File organization and type distribution
# - entry_points: Application entry points and CLI interface
# - statistics: Overall code metrics and statistics
# - dependency_analysis: Import relationships and dependency mapping
# - workflow_analysis: Execution paths and workflow diagrams
# - files: Detailed analysis of each file in the project
#
# KEY INSIGHTS:
# - Find entry points in entry_points section
# - Understand dependencies in dependency_analysis section
# - Trace execution flows in workflow_analysis section
# - Navigate codebase using files section
#
# Generated: 2025-08-07T02:02:01+00:00
# Tool: genfilemap --project-map-in-memory

project_name: master_root
base_path: /home/opsvi/master_root
generated_at: '2025-08-07T02:02:01+00:00'
# Module organization and file type distribution
project_structure:
  file_type_distribution:
    python_files: 248
    config_files: 9
    total_files: 248
  module_structure:
    scripts:
      files:
      - scripts/generate_rag_components.py
      - scripts/generate_all_components.py
      - scripts/generate_remaining_rag.py
      - scripts/generate_agents_components.py
      total_lines: 1483
      total_functions: 5
      total_classes: 3
    docs:
      files:
      - docs/libs/generate_dry_ecosystem.py
      - docs/libs/templates/create_opsvi_library.py
      total_lines: 968
      total_functions: 2
      total_classes: 1
    libs:
      files:
      - libs/generate_dry_ecosystem.py
      - libs/opsvi-rag/examples/enhanced_rag_demo.py
      - libs/opsvi-rag/opsvi_rag/__init__.py
      - libs/opsvi-rag/opsvi_rag/observability/__init__.py
      - libs/opsvi-rag/opsvi_rag/core/__init__.py
      - libs/opsvi-rag/opsvi_rag/core/exceptions.py
      - libs/opsvi-rag/opsvi_rag/core/config.py
      - libs/opsvi-rag/opsvi_rag/core/base.py
      - libs/opsvi-rag/opsvi_rag/chunking/__init__.py
      - libs/opsvi-rag/opsvi_rag/chunking/adaptive.py
      - libs/opsvi-rag/opsvi_rag/chunking/overlapping.py
      - libs/opsvi-rag/opsvi_rag/chunking/semantic.py
      - libs/opsvi-rag/opsvi_rag/chunking/hierarchical.py
      - libs/opsvi-rag/opsvi_rag/quality/__init__.py
      - libs/opsvi-rag/opsvi_rag/quality/relevance.py
      - libs/opsvi-rag/opsvi_rag/quality/coverage.py
      - libs/opsvi-rag/opsvi_rag/search/__init__.py
      - libs/opsvi-rag/opsvi_rag/search/faceted.py
      - libs/opsvi-rag/opsvi_rag/search/semantic.py
      - libs/opsvi-rag/opsvi_rag/search/keyword.py
      - libs/opsvi-rag/opsvi_rag/search/vector.py
      - libs/opsvi-rag/opsvi_rag/indexing/__init__.py
      - libs/opsvi-rag/opsvi_rag/indexing/hybrid.py
      - libs/opsvi-rag/opsvi_rag/indexing/keyword.py
      - libs/opsvi-rag/opsvi_rag/indexing/vector.py
      - libs/opsvi-rag/opsvi_rag/embeddings/providers.py
      - libs/opsvi-rag/opsvi_rag/embeddings/__init__.py
      - libs/opsvi-rag/opsvi_rag/embeddings/openai.py
      - libs/opsvi-rag/opsvi_rag/embeddings/sentence_transformers.py
      - libs/opsvi-rag/opsvi_rag/datastores/__init__.py
      - libs/opsvi-rag/opsvi_rag/datastores/sqlite_store.py
      - libs/opsvi-rag/opsvi_rag/datastores/neo4j_store.py
      - libs/opsvi-rag/opsvi_rag/datastores/chromadb_store.py
      - libs/opsvi-rag/opsvi_rag/utils/__init__.py
      - libs/opsvi-rag/opsvi_rag/utils/datastore_factory.py
      - libs/opsvi-rag/opsvi_rag/tests/__init__.py
      - libs/opsvi-rag/opsvi_rag/analytics/__init__.py
      - libs/opsvi-rag/opsvi_rag/analytics/quality.py
      - libs/opsvi-rag/opsvi_rag/analytics/metrics.py
      - libs/opsvi-rag/opsvi_rag/analytics/performance.py
      - libs/opsvi-rag/opsvi_rag/security/__init__.py
      - libs/opsvi-rag/opsvi_rag/resilience/__init__.py
      - libs/opsvi-rag/opsvi_rag/retrieval/__init__.py
      - libs/opsvi-rag/opsvi_rag/retrieval/reranking.py
      - libs/opsvi-rag/opsvi_rag/retrieval/filtering.py
      - libs/opsvi-rag/opsvi_rag/retrieval/hybrid.py
      - libs/opsvi-rag/opsvi_rag/retrieval/ranking.py
      - libs/opsvi-rag/opsvi_rag/pipelines/__init__.py
      - libs/opsvi-rag/opsvi_rag/pipelines/base.py
      - libs/opsvi-rag/opsvi_rag/pipelines/indexing.py
      - libs/opsvi-rag/opsvi_rag/pipelines/retrieval.py
      - libs/opsvi-rag/opsvi_rag/pipelines/ingestion.py
      - libs/opsvi-rag/opsvi_rag/storage/__init__.py
      - libs/opsvi-rag/opsvi_rag/storage/file.py
      - libs/opsvi-rag/opsvi_rag/storage/base.py
      - libs/opsvi-rag/opsvi_rag/storage/memory.py
      - libs/opsvi-rag/opsvi_rag/storage/qdrant.py
      - libs/opsvi-rag/opsvi_rag/storage/database.py
      - libs/opsvi-rag/opsvi_rag/cache/__init__.py
      - libs/opsvi-rag/opsvi_rag/cache/memory.py
      - libs/opsvi-rag/opsvi_rag/cache/redis.py
      - libs/opsvi-rag/opsvi_rag/processors/__init__.py
      - libs/opsvi-rag/opsvi_rag/processors/docx.py
      - libs/opsvi-rag/opsvi_rag/processors/email.py
      - libs/opsvi-rag/opsvi_rag/processors/web.py
      - libs/opsvi-rag/opsvi_rag/processors/base.py
      - libs/opsvi-rag/opsvi_rag/processors/pdf.py
      - libs/opsvi-rag/opsvi_rag/processors/html.py
      - libs/opsvi-rag/opsvi_rag/processors/csv.py
      - libs/opsvi-rag/opsvi_rag/processors/json.py
      - libs/opsvi-rag/opsvi_rag/processors/markdown.py
      - libs/opsvi-rag/opsvi_rag/processors/text.py
      - libs/opsvi-rag/tests/test_providers.py
      - libs/opsvi-llm/opsvi_llm/__init__.py
      - libs/opsvi-llm/opsvi_llm/observability/__init__.py
      - libs/opsvi-llm/opsvi_llm/monitoring/__init__.py
      - libs/opsvi-llm/opsvi_llm/core/__init__.py
      - libs/opsvi-llm/opsvi_llm/core/exceptions.py
      - libs/opsvi-llm/opsvi_llm/core/config.py
      - libs/opsvi-llm/opsvi_llm/core/base.py
      - libs/opsvi-llm/opsvi_llm/embeddings/__init__.py
      - libs/opsvi-llm/opsvi_llm/functions/__init__.py
      - libs/opsvi-llm/opsvi_llm/safety/__init__.py
      - libs/opsvi-llm/opsvi_llm/utils/__init__.py
      - libs/opsvi-llm/opsvi_llm/tests/__init__.py
      - libs/opsvi-llm/opsvi_llm/fine_tuning/__init__.py
      - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
      - libs/opsvi-llm/opsvi_llm/schemas/requests.py
      - libs/opsvi-llm/opsvi_llm/schemas/responses.py
      - libs/opsvi-llm/opsvi_llm/security/__init__.py
      - libs/opsvi-llm/opsvi_llm/resilience/__init__.py
      - libs/opsvi-llm/opsvi_llm/optimization/__init__.py
      - libs/opsvi-llm/opsvi_llm/streaming/__init__.py
      - libs/opsvi-llm/opsvi_llm/prompts/__init__.py
      - libs/opsvi-llm/opsvi_llm/agents/__init__.py
      - libs/opsvi-llm/opsvi_llm/providers/__init__.py
      - libs/opsvi-llm/opsvi_llm/providers/base.py
      - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
      - libs/opsvi-llm/tests/__init__.py
      - libs/opsvi-llm/tests/test_schemas.py
      - libs/opsvi-core/opsvi_core/__init__.py
      - libs/opsvi-core/opsvi_core/observability/__init__.py
      - libs/opsvi-core/opsvi_core/monitoring/__init__.py
      - libs/opsvi-core/opsvi_core/monitoring/base.py
      - libs/opsvi-core/opsvi_core/core/__init__.py
      - libs/opsvi-core/opsvi_core/core/exceptions.py
      - libs/opsvi-core/opsvi_core/core/config.py
      - libs/opsvi-core/opsvi_core/core/base.py
      - libs/opsvi-core/opsvi_core/messaging/in_memory.py
      - libs/opsvi-core/opsvi_core/messaging/__init__.py
      - libs/opsvi-core/opsvi_core/messaging/base.py
      - libs/opsvi-core/opsvi_core/workflows/definition.py
      - libs/opsvi-core/opsvi_core/workflows/__init__.py
      - libs/opsvi-core/opsvi_core/workflows/monitoring.py
      - libs/opsvi-core/opsvi_core/workflows/state.py
      - libs/opsvi-core/opsvi_core/workflows/engine.py
      - libs/opsvi-core/opsvi_core/workflows/steps.py
      - libs/opsvi-core/opsvi_core/workflows/triggers.py
      - libs/opsvi-core/opsvi_core/utils/__init__.py
      - libs/opsvi-core/opsvi_core/utils/base.py
      - libs/opsvi-core/opsvi_core/tests/__init__.py
      - libs/opsvi-core/opsvi_core/api/__init__.py
      - libs/opsvi-core/opsvi_core/api/base.py
      - libs/opsvi-core/opsvi_core/events/in_memory.py
      - libs/opsvi-core/opsvi_core/events/__init__.py
      - libs/opsvi-core/opsvi_core/events/base.py
      - libs/opsvi-core/opsvi_core/security/__init__.py
      - libs/opsvi-core/opsvi_core/security/auth.py
      - libs/opsvi-core/opsvi_core/resilience/__init__.py
      - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
      - libs/opsvi-core/opsvi_core/resilience/retry.py
      - libs/opsvi-core/opsvi_core/caching/in_memory.py
      - libs/opsvi-core/opsvi_core/caching/__init__.py
      - libs/opsvi-core/opsvi_core/caching/base.py
      - libs/opsvi-core/opsvi_core/storage/__init__.py
      - libs/opsvi-core/opsvi_core/storage/base.py
      - libs/opsvi-core/opsvi_core/serialization/__init__.py
      - libs/opsvi-core/opsvi_core/serialization/base.py
      - libs/opsvi-core/opsvi_core/plugins/__init__.py
      - libs/opsvi-core/opsvi_core/plugins/base.py
      - libs/opsvi-core/opsvi_core/testing/__init__.py
      - libs/opsvi-core/opsvi_core/testing/base.py
      - libs/opsvi-core/opsvi_core/agents/__init__.py
      - libs/opsvi-core/opsvi_core/agents/base_agent.py
      - libs/opsvi-core/tests/__init__.py
      - libs/opsvi-core/tests/test_core.py
      - libs/opsvi-foundation/opsvi_foundation/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/observability/alerts.py
      - libs/opsvi-foundation/opsvi_foundation/observability/profiling.py
      - libs/opsvi-foundation/opsvi_foundation/observability/tracing.py
      - libs/opsvi-foundation/opsvi_foundation/observability/health.py
      - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
      - libs/opsvi-foundation/opsvi_foundation/observability/metrics.py
      - libs/opsvi-foundation/opsvi_foundation/scaffolding/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/scaffolding/exceptions.py
      - libs/opsvi-foundation/opsvi_foundation/scaffolding/config.py
      - libs/opsvi-foundation/opsvi_foundation/scaffolding/testing.py
      - libs/opsvi-foundation/opsvi_foundation/scaffolding/base.py
      - libs/opsvi-foundation/opsvi_foundation/utils/compression.py
      - libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
      - libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
      - libs/opsvi-foundation/opsvi_foundation/utils/encryption.py
      - libs/opsvi-foundation/opsvi_foundation/utils/caching.py
      - libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
      - libs/opsvi-foundation/opsvi_foundation/utils/validation.py
      - libs/opsvi-foundation/opsvi_foundation/security/permissions.py
      - libs/opsvi-foundation/opsvi_foundation/security/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/security/oauth.py
      - libs/opsvi-foundation/opsvi_foundation/security/encryption.py
      - libs/opsvi-foundation/opsvi_foundation/security/auth.py
      - libs/opsvi-foundation/opsvi_foundation/security/validation.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/rate_limiter.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/fallback.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/circuit_breaker.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/retry.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/bulkhead.py
      - libs/opsvi-foundation/opsvi_foundation/resilience/timeout.py
      - libs/opsvi-foundation/opsvi_foundation/testing/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
      - libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
      - libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/base.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/factory.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
      - libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
      - libs/opsvi-foundation/opsvi_foundation/config/__init__.py
      - libs/opsvi-foundation/opsvi_foundation/config/settings.py
      - libs/opsvi-foundation/opsvi_foundation/config/secrets.py
      - libs/opsvi-foundation/opsvi_foundation/config/environments.py
      - libs/opsvi-agents/opsvi_agents/__init__.py
      - libs/opsvi-agents/opsvi_agents/collaboration/__init__.py
      - libs/opsvi-agents/opsvi_agents/observability/__init__.py
      - libs/opsvi-agents/opsvi_agents/adapters/__init__.py
      - libs/opsvi-agents/opsvi_agents/monitoring/__init__.py
      - libs/opsvi-agents/opsvi_agents/communication/__init__.py
      - libs/opsvi-agents/opsvi_agents/communication/protocols.py
      - libs/opsvi-agents/opsvi_agents/communication/routing.py
      - libs/opsvi-agents/opsvi_agents/core/__init__.py
      - libs/opsvi-agents/opsvi_agents/core/exceptions.py
      - libs/opsvi-agents/opsvi_agents/core/config.py
      - libs/opsvi-agents/opsvi_agents/core/base.py
      - libs/opsvi-agents/opsvi_agents/core/types.py
      - libs/opsvi-agents/opsvi_agents/core/registry.py
      - libs/opsvi-agents/opsvi_agents/workflows/__init__.py
      - libs/opsvi-agents/opsvi_agents/workflows/sequential.py
      - libs/opsvi-agents/opsvi_agents/workflows/parallel.py
      - libs/opsvi-agents/opsvi_agents/workflows/conditional.py
      - libs/opsvi-agents/opsvi_agents/learning/__init__.py
      - libs/opsvi-agents/opsvi_agents/learning/reinforcement.py
      - libs/opsvi-agents/opsvi_agents/learning/supervised.py
      - libs/opsvi-agents/opsvi_agents/utils/__init__.py
      - libs/opsvi-agents/opsvi_agents/tests/__init__.py
      - libs/opsvi-agents/opsvi_agents/planning/__init__.py
      - libs/opsvi-agents/opsvi_agents/planning/execution.py
      - libs/opsvi-agents/opsvi_agents/planning/strategies.py
      - libs/opsvi-agents/opsvi_agents/security/__init__.py
      - libs/opsvi-agents/opsvi_agents/resilience/__init__.py
      - libs/opsvi-agents/opsvi_agents/memory/__init__.py
      - libs/opsvi-agents/opsvi_agents/memory/short_term.py
      - libs/opsvi-agents/opsvi_agents/memory/episodic.py
      - libs/opsvi-agents/opsvi_agents/memory/long_term.py
      - libs/opsvi-agents/opsvi_agents/types/__init__.py
      - libs/opsvi-agents/opsvi_agents/registry/__init__.py
      - libs/opsvi-agents/opsvi_agents/deployment/__init__.py
      - libs/opsvi-agents/opsvi_agents/tools/__init__.py
      - libs/opsvi-agents/opsvi_agents/testing/unit.py
      - libs/opsvi-agents/opsvi_agents/testing/integration.py
      - libs/opsvi-agents/opsvi_agents/testing/__init__.py
      - libs/opsvi-agents/opsvi_agents/testing/simulation.py
      - libs/opsvi-agents/opsvi_agents/orchestration/__init__.py
      - libs/opsvi-agents/opsvi_agents/orchestration/scheduler.py
      - libs/opsvi-agents/opsvi_agents/orchestration/coordinator.py
      - libs/opsvi-agents/opsvi_agents/orchestration/load_balancer.py
      - libs/opsvi-agents/tests/__init__.py
      - libs/opsvi-agents/tests/test_agents.py
      total_lines: 34508
      total_functions: 232
      total_classes: 704
    tests:
      files:
      - tests/opsvi_core/test_logging.py
      total_lines: 11
      total_functions: 1
      total_classes: 0
    tools:
      files:
      - tools/rag_init.py
      total_lines: 129
      total_functions: 2
      total_classes: 0
# Application entry points and CLI interface
entry_points:
  core:
    file: libs/opsvi-core/tests/test_core.py
    type: core_processor
    main_functions:
    - run_process
    description: Main processing workflow coordinator
# Overall code metrics and statistics
statistics:
  total_functions: 242
  total_classes: 708
  total_imports: 1514
  total_lines: 37099
  external_dependencies: []
# Import relationships and dependency mapping between files
dependency_analysis:
  most_imported_files:
  - file_path: libs/opsvi-rag/opsvi_rag/core/base.py
    imported_by_count: 31
    imported_by:
    - libs/opsvi-rag/examples/enhanced_rag_demo.py
    - libs/opsvi-rag/opsvi_rag/core/base.py
    - libs/opsvi-rag/opsvi_rag/datastores/sqlite_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/neo4j_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/chromadb_store.py
    - libs/opsvi-rag/opsvi_rag/utils/datastore_factory.py
    - libs/opsvi-rag/opsvi_rag/storage/qdrant.py
    - libs/opsvi-rag/opsvi_rag/processors/docx.py
    - libs/opsvi-rag/opsvi_rag/processors/email.py
    - libs/opsvi-rag/opsvi_rag/processors/web.py
    - libs/opsvi-rag/opsvi_rag/processors/pdf.py
    - libs/opsvi-rag/opsvi_rag/processors/html.py
    - libs/opsvi-rag/opsvi_rag/processors/csv.py
    - libs/opsvi-rag/opsvi_rag/processors/json.py
    - libs/opsvi-rag/opsvi_rag/processors/markdown.py
    - libs/opsvi-rag/opsvi_rag/processors/text.py
    - libs/opsvi-rag/tests/test_providers.py
    - libs/opsvi-llm/opsvi_llm/core/base.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-core/opsvi_core/core/base.py
    - libs/opsvi-core/opsvi_core/messaging/in_memory.py
    - libs/opsvi-core/opsvi_core/api/__init__.py
    - libs/opsvi-core/opsvi_core/api/base.py
    - libs/opsvi-core/opsvi_core/events/in_memory.py
    - libs/opsvi-core/opsvi_core/caching/in_memory.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/exceptions.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/testing.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/base.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
    - libs/opsvi-agents/opsvi_agents/core/base.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    imported_by_count: 25
    imported_by:
    - libs/opsvi-rag/examples/enhanced_rag_demo.py
    - libs/opsvi-rag/opsvi_rag/datastores/sqlite_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/neo4j_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/chromadb_store.py
    - libs/opsvi-rag/opsvi_rag/utils/datastore_factory.py
    - libs/opsvi-rag/opsvi_rag/analytics/performance.py
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
    - libs/opsvi-core/opsvi_core/resilience/retry.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    - libs/opsvi-foundation/opsvi_foundation/utils/compression.py
    - libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
    - libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
    - libs/opsvi-foundation/opsvi_foundation/utils/encryption.py
    - libs/opsvi-foundation/opsvi_foundation/utils/caching.py
    - libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
    - libs/opsvi-foundation/opsvi_foundation/utils/validation.py
    - libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
    - libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
    - tests/opsvi_core/test_logging.py
  - file_path: libs/opsvi-rag/opsvi_rag/core/exceptions.py
    imported_by_count: 13
    imported_by:
    - libs/opsvi-rag/opsvi_rag/core/exceptions.py
    - libs/opsvi-rag/tests/test_providers.py
    - libs/opsvi-llm/opsvi_llm/core/exceptions.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-core/opsvi_core/core/exceptions.py
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
    - libs/opsvi-core/opsvi_core/resilience/retry.py
    - libs/opsvi-core/opsvi_core/agents/base_agent.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/__init__.py
    - libs/opsvi-agents/opsvi_agents/core/exceptions.py
    - libs/opsvi-agents/tests/test_agents.py
  - file_path: libs/opsvi-rag/opsvi_rag/processors/json.py
    imported_by_count: 13
    imported_by:
    - libs/opsvi-rag/opsvi_rag/datastores/sqlite_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/neo4j_store.py
    - libs/opsvi-rag/opsvi_rag/datastores/chromadb_store.py
    - libs/opsvi-llm/opsvi_llm/schemas/responses.py
    - libs/opsvi-core/opsvi_core/workflows/definition.py
    - libs/opsvi-core/opsvi_core/workflows/state.py
    - libs/opsvi-core/opsvi_core/serialization/base.py
    - libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
    - libs/opsvi-foundation/opsvi_foundation/utils/caching.py
    - libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
    - libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
    - libs/opsvi-foundation/opsvi_foundation/config/secrets.py
    - libs/opsvi-foundation/opsvi_foundation/config/environments.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/config/settings.py
    imported_by_count: 5
    imported_by:
    - libs/opsvi-rag/opsvi_rag/core/config.py
    - libs/opsvi-llm/opsvi_llm/core/config.py
    - libs/opsvi-core/opsvi_core/core/config.py
    - libs/opsvi-foundation/opsvi_foundation/config/__init__.py
    - libs/opsvi-agents/opsvi_agents/core/config.py
  - file_path: libs/opsvi-foundation/opsvi_foundation/config/secrets.py
    imported_by_count: 5
    imported_by:
    - libs/opsvi-core/opsvi_core/security/auth.py
    - libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
    - libs/opsvi-foundation/opsvi_foundation/security/oauth.py
    - libs/opsvi-foundation/opsvi_foundation/security/encryption.py
    - libs/opsvi-foundation/opsvi_foundation/security/auth.py
  - file_path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-llm/opsvi_llm/schemas/requests.py
    - libs/opsvi-llm/opsvi_llm/providers/base.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/tests/test_schemas.py
  - file_path: libs/opsvi-rag/opsvi_rag/core/config.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-foundation/opsvi_foundation/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/scaffolding/__init__.py
    - libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
  - file_path: libs/opsvi-rag/opsvi_rag/embeddings/providers.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-rag/opsvi_rag/embeddings/openai.py
    - libs/opsvi-rag/opsvi_rag/embeddings/sentence_transformers.py
    - libs/opsvi-rag/tests/test_providers.py
  - file_path: libs/opsvi-core/opsvi_core/workflows/definition.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-core/opsvi_core/workflows/state.py
    - libs/opsvi-core/opsvi_core/workflows/engine.py
    - libs/opsvi-core/opsvi_core/workflows/steps.py
  circular_dependencies:
  - cycle:
    - libs/opsvi-foundation/opsvi_foundation/observability/logging.py
    severity: high
  - cycle:
    - libs/opsvi-rag/opsvi_rag/core/base.py
    severity: high
  - cycle:
    - libs/opsvi-rag/opsvi_rag/core/exceptions.py
    severity: high
  - cycle:
    - libs/opsvi-rag/opsvi_rag/embeddings/openai.py
    severity: high
  - cycle:
    - libs/opsvi-core/opsvi_core/workflows/engine.py
    - libs/opsvi-core/opsvi_core/workflows/state.py
    severity: high
  - cycle:
    - libs/opsvi-core/opsvi_core/workflows/engine.py
    - libs/opsvi-core/opsvi_core/workflows/steps.py
    severity: high
  - cycle:
    - libs/opsvi-core/opsvi_core/workflows/engine.py
    - libs/opsvi-core/opsvi_core/workflows/steps.py
    - libs/opsvi-core/opsvi_core/workflows/state.py
    severity: medium
# Execution paths and workflow diagrams
workflow_analysis:
  workflow_paths: {}
  conditional_branches: []
  function_calls: {}
  workflow_diagram: "graph TD\n    A[Entry Point] --> B{Parse Arguments}\n    B --> C{Check Flags}\n\n    C -->|Flags Found| D[Process Flags]\n    C -->|No Flags| E[Default Processing]\n\n    D --> F[Execute Workflow]\n    E --> F\n\n    F --> G[Complete]\n\n    style A fill:#e1f5fe\n    style G fill:#c8e6c9\n    style C fill:#fff3e0\n    style F fill:#f3e5f5\n"
# Detailed analysis of each file in the project
files:
- path: scripts/generate_rag_components.py
  line_count: 418
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_rag_components.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "main", "line": 393, "parameters": [], "is_async": false, "description": "Entry point of the application that initializes and runs the program.", "signature": "main()"}], "classes": [{"name": "RAGComponentGenerator", "line": 13, "inherits_from": [], "methods": [{"name": "__init__", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "base_path", "type": "Path):"}], "is_async": false, "signature": "__init__(self, base_path: Path):)"}, {"name": "_load_templates", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "Load template strings.", "signature": "_load_templates(self) -> dict[str, str]"}, {"name": "generate_processor", "line": 264, "parameters": [{"name": "self", "type": "self"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "processor_type", "type": "str"}, {"name": "file_extensions", "type": "list[str]"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a processor file.", "signature": "generate_processor(self, module_name: str, class_name: str, processor_type: str, file_extensions: list[str], description: str) -> str"}, {"name": "generate_chunking", "line": 282, "parameters": [{"name": "self", "type": "self"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a chunking file.", "signature": "generate_chunking(self, module_name: str, class_name: str, description: str) -> str"}, {"name": "generate_search", "line": 291, "parameters": [{"name": "self", "type": "self"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a search file.", "signature": "generate_search(self, module_name: str, class_name: str, description: str) -> str"}, {"name": "generate_storage", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a storage file.", "signature": "generate_storage(self, module_name: str, class_name: str, description: str) -> str"}, {"name": "write_file", "line": 309, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}, {"name": "content", "type": "str):"}], "is_async": false, "description": "Write content to file.", "signature": "write_file(self, file_path: Path, content: str):)"}, {"name": "generate_all_processors", "line": 316, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all processor files.", "signature": "generate_all_processors(self)"}, {"name": "generate_all_chunking", "line": 351, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all chunking files.", "signature": "generate_all_chunking(self)"}, {"name": "generate_all_search", "line": 365, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all search files.", "signature": "generate_all_search(self)"}, {"name": "generate_all_storage", "line": 379, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all storage files.", "signature": "generate_all_storage(self)"}], "properties": [], "description": "Generates components for Retrieval-Augmented Generation workflows, managing data retrieval and integration."}], "imports": [{"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "RAGComponentGenerator", "type": "class", "line": 13}, {"name": "main", "type": "function", "line": 393}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 10}, {"name": "main Function", "description": "Function main implementation.", "line_start": 393, "line_end": 398}, {"name": "RAGComponentGenerator Class", "description": "Class RAGComponentGenerator definition and methods.", "line_start": 13, "line_end": 382}], "content_hash": "76dc101a4418fcffe67a47ff3b5521db"}'
- path: scripts/generate_all_components.py
  line_count: 93
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_all_components.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "run_generator", "line": 15, "parameters": [{"name": "script_path", "type": "str"}, {"name": "description", "type": "str):"}], "is_async": false, "description": "Executes a generator script located at the given path with a provided description.", "signature": "run_generator(script_path: str, description: str):)"}, {"name": "main", "line": 44, "parameters": [], "is_async": false, "description": "Entry point of the program that orchestrates the overall execution flow.", "signature": "main()"}], "classes": [], "imports": [{"module": "subprocess", "alias": null, "line": 10, "statement": "import subprocess"}, {"module": "sys", "alias": null, "line": 11, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 12, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "subprocess", "type": "import", "line": 10}, {"name": "sys", "type": "import", "line": 11}, {"name": "from pathlib import Path", "type": "import", "line": 12}, {"name": "run_generator", "type": "function", "line": 15}, {"name": "main", "type": "function", "line": 44}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 12}, {"name": "run_generator Function", "description": "Function run_generator implementation.", "line_start": 15, "line_end": 43}, {"name": "main Function", "description": "Function main implementation.", "line_start": 44, "line_end": 49}], "content_hash": "c23ef974bf99a1d368c4ed2e398a6724"}'
- path: scripts/generate_remaining_rag.py
  line_count: 429
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_remaining_rag.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "main", "line": 396, "parameters": [], "is_async": false, "description": "Entry point of the program that orchestrates the overall execution flow.", "signature": "main()"}], "classes": [{"name": "RemainingRAGGenerator", "line": 13, "inherits_from": [], "methods": [{"name": "__init__", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "base_path", "type": "Path):"}], "is_async": false, "signature": "__init__(self, base_path: Path):)"}, {"name": "_load_templates", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "Load template strings.", "signature": "_load_templates(self) -> dict[str, str]"}, {"name": "generate_component", "line": 291, "parameters": [{"name": "self", "type": "self"}, {"name": "template_name", "type": "str"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a component file.", "signature": "generate_component(self, template_name: str, module_name: str, class_name: str, description: str) -> str"}, {"name": "write_file", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}, {"name": "content", "type": "str):"}], "is_async": false, "description": "Write content to file.", "signature": "write_file(self, file_path: Path, content: str):)"}, {"name": "generate_all_retrieval", "line": 307, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all retrieval files.", "signature": "generate_all_retrieval(self)"}, {"name": "generate_all_indexing", "line": 323, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all indexing files.", "signature": "generate_all_indexing(self)"}, {"name": "generate_all_pipelines", "line": 338, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all pipeline files.", "signature": "generate_all_pipelines(self)"}, {"name": "generate_all_analytics", "line": 353, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all analytics files.", "signature": "generate_all_analytics(self)"}, {"name": "generate_all_quality", "line": 367, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all quality assessment files.", "signature": "generate_all_quality(self)"}, {"name": "generate_all_cache", "line": 381, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all cache files.", "signature": "generate_all_cache(self)"}], "properties": [], "description": "Generates and manages the remaining Resource Allocation Graph (RAG) for deadlock detection."}], "imports": [{"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "RemainingRAGGenerator", "type": "class", "line": 13}, {"name": "main", "type": "function", "line": 396}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 10}, {"name": "main Function", "description": "Function main implementation.", "line_start": 396, "line_end": 401}, {"name": "RemainingRAGGenerator Class", "description": "Class RemainingRAGGenerator definition and methods.", "line_start": 13, "line_end": 384}], "content_hash": "7029f8839df44567cc4878470e8540bf"}'
- path: scripts/generate_agents_components.py
  line_count: 543
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_agents_components.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "main", "line": 502, "parameters": [], "is_async": false, "description": "Entry point of the application that initializes and runs the program.", "signature": "main()"}], "classes": [{"name": "AgentsComponentGenerator", "line": 13, "inherits_from": [], "methods": [{"name": "__init__", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "base_path", "type": "Path):"}], "is_async": false, "signature": "__init__(self, base_path: Path):)"}, {"name": "_load_templates", "line": 20, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "Load template strings.", "signature": "_load_templates(self) -> dict[str, str]"}, {"name": "generate_component", "line": 368, "parameters": [{"name": "self", "type": "self"}, {"name": "template_name", "type": "str"}, {"name": "module_name", "type": "str"}, {"name": "class_name", "type": "str"}, {"name": "description", "type": "str"}], "is_async": false, "return_type": "str", "description": "Generate a component file.", "signature": "generate_component(self, template_name: str, module_name: str, class_name: str, description: str) -> str"}, {"name": "write_file", "line": 377, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}, {"name": "content", "type": "str):"}], "is_async": false, "description": "Write content to file.", "signature": "write_file(self, file_path: Path, content: str):)"}, {"name": "generate_all_core", "line": 384, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all core files.", "signature": "generate_all_core(self)"}, {"name": "generate_all_workflows", "line": 399, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all workflow files.", "signature": "generate_all_workflows(self)"}, {"name": "generate_all_orchestration", "line": 414, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all orchestration files.", "signature": "generate_all_orchestration(self)"}, {"name": "generate_all_memory", "line": 429, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all memory files.", "signature": "generate_all_memory(self)"}, {"name": "generate_all_communication", "line": 444, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all communication files.", "signature": "generate_all_communication(self)"}, {"name": "generate_all_planning", "line": 458, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all planning files.", "signature": "generate_all_planning(self)"}, {"name": "generate_all_learning", "line": 472, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all learning files.", "signature": "generate_all_learning(self)"}, {"name": "generate_all_testing", "line": 486, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Generate all testing files.", "signature": "generate_all_testing(self)"}], "properties": [], "description": "Generates and manages components related to agents within the system."}], "imports": [{"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}], "constants": []}, "key_elements": [{"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "AgentsComponentGenerator", "type": "class", "line": 13}, {"name": "main", "type": "function", "line": 502}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 10}, {"name": "main Function", "description": "Function main implementation.", "line_start": 502, "line_end": 507}, {"name": "AgentsComponentGenerator Class", "description": "Class AgentsComponentGenerator definition and methods.", "line_start": 13, "line_end": 489}], "content_hash": "996dac98eb9720034cefccc0cb90efda"}'
- path: docs/libs/generate_dry_ecosystem.py
  line_count: 603
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_dry_ecosystem.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "DRYEcosystemGenerator", "line": 31, "inherits_from": [], "methods": [{"name": "__init__", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "libs_dir", "type": "str", "default": "libs"}], "is_async": false, "signature": "__init__(self, libs_dir: str = libs)"}, {"name": "_get_library_definitions", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Dict]", "description": "Define library specifications with minimal repetition.", "signature": "_get_library_definitions(self) -> Dict[str, Dict]"}, {"name": "generate_ecosystem", "line": 150, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Generate the complete DRY ecosystem.", "signature": "generate_ecosystem(self) -> None"}, {"name": "_generate_library", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate a single library using DRY principles.", "signature": "_generate_library(self, library_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_create_directory_structure", "line": 178, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, features: List[str]"}, {"name": "module_name", "type": "str, features: List[str]"}, {"name": "features", "type": "List[str]"}], "is_async": false, "return_type": "None", "description": "Create directory structure for a library.", "signature": "_create_directory_structure(self, library_dir: Path, module_name: str, features: List[str], module_name: str, features: List[str], features: List[str]) -> None"}, {"name": "_generate_core_files", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate core files using centralized patterns.", "signature": "_generate_core_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_init_files", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate __init__.py files.", "signature": "_generate_init_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_core_module", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate core module using centralized patterns.", "signature": "_generate_core_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_config_module", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate configuration module using centralized patterns.", "signature": "_generate_config_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_exceptions_module", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate exceptions module using centralized patterns.", "signature": "_generate_exceptions_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_test_module", "line": 362, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate test module using centralized patterns.", "signature": "_generate_test_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_feature_files", "line": 406, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate feature-specific files.", "signature": "_generate_feature_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_project_files", "line": 425, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, library_name: str, definition: Dict"}, {"name": "library_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate project files (pyproject.toml, README.md).", "signature": "_generate_project_files(self, library_dir: Path, library_name: str, definition: Dict, library_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_print_summary", "line": 582, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Print generation summary.", "signature": "_print_summary(self) -> None"}], "properties": [], "description": "Generates and manages ecosystem simulations using the DRY (Don''t Repeat Yourself) principle, providing methods to create, update, and analyze ecosystem components."}], "imports": [{"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "shutil", "alias": null, "line": 11, "statement": "import shutil"}, {"module": "sys", "alias": null, "line": 15, "statement": "import sys"}, {"module": "os", "alias": null, "line": 16, "statement": "import os"}, {"module": "pathlib", "alias": null, "line": 12, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Set"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_base"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_config"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_settings"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_exceptions"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_test_suite"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import LibraryBase"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import ServiceLibrary"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import ManagerLibrary"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 10}, {"name": "shutil", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 15}, {"name": "os", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Set", "type": "import", "line": 13}, {"name": "from opsvi_foundation.scaffolding import create_library_base", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_config", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_settings", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_exceptions", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_test_suite", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import LibraryBase", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import ServiceLibrary", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import ManagerLibrary", "type": "import", "line": 19}, {"name": "DRYEcosystemGenerator", "type": "class", "line": 31}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "DRYEcosystemGenerator Class", "description": "Class DRYEcosystemGenerator definition and methods.", "line_start": 31, "line_end": 585}], "content_hash": "98311b610c1e1891578217ae988e6571"}'
- path: docs/libs/templates/create_opsvi_library.py
  line_count: 365
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "create_opsvi_library.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library", "line": 276, "parameters": [{"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "domain", "type": "str"}, {"name": "custom_dependencies", "type": "list", "default": "None"}, {"name": "custom_config_fields", "type": "str", "default": ""}, {"name": "custom_imports", "type": "str", "default": ""}, {"name": "custom_exports", "type": "str", "default": ""}, {"name": "custom_config_values", "type": "str", "default": ""}], "is_async": false, "return_type": "None", "description": "Initializes a new library with specified metadata and optional custom configurations.", "signature": "create_library(name: str, description: str, domain: str, custom_dependencies: list = None, custom_config_fields: str = , custom_imports: str = , custom_exports: str = , custom_config_values: str = ) -> None"}, {"name": "main", "line": 348, "parameters": [], "is_async": false, "description": "Entry point of the program that executes the primary workflow.", "signature": "main()"}], "classes": [], "imports": [{"module": "argparse", "alias": null, "line": 10, "statement": "import argparse"}, {"module": "pathlib", "alias": null, "line": 11, "statement": "from pathlib import Path"}], "constants": [{"name": "LIBRARY_TEMPLATE", "line": 13, "value": "{''directories'': [''{lib_name}'', ''{lib_name}/core'', ''{lib_name}/utils'', ''tests'', ''docs'']}", "type": "dict"}]}, "key_elements": [{"name": "argparse", "type": "import", "line": 10}, {"name": "from pathlib import Path", "type": "import", "line": 11}, {"name": "LIBRARY_TEMPLATE", "type": "constant", "line": 13}, {"name": "create_library", "type": "function", "line": 276}, {"name": "main", "type": "function", "line": 348}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 11}, {"name": "create_library Function", "description": "Function create_library implementation.", "line_start": 276, "line_end": 347}, {"name": "main Function", "description": "Function main implementation.", "line_start": 348, "line_end": 353}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 13, "line_end": 13}], "content_hash": "36d88823b867e28007060ed7ea81f819"}'
- path: libs/generate_dry_ecosystem.py
  line_count: 603
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "generate_dry_ecosystem.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "DRYEcosystemGenerator", "line": 31, "inherits_from": [], "methods": [{"name": "__init__", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "libs_dir", "type": "str", "default": "libs"}], "is_async": false, "signature": "__init__(self, libs_dir: str = libs)"}, {"name": "_get_library_definitions", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Dict[str, Dict]", "description": "Define library specifications with minimal repetition.", "signature": "_get_library_definitions(self) -> Dict[str, Dict]"}, {"name": "generate_ecosystem", "line": 150, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Generate the complete DRY ecosystem.", "signature": "generate_ecosystem(self) -> None"}, {"name": "_generate_library", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "library_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate a single library using DRY principles.", "signature": "_generate_library(self, library_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_create_directory_structure", "line": 178, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, features: List[str]"}, {"name": "module_name", "type": "str, features: List[str]"}, {"name": "features", "type": "List[str]"}], "is_async": false, "return_type": "None", "description": "Create directory structure for a library.", "signature": "_create_directory_structure(self, library_dir: Path, module_name: str, features: List[str], module_name: str, features: List[str], features: List[str]) -> None"}, {"name": "_generate_core_files", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate core files using centralized patterns.", "signature": "_generate_core_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_init_files", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate __init__.py files.", "signature": "_generate_init_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_core_module", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate core module using centralized patterns.", "signature": "_generate_core_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_config_module", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate configuration module using centralized patterns.", "signature": "_generate_config_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_exceptions_module", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate exceptions module using centralized patterns.", "signature": "_generate_exceptions_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_test_module", "line": 362, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate test module using centralized patterns.", "signature": "_generate_test_module(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_feature_files", "line": 406, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, module_name: str, definition: Dict"}, {"name": "module_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate feature-specific files.", "signature": "_generate_feature_files(self, library_dir: Path, module_name: str, definition: Dict, module_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_generate_project_files", "line": 425, "parameters": [{"name": "self", "type": "self"}, {"name": "library_dir", "type": "Path, library_name: str, definition: Dict"}, {"name": "library_name", "type": "str, definition: Dict"}, {"name": "definition", "type": "Dict"}], "is_async": false, "return_type": "None", "description": "Generate project files (pyproject.toml, README.md).", "signature": "_generate_project_files(self, library_dir: Path, library_name: str, definition: Dict, library_name: str, definition: Dict, definition: Dict) -> None"}, {"name": "_print_summary", "line": 582, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Print generation summary.", "signature": "_print_summary(self) -> None"}], "properties": [], "description": "Generates and manages ecosystems within the DRY framework, providing methods to create, modify, and analyze ecosystem components."}], "imports": [{"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "shutil", "alias": null, "line": 11, "statement": "import shutil"}, {"module": "sys", "alias": null, "line": 15, "statement": "import sys"}, {"module": "os", "alias": null, "line": 16, "statement": "import os"}, {"module": "pathlib", "alias": null, "line": 12, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import List"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Set"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_base"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_config"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_settings"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_library_exceptions"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import create_test_suite"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import LibraryBase"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import ServiceLibrary"}, {"module": "opsvi_foundation.scaffolding", "alias": null, "line": 19, "statement": "from opsvi_foundation.scaffolding import ManagerLibrary"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 10}, {"name": "shutil", "type": "import", "line": 11}, {"name": "sys", "type": "import", "line": 15}, {"name": "os", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 13}, {"name": "from typing import List", "type": "import", "line": 13}, {"name": "from typing import Optional", "type": "import", "line": 13}, {"name": "from typing import Set", "type": "import", "line": 13}, {"name": "from opsvi_foundation.scaffolding import create_library_base", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_config", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_settings", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_library_exceptions", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import create_test_suite", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import LibraryBase", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import ServiceLibrary", "type": "import", "line": 19}, {"name": "from opsvi_foundation.scaffolding import ManagerLibrary", "type": "import", "line": 19}, {"name": "DRYEcosystemGenerator", "type": "class", "line": 31}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "DRYEcosystemGenerator Class", "description": "Class DRYEcosystemGenerator definition and methods.", "line_start": 31, "line_end": 585}], "content_hash": "446b5e63844436831fd7abb724209fec"}'
- path: libs/opsvi-rag/examples/enhanced_rag_demo.py
  line_count: 424
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "enhanced_rag_demo.py", "description": "Python module with 6 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "demo_chromadb_integration", "line": 35, "parameters": [], "is_async": true, "description": "Demonstrates how to integrate and use ChromaDB within an asynchronous context.", "signature": "async demo_chromadb_integration()"}, {"name": "demo_sqlite_integration", "line": 103, "parameters": [], "is_async": true, "description": "Shows an example of integrating and interacting with a SQLite database asynchronously.", "signature": "async demo_sqlite_integration()"}, {"name": "demo_neo4j_integration", "line": 189, "parameters": [], "is_async": true, "description": "Provides a demonstration of connecting to and querying a Neo4j graph database asynchronously.", "signature": "async demo_neo4j_integration()"}, {"name": "demo_multi_datastore", "line": 315, "parameters": [], "is_async": true, "description": "Illustrates how to work with multiple datastores in a single asynchronous workflow.", "signature": "async demo_multi_datastore()"}, {"name": "demo_performance_monitoring", "line": 362, "parameters": [], "is_async": true, "description": "Demonstrates techniques for monitoring and measuring performance in asynchronous operations.", "signature": "async demo_performance_monitoring()"}, {"name": "main", "line": 400, "parameters": [], "is_async": true, "description": "The main asynchronous entry point that orchestrates the execution of various demo functions.", "signature": "async main()"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "numpy", "alias": "np", "line": 13, "statement": "import numpy as np"}, {"module": "opsvi_rag.analytics.performance", "alias": null, "line": 15, "statement": "from opsvi_rag.analytics.performance import PerformanceConfig"}, {"module": "opsvi_rag.analytics.performance", "alias": null, "line": 15, "statement": "from opsvi_rag.analytics.performance import PerformanceMonitor"}, {"module": "opsvi_rag.analytics.performance", "alias": null, "line": 15, "statement": "from opsvi_rag.analytics.performance import profile_datastore_operation"}, {"module": "opsvi_rag.analytics.performance", "alias": null, "line": 15, "statement": "from opsvi_rag.analytics.performance import profile_search"}, {"module": "opsvi_rag.analytics.performance", "alias": null, "line": 15, "statement": "from opsvi_rag.analytics.performance import set_performance_monitor"}, {"module": "opsvi_rag.base", "alias": null, "line": 22, "statement": "from opsvi_rag.base import Document"}, {"module": "opsvi_rag.utils.datastore_factory", "alias": null, "line": 23, "statement": "from opsvi_rag.utils.datastore_factory import DatastoreFactory"}, {"module": "opsvi_rag.utils.datastore_factory", "alias": null, "line": 23, "statement": "from opsvi_rag.utils.datastore_factory import create_chromadb_store"}, {"module": "opsvi_rag.utils.datastore_factory", "alias": null, "line": 23, "statement": "from opsvi_rag.utils.datastore_factory import create_neo4j_store"}, {"module": "opsvi_rag.utils.datastore_factory", "alias": null, "line": 23, "statement": "from opsvi_rag.utils.datastore_factory import create_sqlite_store"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "numpy", "type": "import", "line": 13}, {"name": "from opsvi_rag.analytics.performance import PerformanceConfig", "type": "import", "line": 15}, {"name": "from opsvi_rag.analytics.performance import PerformanceMonitor", "type": "import", "line": 15}, {"name": "from opsvi_rag.analytics.performance import profile_datastore_operation", "type": "import", "line": 15}, {"name": "from opsvi_rag.analytics.performance import profile_search", "type": "import", "line": 15}, {"name": "from opsvi_rag.analytics.performance import set_performance_monitor", "type": "import", "line": 15}, {"name": "from opsvi_rag.base import Document", "type": "import", "line": 22}, {"name": "from opsvi_rag.utils.datastore_factory import DatastoreFactory", "type": "import", "line": 23}, {"name": "from opsvi_rag.utils.datastore_factory import create_chromadb_store", "type": "import", "line": 23}, {"name": "from opsvi_rag.utils.datastore_factory import create_neo4j_store", "type": "import", "line": 23}, {"name": "from opsvi_rag.utils.datastore_factory import create_sqlite_store", "type": "import", "line": 23}, {"name": "demo_chromadb_integration", "type": "function", "line": 35}, {"name": "demo_sqlite_integration", "type": "function", "line": 103}, {"name": "demo_neo4j_integration", "type": "function", "line": 189}, {"name": "demo_multi_datastore", "type": "function", "line": 315}, {"name": "demo_performance_monitoring", "type": "function", "line": 362}, {"name": "main", "type": "function", "line": 400}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 23}, {"name": "demo_chromadb_integration Function", "description": "Function demo_chromadb_integration implementation.", "line_start": 35, "line_end": 102}, {"name": "demo_sqlite_integration Function", "description": "Function demo_sqlite_integration implementation.", "line_start": 103, "line_end": 188}, {"name": "demo_neo4j_integration Function", "description": "Function demo_neo4j_integration implementation.", "line_start": 189, "line_end": 314}, {"name": "demo_multi_datastore Function", "description": "Function demo_multi_datastore implementation.", "line_start": 315, "line_end": 361}, {"name": "demo_performance_monitoring Function", "description": "Function demo_performance_monitoring implementation.", "line_start": 362, "line_end": 399}, {"name": "main Function", "description": "Function main implementation.", "line_start": 400, "line_end": 405}], "content_hash": "dcb574cbf9eadd09ad08b31669e30054"}'
- path: libs/opsvi-rag/opsvi_rag/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "a4655a4f364ce93334f5862f667f477d"}'
- path: libs/opsvi-rag/opsvi_rag/observability/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f1af0b3a12d4352cb2c8a2b8bc6c6adf"}'
- path: libs/opsvi-rag/opsvi_rag/core/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "9b3c40f2ce5022c89b218abc4d776be0"}'
- path: libs/opsvi-rag/opsvi_rag/core/exceptions.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RagError", "line": 16, "inherits_from": ["OPSVIError):"], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Base exception class for RAG-related errors."}, {"name": "RagConfigurationError", "line": 23, "inherits_from": ["RagError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related errors in RAG."}, {"name": "RagConnectionError", "line": 27, "inherits_from": ["RagError):"], "methods": [], "properties": [], "description": "Exception raised for connection issues in RAG."}, {"name": "RagValidationError", "line": 31, "inherits_from": ["RagError):"], "methods": [], "properties": [], "description": "Exception raised for validation failures in RAG."}, {"name": "RagTimeoutError", "line": 35, "inherits_from": ["RagError):"], "methods": [], "properties": [], "description": "Exception raised when a RAG operation times out."}, {"name": "RagResourceError", "line": 39, "inherits_from": ["RagError):"], "methods": [], "properties": [], "description": "Exception raised for resource-related errors in RAG."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_foundation.core.exceptions import OPSVIError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from opsvi_foundation.core.exceptions import OPSVIError", "type": "import", "line": 13}, {"name": "RagError", "type": "class", "line": 16}, {"name": "RagConfigurationError", "type": "class", "line": 23}, {"name": "RagConnectionError", "type": "class", "line": 27}, {"name": "RagValidationError", "type": "class", "line": 31}, {"name": "RagTimeoutError", "type": "class", "line": 35}, {"name": "RagResourceError", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "RagError Class", "description": "Class RagError definition and methods.", "line_start": 16, "line_end": 22}, {"name": "RagConfigurationError Class", "description": "Class RagConfigurationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "RagConnectionError Class", "description": "Class RagConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "RagValidationError Class", "description": "Class RagValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "RagTimeoutError Class", "description": "Class RagTimeoutError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "RagResourceError Class", "description": "Class RagResourceError definition and methods.", "line_start": 39, "line_end": 49}], "content_hash": "757b5cc87ef12c843c423f2974394122"}'
- path: libs/opsvi-rag/opsvi_rag/core/config.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RagConfig", "line": 18, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Configuration settings for the RAG system."}, {"name": "RagSettings", "line": 29, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Settings and parameters for RAG operation."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation.config.settings", "alias": null, "line": 15, "statement": "from opsvi_foundation.config.settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from opsvi_foundation.config.settings import BaseSettings", "type": "import", "line": 15}, {"name": "RagConfig", "type": "class", "line": 18}, {"name": "RagSettings", "type": "class", "line": 29}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "RagConfig Class", "description": "Class RagConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "RagSettings Class", "description": "Class RagSettings definition and methods.", "line_start": 29, "line_end": 39}], "content_hash": "d2c28c9fffd9b3b2887d706884d64882"}'
- path: libs/opsvi-rag/opsvi_rag/core/base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RagBase", "line": 17, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Base class for Retrieval-Augmented Generation models, providing core methods for document retrieval and response generation."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import BaseComponent"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from opsvi_foundation.patterns.base import BaseComponent", "type": "import", "line": 14}, {"name": "RagBase", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "RagBase Class", "description": "Class RagBase definition and methods.", "line_start": 17, "line_end": 38}], "content_hash": "0ce8c49d03338dafbfbf0c8bb7338b4c"}'
- path: libs/opsvi-rag/opsvi_rag/chunking/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "154971c6af6777950a411683137a1a70"}'
- path: libs/opsvi-rag/opsvi_rag/chunking/adaptive.py
  line_count: 51
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "adaptive.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ChunkingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the chunking process."}, {"name": "Chunk", "line": 22, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a segment or piece of data resulting from chunking."}, {"name": "AdaptiveChunkerConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for the adaptive chunking process."}, {"name": "AdaptiveChunker", "line": 39, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AdaptiveChunkerConfig):"}], "is_async": false, "description": "Initialize adaptive chunker.", "signature": "__init__(self, config: AdaptiveChunkerConfig):)"}, {"name": "chunk", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "list[Chunk]", "description": "Chunk the given text.", "signature": "chunk(self, text: str) -> list[Chunk]"}], "properties": [], "description": "Performs adaptive chunking on data using specified configuration."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "ChunkingError", "type": "class", "line": 15}, {"name": "Chunk", "type": "class", "line": 22}, {"name": "AdaptiveChunkerConfig", "type": "class", "line": 31}, {"name": "AdaptiveChunker", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "ChunkingError Class", "description": "Class ChunkingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "Chunk Class", "description": "Class Chunk definition and methods.", "line_start": 22, "line_end": 32}, {"name": "AdaptiveChunkerConfig Class", "description": "Class AdaptiveChunkerConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "AdaptiveChunker Class", "description": "Class AdaptiveChunker definition and methods.", "line_start": 39, "line_end": 51}], "content_hash": "f54f4a44c0a74207e55bfc7c9e9a4a58"}'
- path: libs/opsvi-rag/opsvi_rag/chunking/overlapping.py
  line_count: 51
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "overlapping.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ChunkingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the chunking process."}, {"name": "Chunk", "line": 22, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a segment or portion of data created by chunking."}, {"name": "OverlappingChunkerConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the OverlappingChunker."}, {"name": "OverlappingChunker", "line": 39, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OverlappingChunkerConfig):"}], "is_async": false, "description": "Initialize overlapping chunker.", "signature": "__init__(self, config: OverlappingChunkerConfig):)"}, {"name": "chunk", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "list[Chunk]", "description": "Chunk the given text.", "signature": "chunk(self, text: str) -> list[Chunk]"}], "properties": [], "description": "Performs chunking of data with overlapping segments to preserve context."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "ChunkingError", "type": "class", "line": 15}, {"name": "Chunk", "type": "class", "line": 22}, {"name": "OverlappingChunkerConfig", "type": "class", "line": 31}, {"name": "OverlappingChunker", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "ChunkingError Class", "description": "Class ChunkingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "Chunk Class", "description": "Class Chunk definition and methods.", "line_start": 22, "line_end": 32}, {"name": "OverlappingChunkerConfig Class", "description": "Class OverlappingChunkerConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "OverlappingChunker Class", "description": "Class OverlappingChunker definition and methods.", "line_start": 39, "line_end": 51}], "content_hash": "4530e295cf5b47781623a228aca99a01"}'
- path: libs/opsvi-rag/opsvi_rag/chunking/semantic.py
  line_count: 51
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "semantic.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ChunkingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the chunking process."}, {"name": "Chunk", "line": 22, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a segment or piece of data resulting from chunking."}, {"name": "SemanticChunkerConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the semantic chunking process."}, {"name": "SemanticChunker", "line": 39, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SemanticChunkerConfig):"}], "is_async": false, "description": "Initialize semantic chunker.", "signature": "__init__(self, config: SemanticChunkerConfig):)"}, {"name": "chunk", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "list[Chunk]", "description": "Chunk the given text.", "signature": "chunk(self, text: str) -> list[Chunk]"}], "properties": [], "description": "Performs semantic chunking on input data using specified configuration."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "ChunkingError", "type": "class", "line": 15}, {"name": "Chunk", "type": "class", "line": 22}, {"name": "SemanticChunkerConfig", "type": "class", "line": 31}, {"name": "SemanticChunker", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "ChunkingError Class", "description": "Class ChunkingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "Chunk Class", "description": "Class Chunk definition and methods.", "line_start": 22, "line_end": 32}, {"name": "SemanticChunkerConfig Class", "description": "Class SemanticChunkerConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "SemanticChunker Class", "description": "Class SemanticChunker definition and methods.", "line_start": 39, "line_end": 51}], "content_hash": "7b88ad91637e821fa846af71240cad1c"}'
- path: libs/opsvi-rag/opsvi_rag/chunking/hierarchical.py
  line_count: 51
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "hierarchical.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ChunkingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors encountered during the chunking process."}, {"name": "Chunk", "line": 22, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a segment or piece of data resulting from the chunking operation."}, {"name": "HierarchicalChunkerConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for the hierarchical chunking process."}, {"name": "HierarchicalChunker", "line": 39, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "HierarchicalChunkerConfig):"}], "is_async": false, "description": "Initialize hierarchical chunker.", "signature": "__init__(self, config: HierarchicalChunkerConfig):)"}, {"name": "chunk", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "list[Chunk]", "description": "Chunk the given text.", "signature": "chunk(self, text: str) -> list[Chunk]"}], "properties": [], "description": "Performs hierarchical chunking on data, organizing it into nested chunks."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "ChunkingError", "type": "class", "line": 15}, {"name": "Chunk", "type": "class", "line": 22}, {"name": "HierarchicalChunkerConfig", "type": "class", "line": 31}, {"name": "HierarchicalChunker", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "ChunkingError Class", "description": "Class ChunkingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "Chunk Class", "description": "Class Chunk definition and methods.", "line_start": 22, "line_end": 32}, {"name": "HierarchicalChunkerConfig Class", "description": "Class HierarchicalChunkerConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "HierarchicalChunker Class", "description": "Class HierarchicalChunker definition and methods.", "line_start": 39, "line_end": 51}], "content_hash": "2db1c526fd7f8dc5bbe17d91bbaa877e"}'
- path: libs/opsvi-rag/opsvi_rag/quality/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "bd390772d11db5d1055475517bd8328d"}'
- path: libs/opsvi-rag/opsvi_rag/quality/relevance.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "relevance.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "QualityError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to quality checks."}, {"name": "RelevanceQualityConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for relevance quality evaluation."}, {"name": "RelevanceQuality", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RelevanceQualityConfig):"}], "is_async": false, "description": "Initialize relevance quality assessment.", "signature": "__init__(self, config: RelevanceQualityConfig):)"}, {"name": "assess", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Assess the quality of the given content.", "signature": "assess(self, content: Any) -> dict[str, Any]"}], "properties": [], "description": "Performs relevance quality assessments using provided configurations."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "QualityError", "type": "class", "line": 15}, {"name": "RelevanceQualityConfig", "type": "class", "line": 21}, {"name": "RelevanceQuality", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "QualityError Class", "description": "Class QualityError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "RelevanceQualityConfig Class", "description": "Class RelevanceQualityConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "RelevanceQuality Class", "description": "Class RelevanceQuality definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "36b154eb53ca50dd9107ade129dea8c7"}'
- path: libs/opsvi-rag/opsvi_rag/quality/coverage.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "coverage.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "QualityError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error related to quality checks."}, {"name": "CoverageQualityConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for coverage quality evaluation."}, {"name": "CoverageQuality", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CoverageQualityConfig):"}], "is_async": false, "description": "Initialize coverage quality assessment.", "signature": "__init__(self, config: CoverageQualityConfig):)"}, {"name": "assess", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Assess the quality of the given content.", "signature": "assess(self, content: Any) -> dict[str, Any]"}], "properties": [], "description": "Performs quality assessment based on coverage metrics."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "QualityError", "type": "class", "line": 15}, {"name": "CoverageQualityConfig", "type": "class", "line": 21}, {"name": "CoverageQuality", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "QualityError Class", "description": "Class QualityError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "CoverageQualityConfig Class", "description": "Class CoverageQualityConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "CoverageQuality Class", "description": "Class CoverageQuality definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "e34788776f83eb1079a582481bda63df"}'
- path: libs/opsvi-rag/opsvi_rag/search/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ad091761eeaff1332295dfcd3a32b5b4"}'
- path: libs/opsvi-rag/opsvi_rag/search/faceted.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "faceted.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SearchError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors occurring during search operations."}, {"name": "SearchResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the results returned from a search query."}, {"name": "FacetedSearchConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for faceted search functionality."}, {"name": "FacetedSearch", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FacetedSearchConfig):"}], "is_async": false, "description": "Initialize faceted search.", "signature": "__init__(self, config: FacetedSearchConfig):)"}, {"name": "search", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[SearchResult]", "description": "Search for content matching the query.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[SearchResult]"}], "properties": [], "description": "Performs faceted search operations, allowing filtering and categorization of search results."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "SearchError", "type": "class", "line": 16}, {"name": "SearchResult", "type": "class", "line": 23}, {"name": "FacetedSearchConfig", "type": "class", "line": 31}, {"name": "FacetedSearch", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "SearchError Class", "description": "Class SearchError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "FacetedSearchConfig Class", "description": "Class FacetedSearchConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "FacetedSearch Class", "description": "Class FacetedSearch definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "9f6b41e87b11314911ab5bf0555d0123"}'
- path: libs/opsvi-rag/opsvi_rag/search/semantic.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "semantic.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SearchError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error that occurs during the search process."}, {"name": "SearchResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the result of a search query, including relevant data."}, {"name": "SemanticSearchConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for performing semantic searches."}, {"name": "SemanticSearch", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SemanticSearchConfig):"}], "is_async": false, "description": "Initialize semantic search.", "signature": "__init__(self, config: SemanticSearchConfig):)"}, {"name": "search", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[SearchResult]", "description": "Search for content matching the query.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[SearchResult]"}], "properties": [], "description": "Performs semantic search operations using provided configurations and methods."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "SearchError", "type": "class", "line": 16}, {"name": "SearchResult", "type": "class", "line": 23}, {"name": "SemanticSearchConfig", "type": "class", "line": 31}, {"name": "SemanticSearch", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "SearchError Class", "description": "Class SearchError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "SemanticSearchConfig Class", "description": "Class SemanticSearchConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "SemanticSearch Class", "description": "Class SemanticSearch definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "cb7dbcb6ad0235020df787422073fbf7"}'
- path: libs/opsvi-rag/opsvi_rag/search/keyword.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "keyword.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SearchError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error encountered during a search operation."}, {"name": "SearchResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the results returned from a search query."}, {"name": "KeywordSearchConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for performing keyword-based searches."}, {"name": "KeywordSearch", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "KeywordSearchConfig):"}], "is_async": false, "description": "Initialize keyword search.", "signature": "__init__(self, config: KeywordSearchConfig):)"}, {"name": "search", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[SearchResult]", "description": "Search for content matching the query.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[SearchResult]"}], "properties": [], "description": "Performs keyword search operations using specified configurations."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "SearchError", "type": "class", "line": 16}, {"name": "SearchResult", "type": "class", "line": 23}, {"name": "KeywordSearchConfig", "type": "class", "line": 31}, {"name": "KeywordSearch", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "SearchError Class", "description": "Class SearchError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "KeywordSearchConfig Class", "description": "Class KeywordSearchConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "KeywordSearch Class", "description": "Class KeywordSearch definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "a872f0870922f769e2a547ac6fa9f432"}'
- path: libs/opsvi-rag/opsvi_rag/search/vector.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "vector.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SearchError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the search process."}, {"name": "SearchResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a single search result with relevant data."}, {"name": "VectorSearchConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for vector-based searches."}, {"name": "VectorSearch", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "VectorSearchConfig):"}], "is_async": false, "description": "Initialize vector search.", "signature": "__init__(self, config: VectorSearchConfig):)"}, {"name": "search", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[SearchResult]", "description": "Search for content matching the query.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[SearchResult]"}], "properties": [], "description": "Performs vector-based searches using the provided configuration and data."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "SearchError", "type": "class", "line": 16}, {"name": "SearchResult", "type": "class", "line": 23}, {"name": "VectorSearchConfig", "type": "class", "line": 31}, {"name": "VectorSearch", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "SearchError Class", "description": "Class SearchError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "VectorSearchConfig Class", "description": "Class VectorSearchConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "VectorSearch Class", "description": "Class VectorSearch definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "4c670f607d549fbeecb1c7e3ae039db1"}'
- path: libs/opsvi-rag/opsvi_rag/indexing/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f410f0b0b734e8723da4ebe7d00e8a98"}'
- path: libs/opsvi-rag/opsvi_rag/indexing/hybrid.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "hybrid.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "IndexingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the indexing process."}, {"name": "HybridIndexerConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the HybridIndexer."}, {"name": "HybridIndexer", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "HybridIndexerConfig):"}], "is_async": false, "description": "Initialize hybrid indexing.", "signature": "__init__(self, config: HybridIndexerConfig):)"}, {"name": "index", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[dict[str, Any]]"}], "is_async": false, "return_type": "bool", "description": "Index the given documents.", "signature": "index(self, documents: list[dict[str, Any]]) -> bool"}, {"name": "search", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Search the index.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[dict[str, Any]]"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "document_ids", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "Delete documents from index.", "signature": "delete(self, document_ids: list[str]) -> bool"}], "properties": [], "description": "Implements a hybrid indexing mechanism combining multiple indexing strategies."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "IndexingError", "type": "class", "line": 15}, {"name": "HybridIndexerConfig", "type": "class", "line": 21}, {"name": "HybridIndexer", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "IndexingError Class", "description": "Class IndexingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "HybridIndexerConfig Class", "description": "Class HybridIndexerConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "HybridIndexer Class", "description": "Class HybridIndexer definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "0e280c77c1ad1fccb1c49b12ce45003f"}'
- path: libs/opsvi-rag/opsvi_rag/indexing/keyword.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "keyword.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "IndexingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the indexing process."}, {"name": "KeywordIndexerConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the KeywordIndexer."}, {"name": "KeywordIndexer", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "KeywordIndexerConfig):"}], "is_async": false, "description": "Initialize keyword indexing.", "signature": "__init__(self, config: KeywordIndexerConfig):)"}, {"name": "index", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[dict[str, Any]]"}], "is_async": false, "return_type": "bool", "description": "Index the given documents.", "signature": "index(self, documents: list[dict[str, Any]]) -> bool"}, {"name": "search", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Search the index.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[dict[str, Any]]"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "document_ids", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "Delete documents from index.", "signature": "delete(self, document_ids: list[str]) -> bool"}], "properties": [], "description": "Handles the indexing of keywords within documents for efficient retrieval."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "IndexingError", "type": "class", "line": 15}, {"name": "KeywordIndexerConfig", "type": "class", "line": 21}, {"name": "KeywordIndexer", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "IndexingError Class", "description": "Class IndexingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "KeywordIndexerConfig Class", "description": "Class KeywordIndexerConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "KeywordIndexer Class", "description": "Class KeywordIndexer definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "f68cdd80a844b15d3af19440ef9376af"}'
- path: libs/opsvi-rag/opsvi_rag/indexing/vector.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "vector.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "IndexingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the indexing process."}, {"name": "VectorIndexerConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the VectorIndexer, including parameters and options."}, {"name": "VectorIndexer", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "VectorIndexerConfig):"}], "is_async": false, "description": "Initialize vector indexing.", "signature": "__init__(self, config: VectorIndexerConfig):)"}, {"name": "index", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[dict[str, Any]]"}], "is_async": false, "return_type": "bool", "description": "Index the given documents.", "signature": "index(self, documents: list[dict[str, Any]]) -> bool"}, {"name": "search", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Search the index.", "signature": "search(self, query: str, **kwargs, **kwargs) -> list[dict[str, Any]]"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "document_ids", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "Delete documents from index.", "signature": "delete(self, document_ids: list[str]) -> bool"}], "properties": [], "description": "Handles the indexing of vectors for efficient similarity search and retrieval."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "IndexingError", "type": "class", "line": 15}, {"name": "VectorIndexerConfig", "type": "class", "line": 21}, {"name": "VectorIndexer", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "IndexingError Class", "description": "Class IndexingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "VectorIndexerConfig Class", "description": "Class VectorIndexerConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "VectorIndexer Class", "description": "Class VectorIndexer definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "1a9a7485b77045bb65d3a148e14a60aa"}'
- path: libs/opsvi-rag/opsvi_rag/embeddings/providers.py
  line_count: 186
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "providers.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ProviderType", "line": 20, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "OPENAI", "line": 21, "type": ""}, {"name": "SENTENCE_TRANSFORMERS", "line": 22, "type": ""}, {"name": "COHERE", "line": 23, "type": ""}, {"name": "HUGGINGFACE", "line": 24, "type": ""}], "description": "Enumeration of different types of embedding providers."}, {"name": "EmbeddingProviderError", "line": 29, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Custom exception class for embedding provider related errors."}, {"name": "EmbeddingProviderConfig", "line": 35, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for an embedding provider."}, {"name": "BaseEmbeddingProvider", "line": 49, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EmbeddingProviderConfig"}], "is_async": false, "description": "Initialize the embedding provider.", "signature": "__init__(self, config: EmbeddingProviderConfig, **kwargs)"}, {"name": "embed_texts", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str], **kwargs"}], "is_async": true, "return_type": "list[list[float]]", "description": "\n        Generate embeddings for a list of texts.\n\n        Args:\n            texts: List of text strings to embed\n            **kwargs: Additional provider-specific arguments\n\n        Returns:\n            List of embedding vectors (each vector is a list of floats)\n\n        Raises:\n            EmbeddingProviderError: If embedding generation fails\n        ", "signature": "async embed_texts(self, texts: list[str], **kwargs, **kwargs) -> list[list[float]]"}, {"name": "get_dimensions", "line": 81, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "\n        Get the dimensionality of embeddings produced by this provider.\n\n        Returns:\n            Number of dimensions in the embedding vectors\n        ", "signature": "async get_dimensions(self) -> int"}, {"name": "health_check", "line": 91, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the embedding provider.\n\n        Returns:\n            True if the provider is healthy, False otherwise\n        ", "signature": "async health_check(self) -> bool"}, {"name": "embed_single", "line": 100, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str, **kwargs"}], "is_async": true, "return_type": "list[float]", "description": "\n        Generate embedding for a single text.\n\n        Args:\n            text: Text string to embed\n            **kwargs: Additional provider-specific arguments\n\n        Returns:\n            Embedding vector as a list of floats\n        ", "signature": "async embed_single(self, text: str, **kwargs, **kwargs) -> list[float]"}, {"name": "embed_batch", "line": 114, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str]"}, {"name": "batch_size", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "list[list[float]]", "description": "\n        Generate embeddings for texts in batches.\n\n        Args:\n            texts: List of text strings to embed\n            batch_size: Batch size (uses config default if None)\n            **kwargs: Additional provider-specific arguments\n\n        Returns:\n            List of embedding vectors\n        ", "signature": "async embed_batch(self, texts: list[str], batch_size: int | None = None, **kwargs) -> list[list[float]]"}], "properties": [], "description": "Abstract base class defining the interface and common functionality for embedding providers."}, {"name": "EmbeddingProviderFactory", "line": 139, "inherits_from": [], "methods": [{"name": "register_provider", "line": 145, "parameters": [{"name": "cls", "type": "self"}, {"name": "provider_type", "type": "ProviderType"}, {"name": "provider_class", "type": "type[BaseEmbeddingProvider]"}], "is_async": false, "return_type": "None", "description": "Register a provider class for a provider type.", "signature": "register_provider(cls, provider_type: ProviderType, provider_class: type[BaseEmbeddingProvider]) -> None"}, {"name": "create_provider", "line": 152, "parameters": [{"name": "cls", "type": "self"}, {"name": "config", "type": "EmbeddingProviderConfig"}], "is_async": false, "return_type": "BaseEmbeddingProvider", "description": "\n        Create an embedding provider instance.\n\n        Args:\n            config: Provider configuration\n\n        Returns:\n            Configured embedding provider instance\n\n        Raises:\n            EmbeddingProviderError: If provider type is not supported\n        ", "signature": "create_provider(cls, config: EmbeddingProviderConfig) -> BaseEmbeddingProvider"}, {"name": "get_supported_providers", "line": 174, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "list[ProviderType]", "description": "Get list of supported provider types.", "signature": "get_supported_providers(cls) -> list[ProviderType]"}, {"name": "get_provider_capabilities", "line": 179, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "dict[ProviderType, dict[str, Any]]", "description": "Get capabilities of registered providers.", "signature": "get_provider_capabilities(cls) -> dict[ProviderType, dict[str, Any]]"}], "properties": [], "description": "Factory class responsible for creating instances of embedding providers based on configuration."}], "imports": [{"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 16}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 16}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "from pydantic import Field", "type": "import", "line": 17}, {"name": "ProviderType", "type": "class", "line": 20}, {"name": "EmbeddingProviderError", "type": "class", "line": 29}, {"name": "EmbeddingProviderConfig", "type": "class", "line": 35}, {"name": "BaseEmbeddingProvider", "type": "class", "line": 49}, {"name": "EmbeddingProviderFactory", "type": "class", "line": 139}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "ProviderType Class", "description": "Class ProviderType definition and methods.", "line_start": 20, "line_end": 30}, {"name": "EmbeddingProviderError Class", "description": "Class EmbeddingProviderError definition and methods.", "line_start": 29, "line_end": 39}, {"name": "EmbeddingProviderConfig Class", "description": "Class EmbeddingProviderConfig definition and methods.", "line_start": 35, "line_end": 45}, {"name": "BaseEmbeddingProvider Class", "description": "Class BaseEmbeddingProvider definition and methods.", "line_start": 49, "line_end": 117}, {"name": "EmbeddingProviderFactory Class", "description": "Class EmbeddingProviderFactory definition and methods.", "line_start": 139, "line_end": 182}], "content_hash": "76c0c30add1e11ad1d14c1535a4ca674"}'
- path: libs/opsvi-rag/opsvi_rag/embeddings/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "3519a90e1a91e1fae21dd349b3a799a1"}'
- path: libs/opsvi-rag/opsvi_rag/embeddings/openai.py
  line_count: 200
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "openai.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIEmbeddingConfig", "line": 27, "inherits_from": ["EmbeddingProviderConfig):"], "methods": [], "properties": [], "description": "Configuration settings for OpenAI embedding generation."}, {"name": "OpenAIEmbeddingProvider", "line": 56, "inherits_from": ["BaseEmbeddingProvider):"], "methods": [{"name": "__init__", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OpenAIEmbeddingConfig"}], "is_async": false, "description": "Initialize the OpenAI embedding provider.", "signature": "__init__(self, config: OpenAIEmbeddingConfig, **kwargs)"}, {"name": "embed_texts", "line": 100, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str], **kwargs"}], "is_async": true, "return_type": "list[list[float]]", "description": "\n        Generate embeddings for a list of texts using OpenAI API.\n\n        Args:\n            texts: List of text strings to embed\n            **kwargs: Additional arguments (ignored for OpenAI)\n\n        Returns:\n            List of embedding vectors\n\n        Raises:\n            EmbeddingProviderError: If embedding generation fails\n        ", "signature": "async embed_texts(self, texts: list[str], **kwargs, **kwargs) -> list[list[float]]"}, {"name": "_call_openai_api", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str]"}], "is_async": true, "return_type": "list[list[float]]", "description": "Make the actual API call to OpenAI.", "signature": "async _call_openai_api(self, texts: list[str]) -> list[list[float]]"}, {"name": "get_dimensions", "line": 167, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get the dimensionality of embeddings produced by this provider.", "signature": "async get_dimensions(self) -> int"}, {"name": "health_check", "line": 171, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the OpenAI embedding provider.\n\n        Returns:\n            True if the provider is healthy, False otherwise\n        ", "signature": "async health_check(self) -> bool"}, {"name": "get_model_info", "line": 186, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get information about the current model.", "signature": "get_model_info(self) -> dict[str, Any]"}, {"name": "get_supported_models", "line": 196, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of supported OpenAI embedding models.", "signature": "get_supported_models(cls) -> list[str]"}], "properties": [], "description": "Provider class to generate embeddings using OpenAI''s API."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "openai", "alias": null, "line": 15, "statement": "from openai import AsyncOpenAI"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import RetryExecutor"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import Field"}, {"module": "providers", "alias": null, "line": 19, "statement": "from providers import BaseEmbeddingProvider"}, {"module": "providers", "alias": null, "line": 19, "statement": "from providers import EmbeddingProviderConfig"}, {"module": "providers", "alias": null, "line": 19, "statement": "from providers import EmbeddingProviderError"}, {"module": "providers", "alias": null, "line": 19, "statement": "from providers import ProviderType"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from openai import AsyncOpenAI", "type": "import", "line": 15}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 16}, {"name": "from opsvi_foundation import RetryExecutor", "type": "import", "line": 16}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 16}, {"name": "from pydantic import Field", "type": "import", "line": 17}, {"name": "from providers import BaseEmbeddingProvider", "type": "import", "line": 19}, {"name": "from providers import EmbeddingProviderConfig", "type": "import", "line": 19}, {"name": "from providers import EmbeddingProviderError", "type": "import", "line": 19}, {"name": "from providers import ProviderType", "type": "import", "line": 19}, {"name": "OpenAIEmbeddingConfig", "type": "class", "line": 27}, {"name": "OpenAIEmbeddingProvider", "type": "class", "line": 56}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "OpenAIEmbeddingConfig Class", "description": "Class OpenAIEmbeddingConfig definition and methods.", "line_start": 27, "line_end": 37}, {"name": "OpenAIEmbeddingProvider Class", "description": "Class OpenAIEmbeddingProvider definition and methods.", "line_start": 56, "line_end": 199}], "content_hash": "8cecdd6b80b7c9408903bdf4b897a519"}'
- path: libs/opsvi-rag/opsvi_rag/embeddings/sentence_transformers.py
  line_count: 209
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "sentence_transformers.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SentenceTransformerConfig", "line": 26, "inherits_from": ["EmbeddingProviderConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the Sentence Transformer model."}, {"name": "SentenceTransformerEmbeddingProvider", "line": 53, "inherits_from": ["BaseEmbeddingProvider):"], "methods": [{"name": "__init__", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SentenceTransformerConfig"}], "is_async": false, "description": "Initialize the Sentence Transformers embedding provider.", "signature": "__init__(self, config: SentenceTransformerConfig, **kwargs)"}, {"name": "_ensure_initialized", "line": 72, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Ensure the Sentence Transformers model is initialized.", "signature": "async _ensure_initialized(self) -> None"}, {"name": "embed_texts", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str], **kwargs"}], "is_async": true, "return_type": "list[list[float]]", "description": "\n        Generate embeddings for a list of texts using Sentence Transformers.\n\n        Args:\n            texts: List of text strings to embed\n            **kwargs: Additional arguments (normalize_embeddings, show_progress_bar)\n\n        Returns:\n            List of embedding vectors\n\n        Raises:\n            EmbeddingProviderError: If embedding generation fails\n        ", "signature": "async embed_texts(self, texts: list[str], **kwargs, **kwargs) -> list[list[float]]"}, {"name": "get_dimensions", "line": 160, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get the dimensionality of embeddings produced by this provider.", "signature": "async get_dimensions(self) -> int"}, {"name": "health_check", "line": 165, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the Sentence Transformers provider.\n\n        Returns:\n            True if the provider is healthy, False otherwise\n        ", "signature": "async health_check(self) -> bool"}, {"name": "get_model_info", "line": 181, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get information about the current model.", "signature": "get_model_info(self) -> dict[str, Any]"}, {"name": "get_supported_models", "line": 192, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of commonly used Sentence Transformers models.", "signature": "get_supported_models(cls) -> list[str]"}, {"name": "list_available_models", "line": 204, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List available Sentence Transformers models (requires internet connection).", "signature": "list_available_models(cls) -> list[str]"}], "properties": [], "description": "Provides sentence embeddings using a Sentence Transformer model."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import Field"}, {"module": "providers", "alias": null, "line": 18, "statement": "from providers import BaseEmbeddingProvider"}, {"module": "providers", "alias": null, "line": 18, "statement": "from providers import EmbeddingProviderConfig"}, {"module": "providers", "alias": null, "line": 18, "statement": "from providers import EmbeddingProviderError"}, {"module": "providers", "alias": null, "line": 18, "statement": "from providers import ProviderType"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 16}, {"name": "from providers import BaseEmbeddingProvider", "type": "import", "line": 18}, {"name": "from providers import EmbeddingProviderConfig", "type": "import", "line": 18}, {"name": "from providers import EmbeddingProviderError", "type": "import", "line": 18}, {"name": "from providers import ProviderType", "type": "import", "line": 18}, {"name": "SentenceTransformerConfig", "type": "class", "line": 26}, {"name": "SentenceTransformerEmbeddingProvider", "type": "class", "line": 53}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "SentenceTransformerConfig Class", "description": "Class SentenceTransformerConfig definition and methods.", "line_start": 26, "line_end": 36}, {"name": "SentenceTransformerEmbeddingProvider Class", "description": "Class SentenceTransformerEmbeddingProvider definition and methods.", "line_start": 53, "line_end": 207}], "content_hash": "2f68656511f9d733e47f31285b9a275c"}'
- path: libs/opsvi-rag/opsvi_rag/datastores/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "b7ff81cd2a68810525cd085bbbe6187e"}'
- path: libs/opsvi-rag/opsvi_rag/datastores/sqlite_store.py
  line_count: 938
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "sqlite_store.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SQLiteConfig", "line": 30, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for SQLite database connections and operations."}, {"name": "SQLiteVectorSearch", "line": 75, "inherits_from": [], "methods": [{"name": "__init__", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection):"}], "is_async": false, "signature": "__init__(self, conn: aiosqlite.Connection):)"}, {"name": "_register_functions", "line": 82, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Register custom SQLite functions for vector operations.", "signature": "_register_functions(self)"}, {"name": "cosine_similarity", "line": 89, "parameters": [{"name": "a_bytes", "type": "bytes, b_bytes: bytes"}, {"name": "b_bytes", "type": "bytes"}], "is_async": false, "return_type": "float", "description": "Calculate cosine similarity between two embedding vectors.", "signature": "cosine_similarity(a_bytes: bytes, b_bytes: bytes, b_bytes: bytes) -> float"}, {"name": "euclidean_distance", "line": 111, "parameters": [{"name": "a_bytes", "type": "bytes, b_bytes: bytes"}, {"name": "b_bytes", "type": "bytes"}], "is_async": false, "return_type": "float", "description": "Calculate Euclidean distance between two embedding vectors.", "signature": "euclidean_distance(a_bytes: bytes, b_bytes: bytes, b_bytes: bytes) -> float"}], "properties": [], "description": "Implements vector-based search functionality using SQLite as the backend."}, {"name": "SQLiteStore", "line": 126, "inherits_from": ["BaseDatastore):"], "methods": [{"name": "__init__", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SQLiteConfig):"}], "is_async": false, "signature": "__init__(self, config: SQLiteConfig):)"}, {"name": "initialize", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize SQLite database and connection pool.", "signature": "async initialize(self) -> None"}, {"name": "_configure_connection", "line": 169, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection"}], "is_async": true, "return_type": "None", "description": "Configure SQLite connection with performance optimizations.", "signature": "async _configure_connection(self, conn: aiosqlite.Connection) -> None"}, {"name": "_get_connection", "line": 187, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Get a connection from the pool.", "signature": "async _get_connection(self)"}, {"name": "_return_connection", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection"}], "is_async": true, "return_type": "None", "description": "Return a connection to the pool.", "signature": "async _return_connection(self, conn: aiosqlite.Connection) -> None"}, {"name": "_setup_schema", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection"}], "is_async": true, "return_type": "None", "description": "Setup database schema.", "signature": "async _setup_schema(self, conn: aiosqlite.Connection) -> None"}, {"name": "_setup_indexes", "line": 276, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection"}], "is_async": true, "return_type": "None", "description": "Create performance indexes.", "signature": "async _setup_indexes(self, conn: aiosqlite.Connection) -> None"}, {"name": "_register_vector_functions", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "conn", "type": "aiosqlite.Connection"}], "is_async": true, "return_type": "None", "description": "Register custom functions for vector operations.", "signature": "async _register_vector_functions(self, conn: aiosqlite.Connection) -> None"}, {"name": "add_document", "line": 310, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "str", "description": "Add a document to the SQLite database.", "signature": "async add_document(self, document: Document) -> str"}, {"name": "add_documents", "line": 351, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document]"}], "is_async": true, "return_type": "list[str]", "description": "Add multiple documents efficiently.", "signature": "async add_documents(self, documents: list[Document]) -> list[str]"}, {"name": "update_document", "line": 404, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document: Document"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "None", "description": "Update an existing document.", "signature": "async update_document(self, document_id: str, document: Document, document: Document) -> None"}, {"name": "delete_document", "line": 441, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "Delete a document from the database.", "signature": "async delete_document(self, document_id: str) -> None"}, {"name": "get_document", "line": 458, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "Document | None", "description": "Retrieve a document by ID.", "signature": "async get_document(self, document_id: str) -> Document | None"}, {"name": "search", "line": 500, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float] | None", "default": "None"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "search_type", "type": "str", "default": "hybrid"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Search documents using various methods.", "signature": "async search(self, query: str, query_embedding: list[float] | None = None, filters: SearchFilter | None = None, limit: int = 10, search_type: str = hybrid) -> list[SearchResult]"}, {"name": "_fulltext_search", "line": 541, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "filters", "type": "SearchFilter | None"}, {"name": "limit", "type": "int"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform full-text search using FTS5.", "signature": "async _fulltext_search(self, query: str, filters: SearchFilter | None, limit: int) -> list[SearchResult]"}, {"name": "_vector_search", "line": 602, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "filters", "type": "SearchFilter | None"}, {"name": "limit", "type": "int"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform vector similarity search.", "signature": "async _vector_search(self, query_embedding: list[float], filters: SearchFilter | None, limit: int) -> list[SearchResult]"}, {"name": "_hybrid_search", "line": 653, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "filters", "type": "SearchFilter | None"}, {"name": "limit", "type": "int"}, {"name": "text_weight", "type": "float", "default": "0.5"}, {"name": "vector_weight", "type": "float", "default": "0.5"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform hybrid search combining FTS and vector search.", "signature": "async _hybrid_search(self, query: str, query_embedding: list[float], filters: SearchFilter | None, limit: int, text_weight: float = 0.5, vector_weight: float = 0.5) -> list[SearchResult]"}, {"name": "_simple_search", "line": 721, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "filters", "type": "SearchFilter | None"}, {"name": "limit", "type": "int"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform simple LIKE-based text search.", "signature": "async _simple_search(self, query: str, filters: SearchFilter | None, limit: int) -> list[SearchResult]"}, {"name": "_build_fts_query", "line": 770, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}], "is_async": false, "return_type": "str", "description": "Build FTS5 query from user query.", "signature": "_build_fts_query(self, query: str) -> str"}, {"name": "_log_search", "line": 787, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "search_type", "type": "str"}, {"name": "results_count", "type": "int"}, {"name": "execution_time_ms", "type": "float"}], "is_async": true, "return_type": "None", "description": "Log search for analytics.", "signature": "async _log_search(self, query: str, search_type: str, results_count: int, execution_time_ms: float) -> None"}, {"name": "count_documents", "line": 806, "parameters": [{"name": "self", "type": "self"}, {"name": "filters", "type": "SearchFilter | None = None", "default": "None"}], "is_async": true, "return_type": "int", "description": "Count documents matching filters.", "signature": "async count_documents(self, filters: SearchFilter | None = None = None) -> int"}, {"name": "list_documents", "line": 819, "parameters": [{"name": "self", "type": "self"}, {"name": "offset", "type": "int", "default": "0"}, {"name": "limit", "type": "int", "default": "100"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}], "is_async": true, "return_type": "list[Document]", "description": "List documents with pagination.", "signature": "async list_documents(self, offset: int = 0, limit: int = 100, filters: SearchFilter | None = None) -> list[Document]"}, {"name": "get_database_stats", "line": 861, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get database statistics.", "signature": "async get_database_stats(self) -> dict[str, Any]"}, {"name": "optimize_database", "line": 904, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Optimize database performance.", "signature": "async optimize_database(self) -> None"}, {"name": "close", "line": 932, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close all connections in the pool.", "signature": "async close(self) -> None"}], "properties": [], "description": "Manages storage, retrieval, and manipulation of data within an SQLite database."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "logging", "alias": null, "line": 12, "statement": "import logging"}, {"module": "uuid", "alias": null, "line": 13, "statement": "import uuid"}, {"module": "numpy", "alias": "np", "line": 17, "statement": "import numpy as np"}, {"module": "pathlib", "alias": null, "line": 14, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 18, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 18, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 25, "statement": "from base import BaseDatastore"}, {"module": "base", "alias": null, "line": 25, "statement": "from base import Document"}, {"module": "base", "alias": null, "line": 25, "statement": "from base import SearchFilter"}, {"module": "base", "alias": null, "line": 25, "statement": "from base import SearchResult"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "logging", "type": "import", "line": 12}, {"name": "uuid", "type": "import", "line": 13}, {"name": "numpy", "type": "import", "line": 17}, {"name": "from pathlib import Path", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 18}, {"name": "from pydantic import Field", "type": "import", "line": 18}, {"name": "from base import BaseDatastore", "type": "import", "line": 25}, {"name": "from base import Document", "type": "import", "line": 25}, {"name": "from base import SearchFilter", "type": "import", "line": 25}, {"name": "from base import SearchResult", "type": "import", "line": 25}, {"name": "SQLiteConfig", "type": "class", "line": 30}, {"name": "SQLiteVectorSearch", "type": "class", "line": 75}, {"name": "SQLiteStore", "type": "class", "line": 126}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 25}, {"name": "SQLiteConfig Class", "description": "Class SQLiteConfig definition and methods.", "line_start": 30, "line_end": 40}, {"name": "SQLiteVectorSearch Class", "description": "Class SQLiteVectorSearch definition and methods.", "line_start": 75, "line_end": 114}, {"name": "SQLiteStore Class", "description": "Class SQLiteStore definition and methods.", "line_start": 126, "line_end": 935}], "content_hash": "8e19954c5bbae4756c2ba71f076bbf1b"}'
- path: libs/opsvi-rag/opsvi_rag/datastores/neo4j_store.py
  line_count: 650
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "neo4j_store.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "Neo4jConfig", "line": 27, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for connecting to a Neo4j database."}, {"name": "GraphRAGRetriever", "line": 60, "inherits_from": [], "methods": [{"name": "__init__", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "driver", "type": "Driver | AsyncDriver):"}], "is_async": false, "signature": "__init__(self, driver: Driver | AsyncDriver):)"}, {"name": "vector_similarity_search", "line": 66, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "k", "type": "int", "default": "10"}, {"name": "index_name", "type": "str", "default": "document_embeddings"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Perform vector similarity search.", "signature": "async vector_similarity_search(self, query_embedding: list[float], k: int = 10, index_name: str = document_embeddings) -> list[dict[str, Any]]"}, {"name": "keyword_search", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "k", "type": "int", "default": "10"}, {"name": "index_name", "type": "str", "default": "document_text"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Perform keyword-based search.", "signature": "async keyword_search(self, query: str, k: int = 10, index_name: str = document_text) -> list[dict[str, Any]]"}, {"name": "hybrid_search", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "k", "type": "int", "default": "10"}, {"name": "text_weight", "type": "float", "default": "0.5"}, {"name": "vector_weight", "type": "float", "default": "0.5"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Combine vector and text search with weighted scoring.", "signature": "async hybrid_search(self, query: str, query_embedding: list[float], k: int = 10, text_weight: float = 0.5, vector_weight: float = 0.5) -> list[dict[str, Any]]"}, {"name": "graph_traversal_search", "line": 177, "parameters": [{"name": "self", "type": "self"}, {"name": "start_entities", "type": "list[str]"}, {"name": "relationship_types", "type": "list[str] | None", "default": "None"}, {"name": "max_depth", "type": "int", "default": "3"}, {"name": "k", "type": "int", "default": "10"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Perform graph traversal from starting entities.", "signature": "async graph_traversal_search(self, start_entities: list[str], relationship_types: list[str] | None = None, max_depth: int = 3, k: int = 10) -> list[dict[str, Any]]"}, {"name": "community_search", "line": 213, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "community_algorithm", "type": "str", "default": "louvain"}, {"name": "k", "type": "int", "default": "10"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "Search within detected communities for better context.", "signature": "async community_search(self, query_embedding: list[float], community_algorithm: str = louvain, k: int = 10) -> list[dict[str, Any]]"}], "properties": [], "description": "Retriever class that uses graph-based retrieval augmented generation techniques."}, {"name": "Neo4jStore", "line": 255, "inherits_from": ["BaseDatastore):"], "methods": [{"name": "__init__", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Neo4jConfig):"}], "is_async": false, "signature": "__init__(self, config: Neo4jConfig):)"}, {"name": "initialize", "line": 265, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize Neo4j connection and setup indexes.", "signature": "async initialize(self) -> None"}, {"name": "_setup_schema", "line": 296, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Setup Neo4j schema, indexes, and constraints.", "signature": "async _setup_schema(self) -> None"}, {"name": "add_document", "line": 343, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "str", "description": "Add a document to the graph database.", "signature": "async add_document(self, document: Document) -> str"}, {"name": "_create_entities", "line": 385, "parameters": [{"name": "self", "type": "self"}, {"name": "session", "type": "unknown"}, {"name": "doc_id", "type": "str"}, {"name": "entities", "type": "list[dict[str, Any]]"}], "is_async": true, "return_type": "None", "description": "Create entity nodes and relationships.", "signature": "async _create_entities(self, session, doc_id: str, entities: list[dict[str, Any]]) -> None"}, {"name": "_create_concepts", "line": 404, "parameters": [{"name": "self", "type": "self"}, {"name": "session", "type": "unknown"}, {"name": "doc_id", "type": "str"}, {"name": "concepts", "type": "list[dict[str, Any]]"}], "is_async": true, "return_type": "None", "description": "Create concept nodes and relationships.", "signature": "async _create_concepts(self, session, doc_id: str, concepts: list[dict[str, Any]]) -> None"}, {"name": "update_document", "line": 423, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document: Document"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "None", "description": "Update an existing document.", "signature": "async update_document(self, document_id: str, document: Document, document: Document) -> None"}, {"name": "delete_document", "line": 445, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "Delete a document and its relationships.", "signature": "async delete_document(self, document_id: str) -> None"}, {"name": "get_document", "line": 459, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "Document | None", "description": "Retrieve a document by ID.", "signature": "async get_document(self, document_id: str) -> Document | None"}, {"name": "search", "line": 484, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float] | None", "default": "None"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "search_type", "type": "str", "default": "hybrid"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Search documents using various GraphRAG strategies.", "signature": "async search(self, query: str, query_embedding: list[float] | None = None, filters: SearchFilter | None = None, limit: int = 10, search_type: str = hybrid) -> list[SearchResult]"}, {"name": "count_documents", "line": 553, "parameters": [{"name": "self", "type": "self"}, {"name": "filters", "type": "SearchFilter | None = None", "default": "None"}], "is_async": true, "return_type": "int", "description": "Count documents matching filters.", "signature": "async count_documents(self, filters: SearchFilter | None = None = None) -> int"}, {"name": "list_documents", "line": 563, "parameters": [{"name": "self", "type": "self"}, {"name": "offset", "type": "int", "default": "0"}, {"name": "limit", "type": "int", "default": "100"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}], "is_async": true, "return_type": "list[Document]", "description": "List documents with pagination.", "signature": "async list_documents(self, offset: int = 0, limit: int = 100, filters: SearchFilter | None = None) -> list[Document]"}, {"name": "create_knowledge_graph", "line": 597, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document]"}, {"name": "extract_entities", "type": "bool", "default": "True"}, {"name": "extract_relationships", "type": "bool", "default": "True"}, {"name": "similarity_threshold", "type": "float", "default": "0.8"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Create a knowledge graph from documents.", "signature": "async create_knowledge_graph(self, documents: list[Document], extract_entities: bool = True, extract_relationships: bool = True, similarity_threshold: float = 0.8) -> dict[str, Any]"}, {"name": "close", "line": 648, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close the Neo4j connection.", "signature": "async close(self) -> None"}], "properties": [], "description": "Class managing storage and retrieval of data within a Neo4j graph database."}], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 22, "statement": "from base import BaseDatastore"}, {"module": "base", "alias": null, "line": 22, "statement": "from base import Document"}, {"module": "base", "alias": null, "line": 22, "statement": "from base import SearchFilter"}, {"module": "base", "alias": null, "line": 22, "statement": "from base import SearchResult"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 14}, {"name": "from pydantic import Field", "type": "import", "line": 14}, {"name": "from base import BaseDatastore", "type": "import", "line": 22}, {"name": "from base import Document", "type": "import", "line": 22}, {"name": "from base import SearchFilter", "type": "import", "line": 22}, {"name": "from base import SearchResult", "type": "import", "line": 22}, {"name": "Neo4jConfig", "type": "class", "line": 27}, {"name": "GraphRAGRetriever", "type": "class", "line": 60}, {"name": "Neo4jStore", "type": "class", "line": 255}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 22}, {"name": "Neo4jConfig Class", "description": "Class Neo4jConfig definition and methods.", "line_start": 27, "line_end": 37}, {"name": "GraphRAGRetriever Class", "description": "Class GraphRAGRetriever definition and methods.", "line_start": 60, "line_end": 216}, {"name": "Neo4jStore Class", "description": "Class Neo4jStore definition and methods.", "line_start": 255, "line_end": 651}], "content_hash": "87627a12e827887a71d4a659daf467b0"}'
- path: libs/opsvi-rag/opsvi_rag/datastores/chromadb_store.py
  line_count: 648
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "chromadb_store.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ChromaDBConfig", "line": 34, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for connecting to and using the ChromaDB database."}, {"name": "ChromaDBStore", "line": 79, "inherits_from": ["BaseDatastore):"], "methods": [{"name": "__init__", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ChromaDBConfig):"}], "is_async": false, "signature": "__init__(self, config: ChromaDBConfig):)"}, {"name": "initialize", "line": 90, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize ChromaDB client and collection.", "signature": "async initialize(self) -> None"}, {"name": "_setup_embedding_function", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup the embedding function based on configuration.", "signature": "_setup_embedding_function(self) -> None"}, {"name": "add_document", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "str", "description": "Add a document to the ChromaDB collection.", "signature": "async add_document(self, document: Document) -> str"}, {"name": "add_documents", "line": 199, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document]"}], "is_async": true, "return_type": "list[str]", "description": "Add multiple documents to the collection efficiently.", "signature": "async add_documents(self, documents: list[Document]) -> list[str]"}, {"name": "_prepare_metadata", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "metadata", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, str | int | float | bool]", "description": "Prepare metadata for ChromaDB (convert complex types to strings).", "signature": "_prepare_metadata(self, metadata: dict[str, Any]) -> dict[str, str | int | float | bool]"}, {"name": "_restore_metadata", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "metadata", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Restore metadata from ChromaDB format.", "signature": "_restore_metadata(self, metadata: dict[str, Any]) -> dict[str, Any]"}, {"name": "update_document", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document: Document"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "None", "description": "Update an existing document.", "signature": "async update_document(self, document_id: str, document: Document, document: Document) -> None"}, {"name": "delete_document", "line": 277, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "Delete a document from the collection.", "signature": "async delete_document(self, document_id: str) -> None"}, {"name": "get_document", "line": 290, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "Document | None", "description": "Retrieve a document by ID.", "signature": "async get_document(self, document_id: str) -> Document | None"}, {"name": "search", "line": 317, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float] | None", "default": "None"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "search_type", "type": "str", "default": "semantic"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Search documents in the collection.", "signature": "async search(self, query: str, query_embedding: list[float] | None = None, filters: SearchFilter | None = None, limit: int = 10, search_type: str = semantic) -> list[SearchResult]"}, {"name": "_hybrid_search", "line": 407, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "filters", "type": "SearchFilter | None"}, {"name": "limit", "type": "int"}, {"name": "text_weight", "type": "float", "default": "0.5"}, {"name": "vector_weight", "type": "float", "default": "0.5"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform hybrid search combining text and vector search.", "signature": "async _hybrid_search(self, query: str, query_embedding: list[float], filters: SearchFilter | None, limit: int, text_weight: float = 0.5, vector_weight: float = 0.5) -> list[SearchResult]"}, {"name": "_build_where_clause", "line": 471, "parameters": [{"name": "self", "type": "self"}, {"name": "filters", "type": "SearchFilter"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Build ChromaDB where clause from SearchFilter.", "signature": "_build_where_clause(self, filters: SearchFilter) -> dict[str, Any] | None"}, {"name": "count_documents", "line": 490, "parameters": [{"name": "self", "type": "self"}, {"name": "filters", "type": "SearchFilter | None = None", "default": "None"}], "is_async": true, "return_type": "int", "description": "Count documents matching filters.", "signature": "async count_documents(self, filters: SearchFilter | None = None = None) -> int"}, {"name": "list_documents", "line": 509, "parameters": [{"name": "self", "type": "self"}, {"name": "offset", "type": "int", "default": "0"}, {"name": "limit", "type": "int", "default": "100"}, {"name": "filters", "type": "SearchFilter | None", "default": "None"}], "is_async": true, "return_type": "list[Document]", "description": "List documents with pagination.", "signature": "async list_documents(self, offset: int = 0, limit: int = 100, filters: SearchFilter | None = None) -> list[Document]"}, {"name": "similarity_search", "line": 553, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "threshold", "type": "float", "default": "0.0"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Perform pure vector similarity search.", "signature": "async similarity_search(self, query_embedding: list[float], limit: int = 10, threshold: float = 0.0) -> list[SearchResult]"}, {"name": "get_collection_info", "line": 601, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get information about the collection.", "signature": "async get_collection_info(self) -> dict[str, Any]"}, {"name": "reset_collection", "line": 621, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset (delete all documents from) the collection.", "signature": "async reset_collection(self) -> None"}, {"name": "close", "line": 646, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close the ChromaDB connection.", "signature": "async close(self) -> None"}], "properties": [], "description": "Manages storage operations and interactions with the ChromaDB database, including data insertion, retrieval, and management."}], "imports": [{"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "uuid", "alias": null, "line": 12, "statement": "import uuid"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 29, "statement": "from base import BaseDatastore"}, {"module": "base", "alias": null, "line": 29, "statement": "from base import Document"}, {"module": "base", "alias": null, "line": 29, "statement": "from base import SearchFilter"}, {"module": "base", "alias": null, "line": 29, "statement": "from base import SearchResult"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "uuid", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from base import BaseDatastore", "type": "import", "line": 29}, {"name": "from base import Document", "type": "import", "line": 29}, {"name": "from base import SearchFilter", "type": "import", "line": 29}, {"name": "from base import SearchResult", "type": "import", "line": 29}, {"name": "ChromaDBConfig", "type": "class", "line": 34}, {"name": "ChromaDBStore", "type": "class", "line": 79}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 29}, {"name": "ChromaDBConfig Class", "description": "Class ChromaDBConfig definition and methods.", "line_start": 34, "line_end": 44}, {"name": "ChromaDBStore Class", "description": "Class ChromaDBStore definition and methods.", "line_start": 79, "line_end": 649}], "content_hash": "c8c56e7bed5184539b169ae54e68e6a5"}'
- path: libs/opsvi-rag/opsvi_rag/utils/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "1c1015760f35710f6e1b659393cb2960"}'
- path: libs/opsvi-rag/opsvi_rag/utils/datastore_factory.py
  line_count: 339
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "datastore_factory.py", "description": "Python module with 4 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_qdrant_store", "line": 290, "parameters": [{"name": "host", "type": "str", "default": "localhost"}, {"name": "port", "type": "int", "default": "6333"}, {"name": "collection_name", "type": "str", "default": "opsvi_documents"}], "is_async": false, "return_type": "QdrantStore", "description": "Initialize and return a Qdrant vector store connected to the specified host and port with the given collection name.", "signature": "create_qdrant_store(host: str = localhost, port: int = 6333, collection_name: str = opsvi_documents, **kwargs) -> QdrantStore"}, {"name": "create_neo4j_store", "line": 302, "parameters": [{"name": "uri", "type": "str", "default": "bolt://localhost:7687"}, {"name": "username", "type": "str", "default": "neo4j"}, {"name": "password", "type": "str", "default": "password"}], "is_async": false, "return_type": "Neo4jStore", "description": "Create and return a Neo4j graph database store using the provided URI and authentication credentials.", "signature": "create_neo4j_store(uri: str = bolt://localhost:7687, username: str = neo4j, password: str = password, **kwargs) -> Neo4jStore"}, {"name": "create_chromadb_store", "line": 314, "parameters": [{"name": "persist_directory", "type": "str", "default": "./chroma_db"}, {"name": "collection_name", "type": "str", "default": "opsvi_documents"}], "is_async": false, "return_type": "ChromaDBStore", "description": "Set up and return a ChromaDB vector store with persistence at the specified directory and collection name.", "signature": "create_chromadb_store(persist_directory: str = ./chroma_db, collection_name: str = opsvi_documents, **kwargs) -> ChromaDBStore"}, {"name": "create_sqlite_store", "line": 328, "parameters": [{"name": "database_path", "type": "str", "default": "./rag_database.db"}, {"name": "fts_enabled", "type": "bool", "default": "True"}, {"name": "vector_search_enabled", "type": "bool", "default": "True"}], "is_async": false, "return_type": "SQLiteStore", "description": "Create and return a SQLite-based datastore with optional full-text search and vector search capabilities.", "signature": "create_sqlite_store(database_path: str = ./rag_database.db, fts_enabled: bool = True, vector_search_enabled: bool = True, **kwargs) -> SQLiteStore"}], "classes": [{"name": "DatastoreFactory", "line": 28, "inherits_from": [], "methods": [{"name": "create_datastore", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "datastore_type", "type": "str"}, {"name": "config", "type": "dict[str, Any] | object | None", "default": "None"}], "is_async": false, "return_type": "BaseDatastore", "description": "\n        Create a datastore instance.\n\n        Args:\n            datastore_type: Type of datastore to create\n            config: Configuration object or dictionary\n            **kwargs: Additional configuration parameters\n\n        Returns:\n            Configured datastore instance\n\n        Raises:\n            ValueError: If datastore type is not supported\n            TypeError: If configuration is invalid\n        ", "signature": "create_datastore(self, datastore_type: str, config: dict[str, Any] | object | None = None, **kwargs) -> BaseDatastore"}, {"name": "get_available_datastores", "line": 119, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "Get list of available datastore types with descriptions.", "signature": "get_available_datastores(cls) -> dict[str, str]"}, {"name": "register_datastore", "line": 124, "parameters": [{"name": "cls", "type": "self"}, {"name": "name", "type": "str"}, {"name": "store_class", "type": "type[BaseDatastore]"}, {"name": "config_class", "type": "type"}, {"name": "description", "type": "str", "default": ""}], "is_async": false, "return_type": "None", "description": "\n        Register a new datastore type.\n\n        Args:\n            name: Name of the datastore type\n            store_class: Datastore implementation class\n            config_class: Configuration class\n            description: Human-readable description\n        ", "signature": "register_datastore(cls, name: str, store_class: type[BaseDatastore], config_class: type, description: str = ) -> None"}, {"name": "unregister_datastore", "line": 152, "parameters": [{"name": "cls", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a datastore type.", "signature": "unregister_datastore(cls, name: str) -> None"}, {"name": "create_multi_datastore", "line": 161, "parameters": [{"name": "cls", "type": "self"}, {"name": "configs", "type": "dict[str, dict[str, Any]]"}, {"name": "primary", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "\"MultiDatastore\"", "description": "\n        Create a multi-datastore setup.\n\n        Args:\n            configs: Dictionary mapping datastore names to their configurations\n            primary: Name of the primary datastore (for writes)\n\n        Returns:\n            MultiDatastore instance\n        ", "signature": "create_multi_datastore(cls, configs: dict[str, dict[str, Any]], primary: str | None = None) -> \"MultiDatastore\""}], "properties": [], "description": "Factory class responsible for creating instances of various datastore types based on configuration or parameters."}, {"name": "MultiDatastore", "line": 184, "inherits_from": ["BaseDatastore):"], "methods": [{"name": "__init__", "line": 194, "parameters": [{"name": "self", "type": "self"}, {"name": "datastores", "type": "dict[str, BaseDatastore]"}, {"name": "primary", "type": "str | None", "default": "None"}], "is_async": false, "signature": "__init__(self, datastores: dict[str, BaseDatastore], primary: str | None = None)"}, {"name": "primary_datastore", "line": 205, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "BaseDatastore", "description": "Get the primary datastore.", "signature": "primary_datastore(self) -> BaseDatastore"}, {"name": "initialize", "line": 209, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize all datastores.", "signature": "async initialize(self) -> None"}, {"name": "add_document", "line": 219, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "unknown"}], "is_async": true, "return_type": "str", "description": "Add document to primary datastore.", "signature": "async add_document(self, document) -> str"}, {"name": "add_documents", "line": 223, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "unknown"}], "is_async": true, "return_type": "list", "description": "Add documents to primary datastore.", "signature": "async add_documents(self, documents) -> list"}, {"name": "update_document", "line": 227, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document"}, {"name": "document", "type": "unknown"}], "is_async": true, "return_type": "None", "description": "Update document in primary datastore.", "signature": "async update_document(self, document_id: str, document, document) -> None"}, {"name": "delete_document", "line": 231, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "Delete document from primary datastore.", "signature": "async delete_document(self, document_id: str) -> None"}, {"name": "get_document", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str):"}], "is_async": true, "description": "Get document from primary datastore.", "signature": "async get_document(self, document_id: str):)"}, {"name": "search", "line": 239, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str"}], "is_async": true, "description": "Search using primary datastore.", "signature": "async search(self, query: str, **kwargs)"}, {"name": "count_documents", "line": 243, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Count documents in primary datastore.", "signature": "async count_documents(self, **kwargs) -> int"}, {"name": "list_documents", "line": 247, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "List documents from primary datastore.", "signature": "async list_documents(self, **kwargs)"}, {"name": "search_all", "line": 251, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Search across all datastores and combine results.", "signature": "async search_all(self, query: str, **kwargs, **kwargs) -> dict[str, Any]"}, {"name": "replicate_to_all", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "unknown"}], "is_async": true, "return_type": "dict[str, str]", "description": "Add document to all datastores.", "signature": "async replicate_to_all(self, document) -> dict[str, str]"}, {"name": "close", "line": 279, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close all datastores.", "signature": "async close(self) -> None"}], "properties": [], "description": "Class managing multiple datastore instances, providing unified access and operations across them."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "base", "alias": null, "line": 13, "statement": "from base import BaseDatastore"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import ChromaDBConfig"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import ChromaDBStore"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import Neo4jConfig"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import Neo4jStore"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import QdrantConfig"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import QdrantStore"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import SQLiteConfig"}, {"module": "datastores", "alias": null, "line": 14, "statement": "from datastores import SQLiteStore"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from base import BaseDatastore", "type": "import", "line": 13}, {"name": "from datastores import ChromaDBConfig", "type": "import", "line": 14}, {"name": "from datastores import ChromaDBStore", "type": "import", "line": 14}, {"name": "from datastores import Neo4jConfig", "type": "import", "line": 14}, {"name": "from datastores import Neo4jStore", "type": "import", "line": 14}, {"name": "from datastores import QdrantConfig", "type": "import", "line": 14}, {"name": "from datastores import QdrantStore", "type": "import", "line": 14}, {"name": "from datastores import SQLiteConfig", "type": "import", "line": 14}, {"name": "from datastores import SQLiteStore", "type": "import", "line": 14}, {"name": "DatastoreFactory", "type": "class", "line": 28}, {"name": "MultiDatastore", "type": "class", "line": 184}, {"name": "create_qdrant_store", "type": "function", "line": 290}, {"name": "create_neo4j_store", "type": "function", "line": 302}, {"name": "create_chromadb_store", "type": "function", "line": 314}, {"name": "create_sqlite_store", "type": "function", "line": 328}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 14}, {"name": "create_qdrant_store Function", "description": "Function create_qdrant_store implementation.", "line_start": 290, "line_end": 301}, {"name": "create_neo4j_store Function", "description": "Function create_neo4j_store implementation.", "line_start": 302, "line_end": 313}, {"name": "create_chromadb_store Function", "description": "Function create_chromadb_store implementation.", "line_start": 314, "line_end": 327}, {"name": "create_sqlite_store Function", "description": "Function create_sqlite_store implementation.", "line_start": 328, "line_end": 333}, {"name": "DatastoreFactory Class", "description": "Class DatastoreFactory definition and methods.", "line_start": 28, "line_end": 164}, {"name": "MultiDatastore Class", "description": "Class MultiDatastore definition and methods.", "line_start": 184, "line_end": 282}], "content_hash": "86c1baccfe0777917b15967e651c7c1c"}'
- path: libs/opsvi-rag/opsvi_rag/tests/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "403459e5e9a0169b594cfaf37aab0db9"}'
- path: libs/opsvi-rag/opsvi_rag/analytics/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "4198e57490f6b70e03233557c6ca01df"}'
- path: libs/opsvi-rag/opsvi_rag/analytics/quality.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "quality.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AnalyticsError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to analytics operations."}, {"name": "QualityAnalyticsConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for quality analytics."}, {"name": "QualityAnalytics", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "QualityAnalyticsConfig):"}], "is_async": false, "description": "Initialize quality analytics.", "signature": "__init__(self, config: QualityAnalyticsConfig):)"}, {"name": "analyze", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Analyze the given data.", "signature": "analyze(self, data: Any) -> dict[str, Any]"}], "properties": [], "description": "Performs quality analytics using provided configurations."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "AnalyticsError", "type": "class", "line": 15}, {"name": "QualityAnalyticsConfig", "type": "class", "line": 21}, {"name": "QualityAnalytics", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "AnalyticsError Class", "description": "Class AnalyticsError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "QualityAnalyticsConfig Class", "description": "Class QualityAnalyticsConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "QualityAnalytics Class", "description": "Class QualityAnalytics definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "569f650f7abdb8581b04f13379c9ae60"}'
- path: libs/opsvi-rag/opsvi_rag/analytics/metrics.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "metrics.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AnalyticsError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to analytics operations."}, {"name": "MetricsAnalyticsConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for metrics analytics."}, {"name": "MetricsAnalytics", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MetricsAnalyticsConfig):"}], "is_async": false, "description": "Initialize metrics analytics.", "signature": "__init__(self, config: MetricsAnalyticsConfig):)"}, {"name": "analyze", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Analyze the given data.", "signature": "analyze(self, data: Any) -> dict[str, Any]"}], "properties": [], "description": "Handles metrics analytics processing and reporting."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "AnalyticsError", "type": "class", "line": 15}, {"name": "MetricsAnalyticsConfig", "type": "class", "line": 21}, {"name": "MetricsAnalytics", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "AnalyticsError Class", "description": "Class AnalyticsError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "MetricsAnalyticsConfig Class", "description": "Class MetricsAnalyticsConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "MetricsAnalytics Class", "description": "Class MetricsAnalytics definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "8fc0472563d8963ce85cd4ea4d0304a0"}'
- path: libs/opsvi-rag/opsvi_rag/analytics/performance.py
  line_count: 538
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "performance.py", "description": "Python module with 4 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "get_performance_monitor", "line": 481, "parameters": [], "is_async": false, "return_type": "PerformanceMonitor | None", "description": "Retrieve the current active performance monitor instance, if any.", "signature": "get_performance_monitor() -> PerformanceMonitor | None"}, {"name": "set_performance_monitor", "line": 486, "parameters": [{"name": "monitor", "type": "PerformanceMonitor"}], "is_async": false, "return_type": "None", "description": "Set or replace the active performance monitor instance.", "signature": "set_performance_monitor(monitor: PerformanceMonitor) -> None"}, {"name": "profile_search", "line": 492, "parameters": [{"name": "query", "type": "str"}, {"name": "search_type", "type": "str", "default": "unknown"}, {"name": "datastore_type", "type": "str", "default": "unknown"}], "is_async": false, "return_type": "PerformanceProfiler", "description": "Create a performance profiler for monitoring search operations with specified parameters.", "signature": "profile_search(query: str, search_type: str = unknown, datastore_type: str = unknown, **metadata) -> PerformanceProfiler"}, {"name": "profile_datastore_operation", "line": 517, "parameters": [{"name": "operation", "type": "str"}, {"name": "datastore_type", "type": "str", "default": "unknown"}], "is_async": false, "return_type": "PerformanceProfiler", "description": "Create a performance profiler for monitoring datastore operations with specified parameters.", "signature": "profile_datastore_operation(operation: str, datastore_type: str = unknown, **metadata) -> PerformanceProfiler"}], "classes": [{"name": "SearchMetrics", "line": 25, "inherits_from": [], "methods": [], "properties": [], "description": "Represents metrics related to search operations performance."}, {"name": "DatastoreMetrics", "line": 40, "inherits_from": [], "methods": [], "properties": [], "description": "Represents metrics related to datastore operations performance."}, {"name": "PerformanceConfig", "line": 52, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for performance monitoring."}, {"name": "PerformanceMonitor", "line": 80, "inherits_from": [], "methods": [{"name": "__init__", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "PerformanceConfig):"}], "is_async": false, "signature": "__init__(self, config: PerformanceConfig):)"}, {"name": "record_search_metric", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "metric", "type": "SearchMetrics"}], "is_async": true, "return_type": "None", "description": "Record a search performance metric.", "signature": "async record_search_metric(self, metric: SearchMetrics) -> None"}, {"name": "record_datastore_metric", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "metric", "type": "DatastoreMetrics"}], "is_async": true, "return_type": "None", "description": "Record a datastore operation metric.", "signature": "async record_datastore_metric(self, metric: DatastoreMetrics) -> None"}, {"name": "_check_search_alerts", "line": 114, "parameters": [{"name": "self", "type": "self"}, {"name": "metric", "type": "SearchMetrics"}], "is_async": true, "return_type": "None", "description": "Check for search performance alerts.", "signature": "async _check_search_alerts(self, metric: SearchMetrics) -> None"}, {"name": "_check_datastore_alerts", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "metric", "type": "DatastoreMetrics"}], "is_async": true, "return_type": "None", "description": "Check for datastore performance alerts.", "signature": "async _check_datastore_alerts(self, metric: DatastoreMetrics) -> None"}, {"name": "_process_alert", "line": 170, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "Process a performance alert.", "signature": "async _process_alert(self, alert: dict[str, Any]) -> None"}, {"name": "get_search_statistics", "line": 191, "parameters": [{"name": "self", "type": "self"}, {"name": "time_window_minutes", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get search performance statistics.", "signature": "async get_search_statistics(self, time_window_minutes: int | None = None) -> dict[str, Any]"}, {"name": "get_datastore_statistics", "line": 275, "parameters": [{"name": "self", "type": "self"}, {"name": "time_window_minutes", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get datastore operation statistics.", "signature": "async get_datastore_statistics(self, time_window_minutes: int | None = None) -> dict[str, Any]"}, {"name": "get_performance_summary", "line": 358, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get overall performance summary.", "signature": "async get_performance_summary(self) -> dict[str, Any]"}, {"name": "_calculate_health_score", "line": 378, "parameters": [{"name": "self", "type": "self"}, {"name": "search_stats", "type": "dict[str, Any]"}, {"name": "datastore_stats", "type": "dict[str, Any]"}], "is_async": false, "return_type": "str", "description": "Calculate overall system health score.", "signature": "_calculate_health_score(self, search_stats: dict[str, Any], datastore_stats: dict[str, Any]) -> str"}, {"name": "cleanup_old_metrics", "line": 393, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Remove old metrics beyond retention period.", "signature": "async cleanup_old_metrics(self) -> None"}], "properties": [], "description": "Manages and tracks performance metrics across various operations."}, {"name": "PerformanceProfiler", "line": 415, "inherits_from": [], "methods": [{"name": "__init__", "line": 418, "parameters": [{"name": "self", "type": "self"}, {"name": "monitor", "type": "PerformanceMonitor"}, {"name": "operation_type", "type": "str"}, {"name": "operation_name", "type": "str"}, {"name": "metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, monitor: PerformanceMonitor, operation_type: str, operation_name: str, metadata: dict[str, Any] | None = None)"}, {"name": "__aenter__", "line": 434, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "signature": "async __aenter__(self)"}, {"name": "__aexit__", "line": 438, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": true, "signature": "async __aexit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Profiles and records performance data for specific operations."}, {"name": "NoOpProfiler", "line": 533, "inherits_from": [], "methods": [{"name": "__aenter__", "line": 536, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "signature": "async __aenter__(self)"}, {"name": "__aexit__", "line": 539, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": true, "signature": "async __aexit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "A profiler implementation that performs no operations, used as a placeholder."}], "imports": [{"module": "asyncio", "alias": null, "line": 10, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "numpy", "alias": "np", "line": 18, "statement": "import numpy as np"}, {"module": "collections", "alias": null, "line": 13, "statement": "from collections import defaultdict"}, {"module": "collections", "alias": null, "line": 13, "statement": "from collections import deque"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 19, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 19, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "numpy", "type": "import", "line": 18}, {"name": "from collections import defaultdict", "type": "import", "line": 13}, {"name": "from collections import deque", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 15}, {"name": "from datetime import timedelta", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 19}, {"name": "from pydantic import Field", "type": "import", "line": 19}, {"name": "SearchMetrics", "type": "class", "line": 25}, {"name": "DatastoreMetrics", "type": "class", "line": 40}, {"name": "PerformanceConfig", "type": "class", "line": 52}, {"name": "PerformanceMonitor", "type": "class", "line": 80}, {"name": "PerformanceProfiler", "type": "class", "line": 415}, {"name": "get_performance_monitor", "type": "function", "line": 481}, {"name": "set_performance_monitor", "type": "function", "line": 486}, {"name": "profile_search", "type": "function", "line": 492}, {"name": "profile_datastore_operation", "type": "function", "line": 517}, {"name": "NoOpProfiler", "type": "class", "line": 533}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "get_performance_monitor Function", "description": "Function get_performance_monitor implementation.", "line_start": 481, "line_end": 485}, {"name": "set_performance_monitor Function", "description": "Function set_performance_monitor implementation.", "line_start": 486, "line_end": 491}, {"name": "profile_search Function", "description": "Function profile_search implementation.", "line_start": 492, "line_end": 516}, {"name": "profile_datastore_operation Function", "description": "Function profile_datastore_operation implementation.", "line_start": 517, "line_end": 532}, {"name": "SearchMetrics Class", "description": "Class SearchMetrics definition and methods.", "line_start": 25, "line_end": 35}, {"name": "DatastoreMetrics Class", "description": "Class DatastoreMetrics definition and methods.", "line_start": 40, "line_end": 50}, {"name": "PerformanceConfig Class", "description": "Class PerformanceConfig definition and methods.", "line_start": 52, "line_end": 62}, {"name": "PerformanceMonitor Class", "description": "Class PerformanceMonitor definition and methods.", "line_start": 80, "line_end": 396}, {"name": "PerformanceProfiler Class", "description": "Class PerformanceProfiler definition and methods.", "line_start": 415, "line_end": 441}, {"name": "NoOpProfiler Class", "description": "Class NoOpProfiler definition and methods.", "line_start": 533, "line_end": 542}], "content_hash": "b5b7c00aaeb24654cb83abf2607259ce"}'
- path: libs/opsvi-rag/opsvi_rag/security/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "025162095459238668cc10773d6de85c"}'
- path: libs/opsvi-rag/opsvi_rag/resilience/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "212b1915e308519091f30de7c26a5ed8"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ed00996e042807178b8e8b9fc71363f4"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/reranking.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "reranking.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RetrievalError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the retrieval process."}, {"name": "RetrievalResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the result of a retrieval operation, including retrieved documents and metadata."}, {"name": "RerankingRetrieverConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the RerankingRetriever, including parameters for retrieval and reranking."}, {"name": "RerankingRetriever", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RerankingRetrieverConfig):"}], "is_async": false, "description": "Initialize reranking retrieval.", "signature": "__init__(self, config: RerankingRetrieverConfig):)"}, {"name": "retrieve", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[RetrievalResult]", "description": "Retrieve content matching the query.", "signature": "retrieve(self, query: str, **kwargs, **kwargs) -> list[RetrievalResult]"}], "properties": [], "description": "Performs document retrieval followed by reranking to improve result relevance."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "RetrievalError", "type": "class", "line": 16}, {"name": "RetrievalResult", "type": "class", "line": 23}, {"name": "RerankingRetrieverConfig", "type": "class", "line": 31}, {"name": "RerankingRetriever", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "RetrievalError Class", "description": "Class RetrievalError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "RetrievalResult Class", "description": "Class RetrievalResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "RerankingRetrieverConfig Class", "description": "Class RerankingRetrieverConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "RerankingRetriever Class", "description": "Class RerankingRetriever definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "7aa4e3ed42d55c8205f7297d79ab92fd"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/filtering.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "filtering.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RetrievalError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the retrieval process."}, {"name": "RetrievalResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the result of a retrieval operation, including retrieved data and metadata."}, {"name": "FilteringRetrieverConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the FilteringRetriever, specifying filtering criteria."}, {"name": "FilteringRetriever", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FilteringRetrieverConfig):"}], "is_async": false, "description": "Initialize filtering retrieval.", "signature": "__init__(self, config: FilteringRetrieverConfig):)"}, {"name": "retrieve", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[RetrievalResult]", "description": "Retrieve content matching the query.", "signature": "retrieve(self, query: str, **kwargs, **kwargs) -> list[RetrievalResult]"}], "properties": [], "description": "Retriever that filters retrieval results based on specified criteria to refine output."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "RetrievalError", "type": "class", "line": 16}, {"name": "RetrievalResult", "type": "class", "line": 23}, {"name": "FilteringRetrieverConfig", "type": "class", "line": 31}, {"name": "FilteringRetriever", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "RetrievalError Class", "description": "Class RetrievalError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "RetrievalResult Class", "description": "Class RetrievalResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "FilteringRetrieverConfig Class", "description": "Class FilteringRetrieverConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "FilteringRetriever Class", "description": "Class FilteringRetriever definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "20d774c13e7c93bc8ff9c42da857091b"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/hybrid.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "hybrid.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RetrievalError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the retrieval process."}, {"name": "RetrievalResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the result of a retrieval operation, including retrieved items and metadata."}, {"name": "HybridRetrieverConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the HybridRetriever, specifying parameters for retrieval."}, {"name": "HybridRetriever", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "HybridRetrieverConfig):"}], "is_async": false, "description": "Initialize hybrid retrieval.", "signature": "__init__(self, config: HybridRetrieverConfig):)"}, {"name": "retrieve", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[RetrievalResult]", "description": "Retrieve content matching the query.", "signature": "retrieve(self, query: str, **kwargs, **kwargs) -> list[RetrievalResult]"}], "properties": [], "description": "Performs document retrieval using a hybrid approach combining multiple retrieval techniques."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "RetrievalError", "type": "class", "line": 16}, {"name": "RetrievalResult", "type": "class", "line": 23}, {"name": "HybridRetrieverConfig", "type": "class", "line": 31}, {"name": "HybridRetriever", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "RetrievalError Class", "description": "Class RetrievalError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "RetrievalResult Class", "description": "Class RetrievalResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "HybridRetrieverConfig Class", "description": "Class HybridRetrieverConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "HybridRetriever Class", "description": "Class HybridRetriever definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "29e3db2a2c9c009b9072e61f475df0e5"}'
- path: libs/opsvi-rag/opsvi_rag/retrieval/ranking.py
  line_count: 50
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "ranking.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "RetrievalError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during the retrieval process."}, {"name": "RetrievalResult", "line": 23, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the result of a retrieval operation, including retrieved documents and metadata."}, {"name": "RankingRetrieverConfig", "line": 31, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the RankingRetriever, such as parameters and thresholds."}, {"name": "RankingRetriever", "line": 38, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RankingRetrieverConfig):"}], "is_async": false, "description": "Initialize ranking retrieval.", "signature": "__init__(self, config: RankingRetrieverConfig):)"}, {"name": "retrieve", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, **kwargs"}], "is_async": false, "return_type": "list[RetrievalResult]", "description": "Retrieve content matching the query.", "signature": "retrieve(self, query: str, **kwargs, **kwargs) -> list[RetrievalResult]"}], "properties": [], "description": "Performs document retrieval and ranking based on a specified configuration."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "RetrievalError", "type": "class", "line": 16}, {"name": "RetrievalResult", "type": "class", "line": 23}, {"name": "RankingRetrieverConfig", "type": "class", "line": 31}, {"name": "RankingRetriever", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "RetrievalError Class", "description": "Class RetrievalError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "RetrievalResult Class", "description": "Class RetrievalResult definition and methods.", "line_start": 23, "line_end": 33}, {"name": "RankingRetrieverConfig Class", "description": "Class RankingRetrieverConfig definition and methods.", "line_start": 31, "line_end": 41}, {"name": "RankingRetriever Class", "description": "Class RankingRetriever definition and methods.", "line_start": 38, "line_end": 50}], "content_hash": "d5d2258de07d9de48462236d34933687"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "89158b8ec0ea2bc6e7550528e496cbde"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/base.py
  line_count: 253
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PipelineError", "line": 22, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors that occur within the pipeline processing."}, {"name": "PipelineStage", "line": 28, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "INITIALIZATION", "line": 29, "type": ""}, {"name": "PROCESSING", "line": 30, "type": ""}, {"name": "VALIDATION", "line": 31, "type": ""}, {"name": "STORAGE", "line": 32, "type": ""}, {"name": "RETRIEVAL", "line": 33, "type": ""}, {"name": "GENERATION", "line": 34, "type": ""}, {"name": "COMPLETION", "line": 35, "type": ""}], "description": "Defines a single stage within the pipeline workflow."}, {"name": "PipelineConfig", "line": 40, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for the pipeline execution."}, {"name": "PipelineResult", "line": 55, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the output and results produced by the pipeline."}, {"name": "BaseRAGPipeline", "line": 79, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "PipelineConfig"}], "is_async": false, "description": "Initialize the RAG pipeline.", "signature": "__init__(self, config: PipelineConfig, **kwargs)"}, {"name": "execute", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "PipelineResult", "description": "\n        Execute the pipeline.\n\n        Args:\n            **kwargs: Pipeline-specific arguments\n\n        Returns:\n            Pipeline execution result\n\n        Raises:\n            PipelineError: If pipeline execution fails\n        ", "signature": "async execute(self, **kwargs) -> PipelineResult"}, {"name": "execute_with_timeout", "line": 115, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "PipelineResult", "description": "\n        Execute the pipeline with timeout.\n\n        Args:\n            **kwargs: Pipeline-specific arguments\n\n        Returns:\n            Pipeline execution result\n\n        Raises:\n            PipelineError: If pipeline execution fails or times out\n        ", "signature": "async execute_with_timeout(self, **kwargs) -> PipelineResult"}, {"name": "execute_with_retry", "line": 138, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "PipelineResult", "description": "\n        Execute the pipeline with retry logic.\n\n        Args:\n            **kwargs: Pipeline-specific arguments\n\n        Returns:\n            Pipeline execution result\n\n        Raises:\n            PipelineError: If pipeline execution fails after all retries\n        ", "signature": "async execute_with_retry(self, **kwargs) -> PipelineResult"}, {"name": "_start_pipeline", "line": 173, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start pipeline execution.", "signature": "_start_pipeline(self) -> None"}, {"name": "_end_pipeline", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "success", "type": "bool"}, {"name": "error_message", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "PipelineResult", "description": "End pipeline execution and create result.", "signature": "_end_pipeline(self, success: bool, error_message: str | None = None) -> PipelineResult"}, {"name": "_set_stage", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "stage", "type": "PipelineStage"}], "is_async": false, "return_type": "None", "description": "Set the current pipeline stage.", "signature": "_set_stage(self, stage: PipelineStage) -> None"}, {"name": "_add_stage_result", "line": 219, "parameters": [{"name": "self", "type": "self"}, {"name": "stage", "type": "str, result: Any"}, {"name": "result", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Add result from a pipeline stage.", "signature": "_add_stage_result(self, stage: str, result: Any, result: Any) -> None"}, {"name": "_get_pipeline_metadata", "line": 223, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get pipeline metadata.", "signature": "_get_pipeline_metadata(self) -> dict[str, Any]"}, {"name": "health_check", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the pipeline.\n\n        Returns:\n            True if the pipeline is healthy, False otherwise\n        ", "signature": "async health_check(self) -> bool"}, {"name": "get_status", "line": 245, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current pipeline status.", "signature": "get_status(self) -> dict[str, Any]"}], "properties": [], "description": "Base class implementing core methods for a Retrieval-Augmented Generation pipeline."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 19, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 19, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 18}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 18}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 18}, {"name": "from pydantic import BaseModel", "type": "import", "line": 19}, {"name": "from pydantic import Field", "type": "import", "line": 19}, {"name": "PipelineError", "type": "class", "line": 22}, {"name": "PipelineStage", "type": "class", "line": 28}, {"name": "PipelineConfig", "type": "class", "line": 40}, {"name": "PipelineResult", "type": "class", "line": 55}, {"name": "BaseRAGPipeline", "type": "class", "line": 79}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "PipelineError Class", "description": "Class PipelineError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "PipelineStage Class", "description": "Class PipelineStage definition and methods.", "line_start": 28, "line_end": 38}, {"name": "PipelineConfig Class", "description": "Class PipelineConfig definition and methods.", "line_start": 40, "line_end": 50}, {"name": "PipelineResult Class", "description": "Class PipelineResult definition and methods.", "line_start": 55, "line_end": 65}, {"name": "BaseRAGPipeline Class", "description": "Class BaseRAGPipeline definition and methods.", "line_start": 79, "line_end": 248}], "content_hash": "fbeec8d6fb6c62d0414e41fcd73802cc"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/indexing.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "indexing.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PipelineError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors occurring within the pipeline."}, {"name": "IndexingPipelineConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the indexing pipeline."}, {"name": "IndexingPipeline", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "IndexingPipelineConfig):"}], "is_async": false, "description": "Initialize indexing pipeline.", "signature": "__init__(self, config: IndexingPipelineConfig):)"}, {"name": "execute", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the pipeline.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Manages the process of indexing data through defined pipeline stages."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "PipelineError", "type": "class", "line": 15}, {"name": "IndexingPipelineConfig", "type": "class", "line": 21}, {"name": "IndexingPipeline", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "PipelineError Class", "description": "Class PipelineError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "IndexingPipelineConfig Class", "description": "Class IndexingPipelineConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "IndexingPipeline Class", "description": "Class IndexingPipeline definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "82031693fff16fad949846d31e4f194d"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/retrieval.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retrieval.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PipelineError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors occurring in the pipeline."}, {"name": "RetrievalPipelineConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the retrieval pipeline."}, {"name": "RetrievalPipeline", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RetrievalPipelineConfig):"}], "is_async": false, "description": "Initialize retrieval pipeline.", "signature": "__init__(self, config: RetrievalPipelineConfig):)"}, {"name": "execute", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the pipeline.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Class implementing the retrieval pipeline with methods to execute and manage retrieval operations."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "PipelineError", "type": "class", "line": 15}, {"name": "RetrievalPipelineConfig", "type": "class", "line": 21}, {"name": "RetrievalPipeline", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "PipelineError Class", "description": "Class PipelineError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "RetrievalPipelineConfig Class", "description": "Class RetrievalPipelineConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "RetrievalPipeline Class", "description": "Class RetrievalPipeline definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "9c5a663350c8c4fda9c9769ba06c3ec7"}'
- path: libs/opsvi-rag/opsvi_rag/pipelines/ingestion.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "ingestion.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PipelineError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Custom exception class for errors occurring in the ingestion pipeline."}, {"name": "IngestionPipelineConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration class that holds settings for the ingestion pipeline."}, {"name": "IngestionPipeline", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "IngestionPipelineConfig):"}], "is_async": false, "description": "Initialize ingestion pipeline.", "signature": "__init__(self, config: IngestionPipelineConfig):)"}, {"name": "execute", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the pipeline.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Class that manages the execution of the ingestion pipeline, including initialization and running processes."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "PipelineError", "type": "class", "line": 15}, {"name": "IngestionPipelineConfig", "type": "class", "line": 21}, {"name": "IngestionPipeline", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "PipelineError Class", "description": "Class PipelineError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "IngestionPipelineConfig Class", "description": "Class IngestionPipelineConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "IngestionPipeline Class", "description": "Class IngestionPipeline definition and methods.", "line_start": 27, "line_end": 39}], "content_hash": "8f3eea111a45d730b8903e51ac2f3e5e"}'
- path: libs/opsvi-rag/opsvi_rag/storage/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "92f5da0e6f9c1ae364d76c2a2170e695"}'
- path: libs/opsvi-rag/opsvi_rag/storage/file.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "file.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StorageError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for storage-related errors."}, {"name": "FileStorageConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for file storage operations."}, {"name": "FileStorage", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FileStorageConfig):"}], "is_async": false, "description": "Initialize file storage.", "signature": "__init__(self, config: FileStorageConfig):)"}, {"name": "store", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data with the given key.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data with the given key.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Delete data with the given key.", "signature": "delete(self, key: str) -> bool"}], "properties": [], "description": "Handles file storage operations including saving, loading, deleting, and listing files."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "StorageError", "type": "class", "line": 15}, {"name": "FileStorageConfig", "type": "class", "line": 21}, {"name": "FileStorage", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "StorageError Class", "description": "Class StorageError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "FileStorageConfig Class", "description": "Class FileStorageConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "FileStorage Class", "description": "Class FileStorage definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "e161acff4be2acb7d9699eb0ce7fd206"}'
- path: libs/opsvi-rag/opsvi_rag/storage/base.py
  line_count: 335
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "VectorStoreError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to vector store operations."}, {"name": "VectorStoreConfig", "line": 27, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for initializing a vector store."}, {"name": "Metadata", "line": 41, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents metadata associated with documents or vectors."}, {"name": "Document", "line": 61, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents a document with content and associated metadata."}, {"name": "SearchResult", "line": 77, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the result of a search query in the vector store."}, {"name": "BaseVectorStore", "line": 88, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "VectorStoreConfig"}], "is_async": false, "description": "Initialize the vector store.", "signature": "__init__(self, config: VectorStoreConfig, **kwargs)"}, {"name": "initialize", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Initialize the vector store and create necessary collections.\n\n        Raises:\n            VectorStoreError: If initialization fails\n        ", "signature": "async initialize(self) -> None"}, {"name": "add_documents", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document], **kwargs"}], "is_async": true, "return_type": "list[str]", "description": "\n        Add documents to the vector store.\n\n        Args:\n            documents: List of documents to add\n            **kwargs: Additional store-specific arguments\n\n        Returns:\n            List of document IDs that were added\n\n        Raises:\n            VectorStoreError: If adding documents fails\n        ", "signature": "async add_documents(self, documents: list[Document], **kwargs, **kwargs) -> list[str]"}, {"name": "add_embeddings", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "embeddings", "type": "list[list[float]]"}, {"name": "documents", "type": "list[Document]"}], "is_async": true, "return_type": "list[str]", "description": "\n        Add documents with pre-computed embeddings.\n\n        Args:\n            embeddings: List of embedding vectors\n            documents: List of documents (embeddings will be ignored)\n            **kwargs: Additional store-specific arguments\n\n        Returns:\n            List of document IDs that were added\n\n        Raises:\n            VectorStoreError: If adding embeddings fails\n        ", "signature": "async add_embeddings(self, embeddings: list[list[float]], documents: list[Document], **kwargs) -> list[str]"}, {"name": "search", "line": 150, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "score_threshold", "type": "float | None", "default": "None"}, {"name": "filter_metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[SearchResult]", "description": "\n        Search for similar documents using vector similarity.\n\n        Args:\n            query_embedding: Query embedding vector\n            limit: Maximum number of results to return\n            score_threshold: Minimum similarity score threshold\n            filter_metadata: Metadata filters to apply\n            **kwargs: Additional search parameters\n\n        Returns:\n            List of search results ordered by similarity\n\n        Raises:\n            VectorStoreError: If search fails\n        ", "signature": "async search(self, query_embedding: list[float], limit: int = 10, score_threshold: float | None = None, filter_metadata: dict[str, Any] | None = None, **kwargs) -> list[SearchResult]"}, {"name": "get_document", "line": 177, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "Document | None", "description": "\n        Retrieve a document by ID.\n\n        Args:\n            document_id: Document ID to retrieve\n\n        Returns:\n            Document if found, None otherwise\n\n        Raises:\n            VectorStoreError: If retrieval fails\n        ", "signature": "async get_document(self, document_id: str) -> Document | None"}, {"name": "delete_document", "line": 193, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Delete a document by ID.\n\n        Args:\n            document_id: Document ID to delete\n\n        Returns:\n            True if document was deleted, False if not found\n\n        Raises:\n            VectorStoreError: If deletion fails\n        ", "signature": "async delete_document(self, document_id: str) -> bool"}, {"name": "update_document", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document: Document"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "bool", "description": "\n        Update an existing document.\n\n        Args:\n            document_id: Document ID to update\n            document: Updated document content\n\n        Returns:\n            True if document was updated, False if not found\n\n        Raises:\n            VectorStoreError: If update fails\n        ", "signature": "async update_document(self, document_id: str, document: Document, document: Document) -> bool"}, {"name": "list_documents", "line": 226, "parameters": [{"name": "self", "type": "self"}, {"name": "limit", "type": "int | None", "default": "None"}, {"name": "offset", "type": "int | None", "default": "None"}, {"name": "filter_metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[Document]", "description": "\n        List documents in the store.\n\n        Args:\n            limit: Maximum number of documents to return\n            offset: Number of documents to skip\n            filter_metadata: Metadata filters to apply\n\n        Returns:\n            List of documents\n\n        Raises:\n            VectorStoreError: If listing fails\n        ", "signature": "async list_documents(self, limit: int | None = None, offset: int | None = None, filter_metadata: dict[str, Any] | None = None) -> list[Document]"}, {"name": "count_documents", "line": 249, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "\n        Get the total number of documents in the store.\n\n        Returns:\n            Number of documents\n\n        Raises:\n            VectorStoreError: If count operation fails\n        ", "signature": "async count_documents(self) -> int"}, {"name": "clear", "line": 262, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Clear all documents from the store.\n\n        Raises:\n            VectorStoreError: If clear operation fails\n        ", "signature": "async clear(self) -> None"}, {"name": "health_check", "line": 272, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the vector store.\n\n        Returns:\n            True if the store is healthy, False otherwise\n        ", "signature": "async health_check(self) -> bool"}, {"name": "search_by_text", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "query_text", "type": "str"}, {"name": "embedding_provider", "type": "unknown"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "score_threshold", "type": "float | None", "default": "None"}, {"name": "filter_metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[SearchResult]", "description": "\n        Search for similar documents using text query.\n\n        Args:\n            query_text: Text query to search for\n            embedding_provider: Provider to generate query embedding\n            limit: Maximum number of results to return\n            score_threshold: Minimum similarity score threshold\n            filter_metadata: Metadata filters to apply\n            **kwargs: Additional search parameters\n\n        Returns:\n            List of search results ordered by similarity\n        ", "signature": "async search_by_text(self, query_text: str, embedding_provider, limit: int = 10, score_threshold: float | None = None, filter_metadata: dict[str, Any] | None = None, **kwargs) -> list[SearchResult]"}, {"name": "batch_add_documents", "line": 316, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document]"}, {"name": "batch_size", "type": "int", "default": "100"}], "is_async": true, "return_type": "list[str]", "description": "\n        Add documents in batches.\n\n        Args:\n            documents: List of documents to add\n            batch_size: Size of each batch\n            **kwargs: Additional arguments\n\n        Returns:\n            List of all document IDs that were added\n        ", "signature": "async batch_add_documents(self, documents: list[Document], batch_size: int = 100, **kwargs) -> list[str]"}], "properties": [], "description": "Abstract base class defining the interface and common functionality for vector stores."}], "imports": [{"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "uuid", "alias": null, "line": 15, "statement": "from uuid import uuid4"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 18, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 18, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from uuid import uuid4", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 17}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 17}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "from pydantic import BaseModel", "type": "import", "line": 18}, {"name": "from pydantic import Field", "type": "import", "line": 18}, {"name": "VectorStoreError", "type": "class", "line": 21}, {"name": "VectorStoreConfig", "type": "class", "line": 27}, {"name": "Metadata", "type": "class", "line": 41}, {"name": "Document", "type": "class", "line": 61}, {"name": "SearchResult", "type": "class", "line": 77}, {"name": "BaseVectorStore", "type": "class", "line": 88}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "VectorStoreError Class", "description": "Class VectorStoreError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "VectorStoreConfig Class", "description": "Class VectorStoreConfig definition and methods.", "line_start": 27, "line_end": 37}, {"name": "Metadata Class", "description": "Class Metadata definition and methods.", "line_start": 41, "line_end": 51}, {"name": "Document Class", "description": "Class Document definition and methods.", "line_start": 61, "line_end": 71}, {"name": "SearchResult Class", "description": "Class SearchResult definition and methods.", "line_start": 77, "line_end": 87}, {"name": "BaseVectorStore Class", "description": "Class BaseVectorStore definition and methods.", "line_start": 88, "line_end": 319}], "content_hash": "fdba4dd40acfe61ac2fbe6c0344d212d"}'
- path: libs/opsvi-rag/opsvi_rag/storage/memory.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "memory.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StorageError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to storage operations."}, {"name": "MemoryStorageConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for memory-based storage."}, {"name": "MemoryStorage", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MemoryStorageConfig):"}], "is_async": false, "description": "Initialize memory storage.", "signature": "__init__(self, config: MemoryStorageConfig):)"}, {"name": "store", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data with the given key.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data with the given key.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Delete data with the given key.", "signature": "delete(self, key: str) -> bool"}], "properties": [], "description": "Implements an in-memory storage system with basic CRUD operations."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "StorageError", "type": "class", "line": 15}, {"name": "MemoryStorageConfig", "type": "class", "line": 21}, {"name": "MemoryStorage", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "StorageError Class", "description": "Class StorageError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "MemoryStorageConfig Class", "description": "Class MemoryStorageConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "MemoryStorage Class", "description": "Class MemoryStorage definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "1115fd3076c44c0bc3df88efd6e197ab"}'
- path: libs/opsvi-rag/opsvi_rag/storage/qdrant.py
  line_count: 412
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "qdrant.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "QdrantConfig", "line": 29, "inherits_from": ["VectorStoreConfig):"], "methods": [], "properties": [], "description": "Configuration settings for connecting and interacting with a Qdrant vector database."}, {"name": "QdrantStore", "line": 52, "inherits_from": ["BaseVectorStore):"], "methods": [{"name": "__init__", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "QdrantConfig"}], "is_async": false, "description": "Initialize the Qdrant vector store.", "signature": "__init__(self, config: QdrantConfig, **kwargs)"}, {"name": "initialize", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the Qdrant vector store and create collection.", "signature": "async initialize(self) -> None"}, {"name": "_get_distance_metric", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "rest.Distance", "description": "Convert distance metric string to Qdrant Distance enum.", "signature": "_get_distance_metric(self) -> rest.Distance"}, {"name": "add_documents", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "documents", "type": "list[Document], **kwargs"}], "is_async": true, "return_type": "list[str]", "description": "Add documents to the Qdrant store.", "signature": "async add_documents(self, documents: list[Document], **kwargs, **kwargs) -> list[str]"}, {"name": "add_embeddings", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "embeddings", "type": "list[list[float]]"}, {"name": "documents", "type": "list[Document]"}], "is_async": true, "return_type": "list[str]", "description": "Add documents with pre-computed embeddings.", "signature": "async add_embeddings(self, embeddings: list[list[float]], documents: list[Document], **kwargs) -> list[str]"}, {"name": "search", "line": 170, "parameters": [{"name": "self", "type": "self"}, {"name": "query_embedding", "type": "list[float]"}, {"name": "limit", "type": "int", "default": "10"}, {"name": "score_threshold", "type": "float | None", "default": "None"}, {"name": "filter_metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[SearchResult]", "description": "Search for similar documents using vector similarity.", "signature": "async search(self, query_embedding: list[float], limit: int = 10, score_threshold: float | None = None, filter_metadata: dict[str, Any] | None = None, **kwargs) -> list[SearchResult]"}, {"name": "get_document", "line": 218, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "Document | None", "description": "Retrieve a document by ID.", "signature": "async get_document(self, document_id: str) -> Document | None"}, {"name": "delete_document", "line": 244, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a document by ID.", "signature": "async delete_document(self, document_id: str) -> bool"}, {"name": "update_document", "line": 261, "parameters": [{"name": "self", "type": "self"}, {"name": "document_id", "type": "str, document: Document"}, {"name": "document", "type": "Document"}], "is_async": true, "return_type": "bool", "description": "Update an existing document.", "signature": "async update_document(self, document_id: str, document: Document, document: Document) -> bool"}, {"name": "list_documents", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "limit", "type": "int | None", "default": "None"}, {"name": "offset", "type": "int | None", "default": "None"}, {"name": "filter_metadata", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[Document]", "description": "List documents in the store.", "signature": "async list_documents(self, limit: int | None = None, offset: int | None = None, filter_metadata: dict[str, Any] | None = None) -> list[Document]"}, {"name": "count_documents", "line": 324, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get the total number of documents in the store.", "signature": "async count_documents(self) -> int"}, {"name": "clear", "line": 337, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Clear all documents from the store.", "signature": "async clear(self) -> None"}, {"name": "health_check", "line": 354, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform a health check on the Qdrant store.", "signature": "async health_check(self) -> bool"}, {"name": "_ensure_initialized", "line": 367, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Ensure the store is initialized.", "signature": "async _ensure_initialized(self) -> None"}, {"name": "_document_to_payload", "line": 372, "parameters": [{"name": "self", "type": "self"}, {"name": "document", "type": "Document"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Convert document to Qdrant payload.", "signature": "_document_to_payload(self, document: Document) -> dict[str, Any]"}, {"name": "_payload_to_document", "line": 380, "parameters": [{"name": "self", "type": "self"}, {"name": "payload", "type": "dict[str, Any], point_id: str"}, {"name": "point_id", "type": "str"}], "is_async": false, "return_type": "Document", "description": "Convert Qdrant payload to document.", "signature": "_payload_to_document(self, payload: dict[str, Any], point_id: str, point_id: str) -> Document"}, {"name": "_build_search_filter", "line": 394, "parameters": [{"name": "self", "type": "self"}, {"name": "filter_metadata", "type": "dict[str, Any]"}], "is_async": false, "return_type": "rest.Filter", "description": "Build Qdrant search filter from metadata.", "signature": "_build_search_filter(self, filter_metadata: dict[str, Any]) -> rest.Filter"}], "properties": [], "description": "Manages storage, retrieval, and manipulation of vector data within a Qdrant database."}], "imports": [{"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "qdrant_client", "alias": null, "line": 16, "statement": "from qdrant_client import AsyncQdrantClient"}, {"module": "qdrant_client.http", "alias": "rest", "line": 17, "statement": "from qdrant_client.http import models as rest"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import BaseVectorStore"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import Document"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import Metadata"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import SearchResult"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import VectorStoreConfig"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import VectorStoreError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 14}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from qdrant_client import AsyncQdrantClient", "type": "import", "line": 16}, {"name": "from qdrant_client.http import models as rest", "type": "import", "line": 17}, {"name": "from base import BaseVectorStore", "type": "import", "line": 19}, {"name": "from base import Document", "type": "import", "line": 19}, {"name": "from base import Metadata", "type": "import", "line": 19}, {"name": "from base import SearchResult", "type": "import", "line": 19}, {"name": "from base import VectorStoreConfig", "type": "import", "line": 19}, {"name": "from base import VectorStoreError", "type": "import", "line": 19}, {"name": "QdrantConfig", "type": "class", "line": 29}, {"name": "QdrantStore", "type": "class", "line": 52}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "QdrantConfig Class", "description": "Class QdrantConfig definition and methods.", "line_start": 29, "line_end": 39}, {"name": "QdrantStore Class", "description": "Class QdrantStore definition and methods.", "line_start": 52, "line_end": 397}], "content_hash": "289c9455db5addc5af9dada00e9ca322"}'
- path: libs/opsvi-rag/opsvi_rag/storage/database.py
  line_count: 47
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "database.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StorageError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for storage-related errors."}, {"name": "DatabaseStorageConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for database storage."}, {"name": "DatabaseStorage", "line": 27, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "DatabaseStorageConfig):"}], "is_async": false, "description": "Initialize database storage.", "signature": "__init__(self, config: DatabaseStorageConfig):)"}, {"name": "store", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data with the given key.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data with the given key.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "delete", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Delete data with the given key.", "signature": "delete(self, key: str) -> bool"}], "properties": [], "description": "Handles database storage operations including initialization, saving, loading, and closing connections."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "StorageError", "type": "class", "line": 15}, {"name": "DatabaseStorageConfig", "type": "class", "line": 21}, {"name": "DatabaseStorage", "type": "class", "line": 27}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "StorageError Class", "description": "Class StorageError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "DatabaseStorageConfig Class", "description": "Class DatabaseStorageConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "DatabaseStorage Class", "description": "Class DatabaseStorage definition and methods.", "line_start": 27, "line_end": 49}], "content_hash": "5f88be2b65b25675cb30fa87eb4b0763"}'
- path: libs/opsvi-rag/opsvi_rag/cache/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "51b7bf68db1a819dab6ce3b78b82e549"}'
- path: libs/opsvi-rag/opsvi_rag/cache/memory.py
  line_count: 53
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "memory.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CacheError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for cache-related errors."}, {"name": "MemoryCacheConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for the memory cache system."}, {"name": "MemoryCache", "line": 28, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MemoryCacheConfig):"}], "is_async": false, "description": "Initialize memory cache.", "signature": "__init__(self, config: MemoryCacheConfig):)"}, {"name": "get", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Get value from cache.", "signature": "get(self, key: str) -> Any | None"}, {"name": "set", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Set value in cache.", "signature": "set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Delete value from cache.", "signature": "delete(self, key: str) -> bool"}, {"name": "clear", "line": 52, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Clear all cache entries.", "signature": "clear(self) -> bool"}], "properties": [], "description": "In-memory cache implementation with methods to store, retrieve, and manage cached data."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "CacheError", "type": "class", "line": 15}, {"name": "MemoryCacheConfig", "type": "class", "line": 21}, {"name": "MemoryCache", "type": "class", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "CacheError Class", "description": "Class CacheError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "MemoryCacheConfig Class", "description": "Class MemoryCacheConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "MemoryCache Class", "description": "Class MemoryCache definition and methods.", "line_start": 28, "line_end": 55}], "content_hash": "9620831a92411e3ed411353805767c5d"}'
- path: libs/opsvi-rag/opsvi_rag/cache/redis.py
  line_count: 53
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "redis.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CacheError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for cache-related errors."}, {"name": "RedisCacheConfig", "line": 21, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration holder for Redis cache settings."}, {"name": "RedisCache", "line": 28, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RedisCacheConfig):"}], "is_async": false, "description": "Initialize redis cache.", "signature": "__init__(self, config: RedisCacheConfig):)"}, {"name": "get", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Get value from cache.", "signature": "get(self, key: str) -> Any | None"}, {"name": "set", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Set value in cache.", "signature": "set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Delete value from cache.", "signature": "delete(self, key: str) -> bool"}, {"name": "clear", "line": 52, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Clear all cache entries.", "signature": "clear(self) -> bool"}], "properties": [], "description": "Manages Redis cache operations including connect, get, set, delete, and clear."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "CacheError", "type": "class", "line": 15}, {"name": "RedisCacheConfig", "type": "class", "line": 21}, {"name": "RedisCache", "type": "class", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "CacheError Class", "description": "Class CacheError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "RedisCacheConfig Class", "description": "Class RedisCacheConfig definition and methods.", "line_start": 21, "line_end": 31}, {"name": "RedisCache Class", "description": "Class RedisCache definition and methods.", "line_start": 28, "line_end": 55}], "content_hash": "d315268917fb6c0146c06c676078335b"}'
- path: libs/opsvi-rag/opsvi_rag/processors/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "8b495fb165d5e0a622d0b6db220078ae"}'
- path: libs/opsvi-rag/opsvi_rag/processors/docx.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "docx.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "DocxProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration for docx processor."}, {"name": "DocxProcessor", "line": 34, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "DocxProcessorConfig):"}], "is_async": false, "description": "Initialize docx processor.", "signature": "__init__(self, config: DocxProcessorConfig):)"}, {"name": "can_process", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process docx file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "docx document processor."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "DocxProcessorConfig", "type": "class", "line": 25}, {"name": "DocxProcessor", "type": "class", "line": 34}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "DocxProcessorConfig Class", "description": "Class DocxProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "DocxProcessor Class", "description": "Class DocxProcessor definition and methods.", "line_start": 34, "line_end": 50}], "content_hash": "b198462ef0342eb60d2b1c0b13a05d9d"}'
- path: libs/opsvi-rag/opsvi_rag/processors/email.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "email.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "EmailProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the EmailProcessor."}, {"name": "EmailProcessor", "line": 34, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EmailProcessorConfig):"}], "is_async": false, "description": "Initialize email processor.", "signature": "__init__(self, config: EmailProcessorConfig):)"}, {"name": "can_process", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process email file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Handles processing of emails including parsing, validation, and sending."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "EmailProcessorConfig", "type": "class", "line": 25}, {"name": "EmailProcessor", "type": "class", "line": 34}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "EmailProcessorConfig Class", "description": "Class EmailProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "EmailProcessor Class", "description": "Class EmailProcessor definition and methods.", "line_start": 34, "line_end": 50}], "content_hash": "789f23a5eaa7c383391affef44554056"}'
- path: libs/opsvi-rag/opsvi_rag/processors/web.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "web.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WebProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the WebProcessor."}, {"name": "WebProcessor", "line": 34, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "WebProcessorConfig):"}], "is_async": false, "description": "Initialize web processor.", "signature": "__init__(self, config: WebProcessorConfig):)"}, {"name": "can_process", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process web file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Handles web processing tasks including initialization, execution, and cleanup."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "WebProcessorConfig", "type": "class", "line": 25}, {"name": "WebProcessor", "type": "class", "line": 34}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "WebProcessorConfig Class", "description": "Class WebProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "WebProcessor Class", "description": "Class WebProcessor definition and methods.", "line_start": 34, "line_end": 50}], "content_hash": "f2c67210fe807a9ae5df380866c5f4e5"}'
- path: libs/opsvi-rag/opsvi_rag/processors/base.py
  line_count: 256
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ProcessorError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors that occur during processing."}, {"name": "ProcessorType", "line": 27, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "TEXT", "line": 28, "type": ""}, {"name": "MARKDOWN", "line": 29, "type": ""}, {"name": "HTML", "line": 30, "type": ""}, {"name": "PDF", "line": 31, "type": ""}, {"name": "DOCX", "line": 32, "type": ""}, {"name": "CSV", "line": 33, "type": ""}, {"name": "JSON", "line": 34, "type": ""}, {"name": "WEB", "line": 35, "type": ""}, {"name": "EMAIL", "line": 36, "type": ""}], "description": "Defines different types of processors available."}, {"name": "ProcessingStatus", "line": 41, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "PENDING", "line": 42, "type": ""}, {"name": "PROCESSING", "line": 43, "type": ""}, {"name": "COMPLETED", "line": 44, "type": ""}, {"name": "FAILED", "line": 45, "type": ""}, {"name": "SKIPPED", "line": 46, "type": ""}], "description": "Indicates the current status of a processing task."}, {"name": "ProcessingMetadata", "line": 52, "inherits_from": [], "methods": [], "properties": [], "description": "Holds metadata information related to processing."}, {"name": "ProcessingResult", "line": 69, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the result produced by a processor."}, {"name": "ProcessorConfig", "line": 84, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Stores configuration settings for a processor."}, {"name": "BaseProcessor", "line": 109, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 112, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ProcessorConfig"}], "is_async": false, "description": "\n        Initialize the processor.\n\n        Args:\n            config: Processor configuration\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, config: ProcessorConfig, **kwargs)"}, {"name": "can_process", "line": 125, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "bool", "description": "\n        Check if this processor can handle the given file.\n\n        Args:\n            file_path: Path to the file to check\n\n        Returns:\n            True if the processor can handle this file type\n        ", "signature": "async can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "ProcessingResult", "description": "\n        Process a document file.\n\n        Args:\n            file_path: Path to the file to process\n\n        Returns:\n            Processing result with extracted content and metadata\n\n        Raises:\n            ProcessorError: If processing fails\n        ", "signature": "async process(self, file_path: Path) -> ProcessingResult"}, {"name": "process_with_timeout", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "ProcessingResult", "description": "\n        Process a document with timeout.\n\n        Args:\n            file_path: Path to the file to process\n\n        Returns:\n            Processing result\n\n        Raises:\n            ProcessorError: If processing fails or times out\n        ", "signature": "async process_with_timeout(self, file_path: Path) -> ProcessingResult"}, {"name": "_validate_file_size", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "None", "description": "\n        Validate file size against configuration limits.\n\n        Args:\n            file_path: Path to the file to validate\n\n        Raises:\n            ProcessorError: If file is too large\n        ", "signature": "_validate_file_size(self, file_path: Path) -> None"}, {"name": "_extract_basic_metadata", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingMetadata", "description": "\n        Extract basic file metadata.\n\n        Args:\n            file_path: Path to the file\n\n        Returns:\n            Basic metadata\n        ", "signature": "_extract_basic_metadata(self, file_path: Path) -> ProcessingMetadata"}, {"name": "_detect_mime_type", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "str | None", "description": "\n        Detect MIME type of the file.\n\n        Args:\n            file_path: Path to the file\n\n        Returns:\n            MIME type or None if detection fails\n        ", "signature": "_detect_mime_type(self, file_path: Path) -> str | None"}, {"name": "_clean_text", "line": 225, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Clean and normalize text content.\n\n        Args:\n            text: Raw text to clean\n\n        Returns:\n            Cleaned text\n        ", "signature": "_clean_text(self, text: str) -> str"}, {"name": "health_check", "line": 246, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the processor.\n\n        Returns:\n            True if the processor is healthy\n        ", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Abstract base class providing common processing functionality."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 16, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 20, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 20, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from dataclasses import field", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from pathlib import Path", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 19}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 19}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 19}, {"name": "from pydantic import BaseModel", "type": "import", "line": 20}, {"name": "from pydantic import Field", "type": "import", "line": 20}, {"name": "ProcessorError", "type": "class", "line": 23}, {"name": "ProcessorType", "type": "class", "line": 27}, {"name": "ProcessingStatus", "type": "class", "line": 41}, {"name": "ProcessingMetadata", "type": "class", "line": 52}, {"name": "ProcessingResult", "type": "class", "line": 69}, {"name": "ProcessorConfig", "type": "class", "line": 84}, {"name": "BaseProcessor", "type": "class", "line": 109}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "ProcessorError Class", "description": "Class ProcessorError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "ProcessorType Class", "description": "Class ProcessorType definition and methods.", "line_start": 27, "line_end": 37}, {"name": "ProcessingStatus Class", "description": "Class ProcessingStatus definition and methods.", "line_start": 41, "line_end": 51}, {"name": "ProcessingMetadata Class", "description": "Class ProcessingMetadata definition and methods.", "line_start": 52, "line_end": 62}, {"name": "ProcessingResult Class", "description": "Class ProcessingResult definition and methods.", "line_start": 69, "line_end": 79}, {"name": "ProcessorConfig Class", "description": "Class ProcessorConfig definition and methods.", "line_start": 84, "line_end": 94}, {"name": "BaseProcessor Class", "description": "Class BaseProcessor definition and methods.", "line_start": 109, "line_end": 249}], "content_hash": "a1f1b648203229e5dffec47fd3411b75"}'
- path: libs/opsvi-rag/opsvi_rag/processors/pdf.py
  line_count: 309
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "pdf.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PDFProcessorConfig", "line": 48, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the PDFProcessor."}, {"name": "PDFProcessor", "line": 67, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "PDFProcessorConfig):"}], "is_async": false, "description": "Initialize PDF processor.", "signature": "__init__(self, config: PDFProcessorConfig):)"}, {"name": "can_process", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "_extract_metadata_pypdf2", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "dict[str, any]", "description": "Extract metadata using PyPDF2.", "signature": "_extract_metadata_pypdf2(self, file_path: Path) -> dict[str, any]"}, {"name": "_extract_text_pypdf2", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "str", "description": "Extract text using PyPDF2.", "signature": "_extract_text_pypdf2(self, file_path: Path) -> str"}, {"name": "_extract_text_pdfplumber", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "str", "description": "Extract text using pdfplumber.", "signature": "_extract_text_pdfplumber(self, file_path: Path) -> str"}, {"name": "_extract_images_for_ocr", "line": 193, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "list[str]", "description": "Extract images from PDF for OCR processing.", "signature": "_extract_images_for_ocr(self, file_path: Path) -> list[str]"}, {"name": "process", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process PDF file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Handles processing and manipulation of PDF documents."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorError"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorError", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "PDFProcessorConfig", "type": "class", "line": 48}, {"name": "PDFProcessor", "type": "class", "line": 67}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "PDFProcessorConfig Class", "description": "Class PDFProcessorConfig definition and methods.", "line_start": 48, "line_end": 58}, {"name": "PDFProcessor Class", "description": "Class PDFProcessor definition and methods.", "line_start": 67, "line_end": 246}], "content_hash": "fd4c0217af9bb484f6661a1d7747fa18"}'
- path: libs/opsvi-rag/opsvi_rag/processors/html.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "html.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "HTMLProcessorConfig", "line": 34, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the HTMLProcessor."}, {"name": "HTMLProcessor", "line": 76, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "HTMLProcessorConfig):"}], "is_async": false, "description": "Initialize HTML processor.", "signature": "__init__(self, config: HTMLProcessorConfig):)"}, {"name": "can_process", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "_extract_metadata", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "soup", "type": "BeautifulSoup"}], "is_async": false, "return_type": "dict[str, any]", "description": "Extract metadata from HTML.", "signature": "_extract_metadata(self, soup: BeautifulSoup) -> dict[str, any]"}, {"name": "_extract_links", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "soup", "type": "BeautifulSoup"}], "is_async": false, "return_type": "list[dict[str, str]]", "description": "Extract and normalize links.", "signature": "_extract_links(self, soup: BeautifulSoup) -> list[dict[str, str]]"}, {"name": "_extract_images", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "soup", "type": "BeautifulSoup"}], "is_async": false, "return_type": "list[dict[str, str]]", "description": "Extract image information.", "signature": "_extract_images(self, soup: BeautifulSoup) -> list[dict[str, str]]"}, {"name": "_clean_html", "line": 184, "parameters": [{"name": "self", "type": "self"}, {"name": "soup", "type": "BeautifulSoup"}], "is_async": false, "return_type": "BeautifulSoup", "description": "Clean HTML by removing unwanted elements.", "signature": "_clean_html(self, soup: BeautifulSoup) -> BeautifulSoup"}, {"name": "_extract_text_blocks", "line": 205, "parameters": [{"name": "self", "type": "self"}, {"name": "soup", "type": "BeautifulSoup"}], "is_async": false, "return_type": "list[str]", "description": "Extract text content in logical blocks.", "signature": "_extract_text_blocks(self, soup: BeautifulSoup) -> list[str]"}, {"name": "process", "line": 223, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process HTML file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Processes HTML content using specified configuration and provides various HTML manipulation methods."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "urllib.parse", "alias": null, "line": 11, "statement": "from urllib.parse import urljoin"}, {"module": "opsvi_foundation", "alias": null, "line": 13, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessorError"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from urllib.parse import urljoin", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 14}, {"name": "from base import BaseProcessor", "type": "import", "line": 16}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 16}, {"name": "from base import ProcessingResult", "type": "import", "line": 16}, {"name": "from base import ProcessingStatus", "type": "import", "line": 16}, {"name": "from base import ProcessorConfig", "type": "import", "line": 16}, {"name": "from base import ProcessorError", "type": "import", "line": 16}, {"name": "from base import ProcessorType", "type": "import", "line": 16}, {"name": "HTMLProcessorConfig", "type": "class", "line": 34}, {"name": "HTMLProcessor", "type": "class", "line": 76}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "HTMLProcessorConfig Class", "description": "Class HTMLProcessorConfig definition and methods.", "line_start": 34, "line_end": 44}, {"name": "HTMLProcessor Class", "description": "Class HTMLProcessor definition and methods.", "line_start": 76, "line_end": 226}], "content_hash": "14a06af5e32be5009c5ebda7922647d2"}'
- path: libs/opsvi-rag/opsvi_rag/processors/csv.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "csv.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CSVProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for CSV processing."}, {"name": "CSVProcessor", "line": 34, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CSVProcessorConfig):"}], "is_async": false, "description": "Initialize csv processor.", "signature": "__init__(self, config: CSVProcessorConfig):)"}, {"name": "can_process", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process csv file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Processes CSV files using specified configuration."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "CSVProcessorConfig", "type": "class", "line": 25}, {"name": "CSVProcessor", "type": "class", "line": 34}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "CSVProcessorConfig Class", "description": "Class CSVProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "CSVProcessor Class", "description": "Class CSVProcessor definition and methods.", "line_start": 34, "line_end": 50}], "content_hash": "d063085a7585bf7464d743c6495e22e9"}'
- path: libs/opsvi-rag/opsvi_rag/processors/json.py
  line_count: 89
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "json.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "JSONProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the JSONProcessor."}, {"name": "JSONProcessor", "line": 34, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "JSONProcessorConfig):"}], "is_async": false, "description": "Initialize json processor.", "signature": "__init__(self, config: JSONProcessorConfig):)"}, {"name": "can_process", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "bool", "description": "Check if file can be processed.", "signature": "can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": false, "return_type": "ProcessingResult", "description": "Process json file.", "signature": "process(self, file_path: Path) -> ProcessingResult"}], "properties": [], "description": "Processes JSON data according to specified configuration."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "JSONProcessorConfig", "type": "class", "line": 25}, {"name": "JSONProcessor", "type": "class", "line": 34}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "JSONProcessorConfig Class", "description": "Class JSONProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "JSONProcessor Class", "description": "Class JSONProcessor definition and methods.", "line_start": 34, "line_end": 50}], "content_hash": "6ff29976bbb4d2224a4ce5bbb4ec91d2"}'
- path: libs/opsvi-rag/opsvi_rag/processors/markdown.py
  line_count: 399
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "markdown.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MarkdownProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for the MarkdownProcessor."}, {"name": "MarkdownProcessor", "line": 46, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MarkdownProcessorConfig"}], "is_async": false, "description": "\n        Initialize markdown processor.\n\n        Args:\n            config: Markdown processor configuration\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, config: MarkdownProcessorConfig, **kwargs)"}, {"name": "can_process", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "bool", "description": "\n        Check if this processor can handle the given file.\n\n        Args:\n            file_path: Path to the file to check\n\n        Returns:\n            True if the processor can handle this file type\n        ", "signature": "async can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "ProcessingResult", "description": "\n        Process a markdown file.\n\n        Args:\n            file_path: Path to the file to process\n\n        Returns:\n            Processing result with extracted content and metadata\n\n        Raises:\n            ProcessorError: If processing fails\n        ", "signature": "async process(self, file_path: Path) -> ProcessingResult"}, {"name": "_read_file_content", "line": 163, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "str", "description": "\n        Read markdown file content.\n\n        Args:\n            file_path: Path to the file\n\n        Returns:\n            File content as string\n\n        Raises:\n            ProcessorError: If reading fails\n        ", "signature": "async _read_file_content(self, file_path: Path) -> str"}, {"name": "_extract_frontmatter", "line": 182, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "dict", "description": "\n        Extract YAML frontmatter from markdown content.\n\n        Args:\n            content: Markdown content\n\n        Returns:\n            Frontmatter as dictionary\n        ", "signature": "_extract_frontmatter(self, content: str) -> dict"}, {"name": "_remove_frontmatter", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Remove YAML frontmatter from markdown content.\n\n        Args:\n            content: Markdown content with frontmatter\n\n        Returns:\n            Content without frontmatter\n        ", "signature": "_remove_frontmatter(self, content: str) -> str"}, {"name": "_extract_markdown_elements", "line": 220, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": true, "return_type": "dict", "description": "\n        Extract various elements from markdown content.\n\n        Args:\n            content: Markdown content\n\n        Returns:\n            Dictionary of extracted elements\n        ", "signature": "async _extract_markdown_elements(self, content: str) -> dict"}, {"name": "_extract_markdown_metadata", "line": 289, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "metadata", "type": "ProcessingMetadata"}, {"name": "frontmatter", "type": "dict"}], "is_async": true, "return_type": "ProcessingMetadata", "description": "\n        Extract metadata from markdown content.\n\n        Args:\n            content: Markdown content\n            metadata: Base metadata\n            frontmatter: Extracted frontmatter\n\n        Returns:\n            Enhanced metadata\n        ", "signature": "async _extract_markdown_metadata(self, content: str, metadata: ProcessingMetadata, frontmatter: dict) -> ProcessingMetadata"}, {"name": "_remove_code_blocks", "line": 348, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Remove code blocks from content for word counting.\n\n        Args:\n            content: Markdown content\n\n        Returns:\n            Content without code blocks\n        ", "signature": "_remove_code_blocks(self, content: str) -> str"}, {"name": "_clean_markdown_content", "line": 366, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Clean and normalize markdown content.\n\n        Args:\n            content: Raw markdown content\n\n        Returns:\n            Cleaned markdown content\n        ", "signature": "_clean_markdown_content(self, content: str) -> str"}], "properties": [], "description": "Processes Markdown text into formatted output with various utilities."}], "imports": [{"module": "re", "alias": null, "line": 9, "statement": "import re"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 11, "statement": "from pathlib import Path"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 15, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "re", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "from pathlib import Path", "type": "import", "line": 11}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from base import BaseProcessor", "type": "import", "line": 15}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 15}, {"name": "from base import ProcessingResult", "type": "import", "line": 15}, {"name": "from base import ProcessingStatus", "type": "import", "line": 15}, {"name": "from base import ProcessorConfig", "type": "import", "line": 15}, {"name": "from base import ProcessorType", "type": "import", "line": 15}, {"name": "MarkdownProcessorConfig", "type": "class", "line": 25}, {"name": "MarkdownProcessor", "type": "class", "line": 46}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "MarkdownProcessorConfig Class", "description": "Class MarkdownProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "MarkdownProcessor Class", "description": "Class MarkdownProcessor definition and methods.", "line_start": 46, "line_end": 369}], "content_hash": "e254a5eb72e33cba1a8dea98ba8e56be"}'
- path: libs/opsvi-rag/opsvi_rag/processors/text.py
  line_count: 318
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "text.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TextProcessorConfig", "line": 25, "inherits_from": ["ProcessorConfig):"], "methods": [], "properties": [], "description": "Configuration settings for text processing operations."}, {"name": "TextProcessor", "line": 40, "inherits_from": ["BaseProcessor):"], "methods": [{"name": "__init__", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TextProcessorConfig"}], "is_async": false, "description": "\n        Initialize text processor.\n\n        Args:\n            config: Text processor configuration\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, config: TextProcessorConfig, **kwargs)"}, {"name": "can_process", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "bool", "description": "\n        Check if this processor can handle the given file.\n\n        Args:\n            file_path: Path to the file to check\n\n        Returns:\n            True if the processor can handle this file type\n        ", "signature": "async can_process(self, file_path: Path) -> bool"}, {"name": "process", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "ProcessingResult", "description": "\n        Process a text file.\n\n        Args:\n            file_path: Path to the file to process\n\n        Returns:\n            Processing result with extracted content and metadata\n\n        Raises:\n            ProcessorError: If processing fails\n        ", "signature": "async process(self, file_path: Path) -> ProcessingResult"}, {"name": "_read_file_content", "line": 143, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "str", "description": "\n        Read file content with encoding detection.\n\n        Args:\n            file_path: Path to the file\n\n        Returns:\n            File content as string\n\n        Raises:\n            ProcessorError: If reading fails\n        ", "signature": "async _read_file_content(self, file_path: Path) -> str"}, {"name": "_read_with_encoding_detection", "line": 175, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "Path"}], "is_async": true, "return_type": "str", "description": "\n        Read file with automatic encoding detection.\n\n        Args:\n            file_path: Path to the file\n\n        Returns:\n            File content as string\n\n        Raises:\n            ProcessorError: If reading fails\n        ", "signature": "async _read_with_encoding_detection(self, file_path: Path) -> str"}, {"name": "_extract_text_metadata", "line": 217, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}, {"name": "metadata", "type": "ProcessingMetadata"}], "is_async": true, "return_type": "ProcessingMetadata", "description": "\n        Extract metadata from text content.\n\n        Args:\n            content: Text content\n            metadata: Base metadata\n\n        Returns:\n            Enhanced metadata\n        ", "signature": "async _extract_text_metadata(self, content: str, metadata: ProcessingMetadata) -> ProcessingMetadata"}, {"name": "_detect_language", "line": 246, "parameters": [{"name": "self", "type": "self"}, {"name": "text", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "\n        Basic language detection.\n\n        Args:\n            text: Text to analyze\n\n        Returns:\n            Language code or None\n        ", "signature": "_detect_language(self, text: str) -> str | None"}, {"name": "_clean_text_content", "line": 282, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Clean and normalize text content.\n\n        Args:\n            content: Raw text content\n\n        Returns:\n            Cleaned text content\n        ", "signature": "_clean_text_content(self, content: str) -> str"}, {"name": "_extract_paragraphs", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "content", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "\n        Extract paragraphs from text content.\n\n        Args:\n            content: Text content\n\n        Returns:\n            List of paragraphs\n        ", "signature": "_extract_paragraphs(self, content: str) -> list[str]"}], "properties": [], "description": "Performs various text processing tasks using the provided configuration."}], "imports": [{"module": "time", "alias": null, "line": 9, "statement": "import time"}, {"module": "pathlib", "alias": null, "line": 10, "statement": "from pathlib import Path"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import BaseProcessor"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessingMetadata"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessingResult"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessingStatus"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessorConfig"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessorError"}, {"module": "base", "alias": null, "line": 14, "statement": "from base import ProcessorType"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "from base import BaseProcessor", "type": "import", "line": 14}, {"name": "from base import ProcessingMetadata", "type": "import", "line": 14}, {"name": "from base import ProcessingResult", "type": "import", "line": 14}, {"name": "from base import ProcessingStatus", "type": "import", "line": 14}, {"name": "from base import ProcessorConfig", "type": "import", "line": 14}, {"name": "from base import ProcessorError", "type": "import", "line": 14}, {"name": "from base import ProcessorType", "type": "import", "line": 14}, {"name": "TextProcessorConfig", "type": "class", "line": 25}, {"name": "TextProcessor", "type": "class", "line": 40}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "TextProcessorConfig Class", "description": "Class TextProcessorConfig definition and methods.", "line_start": 25, "line_end": 35}, {"name": "TextProcessor Class", "description": "Class TextProcessor definition and methods.", "line_start": 40, "line_end": 306}], "content_hash": "a752db56d8aee8267c0ae15afc0c1a53"}'
- path: libs/opsvi-rag/tests/test_providers.py
  line_count: 307
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_providers.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MockEmbeddingProvider", "line": 24, "inherits_from": ["BaseEmbeddingProvider):"], "methods": [{"name": "__init__", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str", "default": "mock-model"}], "is_async": false, "signature": "__init__(self, model: str = mock-model, **kwargs)"}, {"name": "embed_texts", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "texts", "type": "list[str], **kwargs"}], "is_async": true, "return_type": "list[list[float]]", "signature": "async embed_texts(self, texts: list[str], **kwargs, **kwargs) -> list[list[float]]"}, {"name": "get_dimensions", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "signature": "async get_dimensions(self) -> int"}, {"name": "health_check", "line": 38, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "A mock embedding provider used for testing embedding generation."}, {"name": "TestBaseEmbeddingProvider", "line": 42, "inherits_from": [], "methods": [{"name": "provider", "line": 46, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "provider(self)"}, {"name": "test_embed_text_single", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": true, "description": "Test embedding a single text.", "signature": "async test_embed_text_single(self, provider)"}, {"name": "test_embed_batch_structured", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": true, "description": "Test structured batch embedding.", "signature": "async test_embed_batch_structured(self, provider)"}, {"name": "test_context_manager_protocol", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "provider", "type": "unknown"}], "is_async": false, "description": "Test async context manager protocol.", "signature": "test_context_manager_protocol(self, provider)"}], "properties": [], "description": "Unit tests for the base embedding provider functionality."}, {"name": "TestOpenAIEmbeddingProvider", "line": 79, "inherits_from": [], "methods": [{"name": "config", "line": 83, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "config(self)"}, {"name": "mock_openai_provider", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "mock_openai_provider(self)"}, {"name": "test_initialization_valid_model", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": false, "description": "Test initialization with valid model.", "signature": "test_initialization_valid_model(self, config)"}, {"name": "test_initialization_invalid_model", "line": 107, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test initialization with invalid model.", "signature": "test_initialization_invalid_model(self)"}, {"name": "test_embed_texts_success", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_openai_provider", "type": "unknown"}], "is_async": true, "description": "Test successful text embedding.", "signature": "async test_embed_texts_success(self, config, mock_openai_provider)"}, {"name": "test_embed_texts_batch_size_exceeded", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": true, "description": "Test batch size validation.", "signature": "async test_embed_texts_batch_size_exceeded(self, config)"}, {"name": "test_get_dimensions", "line": 148, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": true, "description": "Test getting embedding dimensions.", "signature": "async test_get_dimensions(self, config)"}, {"name": "test_get_model_info", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}], "is_async": false, "description": "Test getting model information.", "signature": "test_get_model_info(self, config)"}], "properties": [], "description": "Unit tests for the OpenAI embedding provider integration and behavior."}, {"name": "TestSentenceTransformerEmbeddingProvider", "line": 168, "inherits_from": [], "methods": [{"name": "config", "line": 172, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "config(self)"}, {"name": "mock_sentence_transformer", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "mock_sentence_transformer(self)"}, {"name": "test_initialization", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": false, "description": "Test provider initialization.", "signature": "test_initialization(self, config, mock_sentence_transformer)"}, {"name": "test_initialization_no_library", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test initialization when sentence-transformers not available.", "signature": "test_initialization_no_library(self)"}, {"name": "test_embed_texts_success", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": true, "description": "Test successful text embedding.", "signature": "async test_embed_texts_success(self, config, mock_sentence_transformer)"}, {"name": "test_list_available_models", "line": 229, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "unknown"}, {"name": "mock_sentence_transformer", "type": "unknown"}], "is_async": false, "description": "Test listing available models.", "signature": "test_list_available_models(self, config, mock_sentence_transformer)"}], "properties": [], "description": "Unit tests for the Sentence Transformer embedding provider implementation."}, {"name": "TestEmbeddingProviderFactory", "line": 242, "inherits_from": [], "methods": [{"name": "test_create_openai_provider", "line": 246, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test creating OpenAI provider through factory.", "signature": "async test_create_openai_provider(self)"}, {"name": "test_create_sentence_transformer_provider", "line": 257, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test creating Sentence Transformers provider through factory.", "signature": "async test_create_sentence_transformer_provider(self)"}, {"name": "test_get_default_config", "line": 273, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting default configuration.", "signature": "test_get_default_config(self)"}, {"name": "test_get_provider_capabilities", "line": 287, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting provider capabilities.", "signature": "test_get_provider_capabilities(self)"}, {"name": "test_create_hybrid_config", "line": 301, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating hybrid configuration with fallback.", "signature": "test_create_hybrid_config(self)"}], "properties": [], "description": "Unit tests for the embedding provider factory responsible for creating provider instances."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import MagicMock"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import patch"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 10, "statement": "from opsvi_core.exceptions import InitializationError"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 10, "statement": "from opsvi_core.exceptions import ValidationError"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import BaseEmbeddingProvider"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import EmbeddingProviderFactory"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import OpenAIEmbeddingProvider"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import ProviderType"}, {"module": "opsvi_rag.providers", "alias": null, "line": 12, "statement": "from opsvi_rag.providers import SentenceTransformerEmbeddingProvider"}, {"module": "opsvi_rag.providers.base", "alias": null, "line": 19, "statement": "from opsvi_rag.providers.base import EmbeddingRequest"}, {"module": "opsvi_rag.providers.base", "alias": null, "line": 19, "statement": "from opsvi_rag.providers.base import EmbeddingResponse"}, {"module": "opsvi_rag.providers.openai_provider", "alias": null, "line": 20, "statement": "from opsvi_rag.providers.openai_provider import OpenAIEmbeddingConfig"}, {"module": "opsvi_rag.providers.sentence_transformer_provider", "alias": null, "line": 21, "statement": "from opsvi_rag.providers.sentence_transformer_provider import SentenceTransformerConfig"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 7}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 7}, {"name": "from unittest.mock import patch", "type": "import", "line": 7}, {"name": "from opsvi_core.exceptions import InitializationError", "type": "import", "line": 10}, {"name": "from opsvi_core.exceptions import ValidationError", "type": "import", "line": 10}, {"name": "from opsvi_rag.providers import BaseEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import EmbeddingProviderFactory", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import OpenAIEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import ProviderType", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers import SentenceTransformerEmbeddingProvider", "type": "import", "line": 12}, {"name": "from opsvi_rag.providers.base import EmbeddingRequest", "type": "import", "line": 19}, {"name": "from opsvi_rag.providers.base import EmbeddingResponse", "type": "import", "line": 19}, {"name": "from opsvi_rag.providers.openai_provider import OpenAIEmbeddingConfig", "type": "import", "line": 20}, {"name": "from opsvi_rag.providers.sentence_transformer_provider import SentenceTransformerConfig", "type": "import", "line": 21}, {"name": "MockEmbeddingProvider", "type": "class", "line": 24}, {"name": "TestBaseEmbeddingProvider", "type": "class", "line": 42}, {"name": "TestOpenAIEmbeddingProvider", "type": "class", "line": 79}, {"name": "TestSentenceTransformerEmbeddingProvider", "type": "class", "line": 168}, {"name": "TestEmbeddingProviderFactory", "type": "class", "line": 242}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 21}, {"name": "MockEmbeddingProvider Class", "description": "Class MockEmbeddingProvider definition and methods.", "line_start": 24, "line_end": 41}, {"name": "TestBaseEmbeddingProvider Class", "description": "Class TestBaseEmbeddingProvider definition and methods.", "line_start": 42, "line_end": 76}, {"name": "TestOpenAIEmbeddingProvider Class", "description": "Class TestOpenAIEmbeddingProvider definition and methods.", "line_start": 79, "line_end": 157}, {"name": "TestSentenceTransformerEmbeddingProvider Class", "description": "Class TestSentenceTransformerEmbeddingProvider definition and methods.", "line_start": 168, "line_end": 232}, {"name": "TestEmbeddingProviderFactory Class", "description": "Class TestEmbeddingProviderFactory definition and methods.", "line_start": 242, "line_end": 304}], "content_hash": "f7e0d99d19115fae4bd9ad091932d271"}'
- path: libs/opsvi-llm/opsvi_llm/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "5a79ef10112e06ee79e7d96ab4039cd6"}'
- path: libs/opsvi-llm/opsvi_llm/observability/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "cab428571cd6d7947bb2df60baa3be5b"}'
- path: libs/opsvi-llm/opsvi_llm/monitoring/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "18cd71d3fcc546e0a73155a94b4e325e"}'
- path: libs/opsvi-llm/opsvi_llm/core/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f5f63c9490793f5f99fbddd14b89449c"}'
- path: libs/opsvi-llm/opsvi_llm/core/exceptions.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LlmError", "line": 16, "inherits_from": ["OPSVIError):"], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Base class for all LLM-related errors."}, {"name": "LlmConfigurationError", "line": 23, "inherits_from": ["LlmError):"], "methods": [], "properties": [], "description": "Error raised for configuration issues in LLM setup."}, {"name": "LlmConnectionError", "line": 27, "inherits_from": ["LlmError):"], "methods": [], "properties": [], "description": "Error raised when there is a connection problem with the LLM service."}, {"name": "LlmValidationError", "line": 31, "inherits_from": ["LlmError):"], "methods": [], "properties": [], "description": "Error raised when validation of input or output fails in LLM processing."}, {"name": "LlmTimeoutError", "line": 35, "inherits_from": ["LlmError):"], "methods": [], "properties": [], "description": "Error raised when an LLM operation exceeds the allowed time limit."}, {"name": "LlmResourceError", "line": 39, "inherits_from": ["LlmError):"], "methods": [], "properties": [], "description": "Error raised when there are insufficient resources for LLM operations."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_foundation.core.exceptions import OPSVIError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from opsvi_foundation.core.exceptions import OPSVIError", "type": "import", "line": 13}, {"name": "LlmError", "type": "class", "line": 16}, {"name": "LlmConfigurationError", "type": "class", "line": 23}, {"name": "LlmConnectionError", "type": "class", "line": 27}, {"name": "LlmValidationError", "type": "class", "line": 31}, {"name": "LlmTimeoutError", "type": "class", "line": 35}, {"name": "LlmResourceError", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "LlmError Class", "description": "Class LlmError definition and methods.", "line_start": 16, "line_end": 22}, {"name": "LlmConfigurationError Class", "description": "Class LlmConfigurationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "LlmConnectionError Class", "description": "Class LlmConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "LlmValidationError Class", "description": "Class LlmValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "LlmTimeoutError Class", "description": "Class LlmTimeoutError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "LlmResourceError Class", "description": "Class LlmResourceError definition and methods.", "line_start": 39, "line_end": 49}], "content_hash": "ffe3273bb33a6786308a675b238542d9"}'
- path: libs/opsvi-llm/opsvi_llm/core/config.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LlmConfig", "line": 18, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents the configuration settings for the language model."}, {"name": "LlmSettings", "line": 29, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Holds the customizable settings for the language model."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation.config.settings", "alias": null, "line": 15, "statement": "from opsvi_foundation.config.settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from opsvi_foundation.config.settings import BaseSettings", "type": "import", "line": 15}, {"name": "LlmConfig", "type": "class", "line": 18}, {"name": "LlmSettings", "type": "class", "line": 29}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "LlmConfig Class", "description": "Class LlmConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "LlmSettings Class", "description": "Class LlmSettings definition and methods.", "line_start": 29, "line_end": 39}], "content_hash": "37809e6c6002aa3eef6be3d8daca7e06"}'
- path: libs/opsvi-llm/opsvi_llm/core/base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LlmBase", "line": 17, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Base class for language model implementations providing core methods."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import BaseComponent"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from opsvi_foundation.patterns.base import BaseComponent", "type": "import", "line": 14}, {"name": "LlmBase", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "LlmBase Class", "description": "Class LlmBase definition and methods.", "line_start": 17, "line_end": 38}], "content_hash": "0c38629ccaf4987fe43153dc6b798970"}'
- path: libs/opsvi-llm/opsvi_llm/embeddings/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "1d25d8a49b157f4b611640dce5ad9bde"}'
- path: libs/opsvi-llm/opsvi_llm/functions/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "bfa2bdeca98e660a2aa7be680ba6e188"}'
- path: libs/opsvi-llm/opsvi_llm/safety/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "d0ab7f8cadfe77eb5bd3e15f8ae62bc6"}'
- path: libs/opsvi-llm/opsvi_llm/utils/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "49de99d4bb8ab011236ed7aa12225323"}'
- path: libs/opsvi-llm/opsvi_llm/tests/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ef38ffb041c5ea70bc5c2a103013e022"}'
- path: libs/opsvi-llm/opsvi_llm/fine_tuning/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "6fbcfa8b67c7987e47ffe78e71ec051f"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "8fe3c4f1732b0911e281ed4032e82a23"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/requests.py
  line_count: 135
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "requests.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CompletionRequest", "line": 16, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_prompt", "line": 40, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_prompt(cls, v)"}], "properties": [], "description": "Handles requests for text completion tasks."}, {"name": "ChatRequest", "line": 46, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_messages", "line": 81, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_messages(cls, v)"}, {"name": "validate_function_call", "line": 87, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}, {"name": "values", "type": "unknown"}], "is_async": false, "signature": "validate_function_call(cls, v, values)"}], "properties": [], "description": "Manages chat-based interaction requests."}, {"name": "EmbeddingRequest", "line": 93, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_input", "line": 101, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_input(cls, v)"}], "properties": [], "description": "Processes requests for generating text embeddings."}, {"name": "ModerationRequest", "line": 117, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_input", "line": 124, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_input(cls, v)"}], "properties": [], "description": "Handles content moderation requests."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import validator"}, {"module": "responses", "alias": null, "line": 13, "statement": "from responses import ChatMessage"}, {"module": "responses", "alias": null, "line": 13, "statement": "from responses import FunctionDefinition"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 11}, {"name": "from pydantic import Field", "type": "import", "line": 11}, {"name": "from pydantic import validator", "type": "import", "line": 11}, {"name": "from responses import ChatMessage", "type": "import", "line": 13}, {"name": "from responses import FunctionDefinition", "type": "import", "line": 13}, {"name": "CompletionRequest", "type": "class", "line": 16}, {"name": "ChatRequest", "type": "class", "line": 46}, {"name": "EmbeddingRequest", "type": "class", "line": 93}, {"name": "ModerationRequest", "type": "class", "line": 117}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "CompletionRequest Class", "description": "Class CompletionRequest definition and methods.", "line_start": 16, "line_end": 43}, {"name": "ChatRequest Class", "description": "Class ChatRequest definition and methods.", "line_start": 46, "line_end": 90}, {"name": "EmbeddingRequest Class", "description": "Class EmbeddingRequest definition and methods.", "line_start": 93, "line_end": 104}, {"name": "ModerationRequest Class", "description": "Class ModerationRequest definition and methods.", "line_start": 117, "line_end": 127}], "content_hash": "4215abcebc77148aed48dcac11243d85"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
  line_count: 241
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "responses.py", "description": "Python module with 0 functions and 13 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MessageRole", "line": 18, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "SYSTEM", "line": 19, "type": ""}, {"name": "USER", "line": 20, "type": ""}, {"name": "ASSISTANT", "line": 21, "type": ""}, {"name": "FUNCTION", "line": 22, "type": ""}], "description": "Represents the role of a message participant in a conversation."}, {"name": "ChatMessage", "line": 27, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_content", "line": 37, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_content(cls, v)"}], "properties": [], "description": "Encapsulates a single message within a chat, including its content and metadata."}, {"name": "FunctionParameter", "line": 43, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines a parameter for a function, including its name and type."}, {"name": "FunctionDefinition", "line": 58, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_name", "line": 68, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_name(cls, v)"}], "properties": [], "description": "Describes a function''s signature and related metadata."}, {"name": "FunctionCall", "line": 79, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_arguments", "line": 86, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_arguments(cls, v)"}, {"name": "get_arguments", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Parse arguments as dictionary.\n\n        Returns:\n            Parsed arguments dictionary\n        ", "signature": "get_arguments(self) -> dict[str, Any]"}], "properties": [], "description": "Represents an invocation of a function with specific arguments."}, {"name": "UsageInfo", "line": 105, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Tracks usage statistics such as token counts for API calls."}, {"name": "LLMResponse", "line": 113, "inherits_from": ["BaseModel):"], "methods": [{"name": "has_function_calls", "line": 134, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if response contains function calls.\n\n        Returns:\n            True if response has function calls\n        ", "signature": "has_function_calls(self) -> bool"}, {"name": "get_content", "line": 142, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get the main content from the response.\n\n        Returns:\n            Generated text or content from first message\n        ", "signature": "get_content(self) -> str"}, {"name": "get_total_tokens", "line": 156, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get total tokens used.\n\n        Returns:\n            Total token count, 0 if not available\n        ", "signature": "get_total_tokens(self) -> int"}], "properties": [], "description": "Models the response from a language model, including generated content and metadata."}, {"name": "StreamChunk", "line": 165, "inherits_from": ["BaseModel):"], "methods": [{"name": "is_final", "line": 177, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if this is the final chunk.\n\n        Returns:\n            True if this is the final chunk\n        ", "signature": "is_final(self) -> bool"}], "properties": [], "description": "Represents a partial chunk of streamed data from the language model."}, {"name": "EmbeddingVector", "line": 186, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds a vector representation of text for embedding purposes."}, {"name": "EmbeddingResponse", "line": 194, "inherits_from": ["BaseModel):"], "methods": [{"name": "get_embeddings", "line": 204, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[list[float]]", "description": "Get embedding vectors as list.\n\n        Returns:\n            List of embedding vectors\n        ", "signature": "get_embeddings(self) -> list[list[float]]"}], "properties": [], "description": "Contains the response data for an embedding request, including vectors."}, {"name": "ModerationCategory", "line": 213, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines categories used for content moderation classification."}, {"name": "ModerationResult", "line": 220, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the outcome of a moderation check on input content."}, {"name": "ModerationResponse", "line": 230, "inherits_from": ["BaseModel):"], "methods": [{"name": "is_flagged", "line": 237, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if any content was flagged.\n\n        Returns:\n            True if any content was flagged\n        ", "signature": "is_flagged(self) -> bool"}], "properties": [], "description": "Encapsulates the full response from a content moderation request."}], "imports": [{"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import validator"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from pydantic import validator", "type": "import", "line": 15}, {"name": "MessageRole", "type": "class", "line": 18}, {"name": "ChatMessage", "type": "class", "line": 27}, {"name": "FunctionParameter", "type": "class", "line": 43}, {"name": "FunctionDefinition", "type": "class", "line": 58}, {"name": "FunctionCall", "type": "class", "line": 79}, {"name": "UsageInfo", "type": "class", "line": 105}, {"name": "LLMResponse", "type": "class", "line": 113}, {"name": "StreamChunk", "type": "class", "line": 165}, {"name": "EmbeddingVector", "type": "class", "line": 186}, {"name": "EmbeddingResponse", "type": "class", "line": 194}, {"name": "ModerationCategory", "type": "class", "line": 213}, {"name": "ModerationResult", "type": "class", "line": 220}, {"name": "ModerationResponse", "type": "class", "line": 230}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "MessageRole Class", "description": "Class MessageRole definition and methods.", "line_start": 18, "line_end": 28}, {"name": "ChatMessage Class", "description": "Class ChatMessage definition and methods.", "line_start": 27, "line_end": 40}, {"name": "FunctionParameter Class", "description": "Class FunctionParameter definition and methods.", "line_start": 43, "line_end": 53}, {"name": "FunctionDefinition Class", "description": "Class FunctionDefinition definition and methods.", "line_start": 58, "line_end": 71}, {"name": "FunctionCall Class", "description": "Class FunctionCall definition and methods.", "line_start": 79, "line_end": 99}, {"name": "UsageInfo Class", "description": "Class UsageInfo definition and methods.", "line_start": 105, "line_end": 115}, {"name": "LLMResponse Class", "description": "Class LLMResponse definition and methods.", "line_start": 113, "line_end": 159}, {"name": "StreamChunk Class", "description": "Class StreamChunk definition and methods.", "line_start": 165, "line_end": 180}, {"name": "EmbeddingVector Class", "description": "Class EmbeddingVector definition and methods.", "line_start": 186, "line_end": 196}, {"name": "EmbeddingResponse Class", "description": "Class EmbeddingResponse definition and methods.", "line_start": 194, "line_end": 207}, {"name": "ModerationCategory Class", "description": "Class ModerationCategory definition and methods.", "line_start": 213, "line_end": 223}, {"name": "ModerationResult Class", "description": "Class ModerationResult definition and methods.", "line_start": 220, "line_end": 230}, {"name": "ModerationResponse Class", "description": "Class ModerationResponse definition and methods.", "line_start": 230, "line_end": 240}], "content_hash": "df27a252e97be259a4053400ab8e779e"}'
- path: libs/opsvi-llm/opsvi_llm/security/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "771f142c45e3abcecd64da79197bea2f"}'
- path: libs/opsvi-llm/opsvi_llm/resilience/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "ba3ecb056bd2dc5f230c1230b2afafd1"}'
- path: libs/opsvi-llm/opsvi_llm/optimization/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "0c9f9d3f7389bc3c91798ec60289c8cd"}'
- path: libs/opsvi-llm/opsvi_llm/streaming/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "d4f51774516a98e6fa3ffbf7a69b17a8"}'
- path: libs/opsvi-llm/opsvi_llm/prompts/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "553e652e72c4f8a507434152d1e17790"}'
- path: libs/opsvi-llm/opsvi_llm/agents/__init__.py
  line_count: 19
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 9}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "7dd047909ce4ab575cc397abdb4d240e"}'
- path: libs/opsvi-llm/opsvi_llm/providers/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "90ff46c15cb2fc9b6634b76b8e2b65ee"}'
- path: libs/opsvi-llm/opsvi_llm/providers/base.py
  line_count: 114
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "BaseLLMProvider", "line": 21, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "generate_chat", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response with generated content\n\n        Raises:\n            LLMError: If generation fails\n        ", "signature": "async generate_chat(self, request: ChatRequest) -> LLMResponse"}, {"name": "generate_stream", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[str]", "description": "Generate streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Content chunks as they arrive\n\n        Raises:\n            LLMError: If streaming fails\n        ", "signature": "async generate_stream(self, request: ChatRequest) -> AsyncIterator[str]"}, {"name": "generate_with_functions", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion with function calling.\n\n        Args:\n            request: Chat completion request with functions\n\n        Returns:\n            LLM response with function calls if any\n\n        Raises:\n            LLMError: If generation fails\n        ", "signature": "async generate_with_functions(self, request: ChatRequest) -> LLMResponse"}, {"name": "get_supported_models", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of supported models.\n\n        Returns:\n            List of supported model names\n        ", "signature": "get_supported_models(self) -> list[str]"}, {"name": "supports_function_calling", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports function calling.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports function calling\n        ", "signature": "supports_function_calling(self, model: str | None = None = None) -> bool"}, {"name": "supports_streaming", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports streaming.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports streaming\n        ", "signature": "supports_streaming(self, model: str | None = None = None) -> bool"}, {"name": "health_check", "line": 107, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Perform health check.\n\n        Returns:\n            Health status information\n\n        Raises:\n            ComponentError: If health check fails\n        ", "signature": "async health_check(self) -> dict[str, Any]"}], "properties": [], "description": "Abstract base class defining the interface and common functionality for language model providers."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import AsyncIterator"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "schemas.requests", "alias": null, "line": 17, "statement": "from schemas.requests import ChatRequest"}, {"module": "schemas.responses", "alias": null, "line": 18, "statement": "from schemas.responses import LLMResponse"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from collections.abc import AsyncIterator", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 15}, {"name": "from schemas.requests import ChatRequest", "type": "import", "line": 17}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 18}, {"name": "BaseLLMProvider", "type": "class", "line": 21}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "BaseLLMProvider Class", "description": "Class BaseLLMProvider definition and methods.", "line_start": 21, "line_end": 110}], "content_hash": "8b70ab702656552b5924545c3a38f3fe"}'
- path: libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
  line_count: 482
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "openai_provider.py", "description": "Python module with 1 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "validate_model_constraints", "line": 54, "parameters": [{"name": "model", "type": "str"}], "is_async": false, "return_type": "None", "description": "Checks if the specified model meets predefined constraints and raises errors if not.", "signature": "validate_model_constraints(model: str) -> None"}], "classes": [{"name": "OpenAIConfig", "line": 70, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for OpenAI API integration."}, {"name": "OpenAIProvider", "line": 89, "inherits_from": ["BaseLLMProvider):"], "methods": [{"name": "__init__", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OpenAIConfig):"}], "is_async": false, "signature": "__init__(self, config: OpenAIConfig):)"}, {"name": "_initialize", "line": 160, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the provider.", "signature": "async _initialize(self) -> None"}, {"name": "generate_chat", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response with generated content\n\n        Raises:\n            LLMError: If generation fails\n            LLMValidationError: If request validation fails\n        ", "signature": "async generate_chat(self, request: ChatRequest) -> LLMResponse"}, {"name": "generate_stream", "line": 202, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[str]", "description": "Generate streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Content chunks as they arrive\n\n        Raises:\n            LLMError: If streaming fails\n        ", "signature": "async generate_stream(self, request: ChatRequest) -> AsyncIterator[str]"}, {"name": "generate_with_functions", "line": 230, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Generate chat completion with function calling.\n\n        Args:\n            request: Chat completion request with functions\n\n        Returns:\n            LLM response with function calls if any\n\n        Raises:\n            LLMError: If generation fails\n            LLMValidationError: If functions are not supported\n        ", "signature": "async generate_with_functions(self, request: ChatRequest) -> LLMResponse"}, {"name": "_create_chat_completion", "line": 256, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "LLMResponse", "description": "Create chat completion using OpenAI API.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            LLM response\n        ", "signature": "async _create_chat_completion(self, request: ChatRequest) -> LLMResponse"}, {"name": "_create_chat_stream", "line": 283, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": true, "return_type": "AsyncIterator[ChatCompletionChunk]", "description": "Create streaming chat completion.\n\n        Args:\n            request: Chat completion request\n\n        Yields:\n            Chat completion chunks\n        ", "signature": "async _create_chat_stream(self, request: ChatRequest) -> AsyncIterator[ChatCompletionChunk]"}, {"name": "_build_api_request", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Build OpenAI API request from chat request.\n\n        Args:\n            request: Chat completion request\n\n        Returns:\n            OpenAI API request parameters\n        ", "signature": "_build_api_request(self, request: ChatRequest) -> dict[str, Any]"}, {"name": "_convert_response", "line": 342, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "ChatCompletion"}], "is_async": false, "return_type": "LLMResponse", "description": "Convert OpenAI response to LLM response.\n\n        Args:\n            response: OpenAI chat completion response\n\n        Returns:\n            LLM response\n        ", "signature": "_convert_response(self, response: ChatCompletion) -> LLMResponse"}, {"name": "_validate_request", "line": 394, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "ChatRequest"}], "is_async": false, "return_type": "None", "description": "Validate chat request.\n\n        Args:\n            request: Chat completion request\n\n        Raises:\n            LLMValidationError: If request is invalid\n        ", "signature": "_validate_request(self, request: ChatRequest) -> None"}, {"name": "get_supported_models", "line": 422, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get list of supported models.\n\n        Returns:\n            List of supported model names\n        ", "signature": "get_supported_models(self) -> list[str]"}, {"name": "supports_function_calling", "line": 430, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports function calling.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports function calling\n        ", "signature": "supports_function_calling(self, model: str | None = None = None) -> bool"}, {"name": "supports_streaming", "line": 443, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if model supports streaming.\n\n        Args:\n            model: Model name, uses default if None\n\n        Returns:\n            True if model supports streaming (all OpenAI models do)\n        ", "signature": "supports_streaming(self, model: str | None = None = None) -> bool"}, {"name": "health_check", "line": 455, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Perform health check.\n\n        Returns:\n            Health status information\n\n        Raises:\n            ComponentError: If health check fails\n        ", "signature": "async health_check(self) -> dict[str, Any]"}], "properties": [], "description": "Manages interactions with the OpenAI API, including request handling and response processing."}], "imports": [{"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import AsyncIterator"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "openai", "alias": null, "line": 15, "statement": "from openai import AsyncOpenAI"}, {"module": "openai.types.chat", "alias": null, "line": 16, "statement": "from openai.types.chat import ChatCompletion"}, {"module": "openai.types.chat", "alias": null, "line": 16, "statement": "from openai.types.chat import ChatCompletionChunk"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import CircuitBreaker"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import CircuitBreakerConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import RetryConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import retry"}, {"module": "pydantic", "alias": null, "line": 25, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 25, "statement": "from pydantic import Field"}, {"module": "core.exceptions", "alias": null, "line": 27, "statement": "from core.exceptions import LLMError"}, {"module": "core.exceptions", "alias": null, "line": 27, "statement": "from core.exceptions import LLMValidationError"}, {"module": "schemas.requests", "alias": null, "line": 28, "statement": "from schemas.requests import ChatRequest"}, {"module": "schemas.responses", "alias": null, "line": 29, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 29, "statement": "from schemas.responses import FunctionCall"}, {"module": "schemas.responses", "alias": null, "line": 29, "statement": "from schemas.responses import LLMResponse"}, {"module": "base", "alias": null, "line": 30, "statement": "from base import BaseLLMProvider"}], "constants": [{"name": "APPROVED_MODELS", "line": 33, "value": "{\"o4-mini\", \"o3\", \"gpt-4.1-mini\", \"gpt-4.1\", \"gpt-4.1-nano\"}", "type": ""}, {"name": "FORBIDDEN_MODELS", "line": 35, "value": "{", "type": ""}]}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from collections.abc import AsyncIterator", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from openai import AsyncOpenAI", "type": "import", "line": 15}, {"name": "from openai.types.chat import ChatCompletion", "type": "import", "line": 16}, {"name": "from openai.types.chat import ChatCompletionChunk", "type": "import", "line": 16}, {"name": "from opsvi_foundation import CircuitBreaker", "type": "import", "line": 17}, {"name": "from opsvi_foundation import CircuitBreakerConfig", "type": "import", "line": 17}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 17}, {"name": "from opsvi_foundation import RetryConfig", "type": "import", "line": 17}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "from opsvi_foundation import retry", "type": "import", "line": 17}, {"name": "from pydantic import BaseModel", "type": "import", "line": 25}, {"name": "from pydantic import Field", "type": "import", "line": 25}, {"name": "from core.exceptions import LLMError", "type": "import", "line": 27}, {"name": "from core.exceptions import LLMValidationError", "type": "import", "line": 27}, {"name": "from schemas.requests import ChatRequest", "type": "import", "line": 28}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 29}, {"name": "from schemas.responses import FunctionCall", "type": "import", "line": 29}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 29}, {"name": "from base import BaseLLMProvider", "type": "import", "line": 30}, {"name": "APPROVED_MODELS", "type": "constant", "line": 33}, {"name": "FORBIDDEN_MODELS", "type": "constant", "line": 35}, {"name": "validate_model_constraints", "type": "function", "line": 54}, {"name": "OpenAIConfig", "type": "class", "line": 70}, {"name": "OpenAIProvider", "type": "class", "line": 89}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 30}, {"name": "validate_model_constraints Function", "description": "Function validate_model_constraints implementation.", "line_start": 54, "line_end": 69}, {"name": "OpenAIConfig Class", "description": "Class OpenAIConfig definition and methods.", "line_start": 70, "line_end": 80}, {"name": "OpenAIProvider Class", "description": "Class OpenAIProvider definition and methods.", "line_start": 89, "line_end": 458}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 33, "line_end": 35}], "content_hash": "bcab118d6f501d98ac5477d14a6519bb"}'
- path: libs/opsvi-llm/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "08edff2d89ff34f4badc935392c037de"}'
- path: libs/opsvi-llm/tests/test_schemas.py
  line_count: 224
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_schemas.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestMessageRole", "line": 19, "inherits_from": [], "methods": [{"name": "test_message_roles", "line": 22, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test all message roles are defined.", "signature": "test_message_roles(self)"}], "properties": [], "description": "Tests for validating message role assignments and behavior."}, {"name": "TestChatMessage", "line": 30, "inherits_from": [], "methods": [{"name": "test_valid_chat_message", "line": 33, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid chat message.", "signature": "test_valid_chat_message(self)"}, {"name": "test_chat_message_with_name", "line": 41, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with name.", "signature": "test_chat_message_with_name(self)"}, {"name": "test_chat_message_with_function_call", "line": 48, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with function call.", "signature": "test_chat_message_with_function_call(self)"}, {"name": "test_invalid_empty_content", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty content is rejected for non-function messages.", "signature": "test_invalid_empty_content(self)"}, {"name": "test_function_message_empty_content", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that function messages can have empty content.", "signature": "test_function_message_empty_content(self)"}], "properties": [], "description": "Tests for chat message creation, manipulation, and validation."}, {"name": "TestFunctionCall", "line": 74, "inherits_from": [], "methods": [{"name": "test_valid_function_call", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid function call.", "signature": "test_valid_function_call(self)"}, {"name": "test_invalid_arguments_type", "line": 85, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that arguments must be a string.", "signature": "test_invalid_arguments_type(self)"}], "properties": [], "description": "Tests for function call serialization and deserialization."}, {"name": "TestLLMResponse", "line": 93, "inherits_from": [], "methods": [{"name": "test_valid_llm_response", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid LLM response.", "signature": "test_valid_llm_response(self)"}, {"name": "test_llm_response_with_messages", "line": 105, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with messages.", "signature": "test_llm_response_with_messages(self)"}, {"name": "test_llm_response_with_function_calls", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with function calls.", "signature": "test_llm_response_with_function_calls(self)"}, {"name": "test_llm_response_with_metadata", "line": 125, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with metadata.", "signature": "test_llm_response_with_metadata(self)"}, {"name": "test_invalid_empty_generated_text", "line": 131, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty generated_text is rejected.", "signature": "test_invalid_empty_generated_text(self)"}, {"name": "test_invalid_generated_text_type", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that generated_text must be a string.", "signature": "test_invalid_generated_text_type(self)"}, {"name": "test_llm_response_methods", "line": 141, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response utility methods.", "signature": "test_llm_response_methods(self)"}, {"name": "test_llm_response_to_dict", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test converting LLM response to dictionary.", "signature": "test_llm_response_to_dict(self)"}], "properties": [], "description": "Tests for handling and processing responses from language models."}, {"name": "TestGenerationConfig", "line": 161, "inherits_from": [], "methods": [{"name": "test_valid_generation_config", "line": 164, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid generation config.", "signature": "test_valid_generation_config(self)"}, {"name": "test_generation_config_with_values", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config with custom values.", "signature": "test_generation_config_with_values(self)"}, {"name": "test_generation_config_validation", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config validation.", "signature": "test_generation_config_validation(self)"}, {"name": "test_stop_sequences_validation", "line": 214, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test stop sequences validation.", "signature": "test_stop_sequences_validation(self)"}], "properties": [], "description": "Tests for configuration settings related to text generation."}], "imports": [{"module": "pytest", "alias": null, "line": 7, "statement": "import pytest"}, {"module": "pydantic", "alias": null, "line": 8, "statement": "from pydantic import ValidationError"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import ChatMessage"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import FunctionCall"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import GenerationConfig"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import LLMResponse"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import MessageRole"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 7}, {"name": "from pydantic import ValidationError", "type": "import", "line": 8}, {"name": "from opsvi_llm.schemas.responses import ChatMessage", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import FunctionCall", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import GenerationConfig", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import LLMResponse", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import MessageRole", "type": "import", "line": 10}, {"name": "TestMessageRole", "type": "class", "line": 19}, {"name": "TestChatMessage", "type": "class", "line": 30}, {"name": "TestFunctionCall", "type": "class", "line": 74}, {"name": "TestLLMResponse", "type": "class", "line": 93}, {"name": "TestGenerationConfig", "type": "class", "line": 161}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 10}, {"name": "TestMessageRole Class", "description": "Class TestMessageRole definition and methods.", "line_start": 19, "line_end": 25}, {"name": "TestChatMessage Class", "description": "Class TestChatMessage definition and methods.", "line_start": 30, "line_end": 66}, {"name": "TestFunctionCall Class", "description": "Class TestFunctionCall definition and methods.", "line_start": 74, "line_end": 88}, {"name": "TestLLMResponse Class", "description": "Class TestLLMResponse definition and methods.", "line_start": 93, "line_end": 156}, {"name": "TestGenerationConfig Class", "description": "Class TestGenerationConfig definition and methods.", "line_start": 161, "line_end": 217}], "content_hash": "b41644fb5db6fecc02c3e2e1bec952d4"}'
- path: libs/opsvi-core/opsvi_core/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "5edea0119fe5efc4eb38d98be645bf4e"}'
- path: libs/opsvi-core/opsvi_core/observability/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "71ba4f1a0b29123e86606da5c8717f7f"}'
- path: libs/opsvi-core/opsvi_core/monitoring/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "8a01e0952840f69de044acb378bab4c2"}'
- path: libs/opsvi-core/opsvi_core/monitoring/base.py
  line_count: 377
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MonitoringError", "line": 24, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for monitoring-related errors."}, {"name": "HealthStatus", "line": 30, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "HEALTHY", "line": 31, "type": ""}, {"name": "DEGRADED", "line": 32, "type": ""}, {"name": "UNHEALTHY", "line": 33, "type": ""}, {"name": "UNKNOWN", "line": 34, "type": ""}], "description": "Represents the health status of a system component."}, {"name": "MetricType", "line": 39, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "COUNTER", "line": 40, "type": ""}, {"name": "GAUGE", "line": 41, "type": ""}, {"name": "HISTOGRAM", "line": 42, "type": ""}, {"name": "SUMMARY", "line": 43, "type": ""}], "description": "Defines types of metrics collected during monitoring."}, {"name": "HealthCheck", "line": 49, "inherits_from": [], "methods": [], "properties": [], "description": "Performs health checks on system components."}, {"name": "HealthResult", "line": 61, "inherits_from": [], "methods": [], "properties": [], "description": "Stores the results of a health check operation."}, {"name": "Metric", "line": 73, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a single monitoring metric with its value and type."}, {"name": "HealthChecker", "line": 84, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 87, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "register_check", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "health_check", "type": "HealthCheck"}], "is_async": false, "return_type": "None", "description": "Register a health check.", "signature": "register_check(self, health_check: HealthCheck) -> None"}, {"name": "unregister_check", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a health check.", "signature": "unregister_check(self, name: str) -> None"}, {"name": "run_check", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "HealthResult", "description": "Run a specific health check.", "signature": "async run_check(self, name: str) -> HealthResult"}, {"name": "_run_check_async", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "check", "type": "HealthCheck"}], "is_async": true, "return_type": "bool", "description": "Run health check function asynchronously.", "signature": "async _run_check_async(self, check: HealthCheck) -> bool"}, {"name": "run_all_checks", "line": 164, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, HealthResult]", "description": "Run all registered health checks.", "signature": "async run_all_checks(self) -> dict[str, HealthResult]"}, {"name": "get_overall_health", "line": 183, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "HealthStatus", "description": "Get overall system health status.", "signature": "get_overall_health(self) -> HealthStatus"}], "properties": [], "description": "Manages and executes multiple health checks."}, {"name": "MetricsCollector", "line": 209, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 212, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "increment_counter", "line": 218, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "float", "default": "1.0"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Increment a counter metric.", "signature": "increment_counter(self, name: str, value: float = 1.0, labels: dict[str, str] | None = None) -> None"}, {"name": "set_gauge", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "float"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Set a gauge metric value.", "signature": "set_gauge(self, name: str, value: float, labels: dict[str, str] | None = None) -> None"}, {"name": "record_histogram", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "float"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Record a histogram metric value.", "signature": "record_histogram(self, name: str, value: float, labels: dict[str, str] | None = None) -> None"}, {"name": "_get_metric_key", "line": 263, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, labels: dict[str, str]"}, {"name": "labels", "type": "dict[str, str]"}], "is_async": false, "return_type": "str", "description": "Generate unique key for metric with labels.", "signature": "_get_metric_key(self, name: str, labels: dict[str, str], labels: dict[str, str]) -> str"}, {"name": "_store_metric", "line": 268, "parameters": [{"name": "self", "type": "self"}, {"name": "metric", "type": "Metric"}], "is_async": false, "return_type": "None", "description": "Store metric in memory.", "signature": "_store_metric(self, metric: Metric) -> None"}, {"name": "get_metrics", "line": 279, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "dict[str, list[Metric]]", "description": "Get collected metrics.", "signature": "get_metrics(self, name: str | None = None = None) -> dict[str, list[Metric]]"}, {"name": "get_current_values", "line": 285, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, float]", "description": "Get current values for counters and gauges.", "signature": "get_current_values(self) -> dict[str, float]"}], "properties": [], "description": "Collects and aggregates various system metrics."}, {"name": "AlertManager", "line": 290, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 293, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "add_handler", "line": 298, "parameters": [{"name": "self", "type": "self"}, {"name": "handler", "type": "Callable[[str, str, dict[str, Any]], None]"}], "is_async": false, "return_type": "None", "description": "Add alert handler.", "signature": "add_handler(self, handler: Callable[[str, str, dict[str, Any]], None]) -> None"}, {"name": "remove_handler", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "handler", "type": "Callable[[str, str, dict[str, Any]], None]"}], "is_async": false, "return_type": "None", "description": "Remove alert handler.", "signature": "remove_handler(self, handler: Callable[[str, str, dict[str, Any]], None]) -> None"}, {"name": "send_alert", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "level", "type": "str"}, {"name": "message", "type": "str"}, {"name": "context", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "None", "description": "Send alert to all handlers.", "signature": "async send_alert(self, level: str, message: str, context: dict[str, Any] | None = None) -> None"}], "properties": [], "description": "Handles alert creation and notification based on monitoring data."}, {"name": "MonitoringSystem", "line": 337, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 340, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "_start", "line": 346, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start monitoring system.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 353, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop monitoring system.", "signature": "async _stop(self) -> None"}, {"name": "get_system_status", "line": 360, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get comprehensive system status.", "signature": "async get_system_status(self) -> dict[str, Any]"}], "properties": [], "description": "Coordinates health checks, metrics collection, and alert management."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 19}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 19}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 19}, {"name": "MonitoringError", "type": "class", "line": 24}, {"name": "HealthStatus", "type": "class", "line": 30}, {"name": "MetricType", "type": "class", "line": 39}, {"name": "HealthCheck", "type": "class", "line": 49}, {"name": "HealthResult", "type": "class", "line": 61}, {"name": "Metric", "type": "class", "line": 73}, {"name": "HealthChecker", "type": "class", "line": 84}, {"name": "MetricsCollector", "type": "class", "line": 209}, {"name": "AlertManager", "type": "class", "line": 290}, {"name": "MonitoringSystem", "type": "class", "line": 337}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "MonitoringError Class", "description": "Class MonitoringError definition and methods.", "line_start": 24, "line_end": 34}, {"name": "HealthStatus Class", "description": "Class HealthStatus definition and methods.", "line_start": 30, "line_end": 40}, {"name": "MetricType Class", "description": "Class MetricType definition and methods.", "line_start": 39, "line_end": 49}, {"name": "HealthCheck Class", "description": "Class HealthCheck definition and methods.", "line_start": 49, "line_end": 59}, {"name": "HealthResult Class", "description": "Class HealthResult definition and methods.", "line_start": 61, "line_end": 71}, {"name": "Metric Class", "description": "Class Metric definition and methods.", "line_start": 73, "line_end": 83}, {"name": "HealthChecker Class", "description": "Class HealthChecker definition and methods.", "line_start": 84, "line_end": 186}, {"name": "MetricsCollector Class", "description": "Class MetricsCollector definition and methods.", "line_start": 209, "line_end": 288}, {"name": "AlertManager Class", "description": "Class AlertManager definition and methods.", "line_start": 290, "line_end": 314}, {"name": "MonitoringSystem Class", "description": "Class MonitoringSystem definition and methods.", "line_start": 337, "line_end": 363}], "content_hash": "cb783f994284468132e0156872c77978"}'
- path: libs/opsvi-core/opsvi_core/core/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "0bd70858b8523e4ab6d8bb20bef48981"}'
- path: libs/opsvi-core/opsvi_core/core/exceptions.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CoreError", "line": 16, "inherits_from": ["OPSVIError):"], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Base class for core-related errors."}, {"name": "CoreConfigurationError", "line": 23, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error related to configuration issues."}, {"name": "CoreConnectionError", "line": 27, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error related to connection failures."}, {"name": "CoreValidationError", "line": 31, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error raised during validation failures."}, {"name": "CoreTimeoutError", "line": 35, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error indicating an operation timed out."}, {"name": "CoreResourceError", "line": 39, "inherits_from": ["CoreError):"], "methods": [], "properties": [], "description": "Error related to resource availability or access."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_foundation.core.exceptions import OPSVIError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from opsvi_foundation.core.exceptions import OPSVIError", "type": "import", "line": 13}, {"name": "CoreError", "type": "class", "line": 16}, {"name": "CoreConfigurationError", "type": "class", "line": 23}, {"name": "CoreConnectionError", "type": "class", "line": 27}, {"name": "CoreValidationError", "type": "class", "line": 31}, {"name": "CoreTimeoutError", "type": "class", "line": 35}, {"name": "CoreResourceError", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "CoreError Class", "description": "Class CoreError definition and methods.", "line_start": 16, "line_end": 22}, {"name": "CoreConfigurationError Class", "description": "Class CoreConfigurationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "CoreConnectionError Class", "description": "Class CoreConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "CoreValidationError Class", "description": "Class CoreValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "CoreTimeoutError Class", "description": "Class CoreTimeoutError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "CoreResourceError Class", "description": "Class CoreResourceError definition and methods.", "line_start": 39, "line_end": 49}], "content_hash": "7ca416a478ae8a3a544fbb3a1a8b7a43"}'
- path: libs/opsvi-core/opsvi_core/core/config.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CoreConfig", "line": 18, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents the core configuration settings for the application."}, {"name": "CoreSettings", "line": 29, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Holds the core settings parameters used throughout the system."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation.config.settings", "alias": null, "line": 15, "statement": "from opsvi_foundation.config.settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from opsvi_foundation.config.settings import BaseSettings", "type": "import", "line": 15}, {"name": "CoreConfig", "type": "class", "line": 18}, {"name": "CoreSettings", "type": "class", "line": 29}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "CoreConfig Class", "description": "Class CoreConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "CoreSettings Class", "description": "Class CoreSettings definition and methods.", "line_start": 29, "line_end": 39}], "content_hash": "aa2e67b93b4853a521749536f80246ca"}'
- path: libs/opsvi-core/opsvi_core/core/base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CoreBase", "line": 17, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Base class providing core functionalities with four essential methods."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import BaseComponent"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from opsvi_foundation.patterns.base import BaseComponent", "type": "import", "line": 14}, {"name": "CoreBase", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "CoreBase Class", "description": "Class CoreBase definition and methods.", "line_start": 17, "line_end": 38}], "content_hash": "5f897af28ad8ed96e6b77471184d8a01"}'
- path: libs/opsvi-core/opsvi_core/messaging/in_memory.py
  line_count: 80
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "in_memory.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "InMemoryBroker", "line": 24, "inherits_from": ["MessageBroker):"], "methods": [{"name": "__init__", "line": 27, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "_start", "line": 34, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "signature": "async _stop(self) -> None"}, {"name": "publish", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Publish a message to a topic.", "signature": "async publish(self, message: Message) -> None"}, {"name": "subscribe", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "topic", "type": "str"}], "is_async": true, "return_type": "None", "description": "Subscribe to messages on a topic.", "signature": "async subscribe(self, topic: str) -> None"}], "properties": [], "description": "A broker class that manages message queues in memory, providing methods to publish, subscribe, and retrieve messages."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "contextlib", "alias": null, "line": 12, "statement": "import contextlib"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections", "alias": null, "line": 13, "statement": "from collections import defaultdict"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import sanitize_input"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import Message"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import MessageBroker"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import MessagingError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "contextlib", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections import defaultdict", "type": "import", "line": 13}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "from opsvi_foundation import sanitize_input", "type": "import", "line": 17}, {"name": "from base import Message", "type": "import", "line": 19}, {"name": "from base import MessageBroker", "type": "import", "line": 19}, {"name": "from base import MessagingError", "type": "import", "line": 19}, {"name": "InMemoryBroker", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "InMemoryBroker Class", "description": "Class InMemoryBroker definition and methods.", "line_start": 24, "line_end": 62}], "content_hash": "d00adab22f02cdeaaa5577450ad42727"}'
- path: libs/opsvi-core/opsvi_core/messaging/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "1c5f08fe92d2f8052f996225964f1b5b"}'
- path: libs/opsvi-core/opsvi_core/messaging/base.py
  line_count: 190
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MessagingError", "line": 25, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to messaging operations."}, {"name": "QoSLevel", "line": 31, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "AT_MOST_ONCE", "line": 32, "type": ""}, {"name": "AT_LEAST_ONCE", "line": 33, "type": ""}, {"name": "EXACTLY_ONCE", "line": 34, "type": ""}], "description": "Defines quality of service levels for message delivery."}, {"name": "MessageRoute", "line": 40, "inherits_from": [], "methods": [], "properties": [], "description": "Specifies routing information for messages."}, {"name": "Message", "line": 51, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the data and metadata of a message."}, {"name": "MessageBroker", "line": 65, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "publish", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Publish a message to a topic.", "signature": "async publish(self, message: Message) -> None"}, {"name": "subscribe", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "topic", "type": "str"}], "is_async": true, "return_type": "None", "description": "Subscribe to messages on a topic.", "signature": "async subscribe(self, topic: str) -> None"}, {"name": "_encrypt_if_needed", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": false, "return_type": "None", "description": "Encrypt message payload if encryption is enabled.", "signature": "_encrypt_if_needed(self, message: Message) -> None"}, {"name": "_decrypt_if_needed", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": false, "return_type": "None", "description": "Decrypt message payload if encrypted.", "signature": "_decrypt_if_needed(self, message: Message) -> None"}], "properties": [{"name": "RETRY_DELAY", "line": 73, "type": ""}], "description": "Manages message distribution between publishers and subscribers."}, {"name": "MessageRouter", "line": 111, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "set_broker", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "broker", "type": "MessageBroker"}], "is_async": false, "return_type": "None", "description": "Set the message broker for routing.", "signature": "set_broker(self, broker: MessageBroker) -> None"}, {"name": "add_route", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str, destination: str"}, {"name": "destination", "type": "str"}], "is_async": false, "return_type": "None", "description": "Add a routing pattern.", "signature": "add_route(self, pattern: str, destination: str, destination: str) -> None"}, {"name": "route_message", "line": 128, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Route a message based on its destination.", "signature": "async route_message(self, message: Message) -> None"}], "properties": [], "description": "Handles routing logic to direct messages to appropriate destinations."}, {"name": "MessageQueue", "line": 145, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 148, "parameters": [{"name": "self", "type": "self"}, {"name": "broker", "type": "MessageBroker"}, {"name": "max_retries", "type": "int", "default": "3"}], "is_async": false, "signature": "__init__(self, broker: MessageBroker, max_retries: int = 3)"}, {"name": "enqueue", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Add message to queue.", "signature": "async enqueue(self, message: Message) -> None"}, {"name": "_process_message", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Process a message with retry logic.", "signature": "async _process_message(self, message: Message) -> None"}, {"name": "_move_to_dead_letter", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Message"}], "is_async": true, "return_type": "None", "description": "Move failed message to dead letter queue.", "signature": "async _move_to_dead_letter(self, message: Message) -> None"}], "properties": [], "description": "Implements a queue to store and manage messages for processing."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "uuid", "alias": null, "line": 12, "statement": "import uuid"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 16, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 17, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 18, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "uuid", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from dataclasses import field", "type": "import", "line": 15}, {"name": "from datetime import datetime", "type": "import", "line": 16}, {"name": "from enum import Enum", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 18}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 20}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 20}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 20}, {"name": "MessagingError", "type": "class", "line": 25}, {"name": "QoSLevel", "type": "class", "line": 31}, {"name": "MessageRoute", "type": "class", "line": 40}, {"name": "Message", "type": "class", "line": 51}, {"name": "MessageBroker", "type": "class", "line": 65}, {"name": "MessageRouter", "type": "class", "line": 111}, {"name": "MessageQueue", "type": "class", "line": 145}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "MessagingError Class", "description": "Class MessagingError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "QoSLevel Class", "description": "Class QoSLevel definition and methods.", "line_start": 31, "line_end": 41}, {"name": "MessageRoute Class", "description": "Class MessageRoute definition and methods.", "line_start": 40, "line_end": 50}, {"name": "Message Class", "description": "Class Message definition and methods.", "line_start": 51, "line_end": 61}, {"name": "MessageBroker Class", "description": "Class MessageBroker definition and methods.", "line_start": 65, "line_end": 107}, {"name": "MessageRouter Class", "description": "Class MessageRouter definition and methods.", "line_start": 111, "line_end": 131}, {"name": "MessageQueue Class", "description": "Class MessageQueue definition and methods.", "line_start": 145, "line_end": 191}], "content_hash": "6f59987b35733c091d6bbb17e5490ada"}'
- path: libs/opsvi-core/opsvi_core/workflows/definition.py
  line_count: 400
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "definition.py", "description": "Python module with 0 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WorkflowDefinitionError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors in workflow definitions."}, {"name": "StepType", "line": 27, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "TASK", "line": 28, "type": ""}, {"name": "CONDITION", "line": 29, "type": ""}, {"name": "LOOP", "line": 30, "type": ""}, {"name": "PARALLEL", "line": 31, "type": ""}, {"name": "WAIT", "line": 32, "type": ""}, {"name": "SUBWORKFLOW", "line": 33, "type": ""}], "description": "Enumeration representing the types of steps in a workflow."}, {"name": "StepStatus", "line": 38, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "PENDING", "line": 39, "type": ""}, {"name": "RUNNING", "line": 40, "type": ""}, {"name": "COMPLETED", "line": 41, "type": ""}, {"name": "FAILED", "line": 42, "type": ""}, {"name": "SKIPPED", "line": 43, "type": ""}], "description": "Enumeration representing the status of a workflow step."}, {"name": "StepDefinition", "line": 48, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_id", "line": 65, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "description": "Validate step ID.", "signature": "validate_id(cls, v)"}, {"name": "validate_action", "line": 72, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "description": "Validate action.", "signature": "validate_action(cls, v)"}], "properties": [], "description": "Defines a single step within a workflow, including its properties and behavior."}, {"name": "WorkflowDefinition", "line": 79, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_id", "line": 101, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "description": "Validate workflow ID.", "signature": "validate_id(cls, v)"}, {"name": "validate_name", "line": 108, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "description": "Validate workflow name.", "signature": "validate_name(cls, v)"}, {"name": "validate_steps", "line": 115, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "description": "Validate workflow steps.", "signature": "validate_steps(cls, v)"}, {"name": "get_step", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}], "is_async": false, "return_type": "StepDefinition | None", "description": "Get a step by ID.", "signature": "get_step(self, step_id: str) -> StepDefinition | None"}, {"name": "get_dependent_steps", "line": 140, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}], "is_async": false, "return_type": "list[StepDefinition]", "description": "Get steps that depend on the given step.", "signature": "get_dependent_steps(self, step_id: str) -> list[StepDefinition]"}, {"name": "validate_workflow", "line": 148, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Validate the workflow definition and return any errors.", "signature": "validate_workflow(self) -> list[str]"}, {"name": "_has_circular_dependencies", "line": 169, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check for circular dependencies in workflow steps.", "signature": "_has_circular_dependencies(self) -> bool"}, {"name": "_find_orphaned_steps", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Find steps that are not reachable from any entry point.", "signature": "_find_orphaned_steps(self) -> list[str]"}], "properties": [], "description": "Represents a complete workflow definition, managing its steps and execution logic."}, {"name": "WorkflowDefinitionParser", "line": 227, "inherits_from": [], "methods": [{"name": "parse_yaml", "line": 231, "parameters": [{"name": "yaml_content", "type": "str"}], "is_async": false, "return_type": "WorkflowDefinition", "description": "\n        Parse workflow definition from YAML.\n\n        Args:\n            yaml_content: YAML content as string\n\n        Returns:\n            Parsed workflow definition\n\n        Raises:\n            WorkflowDefinitionError: If parsing fails\n        ", "signature": "parse_yaml(yaml_content: str) -> WorkflowDefinition"}, {"name": "parse_json", "line": 255, "parameters": [{"name": "json_content", "type": "str"}], "is_async": false, "return_type": "WorkflowDefinition", "description": "\n        Parse workflow definition from JSON.\n\n        Args:\n            json_content: JSON content as string\n\n        Returns:\n            Parsed workflow definition\n\n        Raises:\n            WorkflowDefinitionError: If parsing fails\n        ", "signature": "parse_json(json_content: str) -> WorkflowDefinition"}, {"name": "_parse_dict", "line": 279, "parameters": [{"name": "data", "type": "dict[str, Any]"}], "is_async": false, "return_type": "WorkflowDefinition", "description": "Parse workflow definition from dictionary.", "signature": "_parse_dict(data: dict[str, Any]) -> WorkflowDefinition"}, {"name": "to_yaml", "line": 299, "parameters": [{"name": "workflow", "type": "WorkflowDefinition"}], "is_async": false, "return_type": "str", "description": "\n        Convert workflow definition to YAML.\n\n        Args:\n            workflow: Workflow definition to convert\n\n        Returns:\n            YAML representation\n        ", "signature": "to_yaml(workflow: WorkflowDefinition) -> str"}, {"name": "to_json", "line": 316, "parameters": [{"name": "workflow", "type": "WorkflowDefinition"}], "is_async": false, "return_type": "str", "description": "\n        Convert workflow definition to JSON.\n\n        Args:\n            workflow: Workflow definition to convert\n\n        Returns:\n            JSON representation\n        ", "signature": "to_json(workflow: WorkflowDefinition) -> str"}], "properties": [], "description": "Parses workflow definitions from various sources into WorkflowDefinition objects."}, {"name": "WorkflowDefinitionRegistry", "line": 333, "inherits_from": [], "methods": [{"name": "__init__", "line": 336, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the registry.", "signature": "__init__(self)"}, {"name": "register", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow", "type": "WorkflowDefinition"}], "is_async": false, "return_type": "None", "description": "\n        Register a workflow definition.\n\n        Args:\n            workflow: Workflow definition to register\n\n        Raises:\n            WorkflowDefinitionError: If workflow is invalid or already exists\n        ", "signature": "register(self, workflow: WorkflowDefinition) -> None"}, {"name": "get", "line": 362, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}], "is_async": false, "return_type": "WorkflowDefinition | None", "description": "\n        Get a workflow definition by ID.\n\n        Args:\n            workflow_id: ID of the workflow to get\n\n        Returns:\n            Workflow definition if found, None otherwise\n        ", "signature": "get(self, workflow_id: str) -> WorkflowDefinition | None"}, {"name": "list", "line": 374, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[WorkflowDefinition]", "description": "\n        List all registered workflows.\n\n        Returns:\n            List of workflow definitions\n        ", "signature": "list(self) -> list[WorkflowDefinition]"}, {"name": "unregister", "line": 383, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Unregister a workflow definition.\n\n        Args:\n            workflow_id: ID of the workflow to unregister\n\n        Returns:\n            True if unregistered, False if not found\n        ", "signature": "unregister(self, workflow_id: str) -> bool"}, {"name": "clear", "line": 399, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all registered workflows.", "signature": "clear(self) -> None"}], "properties": [], "description": "Registry that stores and manages multiple workflow definitions."}], "imports": [{"module": "json", "alias": null, "line": 9, "statement": "import json"}, {"module": "yaml", "alias": null, "line": 14, "statement": "import yaml"}, {"module": "datetime", "alias": null, "line": 10, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 11, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import validator"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 9}, {"name": "yaml", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 10}, {"name": "from enum import Enum", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "from pydantic import Field", "type": "import", "line": 16}, {"name": "from pydantic import validator", "type": "import", "line": 16}, {"name": "WorkflowDefinitionError", "type": "class", "line": 21}, {"name": "StepType", "type": "class", "line": 27}, {"name": "StepStatus", "type": "class", "line": 38}, {"name": "StepDefinition", "type": "class", "line": 48}, {"name": "WorkflowDefinition", "type": "class", "line": 79}, {"name": "WorkflowDefinitionParser", "type": "class", "line": 227}, {"name": "WorkflowDefinitionRegistry", "type": "class", "line": 333}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "WorkflowDefinitionError Class", "description": "Class WorkflowDefinitionError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "StepType Class", "description": "Class StepType definition and methods.", "line_start": 27, "line_end": 37}, {"name": "StepStatus Class", "description": "Class StepStatus definition and methods.", "line_start": 38, "line_end": 48}, {"name": "StepDefinition Class", "description": "Class StepDefinition definition and methods.", "line_start": 48, "line_end": 75}, {"name": "WorkflowDefinition Class", "description": "Class WorkflowDefinition definition and methods.", "line_start": 79, "line_end": 201}, {"name": "WorkflowDefinitionParser Class", "description": "Class WorkflowDefinitionParser definition and methods.", "line_start": 227, "line_end": 319}, {"name": "WorkflowDefinitionRegistry Class", "description": "Class WorkflowDefinitionRegistry definition and methods.", "line_start": 333, "line_end": 402}], "content_hash": "2e1f073719a10f5442973f2a4b6fdd8d"}'
- path: libs/opsvi-core/opsvi_core/workflows/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "9e1704a1361e68066b39ba328864827a"}'
- path: libs/opsvi-core/opsvi_core/workflows/monitoring.py
  line_count: 428
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "monitoring.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MonitoringError", "line": 18, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to monitoring operations."}, {"name": "ExecutionMetrics", "line": 24, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Class representing metrics collected during execution."}, {"name": "ExecutionEvent", "line": 40, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Class representing an event that occurs during execution."}, {"name": "WorkflowMonitor", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the workflow monitor.", "signature": "__init__(self)"}, {"name": "start_execution", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str, workflow_id: str"}, {"name": "workflow_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "\n        Start monitoring an execution.\n\n        Args:\n            execution_id: Execution ID to monitor\n            workflow_id: Workflow ID being executed\n        ", "signature": "async start_execution(self, execution_id: str, workflow_id: str, workflow_id: str) -> None"}, {"name": "end_execution", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "status", "type": "str"}, {"name": "result", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "\n        End monitoring an execution.\n\n        Args:\n            execution_id: Execution ID to end monitoring\n            status: Final execution status\n            result: Execution result\n        ", "signature": "async end_execution(self, execution_id: str, status: str, result: dict[str, Any]) -> None"}, {"name": "step_started", "line": 143, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str, step_id: str"}, {"name": "step_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "\n        Record step start.\n\n        Args:\n            execution_id: Execution ID\n            step_id: Step ID that started\n        ", "signature": "async step_started(self, execution_id: str, step_id: str, step_id: str) -> None"}, {"name": "step_completed", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "step_id", "type": "str"}, {"name": "output", "type": "dict[str, Any]"}, {"name": "duration", "type": "float"}], "is_async": true, "return_type": "None", "description": "\n        Record step completion.\n\n        Args:\n            execution_id: Execution ID\n            step_id: Step ID that completed\n            output: Step output\n            duration: Step duration\n        ", "signature": "async step_completed(self, execution_id: str, step_id: str, output: dict[str, Any], duration: float) -> None"}, {"name": "step_failed", "line": 203, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "step_id", "type": "str"}, {"name": "error", "type": "str"}, {"name": "duration", "type": "float"}], "is_async": true, "return_type": "None", "description": "\n        Record step failure.\n\n        Args:\n            execution_id: Execution ID\n            step_id: Step ID that failed\n            error: Error message\n            duration: Step duration\n        ", "signature": "async step_failed(self, execution_id: str, step_id: str, error: str, duration: float) -> None"}, {"name": "step_skipped", "line": 239, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str, step_id: str, reason: str"}, {"name": "step_id", "type": "str, reason: str"}, {"name": "reason", "type": "str"}], "is_async": true, "return_type": "None", "description": "\n        Record step skip.\n\n        Args:\n            execution_id: Execution ID\n            step_id: Step ID that was skipped\n            reason: Skip reason\n        ", "signature": "async step_skipped(self, execution_id: str, step_id: str, reason: str, step_id: str, reason: str, reason: str) -> None"}, {"name": "get_execution_status", "line": 268, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any] | None", "description": "\n        Get execution status.\n\n        Args:\n            execution_id: Execution ID to check\n\n        Returns:\n            Execution status if found, None otherwise\n        ", "signature": "async get_execution_status(self, execution_id: str) -> dict[str, Any] | None"}, {"name": "get_execution_events", "line": 280, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "list[ExecutionEvent]", "description": "\n        Get events for an execution.\n\n        Args:\n            execution_id: Execution ID to get events for\n\n        Returns:\n            List of execution events\n        ", "signature": "async get_execution_events(self, execution_id: str) -> list[ExecutionEvent]"}, {"name": "get_execution_metrics", "line": 292, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "ExecutionMetrics | None", "description": "\n        Get metrics for an execution.\n\n        Args:\n            execution_id: Execution ID to get metrics for\n\n        Returns:\n            Execution metrics if found, None otherwise\n        ", "signature": "async get_execution_metrics(self, execution_id: str) -> ExecutionMetrics | None"}, {"name": "list_executions", "line": 307, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None", "default": "None"}, {"name": "status", "type": "str | None", "default": "None"}, {"name": "limit", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "list[dict[str, Any]]", "description": "\n        List monitored executions.\n\n        Args:\n            workflow_id: Filter by workflow ID\n            status: Filter by status\n            limit: Maximum number of results\n\n        Returns:\n            List of execution statuses\n        ", "signature": "async list_executions(self, workflow_id: str | None = None, status: str | None = None, limit: int | None = None) -> list[dict[str, Any]]"}, {"name": "get_workflow_metrics", "line": 340, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Get aggregated metrics for a workflow.\n\n        Args:\n            workflow_id: Workflow ID to get metrics for\n\n        Returns:\n            Aggregated workflow metrics\n        ", "signature": "async get_workflow_metrics(self, workflow_id: str) -> dict[str, Any]"}, {"name": "cleanup_old_executions", "line": 379, "parameters": [{"name": "self", "type": "self"}, {"name": "max_age_hours", "type": "int = 24", "default": "24"}], "is_async": true, "return_type": "int", "description": "\n        Clean up old execution data.\n\n        Args:\n            max_age_hours: Maximum age in hours to keep\n\n        Returns:\n            Number of executions cleaned up\n        ", "signature": "async cleanup_old_executions(self, max_age_hours: int = 24 = 24) -> int"}, {"name": "health_check", "line": 416, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check on the monitor.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Class responsible for monitoring workflow execution and managing related events and metrics."}], "imports": [{"module": "datetime", "alias": null, "line": 9, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 9, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from datetime import datetime", "type": "import", "line": 9}, {"name": "from datetime import timedelta", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "MonitoringError", "type": "class", "line": 18}, {"name": "ExecutionMetrics", "type": "class", "line": 24}, {"name": "ExecutionEvent", "type": "class", "line": 40}, {"name": "WorkflowMonitor", "type": "class", "line": 50}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "MonitoringError Class", "description": "Class MonitoringError definition and methods.", "line_start": 18, "line_end": 28}, {"name": "ExecutionMetrics Class", "description": "Class ExecutionMetrics definition and methods.", "line_start": 24, "line_end": 34}, {"name": "ExecutionEvent Class", "description": "Class ExecutionEvent definition and methods.", "line_start": 40, "line_end": 50}, {"name": "WorkflowMonitor Class", "description": "Class WorkflowMonitor definition and methods.", "line_start": 50, "line_end": 419}], "content_hash": "bca31c9bda12bc41d2805e0906f3a2dd"}'
- path: libs/opsvi-core/opsvi_core/workflows/state.py
  line_count: 365
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "state.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StateError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to state operations."}, {"name": "WorkflowState", "line": 29, "inherits_from": ["BaseModel):"], "methods": [{"name": "update_step_state", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str, state_data: dict[str, Any]"}, {"name": "state_data", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Update state for a specific step.", "signature": "update_step_state(self, step_id: str, state_data: dict[str, Any], state_data: dict[str, Any]) -> None"}, {"name": "get_step_state", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Get state for a specific step.", "signature": "get_step_state(self, step_id: str) -> dict[str, Any] | None"}, {"name": "set_variable", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Set a workflow variable.", "signature": "set_variable(self, name: str, value: Any, value: Any) -> None"}, {"name": "get_variable", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Get a workflow variable.", "signature": "get_variable(self, name: str, default: Any = None, default: Any = None = None) -> Any"}, {"name": "set_output", "line": 60, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Set a workflow output.", "signature": "set_output(self, name: str, value: Any, value: Any) -> None"}, {"name": "get_output", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Get a workflow output.", "signature": "get_output(self, name: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Represents the state of a workflow including its current status and data."}, {"name": "StateBackend", "line": 70, "inherits_from": ["ABC):"], "methods": [{"name": "save_state", "line": 74, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "WorkflowState"}], "is_async": true, "return_type": "None", "description": "Save workflow state.", "signature": "async save_state(self, state: WorkflowState) -> None"}, {"name": "load_state", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "WorkflowState | None", "description": "Load workflow state.", "signature": "async load_state(self, workflow_id: str, execution_id: str) -> WorkflowState | None"}, {"name": "delete_state", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str, execution_id: str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete workflow state.", "signature": "async delete_state(self, workflow_id: str, execution_id: str, execution_id: str) -> bool"}, {"name": "list_states", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "list[WorkflowState]", "description": "List workflow states.", "signature": "async list_states(self, workflow_id: str | None = None = None) -> list[WorkflowState]"}], "properties": [], "description": "Abstract base class defining the interface for state storage backends."}, {"name": "InMemoryStateBackend", "line": 96, "inherits_from": ["StateBackend):"], "methods": [{"name": "__init__", "line": 99, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the in-memory backend.", "signature": "__init__(self)"}, {"name": "save_state", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "WorkflowState"}], "is_async": true, "return_type": "None", "description": "Save workflow state to memory.", "signature": "async save_state(self, state: WorkflowState) -> None"}, {"name": "load_state", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "WorkflowState | None", "description": "Load workflow state from memory.", "signature": "async load_state(self, workflow_id: str, execution_id: str) -> WorkflowState | None"}, {"name": "delete_state", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str, execution_id: str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete workflow state from memory.", "signature": "async delete_state(self, workflow_id: str, execution_id: str, execution_id: str) -> bool"}, {"name": "list_states", "line": 128, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "list[WorkflowState]", "description": "List workflow states from memory.", "signature": "async list_states(self, workflow_id: str | None = None = None) -> list[WorkflowState]"}], "properties": [], "description": "State backend implementation that stores state data in memory."}, {"name": "FileStateBackend", "line": 136, "inherits_from": ["StateBackend):"], "methods": [{"name": "__init__", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "storage_path", "type": "str", "default": "./workflow_states"}], "is_async": false, "description": "Initialize the file backend.", "signature": "__init__(self, storage_path: str = ./workflow_states)"}, {"name": "_get_state_path", "line": 146, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str, execution_id: str"}, {"name": "execution_id", "type": "str"}], "is_async": false, "return_type": "str", "description": "Get file path for state.", "signature": "_get_state_path(self, workflow_id: str, execution_id: str, execution_id: str) -> str"}, {"name": "save_state", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "WorkflowState"}], "is_async": true, "return_type": "None", "description": "Save workflow state to file.", "signature": "async save_state(self, state: WorkflowState) -> None"}, {"name": "load_state", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "WorkflowState | None", "description": "Load workflow state from file.", "signature": "async load_state(self, workflow_id: str, execution_id: str) -> WorkflowState | None"}, {"name": "delete_state", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str, execution_id: str"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete workflow state file.", "signature": "async delete_state(self, workflow_id: str, execution_id: str, execution_id: str) -> bool"}, {"name": "list_states", "line": 213, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "list[WorkflowState]", "description": "List workflow states from files.", "signature": "async list_states(self, workflow_id: str | None = None = None) -> list[WorkflowState]"}], "properties": [], "description": "State backend implementation that persists state data to files."}, {"name": "StateManager", "line": 250, "inherits_from": [], "methods": [{"name": "__init__", "line": 253, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "StateBackend | None", "default": "None"}], "is_async": false, "description": "Initialize the state manager.", "signature": "__init__(self, backend: StateBackend | None = None)"}, {"name": "initialize", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_definition", "type": "\"WorkflowDefinition\""}, {"name": "context", "type": "\"WorkflowContext\""}], "is_async": true, "return_type": "WorkflowState", "description": "\n        Initialize workflow state.\n\n        Args:\n            workflow_definition: Workflow definition\n            context: Workflow execution context\n\n        Returns:\n            Initialized workflow state\n        ", "signature": "async initialize(self, workflow_definition: \"WorkflowDefinition\", context: \"WorkflowContext\") -> WorkflowState"}, {"name": "get_state", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "WorkflowState | None", "description": "Get workflow state for execution.", "signature": "async get_state(self, execution_id: str) -> WorkflowState | None"}, {"name": "update_state", "line": 307, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "WorkflowState"}], "is_async": true, "return_type": "None", "description": "Update workflow state.", "signature": "async update_state(self, state: WorkflowState) -> None"}, {"name": "update_step_state", "line": 313, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "step_id", "type": "str"}, {"name": "state_data", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "Update state for a specific step.", "signature": "async update_step_state(self, execution_id: str, step_id: str, state_data: dict[str, Any]) -> None"}, {"name": "set_variable", "line": 322, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str, name: str, value: Any"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Set a workflow variable.", "signature": "async set_variable(self, execution_id: str, name: str, value: Any, name: str, value: Any, value: Any) -> None"}, {"name": "get_variable", "line": 329, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "name", "type": "str"}, {"name": "default", "type": "Any", "default": "None"}], "is_async": true, "return_type": "Any", "description": "Get a workflow variable.", "signature": "async get_variable(self, execution_id: str, name: str, default: Any = None) -> Any"}, {"name": "set_output", "line": 338, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str, name: str, value: Any"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Set a workflow output.", "signature": "async set_output(self, execution_id: str, name: str, value: Any, name: str, value: Any, value: Any) -> None"}, {"name": "get_output", "line": 345, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}, {"name": "name", "type": "str"}, {"name": "default", "type": "Any", "default": "None"}], "is_async": true, "return_type": "Any", "description": "Get a workflow output.", "signature": "async get_output(self, execution_id: str, name: str, default: Any = None) -> Any"}, {"name": "cleanup_state", "line": 354, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "Clean up state for an execution.", "signature": "async cleanup_state(self, execution_id: str) -> None"}, {"name": "list_execution_states", "line": 363, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "list[WorkflowState]", "description": "List all execution states.", "signature": "async list_execution_states(self, workflow_id: str | None = None) -> list[WorkflowState]"}], "properties": [], "description": "Manages workflow states using a specified backend, providing state retrieval and update operations."}], "imports": [{"module": "json", "alias": null, "line": 9, "statement": "import json"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "definition", "alias": null, "line": 17, "statement": "from definition import WorkflowDefinition"}, {"module": "engine", "alias": null, "line": 18, "statement": "from engine import WorkflowContext"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 14}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from definition import WorkflowDefinition", "type": "import", "line": 17}, {"name": "from engine import WorkflowContext", "type": "import", "line": 18}, {"name": "StateError", "type": "class", "line": 23}, {"name": "WorkflowState", "type": "class", "line": 29}, {"name": "StateBackend", "type": "class", "line": 70}, {"name": "InMemoryStateBackend", "type": "class", "line": 96}, {"name": "FileStateBackend", "type": "class", "line": 136}, {"name": "StateManager", "type": "class", "line": 250}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "StateError Class", "description": "Class StateError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "WorkflowState Class", "description": "Class WorkflowState definition and methods.", "line_start": 29, "line_end": 68}, {"name": "StateBackend Class", "description": "Class StateBackend definition and methods.", "line_start": 70, "line_end": 94}, {"name": "InMemoryStateBackend Class", "description": "Class InMemoryStateBackend definition and methods.", "line_start": 96, "line_end": 131}, {"name": "FileStateBackend Class", "description": "Class FileStateBackend definition and methods.", "line_start": 136, "line_end": 216}, {"name": "StateManager Class", "description": "Class StateManager definition and methods.", "line_start": 250, "line_end": 366}], "content_hash": "597a6cb9d10f92556095aae4fa2199b6"}'
- path: libs/opsvi-core/opsvi_core/workflows/engine.py
  line_count: 282
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "engine.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WorkflowStatus", "line": 23, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "PENDING", "line": 24, "type": ""}, {"name": "RUNNING", "line": 25, "type": ""}, {"name": "COMPLETED", "line": 26, "type": ""}, {"name": "FAILED", "line": 27, "type": ""}, {"name": "CANCELLED", "line": 28, "type": ""}, {"name": "PAUSED", "line": 29, "type": ""}], "description": "Represents the current status of a workflow."}, {"name": "WorkflowExecutionError", "line": 34, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Indicates an error that occurred during workflow execution."}, {"name": "WorkflowConfig", "line": 40, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for a workflow."}, {"name": "WorkflowContext", "line": 56, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Maintains contextual information during workflow execution."}, {"name": "WorkflowResult", "line": 67, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the outcome of a workflow execution."}, {"name": "WorkflowEngine", "line": 82, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "WorkflowConfig"}], "is_async": false, "description": "Initialize the workflow engine.", "signature": "__init__(self, config: WorkflowConfig, **kwargs)"}, {"name": "execute_workflow", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_definition", "type": "\"WorkflowDefinition\""}, {"name": "variables", "type": "dict[str, Any] | None", "default": "None"}, {"name": "execution_id", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "WorkflowResult", "description": "\n        Execute a workflow.\n\n        Args:\n            workflow_definition: Workflow definition to execute\n            variables: Input variables for the workflow\n            execution_id: Optional execution ID\n\n        Returns:\n            Workflow execution result\n\n        Raises:\n            WorkflowExecutionError: If execution fails\n        ", "signature": "async execute_workflow(self, workflow_definition: \"WorkflowDefinition\", variables: dict[str, Any] | None = None, execution_id: str | None = None) -> WorkflowResult"}, {"name": "cancel_workflow", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Cancel a running workflow.\n\n        Args:\n            execution_id: Execution ID to cancel\n\n        Returns:\n            True if cancelled, False if not found\n        ", "signature": "async cancel_workflow(self, execution_id: str) -> bool"}, {"name": "get_execution_status", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "execution_id", "type": "str"}], "is_async": true, "return_type": "WorkflowResult | None", "description": "\n        Get execution status.\n\n        Args:\n            execution_id: Execution ID to check\n\n        Returns:\n            Workflow result if found, None otherwise\n        ", "signature": "async get_execution_status(self, execution_id: str) -> WorkflowResult | None"}, {"name": "list_executions", "line": 220, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None", "default": "None"}, {"name": "status", "type": "WorkflowStatus | None", "default": "None"}, {"name": "limit", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "list[WorkflowResult]", "description": "\n        List workflow executions.\n\n        Args:\n            workflow_id: Filter by workflow ID\n            status: Filter by status\n            limit: Maximum number of results\n\n        Returns:\n            List of workflow results\n        ", "signature": "async list_executions(self, workflow_id: str | None = None, status: WorkflowStatus | None = None, limit: int | None = None) -> list[WorkflowResult]"}, {"name": "health_check", "line": 270, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check on the workflow engine.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Manages the execution and control flow of workflows."}], "imports": [{"module": "datetime", "alias": null, "line": 9, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 10, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 13, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 13, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 13, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 14, "statement": "from pydantic import Field"}, {"module": "definition", "alias": null, "line": 16, "statement": "from definition import WorkflowDefinition"}, {"module": "state", "alias": null, "line": 17, "statement": "from state import StateManager"}, {"module": "steps", "alias": null, "line": 18, "statement": "from steps import StepExecutor"}], "constants": []}, "key_elements": [{"name": "from datetime import datetime", "type": "import", "line": 9}, {"name": "from enum import Enum", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 13}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 13}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 13}, {"name": "from pydantic import BaseModel", "type": "import", "line": 14}, {"name": "from pydantic import Field", "type": "import", "line": 14}, {"name": "from definition import WorkflowDefinition", "type": "import", "line": 16}, {"name": "from state import StateManager", "type": "import", "line": 17}, {"name": "from steps import StepExecutor", "type": "import", "line": 18}, {"name": "WorkflowStatus", "type": "class", "line": 23}, {"name": "WorkflowExecutionError", "type": "class", "line": 34}, {"name": "WorkflowConfig", "type": "class", "line": 40}, {"name": "WorkflowContext", "type": "class", "line": 56}, {"name": "WorkflowResult", "type": "class", "line": 67}, {"name": "WorkflowEngine", "type": "class", "line": 82}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "WorkflowStatus Class", "description": "Class WorkflowStatus definition and methods.", "line_start": 23, "line_end": 33}, {"name": "WorkflowExecutionError Class", "description": "Class WorkflowExecutionError definition and methods.", "line_start": 34, "line_end": 44}, {"name": "WorkflowConfig Class", "description": "Class WorkflowConfig definition and methods.", "line_start": 40, "line_end": 50}, {"name": "WorkflowContext Class", "description": "Class WorkflowContext definition and methods.", "line_start": 56, "line_end": 66}, {"name": "WorkflowResult Class", "description": "Class WorkflowResult definition and methods.", "line_start": 67, "line_end": 77}, {"name": "WorkflowEngine Class", "description": "Class WorkflowEngine definition and methods.", "line_start": 82, "line_end": 273}], "content_hash": "b0f68d440431f660efc55344776f2c71"}'
- path: libs/opsvi-core/opsvi_core/workflows/steps.py
  line_count: 426
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "steps.py", "description": "Python module with 0 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StepExecutionError", "line": 24, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error that occurs during the execution of a workflow step."}, {"name": "StepResult", "line": 30, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates the result of executing a workflow step, including status and output."}, {"name": "WorkflowStep", "line": 43, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}, {"name": "name", "type": "str"}], "is_async": false, "description": "Initialize the workflow step.", "signature": "__init__(self, step_id: str, name: str, **kwargs)"}, {"name": "execute", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Execute the step.\n\n        Args:\n            context: Execution context with variables and state\n\n        Returns:\n            Step output\n\n        Raises:\n            StepExecutionError: If execution fails\n        ", "signature": "async execute(self, context: dict[str, Any]) -> dict[str, Any]"}, {"name": "validate", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "\n        Validate step before execution.\n\n        Args:\n            context: Execution context\n\n        Returns:\n            True if valid, False otherwise\n        ", "signature": "async validate(self, context: dict[str, Any]) -> bool"}, {"name": "cleanup", "line": 81, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "\n        Clean up after step execution.\n\n        Args:\n            context: Execution context\n        ", "signature": "async cleanup(self, context: dict[str, Any]) -> None"}], "properties": [], "description": "Defines a generic step within a workflow, providing methods to execute and manage the step."}, {"name": "TaskStep", "line": 91, "inherits_from": ["WorkflowStep):"], "methods": [{"name": "__init__", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}, {"name": "name", "type": "str"}, {"name": "action", "type": "str"}, {"name": "parameters", "type": "dict[str, Any]", "default": "None"}], "is_async": false, "description": "Initialize the task step.", "signature": "__init__(self, step_id: str, name: str, action: str, parameters: dict[str, Any] = None, **kwargs)"}, {"name": "execute", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Execute the task step.", "signature": "async execute(self, context: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Represents a workflow step that performs a specific task or action."}, {"name": "ConditionStep", "line": 128, "inherits_from": ["WorkflowStep):"], "methods": [{"name": "__init__", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}, {"name": "name", "type": "str"}, {"name": "condition", "type": "str"}], "is_async": false, "description": "Initialize the condition step.", "signature": "__init__(self, step_id: str, name: str, condition: str, **kwargs)"}, {"name": "execute", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Execute the condition step.", "signature": "async execute(self, context: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Represents a workflow step that evaluates a condition to determine the next step."}, {"name": "WaitStep", "line": 156, "inherits_from": ["WorkflowStep):"], "methods": [{"name": "__init__", "line": 159, "parameters": [{"name": "self", "type": "self"}, {"name": "step_id", "type": "str"}, {"name": "name", "type": "str"}, {"name": "duration", "type": "float"}], "is_async": false, "description": "Initialize the wait step.", "signature": "__init__(self, step_id: str, name: str, duration: float, **kwargs)"}, {"name": "execute", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Execute the wait step.", "signature": "async execute(self, context: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Represents a workflow step that pauses execution for a specified duration or until a condition is met."}, {"name": "StepExecutor", "line": 180, "inherits_from": [], "methods": [{"name": "__init__", "line": 183, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "\"WorkflowConfig\"):"}], "is_async": false, "description": "Initialize the step executor.", "signature": "__init__(self, config: \"WorkflowConfig\"):)"}, {"name": "execute", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_definition", "type": "\"WorkflowDefinition\""}, {"name": "context", "type": "\"WorkflowContext\""}, {"name": "state_manager", "type": "\"StateManager\""}], "is_async": true, "return_type": "\"WorkflowResult\"", "description": "\n        Execute workflow steps.\n\n        Args:\n            workflow_definition: Workflow definition\n            context: Execution context\n            state_manager: State manager\n\n        Returns:\n            Workflow execution result\n        ", "signature": "async execute(self, workflow_definition: \"WorkflowDefinition\", context: \"WorkflowContext\", state_manager: \"StateManager\") -> \"WorkflowResult\""}, {"name": "_execute_step", "line": 267, "parameters": [{"name": "self", "type": "self"}, {"name": "step_def", "type": "\"StepDefinition\""}, {"name": "context", "type": "\"WorkflowContext\""}, {"name": "state_manager", "type": "\"StateManager\""}], "is_async": true, "return_type": "StepResult", "description": "\n        Execute a single step.\n\n        Args:\n            step_def: Step definition\n            context: Execution context\n            state_manager: State manager\n\n        Returns:\n            Step execution result\n        ", "signature": "async _execute_step(self, step_def: \"StepDefinition\", context: \"WorkflowContext\", state_manager: \"StateManager\") -> StepResult"}, {"name": "_determine_execution_order", "line": 385, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_definition", "type": "\"WorkflowDefinition\""}], "is_async": false, "return_type": "list[str]", "description": "\n        Determine the order of step execution based on dependencies.\n\n        Args:\n            workflow_definition: Workflow definition\n\n        Returns:\n            List of step IDs in execution order\n        ", "signature": "_determine_execution_order(self, workflow_definition: \"WorkflowDefinition\") -> list[str]"}], "properties": [], "description": "Manages the execution of workflow steps, handling sequencing, errors, and results."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}, {"module": "definition", "alias": null, "line": 17, "statement": "from definition import StepDefinition"}, {"module": "definition", "alias": null, "line": 17, "statement": "from definition import WorkflowDefinition"}, {"module": "engine", "alias": null, "line": 18, "statement": "from engine import WorkflowConfig"}, {"module": "engine", "alias": null, "line": 18, "statement": "from engine import WorkflowContext"}, {"module": "engine", "alias": null, "line": 18, "statement": "from engine import WorkflowResult"}, {"module": "state", "alias": null, "line": 19, "statement": "from state import StateManager"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 14}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "from definition import StepDefinition", "type": "import", "line": 17}, {"name": "from definition import WorkflowDefinition", "type": "import", "line": 17}, {"name": "from engine import WorkflowConfig", "type": "import", "line": 18}, {"name": "from engine import WorkflowContext", "type": "import", "line": 18}, {"name": "from engine import WorkflowResult", "type": "import", "line": 18}, {"name": "from state import StateManager", "type": "import", "line": 19}, {"name": "StepExecutionError", "type": "class", "line": 24}, {"name": "StepResult", "type": "class", "line": 30}, {"name": "WorkflowStep", "type": "class", "line": 43}, {"name": "TaskStep", "type": "class", "line": 91}, {"name": "ConditionStep", "type": "class", "line": 128}, {"name": "WaitStep", "type": "class", "line": 156}, {"name": "StepExecutor", "type": "class", "line": 180}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "StepExecutionError Class", "description": "Class StepExecutionError definition and methods.", "line_start": 24, "line_end": 34}, {"name": "StepResult Class", "description": "Class StepResult definition and methods.", "line_start": 30, "line_end": 40}, {"name": "WorkflowStep Class", "description": "Class WorkflowStep definition and methods.", "line_start": 43, "line_end": 84}, {"name": "TaskStep Class", "description": "Class TaskStep definition and methods.", "line_start": 91, "line_end": 110}, {"name": "ConditionStep Class", "description": "Class ConditionStep definition and methods.", "line_start": 128, "line_end": 139}, {"name": "WaitStep Class", "description": "Class WaitStep definition and methods.", "line_start": 156, "line_end": 167}, {"name": "StepExecutor Class", "description": "Class StepExecutor definition and methods.", "line_start": 180, "line_end": 388}], "content_hash": "5d48435028ecc78bff33a9987ae75678"}'
- path: libs/opsvi-core/opsvi_core/workflows/triggers.py
  line_count: 491
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "triggers.py", "description": "Python module with 0 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TriggerError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to trigger operations."}, {"name": "TriggerType", "line": 27, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "MANUAL", "line": 28, "type": ""}, {"name": "SCHEDULE", "line": 29, "type": ""}, {"name": "EVENT", "line": 30, "type": ""}, {"name": "WEBHOOK", "line": 31, "type": ""}, {"name": "CONDITION", "line": 32, "type": ""}], "description": "Defines various types of triggers available in the workflow system."}, {"name": "TriggerStatus", "line": 37, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "ACTIVE", "line": 38, "type": ""}, {"name": "INACTIVE", "line": 39, "type": ""}, {"name": "PAUSED", "line": 40, "type": ""}, {"name": "ERROR", "line": 41, "type": ""}], "description": "Represents the status states of a trigger."}, {"name": "TriggerDefinition", "line": 46, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds the definition and configuration details of a trigger."}, {"name": "TriggerEvent", "line": 59, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents an event that can activate a trigger."}, {"name": "WorkflowTrigger", "line": 70, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "definition", "type": "TriggerDefinition):"}], "is_async": false, "description": "Initialize the trigger.", "signature": "__init__(self, definition: TriggerDefinition):)"}, {"name": "start", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the trigger.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 84, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the trigger.", "signature": "async stop(self) -> None"}, {"name": "is_active", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if trigger is active.", "signature": "async is_active(self) -> bool"}, {"name": "handle_event", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "TriggerEvent"}], "is_async": true, "return_type": "None", "description": "Handle trigger event.", "signature": "async handle_event(self, event: TriggerEvent) -> None"}], "properties": [], "description": "Base class for workflow triggers, providing core trigger functionality."}, {"name": "ManualTrigger", "line": 98, "inherits_from": ["WorkflowTrigger):"], "methods": [{"name": "start", "line": 101, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the manual trigger.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the manual trigger.", "signature": "async stop(self) -> None"}, {"name": "is_active", "line": 111, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if manual trigger is active.", "signature": "async is_active(self) -> bool"}, {"name": "trigger_workflow", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "variables", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "TriggerEvent", "description": "Manually trigger workflow execution.", "signature": "async trigger_workflow(self, variables: dict[str, Any] | None = None) -> TriggerEvent"}], "properties": [], "description": "Handles triggers that are manually initiated by users."}, {"name": "ScheduleTrigger", "line": 134, "inherits_from": ["WorkflowTrigger):"], "methods": [{"name": "__init__", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "definition", "type": "TriggerDefinition):"}], "is_async": false, "description": "Initialize the schedule trigger.", "signature": "__init__(self, definition: TriggerDefinition):)"}, {"name": "start", "line": 143, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the schedule trigger.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 152, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the schedule trigger.", "signature": "async stop(self) -> None"}, {"name": "is_active", "line": 163, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if schedule trigger is active.", "signature": "async is_active(self) -> bool"}, {"name": "_schedule_loop", "line": 169, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Main schedule loop.", "signature": "async _schedule_loop(self) -> None"}, {"name": "_should_trigger", "line": 194, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if trigger should fire based on schedule.", "signature": "async _should_trigger(self) -> bool"}], "properties": [], "description": "Manages triggers that activate based on a scheduled time or interval."}, {"name": "EventTrigger", "line": 201, "inherits_from": ["WorkflowTrigger):"], "methods": [{"name": "__init__", "line": 204, "parameters": [{"name": "self", "type": "self"}, {"name": "definition", "type": "TriggerDefinition):"}], "is_async": false, "description": "Initialize the event trigger.", "signature": "__init__(self, definition: TriggerDefinition):)"}, {"name": "start", "line": 211, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the event trigger.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 220, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the event trigger.", "signature": "async stop(self) -> None"}, {"name": "is_active", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if event trigger is active.", "signature": "async is_active(self) -> bool"}, {"name": "receive_event", "line": 237, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "TriggerEvent"}], "is_async": true, "return_type": "None", "description": "Receive an event for processing.", "signature": "async receive_event(self, event: TriggerEvent) -> None"}, {"name": "_event_loop", "line": 242, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Main event processing loop.", "signature": "async _event_loop(self) -> None"}, {"name": "_matches_patterns", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "TriggerEvent"}], "is_async": true, "return_type": "bool", "description": "Check if event matches trigger patterns.", "signature": "async _matches_patterns(self, event: TriggerEvent) -> bool"}, {"name": "_event_matches_pattern", "line": 273, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "TriggerEvent"}, {"name": "pattern", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Check if event matches a specific pattern.", "signature": "_event_matches_pattern(self, event: TriggerEvent, pattern: dict[str, Any]) -> bool"}], "properties": [], "description": "Handles triggers that respond to specific system or external events."}, {"name": "WebhookTrigger", "line": 288, "inherits_from": ["WorkflowTrigger):"], "methods": [{"name": "__init__", "line": 291, "parameters": [{"name": "self", "type": "self"}, {"name": "definition", "type": "TriggerDefinition):"}], "is_async": false, "description": "Initialize the webhook trigger.", "signature": "__init__(self, definition: TriggerDefinition):)"}, {"name": "start", "line": 298, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the webhook trigger.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 303, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the webhook trigger.", "signature": "async stop(self) -> None"}, {"name": "is_active", "line": 308, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Check if webhook trigger is active.", "signature": "async is_active(self) -> bool"}, {"name": "handle_webhook_request", "line": 312, "parameters": [{"name": "self", "type": "self"}, {"name": "method", "type": "str"}, {"name": "path", "type": "str"}, {"name": "data", "type": "dict[str, Any]"}], "is_async": true, "return_type": "TriggerEvent", "description": "Handle incoming webhook request.", "signature": "async handle_webhook_request(self, method: str, path: str, data: dict[str, Any]) -> TriggerEvent"}], "properties": [], "description": "Manages triggers activated via incoming webhook requests."}, {"name": "TriggerManager", "line": 334, "inherits_from": [], "methods": [{"name": "__init__", "line": 337, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the trigger manager.", "signature": "__init__(self)"}, {"name": "register_trigger", "line": 347, "parameters": [{"name": "self", "type": "self"}, {"name": "definition", "type": "TriggerDefinition"}], "is_async": false, "return_type": "WorkflowTrigger", "description": "\n        Register a workflow trigger.\n\n        Args:\n            definition: Trigger definition\n\n        Returns:\n            Created trigger instance\n\n        Raises:\n            TriggerError: If trigger type is not supported\n        ", "signature": "register_trigger(self, definition: TriggerDefinition) -> WorkflowTrigger"}, {"name": "get_trigger", "line": 370, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger_id", "type": "str"}], "is_async": false, "return_type": "WorkflowTrigger | None", "description": "\n        Get a trigger by ID.\n\n        Args:\n            trigger_id: ID of the trigger to get\n\n        Returns:\n            Trigger instance if found, None otherwise\n        ", "signature": "get_trigger(self, trigger_id: str) -> WorkflowTrigger | None"}, {"name": "list_triggers", "line": 382, "parameters": [{"name": "self", "type": "self"}, {"name": "workflow_id", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "list[WorkflowTrigger]", "description": "\n        List all triggers.\n\n        Args:\n            workflow_id: Filter by workflow ID\n\n        Returns:\n            List of trigger instances\n        ", "signature": "list_triggers(self, workflow_id: str | None = None = None) -> list[WorkflowTrigger]"}, {"name": "start_trigger", "line": 397, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "\n        Start a trigger.\n\n        Args:\n            trigger_id: ID of the trigger to start\n\n        Raises:\n            TriggerError: If trigger not found\n        ", "signature": "async start_trigger(self, trigger_id: str) -> None"}, {"name": "stop_trigger", "line": 413, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger_id", "type": "str"}], "is_async": true, "return_type": "None", "description": "\n        Stop a trigger.\n\n        Args:\n            trigger_id: ID of the trigger to stop\n\n        Raises:\n            TriggerError: If trigger not found\n        ", "signature": "async stop_trigger(self, trigger_id: str) -> None"}, {"name": "start_all_triggers", "line": 429, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start all registered triggers.", "signature": "async start_all_triggers(self) -> None"}, {"name": "stop_all_triggers", "line": 437, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop all registered triggers.", "signature": "async stop_all_triggers(self) -> None"}, {"name": "unregister_trigger", "line": 445, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger_id", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Unregister a trigger.\n\n        Args:\n            trigger_id: ID of the trigger to unregister\n\n        Returns:\n            True if unregistered, False if not found\n        ", "signature": "unregister_trigger(self, trigger_id: str) -> bool"}, {"name": "receive_event", "line": 463, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "TriggerEvent"}], "is_async": true, "return_type": "None", "description": "\n        Receive an event for processing by event triggers.\n\n        Args:\n            event: Event to process\n        ", "signature": "async receive_event(self, event: TriggerEvent) -> None"}, {"name": "health_check", "line": 474, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check on all triggers.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Coordinates creation, management, and lifecycle of all triggers."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 11, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from datetime import datetime", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "from pydantic import Field", "type": "import", "line": 16}, {"name": "TriggerError", "type": "class", "line": 21}, {"name": "TriggerType", "type": "class", "line": 27}, {"name": "TriggerStatus", "type": "class", "line": 37}, {"name": "TriggerDefinition", "type": "class", "line": 46}, {"name": "TriggerEvent", "type": "class", "line": 59}, {"name": "WorkflowTrigger", "type": "class", "line": 70}, {"name": "ManualTrigger", "type": "class", "line": 98}, {"name": "ScheduleTrigger", "type": "class", "line": 134}, {"name": "EventTrigger", "type": "class", "line": 201}, {"name": "WebhookTrigger", "type": "class", "line": 288}, {"name": "TriggerManager", "type": "class", "line": 334}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "TriggerError Class", "description": "Class TriggerError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "TriggerType Class", "description": "Class TriggerType definition and methods.", "line_start": 27, "line_end": 37}, {"name": "TriggerStatus Class", "description": "Class TriggerStatus definition and methods.", "line_start": 37, "line_end": 47}, {"name": "TriggerDefinition Class", "description": "Class TriggerDefinition definition and methods.", "line_start": 46, "line_end": 56}, {"name": "TriggerEvent Class", "description": "Class TriggerEvent definition and methods.", "line_start": 59, "line_end": 69}, {"name": "WorkflowTrigger Class", "description": "Class WorkflowTrigger definition and methods.", "line_start": 70, "line_end": 96}, {"name": "ManualTrigger Class", "description": "Class ManualTrigger definition and methods.", "line_start": 98, "line_end": 118}, {"name": "ScheduleTrigger Class", "description": "Class ScheduleTrigger definition and methods.", "line_start": 134, "line_end": 197}, {"name": "EventTrigger Class", "description": "Class EventTrigger definition and methods.", "line_start": 201, "line_end": 276}, {"name": "WebhookTrigger Class", "description": "Class WebhookTrigger definition and methods.", "line_start": 288, "line_end": 315}, {"name": "TriggerManager Class", "description": "Class TriggerManager definition and methods.", "line_start": 334, "line_end": 477}], "content_hash": "01cb99d21f0fc525a703e6131ed6cf05"}'
- path: libs/opsvi-core/opsvi_core/utils/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "29d11eaf27ab1c7fbe78c43cef6e2019"}'
- path: libs/opsvi-core/opsvi_core/utils/base.py
  line_count: 222
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 8 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "retry_on_failure", "line": 24, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "delay", "type": "float", "default": "1.0"}, {"name": "backoff", "type": "float", "default": "2.0"}], "is_async": false, "description": "Decorator that retries a function upon failure with configurable attempts, delay, and backoff.", "signature": "retry_on_failure(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0)"}, {"name": "timing_decorator", "line": 81, "parameters": [{"name": "func", "type": "Callable[..., T]"}], "is_async": false, "return_type": "Callable[..., T]", "description": "Decorator that measures and logs the execution time of a function.", "signature": "timing_decorator(func: Callable[..., T]) -> Callable[..., T]"}, {"name": "safe_dict_get", "line": 162, "parameters": [{"name": "data", "type": "dict[str, Any], path: str, default: Any = None"}, {"name": "path", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Safely retrieves a nested value from a dictionary using a dot-separated path, returning a default if not found.", "signature": "safe_dict_get(data: dict[str, Any], path: str, default: Any = None, path: str, default: Any = None, default: Any = None = None) -> Any"}, {"name": "merge_dicts", "line": 176, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Merges multiple dictionaries into one, combining their keys and values.", "signature": "merge_dicts(*dicts: dict[str, Any]) -> dict[str, Any]"}, {"name": "chunk_list", "line": 185, "parameters": [{"name": "lst", "type": "list[T], chunk_size: int"}, {"name": "chunk_size", "type": "int"}], "is_async": false, "return_type": "list[list[T]]", "description": "Splits a list into smaller lists (chunks) of a specified size.", "signature": "chunk_list(lst: list[T], chunk_size: int, chunk_size: int) -> list[list[T]]"}, {"name": "gather_with_limit", "line": 190, "parameters": [{"name": "limit", "type": "int, *coroutines"}], "is_async": true, "return_type": "list[Any]", "description": "Asynchronously runs multiple coroutines with a concurrency limit, gathering their results.", "signature": "async gather_with_limit(limit: int, *coroutines, *coroutines) -> list[Any]"}, {"name": "format_bytes", "line": 201, "parameters": [{"name": "bytes_count", "type": "int"}], "is_async": false, "return_type": "str", "description": "Converts a byte count into a human-readable string with appropriate units.", "signature": "format_bytes(bytes_count: int) -> str"}, {"name": "format_duration", "line": 210, "parameters": [{"name": "seconds", "type": "float"}], "is_async": false, "return_type": "str", "description": "Formats a duration in seconds into a human-readable string.", "signature": "format_duration(seconds: float) -> str"}], "classes": [{"name": "AsyncLock", "line": 117, "inherits_from": [], "methods": [{"name": "__init__", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "__aenter__", "line": 123, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "signature": "async __aenter__(self)"}, {"name": "__aexit__", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": true, "signature": "async __aexit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Asynchronous lock for managing concurrent access to shared resources."}, {"name": "RateLimiter", "line": 131, "inherits_from": [], "methods": [{"name": "__init__", "line": 134, "parameters": [{"name": "self", "type": "self"}, {"name": "max_calls", "type": "int"}, {"name": "time_window", "type": "float):"}], "is_async": false, "signature": "__init__(self, max_calls: int, time_window: float):)"}, {"name": "acquire", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Acquire permission to make a call.", "signature": "async acquire(self) -> bool"}, {"name": "wait_and_acquire", "line": 156, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Wait until permission is available and acquire it.", "signature": "async wait_and_acquire(self) -> None"}], "properties": [], "description": "Limits the rate of operations to a specified number per time interval."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "functools", "alias": null, "line": 12, "statement": "import functools"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}], "constants": [{"name": "T", "line": 21, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "functools", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "T", "type": "constant", "line": 21}, {"name": "retry_on_failure", "type": "function", "line": 24}, {"name": "timing_decorator", "type": "function", "line": 81}, {"name": "AsyncLock", "type": "class", "line": 117}, {"name": "RateLimiter", "type": "class", "line": 131}, {"name": "safe_dict_get", "type": "function", "line": 162}, {"name": "merge_dicts", "type": "function", "line": 176}, {"name": "chunk_list", "type": "function", "line": 185}, {"name": "gather_with_limit", "type": "function", "line": 190}, {"name": "format_bytes", "type": "function", "line": 201}, {"name": "format_duration", "type": "function", "line": 210}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "retry_on_failure Function", "description": "Function retry_on_failure implementation.", "line_start": 24, "line_end": 80}, {"name": "timing_decorator Function", "description": "Function timing_decorator implementation.", "line_start": 81, "line_end": 116}, {"name": "safe_dict_get Function", "description": "Function safe_dict_get implementation.", "line_start": 162, "line_end": 175}, {"name": "merge_dicts Function", "description": "Function merge_dicts implementation.", "line_start": 176, "line_end": 184}, {"name": "chunk_list Function", "description": "Function chunk_list implementation.", "line_start": 185, "line_end": 189}, {"name": "gather_with_limit Function", "description": "Function gather_with_limit implementation.", "line_start": 190, "line_end": 200}, {"name": "format_bytes Function", "description": "Function format_bytes implementation.", "line_start": 201, "line_end": 209}, {"name": "format_duration Function", "description": "Function format_duration implementation.", "line_start": 210, "line_end": 215}, {"name": "AsyncLock Class", "description": "Class AsyncLock definition and methods.", "line_start": 117, "line_end": 130}, {"name": "RateLimiter Class", "description": "Class RateLimiter definition and methods.", "line_start": 131, "line_end": 159}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 21, "line_end": 21}], "content_hash": "96df09f5c41de891d989c4aded4d9e92"}'
- path: libs/opsvi-core/opsvi_core/tests/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "6bb884eafdb2e05f20c3306f0f84b93c"}'
- path: libs/opsvi-core/opsvi_core/api/__init__.py
  line_count: 39
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import get_logger"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import APIAuthenticator"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import APIConfig"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import APIEndpoint"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import APIError"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import APIServer"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import JWTAuthenticator"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import RateLimiter"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import RateLimitExceeded"}, {"module": "base", "alias": null, "line": 16, "statement": "from base import RateLimitMiddleware"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 9}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 9}, {"name": "from base import APIAuthenticator", "type": "import", "line": 16}, {"name": "from base import APIConfig", "type": "import", "line": 16}, {"name": "from base import APIEndpoint", "type": "import", "line": 16}, {"name": "from base import APIError", "type": "import", "line": 16}, {"name": "from base import APIServer", "type": "import", "line": 16}, {"name": "from base import JWTAuthenticator", "type": "import", "line": 16}, {"name": "from base import RateLimiter", "type": "import", "line": 16}, {"name": "from base import RateLimitExceeded", "type": "import", "line": 16}, {"name": "from base import RateLimitMiddleware", "type": "import", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}], "content_hash": "fa145261eaa5ec1e97dc6c8cb0aa3f30"}'
- path: libs/opsvi-core/opsvi_core/api/base.py
  line_count: 267
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "APIError", "line": 26, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors returned by the API."}, {"name": "RateLimitExceeded", "line": 32, "inherits_from": ["APIError):"], "methods": [], "properties": [], "description": "Exception raised when the API rate limit is exceeded."}, {"name": "APIConfig", "line": 38, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for the API client."}, {"name": "RateLimiter", "line": 56, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "requests_per_minute", "type": "int", "default": "100"}], "is_async": false, "signature": "__init__(self, requests_per_minute: int = 100)"}, {"name": "is_allowed", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "client_id", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if request is allowed based on rate limit.", "signature": "is_allowed(self, client_id: str) -> bool"}, {"name": "get_client_id", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Request"}], "is_async": false, "return_type": "str", "description": "Extract client identifier from request.", "signature": "get_client_id(self, request: Request) -> str"}], "properties": [], "description": "Manages and enforces API request rate limits."}, {"name": "RateLimitMiddleware", "line": 91, "inherits_from": ["BaseHTTPMiddleware):"], "methods": [{"name": "__init__", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "app", "type": "unknown"}, {"name": "rate_limiter", "type": "RateLimiter):"}], "is_async": false, "signature": "__init__(self, app, rate_limiter: RateLimiter):)"}, {"name": "dispatch", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Request, call_next: Callable"}, {"name": "call_next", "type": "Callable"}], "is_async": true, "return_type": "Response", "description": "Process request with rate limiting.", "signature": "async dispatch(self, request: Request, call_next: Callable, call_next: Callable) -> Response"}], "properties": [], "description": "Middleware that applies rate limiting to incoming API requests."}, {"name": "APIAuthenticator", "line": 112, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "authenticate", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Request"}], "is_async": true, "return_type": "dict[str, Any] | None", "description": "Authenticate the request and return user info.", "signature": "async authenticate(self, request: Request) -> dict[str, Any] | None"}, {"name": "authorize", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "user_info", "type": "dict[str, Any]"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Authorize user access to resource.", "signature": "async authorize(self, user_info: dict[str, Any], resource: str, action: str) -> bool"}], "properties": [], "description": "Handles authentication processes for API access."}, {"name": "JWTAuthenticator", "line": 128, "inherits_from": ["APIAuthenticator):"], "methods": [{"name": "__init__", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_key", "type": "str):"}], "is_async": false, "signature": "__init__(self, secret_key: str):)"}, {"name": "authenticate", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Request"}], "is_async": true, "return_type": "dict[str, Any] | None", "description": "Authenticate using JWT token.", "signature": "async authenticate(self, request: Request) -> dict[str, Any] | None"}, {"name": "authorize", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "user_info", "type": "dict[str, Any]"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Authorize user access.", "signature": "async authorize(self, user_info: dict[str, Any], resource: str, action: str) -> bool"}], "properties": [], "description": "Manages JWT token creation and validation for API authentication."}, {"name": "APIEndpoint", "line": 160, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 163, "parameters": [{"name": "self", "type": "self"}, {"name": "path", "type": "str"}, {"name": "methods", "type": "list[str]):"}], "is_async": false, "signature": "__init__(self, path: str, methods: list[str]):)"}, {"name": "register_handler", "line": 169, "parameters": [{"name": "self", "type": "self"}, {"name": "method", "type": "str, handler: Callable"}, {"name": "handler", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Register a handler for a specific HTTP method.", "signature": "register_handler(self, method: str, handler: Callable, handler: Callable) -> None"}, {"name": "handle_request", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "Request"}], "is_async": true, "return_type": "Any", "description": "Handle incoming request.", "signature": "async handle_request(self, request: Request) -> Any"}], "properties": [], "description": "Defines and manages individual API endpoints."}, {"name": "APIServer", "line": 187, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 190, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "APIConfig):"}], "is_async": false, "signature": "__init__(self, config: APIConfig):)"}, {"name": "_setup_middleware", "line": 207, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup middleware.", "signature": "_setup_middleware(self) -> None"}, {"name": "_setup_routes", "line": 221, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup default routes.", "signature": "_setup_routes(self) -> None"}, {"name": "add_endpoint", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "endpoint", "type": "APIEndpoint"}], "is_async": false, "return_type": "None", "description": "Add an endpoint to the API.", "signature": "add_endpoint(self, endpoint: APIEndpoint) -> None"}, {"name": "start", "line": 249, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the API server.", "signature": "async start(self) -> None"}, {"name": "_start", "line": 262, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the API server.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 267, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the API server.", "signature": "async _stop(self) -> None"}], "properties": [], "description": "Implements the API server handling requests and responses."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "fastapi", "alias": null, "line": 16, "statement": "from fastapi import FastAPI"}, {"module": "fastapi", "alias": null, "line": 16, "statement": "from fastapi import HTTPException"}, {"module": "fastapi", "alias": null, "line": 16, "statement": "from fastapi import Request"}, {"module": "fastapi", "alias": null, "line": 16, "statement": "from fastapi import Response"}, {"module": "fastapi", "alias": null, "line": 16, "statement": "from fastapi import status"}, {"module": "fastapi.middleware.cors", "alias": null, "line": 17, "statement": "from fastapi.middleware.cors import CORSMiddleware"}, {"module": "fastapi.security", "alias": null, "line": 18, "statement": "from fastapi.security import HTTPBearer"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 19, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 20, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 20, "statement": "from pydantic import Field"}, {"module": "starlette.middleware.base", "alias": null, "line": 21, "statement": "from starlette.middleware.base import BaseHTTPMiddleware"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from datetime import timedelta", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from fastapi import FastAPI", "type": "import", "line": 16}, {"name": "from fastapi import HTTPException", "type": "import", "line": 16}, {"name": "from fastapi import Request", "type": "import", "line": 16}, {"name": "from fastapi import Response", "type": "import", "line": 16}, {"name": "from fastapi import status", "type": "import", "line": 16}, {"name": "from fastapi.middleware.cors import CORSMiddleware", "type": "import", "line": 17}, {"name": "from fastapi.security import HTTPBearer", "type": "import", "line": 18}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 19}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 19}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 19}, {"name": "from pydantic import BaseModel", "type": "import", "line": 20}, {"name": "from pydantic import Field", "type": "import", "line": 20}, {"name": "from starlette.middleware.base import BaseHTTPMiddleware", "type": "import", "line": 21}, {"name": "APIError", "type": "class", "line": 26}, {"name": "RateLimitExceeded", "type": "class", "line": 32}, {"name": "APIConfig", "type": "class", "line": 38}, {"name": "RateLimiter", "type": "class", "line": 56}, {"name": "RateLimitMiddleware", "type": "class", "line": 91}, {"name": "APIAuthenticator", "type": "class", "line": 112}, {"name": "JWTAuthenticator", "type": "class", "line": 128}, {"name": "APIEndpoint", "type": "class", "line": 160}, {"name": "APIServer", "type": "class", "line": 187}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 21}, {"name": "APIError Class", "description": "Class APIError definition and methods.", "line_start": 26, "line_end": 36}, {"name": "RateLimitExceeded Class", "description": "Class RateLimitExceeded definition and methods.", "line_start": 32, "line_end": 42}, {"name": "APIConfig Class", "description": "Class APIConfig definition and methods.", "line_start": 38, "line_end": 48}, {"name": "RateLimiter Class", "description": "Class RateLimiter definition and methods.", "line_start": 56, "line_end": 88}, {"name": "RateLimitMiddleware Class", "description": "Class RateLimitMiddleware definition and methods.", "line_start": 91, "line_end": 101}, {"name": "APIAuthenticator Class", "description": "Class APIAuthenticator definition and methods.", "line_start": 112, "line_end": 124}, {"name": "JWTAuthenticator Class", "description": "Class JWTAuthenticator definition and methods.", "line_start": 128, "line_end": 155}, {"name": "APIEndpoint Class", "description": "Class APIEndpoint definition and methods.", "line_start": 160, "line_end": 176}, {"name": "APIServer Class", "description": "Class APIServer definition and methods.", "line_start": 187, "line_end": 270}], "content_hash": "9359d34cf8266d3dad623a20c918a6a3"}'
- path: libs/opsvi-core/opsvi_core/events/in_memory.py
  line_count: 71
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "in_memory.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "InMemoryEventBus", "line": 24, "inherits_from": ["EventBus):"], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "broker", "type": "InMemoryBroker | None = None", "default": "None"}], "is_async": false, "return_type": "None", "signature": "__init__(self, broker: InMemoryBroker | None = None = None) -> None"}, {"name": "_start", "line": 34, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "signature": "async _stop(self) -> None"}, {"name": "publish", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Publish an event to all subscribers.", "signature": "async publish(self, event: Event) -> None"}, {"name": "subscribe", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "event_name", "type": "str, handler: Callable[[Event], Any]"}, {"name": "handler", "type": "Callable[[Event], Any]"}], "is_async": true, "return_type": "None", "description": "Subscribe to events of a specific type.", "signature": "async subscribe(self, event_name: str, handler: Callable[[Event], Any], handler: Callable[[Event], Any]) -> None"}], "properties": [], "description": "A simple event bus implementation that manages event publishing and subscription in memory."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections", "alias": null, "line": 11, "statement": "from collections import defaultdict"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "messaging", "alias": null, "line": 17, "statement": "from messaging import InMemoryBroker"}, {"module": "messaging", "alias": null, "line": 17, "statement": "from messaging import Message"}, {"module": "messaging", "alias": null, "line": 17, "statement": "from messaging import MessageRoute"}, {"module": "messaging.base", "alias": null, "line": 18, "statement": "from messaging.base import QoSLevel"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import Event"}, {"module": "base", "alias": null, "line": 19, "statement": "from base import EventBus"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections import defaultdict", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from messaging import InMemoryBroker", "type": "import", "line": 17}, {"name": "from messaging import Message", "type": "import", "line": 17}, {"name": "from messaging import MessageRoute", "type": "import", "line": 17}, {"name": "from messaging.base import QoSLevel", "type": "import", "line": 18}, {"name": "from base import Event", "type": "import", "line": 19}, {"name": "from base import EventBus", "type": "import", "line": 19}, {"name": "InMemoryEventBus", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "InMemoryEventBus Class", "description": "Class InMemoryEventBus definition and methods.", "line_start": 24, "line_end": 54}], "content_hash": "5e7e7a12e6be44de85aaf94b2c923a52"}'
- path: libs/opsvi-core/opsvi_core/events/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "c4a416b44db66250a80358fe8a2cbcf9"}'
- path: libs/opsvi-core/opsvi_core/events/base.py
  line_count: 194
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "EventError", "line": 24, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to event processing."}, {"name": "Event", "line": 31, "inherits_from": [], "methods": [], "properties": [], "description": "Defines the structure and properties of an event."}, {"name": "EventHandler", "line": 44, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Handles the processing of events."}, {"name": "EventBus", "line": 54, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "publish", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Publish an event to all subscribers.", "signature": "async publish(self, event: Event) -> None"}, {"name": "subscribe", "line": 75, "parameters": [{"name": "self", "type": "self"}, {"name": "event_name", "type": "str, handler: Callable[[Event], Any]"}, {"name": "handler", "type": "Callable[[Event], Any]"}], "is_async": true, "return_type": "None", "description": "Subscribe to events of a specific type.", "signature": "async subscribe(self, event_name: str, handler: Callable[[Event], Any], handler: Callable[[Event], Any]) -> None"}, {"name": "_handle_event", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Handle an event by calling all registered handlers.", "signature": "async _handle_event(self, event: Event) -> None"}, {"name": "_store_event", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": false, "return_type": "None", "description": "Store event in history for replay capabilities.", "signature": "_store_event(self, event: Event) -> None"}], "properties": [], "description": "Manages event registration, dispatching, and listener management."}, {"name": "EventFilter", "line": 116, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 119, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "add_filter", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, filter_func: Callable[[Event], bool]"}, {"name": "filter_func", "type": "Callable[[Event], bool]"}], "is_async": false, "return_type": "None", "description": "Add an event filter.", "signature": "add_filter(self, name: str, filter_func: Callable[[Event], bool], filter_func: Callable[[Event], bool]) -> None"}, {"name": "remove_filter", "line": 128, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Remove an event filter.", "signature": "remove_filter(self, name: str) -> None"}, {"name": "should_process", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": false, "return_type": "bool", "description": "Check if an event should be processed based on filters.", "signature": "should_process(self, event: Event) -> bool"}], "properties": [], "description": "Filters events based on specified criteria."}, {"name": "EventReplay", "line": 149, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "event_bus", "type": "EventBus):"}], "is_async": false, "signature": "__init__(self, event_bus: EventBus):)"}, {"name": "replay_events", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "event_types", "type": "list[str] | None", "default": "None"}, {"name": "since", "type": "datetime | None", "default": "None"}], "is_async": true, "return_type": "None", "description": "Replay events from history.", "signature": "async replay_events(self, event_types: list[str] | None = None, since: datetime | None = None) -> None"}, {"name": "store_for_replay", "line": 177, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": false, "return_type": "None", "description": "Store event for future replay.", "signature": "store_for_replay(self, event: Event) -> None"}, {"name": "replay_buffer", "line": 184, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Replay events from the replay buffer.", "signature": "async replay_buffer(self) -> None"}], "properties": [], "description": "Replays past events for event sourcing or debugging purposes."}], "imports": [{"module": "uuid", "alias": null, "line": 11, "statement": "import uuid"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 15, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 18, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 19, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "uuid", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 18}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 18}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 18}, {"name": "from pydantic import BaseModel", "type": "import", "line": 19}, {"name": "EventError", "type": "class", "line": 24}, {"name": "Event", "type": "class", "line": 31}, {"name": "EventHandler", "type": "class", "line": 44}, {"name": "EventBus", "type": "class", "line": 54}, {"name": "EventFilter", "type": "class", "line": 116}, {"name": "EventReplay", "type": "class", "line": 149}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "EventError Class", "description": "Class EventError definition and methods.", "line_start": 24, "line_end": 34}, {"name": "Event Class", "description": "Class Event definition and methods.", "line_start": 31, "line_end": 41}, {"name": "EventHandler Class", "description": "Class EventHandler definition and methods.", "line_start": 44, "line_end": 54}, {"name": "EventBus Class", "description": "Class EventBus definition and methods.", "line_start": 54, "line_end": 111}, {"name": "EventFilter Class", "description": "Class EventFilter definition and methods.", "line_start": 116, "line_end": 136}, {"name": "EventReplay Class", "description": "Class EventReplay definition and methods.", "line_start": 149, "line_end": 187}], "content_hash": "521615e4a80b5a293428dcf4cf1704bc"}'
- path: libs/opsvi-core/opsvi_core/security/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "5bf2108ffa4bdbf40d914bc9c24e47a6"}'
- path: libs/opsvi-core/opsvi_core/security/auth.py
  line_count: 164
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "auth.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 155, "parameters": [{"name": "data", "type": "str, max_length: int = 1000"}, {"name": "max_length", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "str", "description": "Cleans and truncates input string to a specified maximum length.", "signature": "sanitize_input(data: str, max_length: int = 1000, max_length: int = 1000 = 1000) -> str"}], "classes": [{"name": "AuthConfig", "line": 24, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for authentication."}, {"name": "TokenPayload", "line": 34, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the data contained within an authentication token."}, {"name": "AuthManager", "line": 44, "inherits_from": [], "methods": [{"name": "__init__", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AuthConfig):"}], "is_async": false, "signature": "__init__(self, config: AuthConfig):)"}, {"name": "generate_jwt", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, email: str, roles: list[str]"}, {"name": "email", "type": "str, roles: list[str]"}, {"name": "roles", "type": "list[str]"}], "is_async": false, "return_type": "str", "description": "Generate a JWT token for the user.", "signature": "generate_jwt(self, user_id: str, email: str, roles: list[str], email: str, roles: list[str], roles: list[str]) -> str"}, {"name": "validate_jwt", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "token", "type": "str"}], "is_async": false, "return_type": "TokenPayload", "description": "Validate and decode a JWT token.", "signature": "validate_jwt(self, token: str) -> TokenPayload"}, {"name": "generate_api_key", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"opsvi\"", "default": "opsvi"}], "is_async": false, "return_type": "str", "description": "Generate a secure API key.", "signature": "generate_api_key(self, prefix: str = \"opsvi\" = opsvi) -> str"}, {"name": "hash_api_key", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, salt: str | None = None"}, {"name": "salt", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Hash an API key for secure storage.", "signature": "hash_api_key(self, api_key: str, salt: str | None = None, salt: str | None = None = None) -> tuple[str, str]"}, {"name": "verify_api_key", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, stored_hash: str, salt: str"}, {"name": "stored_hash", "type": "str, salt: str"}, {"name": "salt", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verify an API key against its stored hash.", "signature": "verify_api_key(self, api_key: str, stored_hash: str, salt: str, stored_hash: str, salt: str, salt: str) -> bool"}, {"name": "encrypt_data", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Encrypt sensitive data.", "signature": "encrypt_data(self, data: str) -> str"}, {"name": "decrypt_data", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Decrypt sensitive data.", "signature": "decrypt_data(self, encrypted_data: str) -> str"}, {"name": "check_permission", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "user_roles", "type": "list[str], required_role: str"}, {"name": "required_role", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if user has required permission.", "signature": "check_permission(self, user_roles: list[str], required_role: str, required_role: str) -> bool"}, {"name": "require_permission", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "user_roles", "type": "list[str], required_role: str"}, {"name": "required_role", "type": "str"}], "is_async": false, "return_type": "None", "description": "Require user to have specific permission or raise exception.", "signature": "require_permission(self, user_roles: list[str], required_role: str, required_role: str) -> None"}], "properties": [], "description": "Manages authentication processes including token creation, validation, and user sessions."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "secrets", "alias": null, "line": 11, "statement": "import secrets"}, {"module": "jwt", "alias": null, "line": 14, "statement": "import jwt"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import timedelta"}, {"module": "cryptography.fernet", "alias": null, "line": 15, "statement": "from cryptography.fernet import Fernet"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}, {"module": "core.exceptions", "alias": null, "line": 18, "statement": "from core.exceptions import AuthenticationError"}, {"module": "core.exceptions", "alias": null, "line": 18, "statement": "from core.exceptions import AuthorizationError"}, {"module": "core.logging", "alias": null, "line": 19, "statement": "from core.logging import get_logger"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "secrets", "type": "import", "line": 11}, {"name": "jwt", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 12}, {"name": "from datetime import timedelta", "type": "import", "line": 12}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "from core.exceptions import AuthenticationError", "type": "import", "line": 18}, {"name": "from core.exceptions import AuthorizationError", "type": "import", "line": 18}, {"name": "from core.logging import get_logger", "type": "import", "line": 19}, {"name": "AuthConfig", "type": "class", "line": 24}, {"name": "TokenPayload", "type": "class", "line": 34}, {"name": "AuthManager", "type": "class", "line": 44}, {"name": "sanitize_input", "type": "function", "line": 155}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 155, "line_end": 160}, {"name": "AuthConfig Class", "description": "Class AuthConfig definition and methods.", "line_start": 24, "line_end": 34}, {"name": "TokenPayload Class", "description": "Class TokenPayload definition and methods.", "line_start": 34, "line_end": 44}, {"name": "AuthManager Class", "description": "Class AuthManager definition and methods.", "line_start": 44, "line_end": 150}], "content_hash": "fed215bc5a2a9e79d06f4bd738638d71"}'
- path: libs/opsvi-core/opsvi_core/resilience/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "df244afd0d46c28c7574dcccddf030ae"}'
- path: libs/opsvi-core/opsvi_core/resilience/circuit_breaker.py
  line_count: 217
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "circuit_breaker.py", "description": "Python module with 1 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "circuit_breaker", "line": 210, "parameters": [{"name": "name", "type": "str"}, {"name": "config", "type": "CircuitBreakerConfig | None", "default": "None"}], "is_async": false, "description": "Decorator to apply circuit breaker behavior to a function, managing failures based on the given configuration.", "signature": "circuit_breaker(name: str, config: CircuitBreakerConfig | None = None)"}], "classes": [{"name": "CircuitState", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 26, "type": ""}, {"name": "OPEN", "line": 27, "type": ""}, {"name": "HALF_OPEN", "line": 28, "type": ""}], "description": "Represents the possible states of a circuit breaker (e.g., closed, open, half-open)."}, {"name": "CircuitBreakerConfig", "line": 34, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a circuit breaker, such as thresholds and timeouts."}, {"name": "CircuitBreakerError", "line": 44, "inherits_from": ["ExternalServiceError):"], "methods": [], "properties": [], "description": "Exception raised when a circuit breaker is open and calls are not allowed."}, {"name": "CircuitBreaker", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CircuitBreakerConfig):"}], "is_async": false, "signature": "__init__(self, config: CircuitBreakerConfig):)"}, {"name": "call", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with circuit breaker protection.", "signature": "async call(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_check_state", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Check and update circuit breaker state.", "signature": "async _check_state(self) -> None"}, {"name": "_on_success", "line": 108, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle successful call.", "signature": "async _on_success(self) -> None"}, {"name": "_on_failure", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle failed call.", "signature": "async _on_failure(self) -> None"}, {"name": "get_state", "line": 138, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current circuit breaker state information.", "signature": "get_state(self) -> dict[str, Any]"}, {"name": "reset", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset circuit breaker to closed state.", "signature": "async reset(self) -> None"}], "properties": [], "description": "Implements the circuit breaker pattern to monitor and control function execution based on failure rates."}, {"name": "CircuitBreakerRegistry", "line": 163, "inherits_from": [], "methods": [{"name": "__init__", "line": 166, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "get_breaker", "line": 170, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "CircuitBreakerConfig | None", "default": "None"}], "is_async": true, "return_type": "CircuitBreaker", "description": "Get or create a circuit breaker.", "signature": "async get_breaker(self, name: str, config: CircuitBreakerConfig | None = None) -> CircuitBreaker"}, {"name": "call_with_breaker", "line": 183, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}, {"name": "config", "type": "CircuitBreakerConfig | None", "default": "None"}], "is_async": true, "return_type": "T", "description": "Execute function with named circuit breaker.", "signature": "async call_with_breaker(self, name: str, func: Callable[..., T], config: CircuitBreakerConfig | None = None, *args, **kwargs) -> T"}, {"name": "get_all_states", "line": 195, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "Get states of all registered circuit breakers.", "signature": "get_all_states(self) -> dict[str, dict[str, Any]]"}, {"name": "reset_all", "line": 199, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset all circuit breakers.", "signature": "async reset_all(self) -> None"}], "properties": [], "description": "Manages a collection of circuit breakers, allowing retrieval and registration by name."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "builtins", "alias": null, "line": 10, "statement": "import builtins"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "core.exceptions", "alias": null, "line": 17, "statement": "from core.exceptions import ExternalServiceError"}, {"module": "core.exceptions", "alias": null, "line": 17, "statement": "from core.exceptions import TimeoutError"}, {"module": "core.logging", "alias": null, "line": 18, "statement": "from core.logging import get_logger"}], "constants": [{"name": "T", "line": 22, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "builtins", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from core.exceptions import ExternalServiceError", "type": "import", "line": 17}, {"name": "from core.exceptions import TimeoutError", "type": "import", "line": 17}, {"name": "from core.logging import get_logger", "type": "import", "line": 18}, {"name": "T", "type": "constant", "line": 22}, {"name": "CircuitState", "type": "class", "line": 25}, {"name": "CircuitBreakerConfig", "type": "class", "line": 34}, {"name": "CircuitBreakerError", "type": "class", "line": 44}, {"name": "CircuitBreaker", "type": "class", "line": 50}, {"name": "CircuitBreakerRegistry", "type": "class", "line": 163}, {"name": "circuit_breaker", "type": "function", "line": 210}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "circuit_breaker Function", "description": "Function circuit_breaker implementation.", "line_start": 210, "line_end": 215}, {"name": "CircuitState Class", "description": "Class CircuitState definition and methods.", "line_start": 25, "line_end": 35}, {"name": "CircuitBreakerConfig Class", "description": "Class CircuitBreakerConfig definition and methods.", "line_start": 34, "line_end": 44}, {"name": "CircuitBreakerError Class", "description": "Class CircuitBreakerError definition and methods.", "line_start": 44, "line_end": 54}, {"name": "CircuitBreaker Class", "description": "Class CircuitBreaker definition and methods.", "line_start": 50, "line_end": 156}, {"name": "CircuitBreakerRegistry Class", "description": "Class CircuitBreakerRegistry definition and methods.", "line_start": 163, "line_end": 202}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 22, "line_end": 22}], "content_hash": "5b59be0ef42db44c80bcca2199b1d28e"}'
- path: libs/opsvi-core/opsvi_core/resilience/retry.py
  line_count: 247
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retry.py", "description": "Python module with 4 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "retry", "line": 183, "parameters": [{"name": "config", "type": "RetryConfig | None", "default": "None"}], "is_async": false, "description": "Decorator to retry a function call based on the provided retry configuration.", "signature": "retry(config: RetryConfig | None = None)"}, {"name": "retry_with_exponential_backoff", "line": 199, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "float | None", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with exponential backoff delay between attempts.", "signature": "retry_with_exponential_backoff(max_attempts: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True, exceptions: tuple[type, ...] = (Exception,), timeout: float | None = None)"}, {"name": "retry_with_linear_backoff", "line": 218, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "increment", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "30.0"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "float | None", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with linearly increasing delay between attempts.", "signature": "retry_with_linear_backoff(max_attempts: int = 3, base_delay: float = 1.0, increment: float = 1.0, max_delay: float = 30.0, exceptions: tuple[type, ...] = (Exception,), timeout: float | None = None)"}, {"name": "retry_with_fixed_delay", "line": 236, "parameters": [{"name": "max_attempts", "type": "int", "default": "3"}, {"name": "delay", "type": "float", "default": "1.0"}, {"name": "exceptions", "type": "tuple[type, ...]", "default": "(Exception,)"}, {"name": "timeout", "type": "float | None", "default": "None"}], "is_async": false, "description": "Decorator to retry a function with a fixed delay between attempts.", "signature": "retry_with_fixed_delay(max_attempts: int = 3, delay: float = 1.0, exceptions: tuple[type, ...] = (Exception,), timeout: float | None = None)"}], "classes": [{"name": "BackoffStrategy", "line": 27, "inherits_from": ["ABC):"], "methods": [{"name": "get_delay", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Get delay for the given attempt number.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Base class defining the interface for backoff delay strategies."}, {"name": "ExponentialBackoff", "line": 36, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True)"}, {"name": "get_delay", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate exponential backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements exponential backoff delay calculation for retries."}, {"name": "LinearBackoff", "line": 63, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 66, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "increment", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "30.0"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, increment: float = 1.0, max_delay: float = 30.0)"}, {"name": "get_delay", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate linear backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements linear backoff delay calculation for retries."}, {"name": "FixedBackoff", "line": 79, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "delay", "type": "float", "default": "1.0"}], "is_async": false, "signature": "__init__(self, delay: float = 1.0)"}, {"name": "get_delay", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Return fixed delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements fixed delay between retries."}, {"name": "RetryConfig", "line": 91, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 99, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__post_init__(self)"}], "properties": [], "description": "Holds configuration parameters for retry behavior."}, {"name": "RetryError", "line": 104, "inherits_from": ["ExternalServiceError):"], "methods": [{"name": "__init__", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "attempts", "type": "int"}, {"name": "last_exception", "type": "Exception):"}], "is_async": false, "signature": "__init__(self, message: str, attempts: int, last_exception: Exception):)"}], "properties": [], "description": "Exception raised when all retry attempts have been exhausted."}, {"name": "RetryExecutor", "line": 113, "inherits_from": [], "methods": [{"name": "__init__", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RetryConfig):"}], "is_async": false, "signature": "__init__(self, config: RetryConfig):)"}, {"name": "execute", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with retry logic.", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 175, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages execution and retrying of functions according to retry configuration."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "builtins", "alias": null, "line": 10, "statement": "import builtins"}, {"module": "random", "alias": null, "line": 11, "statement": "import random"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "functools", "alias": null, "line": 16, "statement": "from functools import wraps"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import TypeVar"}, {"module": "core.exceptions", "alias": null, "line": 19, "statement": "from core.exceptions import ExternalServiceError"}, {"module": "core.exceptions", "alias": null, "line": 19, "statement": "from core.exceptions import TimeoutError"}, {"module": "core.logging", "alias": null, "line": 20, "statement": "from core.logging import get_logger"}], "constants": [{"name": "T", "line": 24, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "builtins", "type": "import", "line": 10}, {"name": "random", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from functools import wraps", "type": "import", "line": 16}, {"name": "from typing import TypeVar", "type": "import", "line": 17}, {"name": "from core.exceptions import ExternalServiceError", "type": "import", "line": 19}, {"name": "from core.exceptions import TimeoutError", "type": "import", "line": 19}, {"name": "from core.logging import get_logger", "type": "import", "line": 20}, {"name": "T", "type": "constant", "line": 24}, {"name": "BackoffStrategy", "type": "class", "line": 27}, {"name": "ExponentialBackoff", "type": "class", "line": 36}, {"name": "LinearBackoff", "type": "class", "line": 63}, {"name": "FixedBackoff", "type": "class", "line": 79}, {"name": "RetryConfig", "type": "class", "line": 91}, {"name": "RetryError", "type": "class", "line": 104}, {"name": "RetryExecutor", "type": "class", "line": 113}, {"name": "retry", "type": "function", "line": 183}, {"name": "retry_with_exponential_backoff", "type": "function", "line": 199}, {"name": "retry_with_linear_backoff", "type": "function", "line": 218}, {"name": "retry_with_fixed_delay", "type": "function", "line": 236}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "retry Function", "description": "Function retry implementation.", "line_start": 183, "line_end": 198}, {"name": "retry_with_exponential_backoff Function", "description": "Function retry_with_exponential_backoff implementation.", "line_start": 199, "line_end": 217}, {"name": "retry_with_linear_backoff Function", "description": "Function retry_with_linear_backoff implementation.", "line_start": 218, "line_end": 235}, {"name": "retry_with_fixed_delay Function", "description": "Function retry_with_fixed_delay implementation.", "line_start": 236, "line_end": 241}, {"name": "BackoffStrategy Class", "description": "Class BackoffStrategy definition and methods.", "line_start": 27, "line_end": 34}, {"name": "ExponentialBackoff Class", "description": "Class ExponentialBackoff definition and methods.", "line_start": 36, "line_end": 54}, {"name": "LinearBackoff Class", "description": "Class LinearBackoff definition and methods.", "line_start": 63, "line_end": 76}, {"name": "FixedBackoff Class", "description": "Class FixedBackoff definition and methods.", "line_start": 79, "line_end": 88}, {"name": "RetryConfig Class", "description": "Class RetryConfig definition and methods.", "line_start": 91, "line_end": 102}, {"name": "RetryError Class", "description": "Class RetryError definition and methods.", "line_start": 104, "line_end": 110}, {"name": "RetryExecutor Class", "description": "Class RetryExecutor definition and methods.", "line_start": 113, "line_end": 178}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 24, "line_end": 24}], "content_hash": "c228bbf6ffe53291ed01e42f98ff62c7"}'
- path: libs/opsvi-core/opsvi_core/caching/in_memory.py
  line_count: 70
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "in_memory.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "InMemoryCache", "line": 22, "inherits_from": ["CacheBackend):"], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get", "line": 30, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, *, ttl: int = 60"}, {"name": "value", "type": "Any, *, ttl: int = 60"}], "is_async": true, "return_type": "None", "description": "Set a value in cache with TTL.", "signature": "async set(self, key: str, value: Any, *, ttl: int = 60, value: Any, *, ttl: int = 60) -> None"}, {"name": "delete", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a key from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 69, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Clear all cache entries.", "signature": "async clear(self) -> None"}], "properties": [], "description": "A class that provides an in-memory caching mechanism with methods to add, retrieve, update, and delete cached items."}], "imports": [{"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections", "alias": null, "line": 12, "statement": "from collections import OrderedDict"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 15, "statement": "from opsvi_foundation import get_logger"}, {"module": "base", "alias": null, "line": 17, "statement": "from base import CacheBackend"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections import OrderedDict", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 15}, {"name": "from base import CacheBackend", "type": "import", "line": 17}, {"name": "InMemoryCache", "type": "class", "line": 22}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "InMemoryCache Class", "description": "Class InMemoryCache definition and methods.", "line_start": 22, "line_end": 72}], "content_hash": "09f922e854d0c31986ba463171fb904b"}'
- path: libs/opsvi-core/opsvi_core/caching/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "79c5026cb8135506a16743fe66563cc2"}'
- path: libs/opsvi-core/opsvi_core/caching/base.py
  line_count: 94
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CacheError", "line": 19, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for cache-related errors."}, {"name": "CacheBackend", "line": 25, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "get", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, *, ttl: int = 60"}, {"name": "value", "type": "Any, *, ttl: int = 60"}], "is_async": true, "return_type": "None", "description": "Set a value in cache with TTL.", "signature": "async set(self, key: str, value: Any, *, ttl: int = 60, value: Any, *, ttl: int = 60) -> None"}, {"name": "delete", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a key from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Clear all cache entries.", "signature": "async clear(self) -> None"}], "properties": [], "description": "Abstract base class defining the interface for cache backends."}, {"name": "CacheManager", "line": 54, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "default_backend", "type": "CacheBackend):"}], "is_async": false, "signature": "__init__(self, default_backend: CacheBackend):)"}, {"name": "add_backend", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, backend: CacheBackend"}, {"name": "backend", "type": "CacheBackend"}], "is_async": false, "return_type": "None", "description": "Add a cache backend.", "signature": "add_backend(self, name: str, backend: CacheBackend, backend: CacheBackend) -> None"}, {"name": "get_backend", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str = \"default\"", "default": "default"}], "is_async": false, "return_type": "CacheBackend", "description": "Get a cache backend by name.", "signature": "get_backend(self, name: str = \"default\" = default) -> CacheBackend"}, {"name": "get", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from cache.", "signature": "async get(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> Any | None"}, {"name": "set", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Set a value in cache.", "signature": "async set(self, key: str, value: Any) -> None"}, {"name": "delete", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Delete a key from cache.", "signature": "async delete(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> bool"}, {"name": "exists", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> bool"}, {"name": "clear", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "None", "description": "Clear cache.", "signature": "async clear(self, backend: str = \"default\" = default) -> None"}], "properties": [], "description": "Manages cache operations including storing, retrieving, and invalidating cache entries."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 14}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 14}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 14}, {"name": "CacheError", "type": "class", "line": 19}, {"name": "CacheBackend", "type": "class", "line": 25}, {"name": "CacheManager", "type": "class", "line": 54}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "CacheError Class", "description": "Class CacheError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "CacheBackend Class", "description": "Class CacheBackend definition and methods.", "line_start": 25, "line_end": 52}, {"name": "CacheManager Class", "description": "Class CacheManager definition and methods.", "line_start": 54, "line_end": 96}], "content_hash": "c1675f9acd2b6be50e38bda4b15b2eff"}'
- path: libs/opsvi-core/opsvi_core/storage/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "0e4b964f1b2631e33b6c2d8bbb6affc2"}'
- path: libs/opsvi-core/opsvi_core/storage/base.py
  line_count: 303
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StorageError", "line": 20, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for storage-related errors."}, {"name": "StorageConfig", "line": 26, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for storage systems."}, {"name": "StorageBackend", "line": 41, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "StorageConfig):"}], "is_async": false, "signature": "__init__(self, config: StorageConfig):)"}, {"name": "get", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value by key.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Set a value by key.", "signature": "async set(self, key: str, value: Any, value: Any) -> bool"}, {"name": "delete", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value by key.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if key exists.", "signature": "async exists(self, key: str) -> bool"}, {"name": "list_keys", "line": 69, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"\"", "default": ""}], "is_async": true, "return_type": "list[str]", "description": "List keys with optional prefix filter.", "signature": "async list_keys(self, prefix: str = \"\" = ) -> list[str]"}, {"name": "clear", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all data.", "signature": "async clear(self) -> bool"}, {"name": "size", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get total number of keys.", "signature": "async size(self) -> int"}], "properties": [], "description": "Abstract base class defining the interface for storage backends."}, {"name": "KeyValueStore", "line": 84, "inherits_from": ["StorageBackend):"], "methods": [{"name": "__init__", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "StorageConfig):"}], "is_async": false, "signature": "__init__(self, config: StorageConfig):)"}, {"name": "get", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value by key.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Set a value by key.", "signature": "async set(self, key: str, value: Any, value: Any) -> bool"}, {"name": "delete", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value by key.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if key exists.", "signature": "async exists(self, key: str) -> bool"}, {"name": "list_keys", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"\"", "default": ""}], "is_async": true, "return_type": "list[str]", "description": "List keys with optional prefix filter.", "signature": "async list_keys(self, prefix: str = \"\" = ) -> list[str]"}, {"name": "clear", "line": 125, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all data.", "signature": "async clear(self) -> bool"}, {"name": "size", "line": 134, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get total number of keys.", "signature": "async size(self) -> int"}], "properties": [], "description": "Implements a key-value storage system with basic CRUD operations."}, {"name": "StorageManager", "line": 139, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "default_backend", "type": "StorageBackend):"}], "is_async": false, "signature": "__init__(self, default_backend: StorageBackend):)"}, {"name": "add_backend", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, backend: StorageBackend"}, {"name": "backend", "type": "StorageBackend"}], "is_async": false, "return_type": "None", "description": "Add a storage backend.", "signature": "add_backend(self, name: str, backend: StorageBackend, backend: StorageBackend) -> None"}, {"name": "get_backend", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str = \"default\"", "default": "default"}], "is_async": false, "return_type": "StorageBackend", "description": "Get a storage backend by name.", "signature": "get_backend(self, name: str = \"default\" = default) -> StorageBackend"}, {"name": "get", "line": 156, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from storage.", "signature": "async get(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> Any | None"}, {"name": "set", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, backend: str = \"default\""}, {"name": "value", "type": "Any, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Set a value in storage.", "signature": "async set(self, key: str, value: Any, backend: str = \"default\", value: Any, backend: str = \"default\", backend: str = \"default\" = default) -> bool"}, {"name": "delete", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Delete a key from storage.", "signature": "async delete(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> bool"}, {"name": "exists", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, backend: str = \"default\""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in storage.", "signature": "async exists(self, key: str, backend: str = \"default\", backend: str = \"default\" = default) -> bool"}, {"name": "list_keys", "line": 176, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"\", backend: str = \"default\"", "default": ""}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "list[str]", "description": "List keys from storage.", "signature": "async list_keys(self, prefix: str = \"\", backend: str = \"default\" = , backend: str = \"default\" = default) -> list[str]"}, {"name": "clear", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "bool", "description": "Clear storage.", "signature": "async clear(self, backend: str = \"default\" = default) -> bool"}, {"name": "size", "line": 186, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "str = \"default\"", "default": "default"}], "is_async": true, "return_type": "int", "description": "Get storage size.", "signature": "async size(self, backend: str = \"default\" = default) -> int"}], "properties": [], "description": "Manages multiple storage backends and coordinates storage operations."}, {"name": "FileStorage", "line": 192, "inherits_from": ["StorageBackend):"], "methods": [{"name": "__init__", "line": 195, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "StorageConfig"}, {"name": "base_path", "type": "str", "default": "./data"}], "is_async": false, "signature": "__init__(self, config: StorageConfig, base_path: str = ./data)"}, {"name": "_ensure_directory", "line": 200, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Ensure storage directory exists.", "signature": "_ensure_directory(self) -> None"}, {"name": "_get_file_path", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "str", "description": "Get file path for key.", "signature": "_get_file_path(self, key: str) -> str"}, {"name": "get", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value by key from file.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 230, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Set a value by key to file.", "signature": "async set(self, key: str, value: Any, value: Any) -> bool"}, {"name": "delete", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a file by key.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if file exists.", "signature": "async exists(self, key: str) -> bool"}, {"name": "list_keys", "line": 264, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"\"", "default": ""}], "is_async": true, "return_type": "list[str]", "description": "List keys (files) with optional prefix filter.", "signature": "async list_keys(self, prefix: str = \"\" = ) -> list[str]"}, {"name": "clear", "line": 280, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all files.", "signature": "async clear(self) -> bool"}, {"name": "size", "line": 294, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "int", "description": "Get number of files.", "signature": "async size(self) -> int"}], "properties": [], "description": "Handles file-based storage operations including reading and writing files."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 14, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 15, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 14}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 14}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 15}, {"name": "from pydantic import Field", "type": "import", "line": 15}, {"name": "StorageError", "type": "class", "line": 20}, {"name": "StorageConfig", "type": "class", "line": 26}, {"name": "StorageBackend", "type": "class", "line": 41}, {"name": "KeyValueStore", "type": "class", "line": 84}, {"name": "StorageManager", "type": "class", "line": 139}, {"name": "FileStorage", "type": "class", "line": 192}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "StorageError Class", "description": "Class StorageError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "StorageConfig Class", "description": "Class StorageConfig definition and methods.", "line_start": 26, "line_end": 36}, {"name": "StorageBackend Class", "description": "Class StorageBackend definition and methods.", "line_start": 41, "line_end": 82}, {"name": "KeyValueStore Class", "description": "Class KeyValueStore definition and methods.", "line_start": 84, "line_end": 137}, {"name": "StorageManager Class", "description": "Class StorageManager definition and methods.", "line_start": 139, "line_end": 189}, {"name": "FileStorage Class", "description": "Class FileStorage definition and methods.", "line_start": 192, "line_end": 297}], "content_hash": "2f7d138d75516e22d411ad14f56e5925"}'
- path: libs/opsvi-core/opsvi_core/serialization/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "7021e4fcd6625bdea445c6be9aee77dc"}'
- path: libs/opsvi-core/opsvi_core/serialization/base.py
  line_count: 357
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "SerializationError", "line": 22, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during serialization."}, {"name": "DeserializationError", "line": 28, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during deserialization."}, {"name": "SerializationFormat", "line": 34, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "JSON", "line": 35, "type": ""}, {"name": "YAML", "line": 36, "type": ""}, {"name": "MSGPACK", "line": 37, "type": ""}, {"name": "PICKLE", "line": 38, "type": ""}, {"name": "PROTOBUF", "line": 39, "type": ""}], "description": "Represents supported serialization formats."}, {"name": "SerializerConfig", "line": 44, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for serializers."}, {"name": "BaseSerializer", "line": 55, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SerializerConfig):"}], "is_async": false, "signature": "__init__(self, config: SerializerConfig):)"}, {"name": "serialize", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize data to string or bytes.", "signature": "serialize(self, data: Any) -> str | bytes"}, {"name": "deserialize", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize string or bytes to data.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "format", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "SerializationFormat", "description": "Get serialization format.", "signature": "format(self) -> SerializationFormat"}, {"name": "binary_output", "line": 80, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Whether serializer produces binary output.", "signature": "binary_output(self) -> bool"}], "properties": [], "description": "Abstract base class defining the interface for serializers."}, {"name": "JSONSerializer", "line": 85, "inherits_from": ["BaseSerializer):"], "methods": [{"name": "__init__", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SerializerConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: SerializerConfig | None = None)"}, {"name": "serialize", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to JSON string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize JSON string to data.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "_json_serializer", "line": 113, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom JSON serializer for complex objects.", "signature": "_json_serializer(self, obj: Any) -> Any"}, {"name": "format", "line": 123, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "SerializationFormat", "description": "Get serialization format.", "signature": "format(self) -> SerializationFormat"}, {"name": "binary_output", "line": 128, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Whether serializer produces binary output.", "signature": "binary_output(self) -> bool"}], "properties": [], "description": "Serializer implementation for JSON format."}, {"name": "YAMLSerializer", "line": 133, "inherits_from": ["BaseSerializer):"], "methods": [{"name": "__init__", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SerializerConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: SerializerConfig | None = None)"}, {"name": "serialize", "line": 140, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to YAML string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize YAML string to data.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "format", "line": 173, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "SerializationFormat", "description": "Get serialization format.", "signature": "format(self) -> SerializationFormat"}, {"name": "binary_output", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Whether serializer produces binary output.", "signature": "binary_output(self) -> bool"}], "properties": [], "description": "Serializer implementation for YAML format."}, {"name": "MessagePackSerializer", "line": 183, "inherits_from": ["BaseSerializer):"], "methods": [{"name": "__init__", "line": 186, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SerializerConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: SerializerConfig | None = None)"}, {"name": "serialize", "line": 190, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to MessagePack bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 203, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize MessagePack bytes to data.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "format", "line": 221, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "SerializationFormat", "description": "Get serialization format.", "signature": "format(self) -> SerializationFormat"}, {"name": "binary_output", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Whether serializer produces binary output.", "signature": "binary_output(self) -> bool"}], "properties": [], "description": "Serializer implementation for MessagePack format."}, {"name": "PickleSerializer", "line": 231, "inherits_from": ["BaseSerializer):"], "methods": [{"name": "__init__", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SerializerConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: SerializerConfig | None = None)"}, {"name": "serialize", "line": 241, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to pickle bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize pickle bytes to data.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "format", "line": 262, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "SerializationFormat", "description": "Get serialization format.", "signature": "format(self) -> SerializationFormat"}, {"name": "binary_output", "line": 267, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Whether serializer produces binary output.", "signature": "binary_output(self) -> bool"}], "properties": [], "description": "Serializer implementation for Python''s pickle format."}, {"name": "SerializationManager", "line": 272, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 275, "parameters": [{"name": "self", "type": "self"}, {"name": "default_format", "type": "SerializationFormat", "default": "SerializationFormat.JSON):"}], "is_async": false, "signature": "__init__(self, default_format: SerializationFormat = SerializationFormat.JSON):)"}, {"name": "_register_default_serializers", "line": 281, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Register default serializers.", "signature": "_register_default_serializers(self) -> None"}, {"name": "register_serializer", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "format", "type": "SerializationFormat"}, {"name": "serializer", "type": "BaseSerializer"}], "is_async": false, "return_type": "None", "description": "Register a custom serializer.", "signature": "register_serializer(self, format: SerializationFormat, serializer: BaseSerializer) -> None"}, {"name": "get_serializer", "line": 295, "parameters": [{"name": "self", "type": "self"}, {"name": "format", "type": "SerializationFormat | None", "default": "None"}], "is_async": false, "return_type": "BaseSerializer", "description": "Get serializer for format.", "signature": "get_serializer(self, format: SerializationFormat | None = None) -> BaseSerializer"}, {"name": "serialize", "line": 304, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}, {"name": "format", "type": "SerializationFormat | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize data using specified format.", "signature": "serialize(self, data: Any, format: SerializationFormat | None = None) -> str | bytes"}, {"name": "deserialize", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "format", "type": "SerializationFormat | None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Deserialize data using specified format.", "signature": "deserialize(self, data: str | bytes, format: SerializationFormat | None = None) -> Any"}, {"name": "set_default_format", "line": 318, "parameters": [{"name": "self", "type": "self"}, {"name": "format", "type": "SerializationFormat"}], "is_async": false, "return_type": "None", "description": "Set default serialization format.", "signature": "set_default_format(self, format: SerializationFormat) -> None"}, {"name": "get_supported_formats", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[SerializationFormat]", "description": "Get list of supported formats.", "signature": "get_supported_formats(self) -> list[SerializationFormat]"}, {"name": "detect_format", "line": 329, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "SerializationFormat | None", "description": "Attempt to detect serialization format from data.", "signature": "detect_format(self, data: str | bytes) -> SerializationFormat | None"}], "properties": [], "description": "Manages multiple serializers and handles serialization tasks."}], "imports": [{"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 16, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 16}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 16}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "from pydantic import Field", "type": "import", "line": 17}, {"name": "SerializationError", "type": "class", "line": 22}, {"name": "DeserializationError", "type": "class", "line": 28}, {"name": "SerializationFormat", "type": "class", "line": 34}, {"name": "SerializerConfig", "type": "class", "line": 44}, {"name": "BaseSerializer", "type": "class", "line": 55}, {"name": "JSONSerializer", "type": "class", "line": 85}, {"name": "YAMLSerializer", "type": "class", "line": 133}, {"name": "MessagePackSerializer", "type": "class", "line": 183}, {"name": "PickleSerializer", "type": "class", "line": 231}, {"name": "SerializationManager", "type": "class", "line": 272}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "SerializationError Class", "description": "Class SerializationError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "DeserializationError Class", "description": "Class DeserializationError definition and methods.", "line_start": 28, "line_end": 38}, {"name": "SerializationFormat Class", "description": "Class SerializationFormat definition and methods.", "line_start": 34, "line_end": 44}, {"name": "SerializerConfig Class", "description": "Class SerializerConfig definition and methods.", "line_start": 44, "line_end": 54}, {"name": "BaseSerializer Class", "description": "Class BaseSerializer definition and methods.", "line_start": 55, "line_end": 83}, {"name": "JSONSerializer Class", "description": "Class JSONSerializer definition and methods.", "line_start": 85, "line_end": 131}, {"name": "YAMLSerializer Class", "description": "Class YAMLSerializer definition and methods.", "line_start": 133, "line_end": 181}, {"name": "MessagePackSerializer Class", "description": "Class MessagePackSerializer definition and methods.", "line_start": 183, "line_end": 229}, {"name": "PickleSerializer Class", "description": "Class PickleSerializer definition and methods.", "line_start": 231, "line_end": 270}, {"name": "SerializationManager Class", "description": "Class SerializationManager definition and methods.", "line_start": 272, "line_end": 332}], "content_hash": "08abdba010949e4c3f7fd921838bc8d7"}'
- path: libs/opsvi-core/opsvi_core/plugins/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "a41223cb105c380cc4ca38dcc7a541d8"}'
- path: libs/opsvi-core/opsvi_core/plugins/base.py
  line_count: 361
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PluginError", "line": 25, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to plugin operations."}, {"name": "PluginState", "line": 31, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "UNLOADED", "line": 32, "type": ""}, {"name": "LOADED", "line": 33, "type": ""}, {"name": "ACTIVE", "line": 34, "type": ""}, {"name": "INACTIVE", "line": 35, "type": ""}, {"name": "ERROR", "line": 36, "type": ""}], "description": "Encapsulates the current state and status of a plugin."}, {"name": "PluginMetadata", "line": 42, "inherits_from": [], "methods": [], "properties": [], "description": "Holds metadata information about a plugin such as name, version, and author."}, {"name": "BasePlugin", "line": 54, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: dict[str, Any] | None = None)"}, {"name": "metadata", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "PluginMetadata", "description": "Get plugin metadata.", "signature": "metadata(self) -> PluginMetadata"}, {"name": "initialize", "line": 69, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the plugin.", "signature": "async initialize(self) -> None"}, {"name": "start", "line": 74, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the plugin.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the plugin.", "signature": "async stop(self) -> None"}, {"name": "cleanup", "line": 84, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup plugin resources.", "signature": "async cleanup(self) -> None"}, {"name": "get_config", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Get configuration value.", "signature": "get_config(self, key: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Defines the base interface and common functionality for all plugins."}, {"name": "PluginRegistry", "line": 93, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "register_plugin", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "plugin", "type": "BasePlugin"}], "is_async": false, "return_type": "None", "description": "Register a plugin.", "signature": "register_plugin(self, plugin: BasePlugin) -> None"}, {"name": "unregister_plugin", "line": 112, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a plugin.", "signature": "unregister_plugin(self, name: str) -> None"}, {"name": "initialize_plugin", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Initialize a plugin.", "signature": "async initialize_plugin(self, name: str) -> None"}, {"name": "start_plugin", "line": 144, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Start a plugin.", "signature": "async start_plugin(self, name: str) -> None"}, {"name": "stop_plugin", "line": 169, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Stop a plugin.", "signature": "async stop_plugin(self, name: str) -> None"}, {"name": "get_plugin", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "BasePlugin", "description": "Get a plugin by name.", "signature": "get_plugin(self, name: str) -> BasePlugin"}, {"name": "list_plugins", "line": 195, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "List all plugins with their status.", "signature": "list_plugins(self) -> dict[str, dict[str, Any]]"}, {"name": "register_hook", "line": 205, "parameters": [{"name": "self", "type": "self"}, {"name": "hook_name", "type": "str, callback: Callable"}, {"name": "callback", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Register a hook callback.", "signature": "register_hook(self, hook_name: str, callback: Callable, callback: Callable) -> None"}, {"name": "execute_hooks", "line": 212, "parameters": [{"name": "self", "type": "self"}, {"name": "hook_name", "type": "str, *args, **kwargs"}], "is_async": true, "return_type": "list[Any]", "description": "Execute all callbacks for a hook.", "signature": "async execute_hooks(self, hook_name: str, *args, **kwargs, *args, **kwargs) -> list[Any]"}], "properties": [], "description": "Manages the registration and lookup of available plugins."}, {"name": "PluginLoader", "line": 233, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 236, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "PluginRegistry):"}], "is_async": false, "signature": "__init__(self, registry: PluginRegistry):)"}, {"name": "load_from_file", "line": 240, "parameters": [{"name": "self", "type": "self"}, {"name": "file_path", "type": "str | Path"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "str", "description": "Load plugin from Python file.", "signature": "async load_from_file(self, file_path: str | Path, config: dict[str, Any] | None = None) -> str"}, {"name": "load_from_module", "line": 282, "parameters": [{"name": "self", "type": "self"}, {"name": "module_name", "type": "str"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "str", "description": "Load plugin from Python module.", "signature": "async load_from_module(self, module_name: str, config: dict[str, Any] | None = None) -> str"}], "properties": [], "description": "Handles loading plugin modules from specified sources."}, {"name": "PluginManager", "line": 317, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 320, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "_start", "line": 325, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start plugin manager.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 331, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop plugin manager.", "signature": "async _stop(self) -> None"}, {"name": "load_plugin", "line": 344, "parameters": [{"name": "self", "type": "self"}, {"name": "source", "type": "str | Path"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "str", "description": "Load plugin from file or module.", "signature": "async load_plugin(self, source: str | Path, config: dict[str, Any] | None = None) -> str"}, {"name": "start_plugin", "line": 353, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Start a plugin.", "signature": "async start_plugin(self, name: str) -> None"}, {"name": "stop_plugin", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Stop a plugin.", "signature": "async stop_plugin(self, name: str) -> None"}, {"name": "get_plugin_status", "line": 361, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get status of all plugins.", "signature": "get_plugin_status(self) -> dict[str, Any]"}], "properties": [], "description": "Coordinates plugin lifecycle, including loading, activation, and deactivation."}], "imports": [{"module": "importlib", "alias": null, "line": 11, "statement": "import importlib"}, {"module": "importlib.util", "alias": null, "line": 12, "statement": "import importlib.util"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 17, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 18, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "importlib", "type": "import", "line": 11}, {"name": "importlib.util", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from dataclasses import field", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from pathlib import Path", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 18}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 20}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 20}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 20}, {"name": "PluginError", "type": "class", "line": 25}, {"name": "PluginState", "type": "class", "line": 31}, {"name": "PluginMetadata", "type": "class", "line": 42}, {"name": "BasePlugin", "type": "class", "line": 54}, {"name": "PluginRegistry", "type": "class", "line": 93}, {"name": "PluginLoader", "type": "class", "line": 233}, {"name": "PluginManager", "type": "class", "line": 317}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "PluginError Class", "description": "Class PluginError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "PluginState Class", "description": "Class PluginState definition and methods.", "line_start": 31, "line_end": 41}, {"name": "PluginMetadata Class", "description": "Class PluginMetadata definition and methods.", "line_start": 42, "line_end": 52}, {"name": "BasePlugin Class", "description": "Class BasePlugin definition and methods.", "line_start": 54, "line_end": 91}, {"name": "PluginRegistry Class", "description": "Class PluginRegistry definition and methods.", "line_start": 93, "line_end": 215}, {"name": "PluginLoader Class", "description": "Class PluginLoader definition and methods.", "line_start": 233, "line_end": 285}, {"name": "PluginManager Class", "description": "Class PluginManager definition and methods.", "line_start": 317, "line_end": 364}], "content_hash": "5cba878b92a4e2aff2f89c2e38b61822"}'
- path: libs/opsvi-core/opsvi_core/testing/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "7001e40c910feb46e2ec4e4efed39567"}'
- path: libs/opsvi-core/opsvi_core/testing/base.py
  line_count: 275
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestFixtures", "line": 25, "inherits_from": [], "methods": [{"name": "temporary_directory", "line": 30, "parameters": [], "is_async": false, "return_type": "Generator[Path, None, None]", "description": "Create a temporary directory for testing.", "signature": "temporary_directory() -> Generator[Path, None, None]"}, {"name": "temporary_file", "line": 37, "parameters": [{"name": "suffix", "type": "str", "default": ""}, {"name": "content", "type": "str", "default": ""}], "is_async": false, "return_type": "Generator[Path, None, None]", "description": "Create a temporary file for testing.", "signature": "temporary_file(suffix: str = , content: str = ) -> Generator[Path, None, None]"}, {"name": "create_mock_component", "line": 55, "parameters": [{"name": "component_class", "type": "type[BaseComponent]"}], "is_async": false, "return_type": "MagicMock", "description": "Create a mock component with proper lifecycle methods.", "signature": "create_mock_component(component_class: type[BaseComponent]) -> MagicMock"}, {"name": "wait_for_condition", "line": 66, "parameters": [{"name": "condition", "type": "Callable[[], bool]"}, {"name": "timeout", "type": "float", "default": "5.0"}, {"name": "interval", "type": "float", "default": "0.1"}], "is_async": true, "return_type": "bool", "description": "Wait for a condition to become true.", "signature": "async wait_for_condition(condition: Callable[[], bool], timeout: float = 5.0, interval: float = 0.1) -> bool"}, {"name": "component_lifecycle", "line": 79, "parameters": [{"name": "component", "type": "BaseComponent"}], "is_async": true, "return_type": "AsyncGenerator[BaseComponent, None]", "description": "Manage component lifecycle in tests.", "signature": "async component_lifecycle(component: BaseComponent) -> AsyncGenerator[BaseComponent, None]"}], "properties": [], "description": "Provides setup and teardown methods for test environments."}, {"name": "MockServices", "line": 90, "inherits_from": [], "methods": [{"name": "create_mock_message_broker", "line": 94, "parameters": [], "is_async": false, "description": "Create a mock message broker.", "signature": "create_mock_message_broker()"}, {"name": "create_mock_event_bus", "line": 106, "parameters": [], "is_async": false, "description": "Create a mock event bus.", "signature": "create_mock_event_bus()"}, {"name": "create_mock_storage", "line": 118, "parameters": [], "is_async": false, "description": "Create a mock storage backend.", "signature": "create_mock_storage()"}, {"name": "create_mock_cache", "line": 133, "parameters": [], "is_async": false, "description": "Create a mock cache backend.", "signature": "create_mock_cache()"}], "properties": [], "description": "Simulates external services for testing purposes."}, {"name": "TestHelpers", "line": 146, "inherits_from": [], "methods": [{"name": "assert_called_with_timeout", "line": 150, "parameters": [{"name": "mock_func", "type": "AsyncMock, timeout: float = 1.0"}, {"name": "timeout", "type": "float = 1.0", "default": "1.0"}], "is_async": false, "return_type": "bool", "description": "Assert that a mock function was called within timeout.", "signature": "assert_called_with_timeout(mock_func: AsyncMock, timeout: float = 1.0, timeout: float = 1.0 = 1.0) -> bool"}, {"name": "run_with_timeout", "line": 160, "parameters": [{"name": "coro", "type": "unknown"}, {"name": "timeout", "type": "float", "default": "5.0"}], "is_async": true, "description": "Run coroutine with timeout.", "signature": "async run_with_timeout(coro, timeout: float = 5.0)"}, {"name": "create_test_config", "line": 165, "parameters": [{"name": "overrides", "type": "dict[str, Any] | None = None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Create a test configuration.", "signature": "create_test_config(overrides: dict[str, Any] | None = None = None) -> dict[str, Any]"}, {"name": "patch_environment", "line": 179, "parameters": [{"name": "env_vars", "type": "dict[str, str]"}], "is_async": false, "return_type": "Generator[None, None, None]", "description": "Temporarily patch environment variables.", "signature": "patch_environment(env_vars: dict[str, str]) -> Generator[None, None, None]"}], "properties": [], "description": "Contains utility methods to assist with test case implementations."}, {"name": "TestCase", "line": 198, "inherits_from": [], "methods": [{"name": "__init__", "line": 201, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "setup", "line": 207, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Setup test case.", "signature": "async setup(self) -> None"}, {"name": "teardown", "line": 211, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Teardown test case.", "signature": "async teardown(self) -> None"}, {"name": "add_cleanup", "line": 223, "parameters": [{"name": "self", "type": "self"}, {"name": "cleanup_task", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add cleanup task to run during teardown.", "signature": "add_cleanup(self, cleanup_task: Callable) -> None"}, {"name": "managed_test", "line": 228, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "AsyncGenerator[None, None]", "description": "Context manager for test lifecycle.", "signature": "async managed_test(self) -> AsyncGenerator[None, None]"}], "properties": [], "description": "Defines the structure and execution flow of individual test cases."}, {"name": "PerformanceTester", "line": 237, "inherits_from": [], "methods": [{"name": "measure_async_function", "line": 241, "parameters": [{"name": "func", "type": "Callable"}], "is_async": true, "return_type": "tuple[Any, float]", "description": "Measure execution time of async function.", "signature": "async measure_async_function(func: Callable, *args, **kwargs) -> tuple[Any, float]"}, {"name": "measure_sync_function", "line": 251, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": false, "return_type": "tuple[Any, float]", "description": "Measure execution time of sync function.", "signature": "measure_sync_function(func: Callable, *args, **kwargs, *args, **kwargs) -> tuple[Any, float]"}, {"name": "benchmark_async_function", "line": 259, "parameters": [{"name": "func", "type": "Callable"}, {"name": "iterations", "type": "int", "default": "100"}], "is_async": true, "return_type": "dict[str, float]", "description": "Benchmark async function performance.", "signature": "async benchmark_async_function(func: Callable, iterations: int = 100, *args, **kwargs) -> dict[str, float]"}], "properties": [], "description": "Measures and reports the performance metrics of code segments."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "contextlib", "alias": null, "line": 12, "statement": "import contextlib"}, {"module": "tempfile", "alias": null, "line": 13, "statement": "import tempfile"}, {"module": "time", "alias": null, "line": 14, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 15, "statement": "from collections.abc import AsyncGenerator"}, {"module": "collections.abc", "alias": null, "line": 15, "statement": "from collections.abc import Callable"}, {"module": "collections.abc", "alias": null, "line": 15, "statement": "from collections.abc import Generator"}, {"module": "pathlib", "alias": null, "line": 16, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "unittest.mock", "alias": null, "line": 18, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 18, "statement": "from unittest.mock import MagicMock"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 20, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "contextlib", "type": "import", "line": 12}, {"name": "tempfile", "type": "import", "line": 13}, {"name": "time", "type": "import", "line": 14}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections.abc import AsyncGenerator", "type": "import", "line": 15}, {"name": "from collections.abc import Callable", "type": "import", "line": 15}, {"name": "from collections.abc import Generator", "type": "import", "line": 15}, {"name": "from pathlib import Path", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 18}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 18}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 20}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 20}, {"name": "TestFixtures", "type": "class", "line": 25}, {"name": "MockServices", "type": "class", "line": 90}, {"name": "TestHelpers", "type": "class", "line": 146}, {"name": "TestCase", "type": "class", "line": 198}, {"name": "PerformanceTester", "type": "class", "line": 237}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "TestFixtures Class", "description": "Class TestFixtures definition and methods.", "line_start": 25, "line_end": 82}, {"name": "MockServices Class", "description": "Class MockServices definition and methods.", "line_start": 90, "line_end": 136}, {"name": "TestHelpers Class", "description": "Class TestHelpers definition and methods.", "line_start": 146, "line_end": 182}, {"name": "TestCase Class", "description": "Class TestCase definition and methods.", "line_start": 198, "line_end": 231}, {"name": "PerformanceTester Class", "description": "Class PerformanceTester definition and methods.", "line_start": 237, "line_end": 262}], "content_hash": "a7b83c83d79184aac1735d0e1b89076e"}'
- path: libs/opsvi-core/opsvi_core/agents/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "00753c978e5f364d0bbb433213f112af"}'
- path: libs/opsvi-core/opsvi_core/agents/base_agent.py
  line_count: 375
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base_agent.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentState", "line": 30, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "CREATED", "line": 31, "type": ""}, {"name": "INITIALIZING", "line": 32, "type": ""}, {"name": "READY", "line": 33, "type": ""}, {"name": "RUNNING", "line": 34, "type": ""}, {"name": "PAUSED", "line": 35, "type": ""}, {"name": "STOPPING", "line": 36, "type": ""}, {"name": "STOPPED", "line": 37, "type": ""}, {"name": "ERROR", "line": 38, "type": ""}], "description": "Represents the current state of an agent."}, {"name": "AgentCapability", "line": 43, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Defines the capabilities or skills an agent possesses."}, {"name": "AgentMetadata", "line": 54, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds metadata information related to an agent."}, {"name": "AgentMessage", "line": 66, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Encapsulates messages exchanged by agents."}, {"name": "BaseAgent", "line": 77, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "metadata", "type": "AgentMetadata):"}], "is_async": false, "signature": "__init__(self, metadata: AgentMetadata):)"}, {"name": "_initialize", "line": 105, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the agent.", "signature": "async _initialize(self) -> None"}, {"name": "_start", "line": 128, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the agent.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 148, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the agent.", "signature": "async _stop(self) -> None"}, {"name": "_cleanup", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup agent resources.", "signature": "async _cleanup(self) -> None"}, {"name": "setup", "line": 187, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific setup logic.\n\n        Override this method to implement custom initialization.\n        ", "signature": "async setup(self) -> None"}, {"name": "run", "line": 195, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific run logic.\n\n        Override this method to implement the main agent loop.\n        ", "signature": "async run(self) -> None"}, {"name": "teardown", "line": 203, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Agent-specific teardown logic.\n\n        Override this method to implement custom cleanup.\n        ", "signature": "async teardown(self) -> None"}, {"name": "cleanup_resources", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup agent resources.\n\n        Override this method to implement custom resource cleanup.\n        ", "signature": "async cleanup_resources(self) -> None"}, {"name": "pause", "line": 217, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Pause the agent.", "signature": "async pause(self) -> None"}, {"name": "resume", "line": 225, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Resume the agent.", "signature": "async resume(self) -> None"}, {"name": "send_message", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Send message to another agent.\n\n        Args:\n            message: Message to send\n\n        Raises:\n            AgentError: If message sending fails\n        ", "signature": "async send_message(self, message: AgentMessage) -> None"}, {"name": "receive_message", "line": 264, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Receive and process a message.\n\n        Args:\n            message: Received message\n        ", "signature": "async receive_message(self, message: AgentMessage) -> None"}, {"name": "register_message_handler", "line": 297, "parameters": [{"name": "self", "type": "self"}, {"name": "message_type", "type": "str, handler: callable"}, {"name": "handler", "type": "callable"}], "is_async": false, "return_type": "None", "description": "Register a message handler.\n\n        Args:\n            message_type: Type of message to handle\n            handler: Async function to handle the message\n        ", "signature": "register_message_handler(self, message_type: str, handler: callable, handler: callable) -> None"}, {"name": "add_capability", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "capability", "type": "AgentCapability"}], "is_async": false, "return_type": "None", "description": "Add a capability to the agent.\n\n        Args:\n            capability: Capability to add\n        ", "signature": "add_capability(self, capability: AgentCapability) -> None"}, {"name": "get_stats", "line": 324, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get agent statistics.\n\n        Returns:\n            Dictionary of agent statistics\n        ", "signature": "get_stats(self) -> dict[str, Any]"}, {"name": "health_check", "line": 337, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Perform agent health check.\n\n        Returns:\n            Health status information\n        ", "signature": "async health_check(self) -> dict[str, Any]"}, {"name": "deliver_message", "line": 351, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Deliver message to recipient.\n\n        Override this method to implement custom message delivery.\n\n        Args:\n            message: Message to deliver\n        ", "signature": "async deliver_message(self, message: AgentMessage) -> None"}, {"name": "handle_unknown_message", "line": 364, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "AgentMessage"}], "is_async": true, "return_type": "None", "description": "Handle unknown message types.\n\n        Override this method to implement custom unknown message handling.\n\n        Args:\n            message: Unknown message\n        ", "signature": "async handle_unknown_message(self, message: AgentMessage) -> None"}], "properties": [], "description": "Provides the foundational implementation and common behaviors for agents."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "uuid", "alias": null, "line": 12, "statement": "import uuid"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import RetryConfig"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import get_logger"}, {"module": "opsvi_foundation", "alias": null, "line": 17, "statement": "from opsvi_foundation import retry"}, {"module": "pydantic", "alias": null, "line": 23, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 23, "statement": "from pydantic import Field"}, {"module": "core.exceptions", "alias": null, "line": 25, "statement": "from core.exceptions import AgentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "uuid", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 17}, {"name": "from opsvi_foundation import RetryConfig", "type": "import", "line": 17}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 17}, {"name": "from opsvi_foundation import retry", "type": "import", "line": 17}, {"name": "from pydantic import BaseModel", "type": "import", "line": 23}, {"name": "from pydantic import Field", "type": "import", "line": 23}, {"name": "from core.exceptions import AgentError", "type": "import", "line": 25}, {"name": "AgentState", "type": "class", "line": 30}, {"name": "AgentCapability", "type": "class", "line": 43}, {"name": "AgentMetadata", "type": "class", "line": 54}, {"name": "AgentMessage", "type": "class", "line": 66}, {"name": "BaseAgent", "type": "class", "line": 77}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 25}, {"name": "AgentState Class", "description": "Class AgentState definition and methods.", "line_start": 30, "line_end": 40}, {"name": "AgentCapability Class", "description": "Class AgentCapability definition and methods.", "line_start": 43, "line_end": 53}, {"name": "AgentMetadata Class", "description": "Class AgentMetadata definition and methods.", "line_start": 54, "line_end": 64}, {"name": "AgentMessage Class", "description": "Class AgentMessage definition and methods.", "line_start": 66, "line_end": 76}, {"name": "BaseAgent Class", "description": "Class BaseAgent definition and methods.", "line_start": 77, "line_end": 367}], "content_hash": "d461d5d94cbf5b8bbbc790aa023cc813"}'
- path: libs/opsvi-core/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1b6ec8a3d830b8a6e90b76ec782cac26"}'
- path: libs/opsvi-core/tests/test_core.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_core.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestConfiguration", "line": 25, "inherits_from": [], "methods": [{"name": "test_config_loading", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure config loads with expected attributes.", "signature": "test_config_loading(self)"}, {"name": "test_config_defaults", "line": 36, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test configuration default values.", "signature": "test_config_defaults(self)"}, {"name": "test_load_config_function", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test load_config function.", "signature": "test_load_config_function(self)"}], "properties": [], "description": "Tests for configuration loading and validation."}, {"name": "TestLogging", "line": 50, "inherits_from": [], "methods": [{"name": "test_logging_setup", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure logging setup does not raise.", "signature": "test_logging_setup(self)"}, {"name": "test_get_logger", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting a structured logger.", "signature": "test_get_logger(self)"}, {"name": "test_log_context", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test log context creation.", "signature": "test_log_context(self)"}], "properties": [], "description": "Tests for logging functionality and output correctness."}, {"name": "TestExceptions", "line": 73, "inherits_from": [], "methods": [{"name": "test_base_exception", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test base OpsviError exception.", "signature": "test_base_exception(self)"}, {"name": "test_exception_with_details", "line": 81, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test exception with additional details.", "signature": "test_exception_with_details(self)"}, {"name": "test_configuration_error", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ConfigurationError.", "signature": "test_configuration_error(self)"}, {"name": "test_initialization_error", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test InitializationError.", "signature": "test_initialization_error(self)"}, {"name": "test_validation_error", "line": 98, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ValidationError.", "signature": "test_validation_error(self)"}, {"name": "test_external_service_error", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ExternalServiceError.", "signature": "test_external_service_error(self)"}, {"name": "test_database_connection_error", "line": 108, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test DatabaseConnectionError.", "signature": "test_database_connection_error(self)"}], "properties": [], "description": "Tests for exception handling and error scenarios."}, {"name": "TestBaseActor", "line": 114, "inherits_from": [], "methods": [{"name": "test_actor_initialization", "line": 133, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor initialization.", "signature": "async test_actor_initialization(self)"}, {"name": "test_actor_start_stop", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor start and stop lifecycle.", "signature": "async test_actor_start_stop(self)"}, {"name": "test_actor_message_handling", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor message handling.", "signature": "async test_actor_message_handling(self)"}, {"name": "test_actor_inactive_message_handling", "line": 163, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when actor is inactive.", "signature": "async test_actor_inactive_message_handling(self)"}, {"name": "test_actor_is_active", "line": 170, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test actor active status check.", "signature": "test_actor_is_active(self)"}], "properties": [], "description": "Tests for base actor behavior and interactions."}, {"name": "TestLifecycleComponent", "line": 176, "inherits_from": [], "methods": [{"name": "test_component_initialization", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialization.", "signature": "async test_component_initialization(self)"}, {"name": "test_component_initialize_shutdown", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialize and shutdown lifecycle.", "signature": "async test_component_initialize_shutdown(self)"}, {"name": "test_component_is_active", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test component active status check.", "signature": "test_component_is_active(self)"}], "properties": [], "description": "Tests for component lifecycle methods and state transitions."}, {"name": "TestBaseAgent", "line": 216, "inherits_from": [], "methods": [{"name": "test_agent_initialization", "line": 227, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent initialization.", "signature": "async test_agent_initialization(self)"}, {"name": "test_agent_activation_deactivation", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent activation and deactivation.", "signature": "async test_agent_activation_deactivation(self)"}, {"name": "test_agent_message_handling", "line": 248, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent message handling.", "signature": "async test_agent_message_handling(self)"}, {"name": "test_agent_inactive_message_handling", "line": 258, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when agent is inactive.", "signature": "async test_agent_inactive_message_handling(self)"}, {"name": "test_agent_plugin_management", "line": 265, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent plugin management.", "signature": "test_agent_plugin_management(self)"}, {"name": "test_agent_get_plugins", "line": 280, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting agent plugins.", "signature": "test_agent_get_plugins(self)"}, {"name": "test_agent_is_active", "line": 291, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent active status check.", "signature": "test_agent_is_active(self)"}], "properties": [], "description": "Tests for base agent operations and task management."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import Mock"}, {"module": "opsvi_core.agents.base_agent", "alias": null, "line": 11, "statement": "from opsvi_core.agents.base_agent import BaseAgent"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import AppConfig"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import config"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import load_config"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ConfigurationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import DatabaseConnectionError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ExternalServiceError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import InitializationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import OpsviError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ValidationError"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import get_logger"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import setup_logging"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import BaseActor"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import LifecycleComponent"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import Mock", "type": "import", "line": 7}, {"name": "from opsvi_core.agents.base_agent import BaseAgent", "type": "import", "line": 11}, {"name": "from opsvi_core.core.config import AppConfig", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import load_config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.exceptions import ConfigurationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import DatabaseConnectionError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ExternalServiceError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import InitializationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import OpsviError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ValidationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.logging import get_logger", "type": "import", "line": 21}, {"name": "from opsvi_core.core.logging import setup_logging", "type": "import", "line": 21}, {"name": "from opsvi_core.core.patterns import BaseActor", "type": "import", "line": 22}, {"name": "from opsvi_core.core.patterns import LifecycleComponent", "type": "import", "line": 22}, {"name": "TestConfiguration", "type": "class", "line": 25}, {"name": "TestLogging", "type": "class", "line": 50}, {"name": "TestExceptions", "type": "class", "line": 73}, {"name": "TestBaseActor", "type": "class", "line": 114}, {"name": "TestLifecycleComponent", "type": "class", "line": 176}, {"name": "TestBaseAgent", "type": "class", "line": 216}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 22}, {"name": "TestConfiguration Class", "description": "Class TestConfiguration definition and methods.", "line_start": 25, "line_end": 46}, {"name": "TestLogging Class", "description": "Class TestLogging definition and methods.", "line_start": 50, "line_end": 67}, {"name": "TestExceptions Class", "description": "Class TestExceptions definition and methods.", "line_start": 73, "line_end": 111}, {"name": "TestBaseActor Class", "description": "Class TestBaseActor definition and methods.", "line_start": 114, "line_end": 173}, {"name": "TestLifecycleComponent Class", "description": "Class TestLifecycleComponent definition and methods.", "line_start": 176, "line_end": 213}, {"name": "TestBaseAgent Class", "description": "Class TestBaseAgent definition and methods.", "line_start": 216, "line_end": 294}], "content_hash": "aee193451511c6b2cac4e03e863ee8aa"}'
- path: libs/opsvi-foundation/opsvi_foundation/__init__.py
  line_count: 48
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 15, "statement": "from config import FoundationConfig"}, {"module": "config", "alias": null, "line": 15, "statement": "from config import config"}, {"module": "observability", "alias": null, "line": 16, "statement": "from observability import get_logger"}, {"module": "observability", "alias": null, "line": 16, "statement": "from observability import log_context"}, {"module": "observability", "alias": null, "line": 16, "statement": "from observability import setup_logging"}, {"module": "patterns", "alias": null, "line": 17, "statement": "from patterns import BaseComponent"}, {"module": "patterns", "alias": null, "line": 17, "statement": "from patterns import ComponentError"}, {"module": "patterns", "alias": null, "line": 17, "statement": "from patterns import LifecycleComponent"}, {"module": "resilience", "alias": null, "line": 18, "statement": "from resilience import CircuitBreaker"}, {"module": "resilience", "alias": null, "line": 18, "statement": "from resilience import CircuitBreakerConfig"}, {"module": "resilience", "alias": null, "line": 18, "statement": "from resilience import RetryConfig"}, {"module": "resilience", "alias": null, "line": 18, "statement": "from resilience import RetryExecutor"}, {"module": "resilience", "alias": null, "line": 18, "statement": "from resilience import retry"}, {"module": "security", "alias": null, "line": 25, "statement": "from security import AuthConfig"}, {"module": "security", "alias": null, "line": 25, "statement": "from security import AuthManager"}, {"module": "security", "alias": null, "line": 25, "statement": "from security import TokenPayload"}, {"module": "security", "alias": null, "line": 25, "statement": "from security import sanitize_input"}], "constants": []}, "key_elements": [{"name": "from config import FoundationConfig", "type": "import", "line": 15}, {"name": "from config import config", "type": "import", "line": 15}, {"name": "from observability import get_logger", "type": "import", "line": 16}, {"name": "from observability import log_context", "type": "import", "line": 16}, {"name": "from observability import setup_logging", "type": "import", "line": 16}, {"name": "from patterns import BaseComponent", "type": "import", "line": 17}, {"name": "from patterns import ComponentError", "type": "import", "line": 17}, {"name": "from patterns import LifecycleComponent", "type": "import", "line": 17}, {"name": "from resilience import CircuitBreaker", "type": "import", "line": 18}, {"name": "from resilience import CircuitBreakerConfig", "type": "import", "line": 18}, {"name": "from resilience import RetryConfig", "type": "import", "line": 18}, {"name": "from resilience import RetryExecutor", "type": "import", "line": 18}, {"name": "from resilience import retry", "type": "import", "line": 18}, {"name": "from security import AuthConfig", "type": "import", "line": 25}, {"name": "from security import AuthManager", "type": "import", "line": 25}, {"name": "from security import TokenPayload", "type": "import", "line": 25}, {"name": "from security import sanitize_input", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 15, "line_end": 25}], "content_hash": "93fdfdf2cf734386ab1aac89d6693420"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/__init__.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "from logging import get_logger"}, {"module": "logging", "alias": null, "line": 9, "statement": "from logging import log_context"}, {"module": "logging", "alias": null, "line": 9, "statement": "from logging import setup_logging"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import MetricsCollector"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import MetricsConfig"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import TimingContext"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import metrics"}, {"module": "metrics", "alias": null, "line": 10, "statement": "from metrics import time_operation"}], "constants": []}, "key_elements": [{"name": "from logging import get_logger", "type": "import", "line": 9}, {"name": "from logging import log_context", "type": "import", "line": 9}, {"name": "from logging import setup_logging", "type": "import", "line": 9}, {"name": "from metrics import MetricsCollector", "type": "import", "line": 10}, {"name": "from metrics import MetricsConfig", "type": "import", "line": 10}, {"name": "from metrics import TimingContext", "type": "import", "line": 10}, {"name": "from metrics import metrics", "type": "import", "line": 10}, {"name": "from metrics import time_operation", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "4974973eb1d96cde01d5105180365e87"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/alerts.py
  line_count: 580
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "alerts.py", "description": "Python module with 1 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "alert_rule", "line": 547, "parameters": [{"name": "name", "type": "str"}, {"name": "condition", "type": "str"}, {"name": "severity", "type": "AlertSeverity", "default": "AlertSeverity.WARNING"}, {"name": "description", "type": "str", "default": ""}, {"name": "cooldown", "type": "float", "default": "300.0"}, {"name": "escalation_delay", "type": "float", "default": "1800.0"}, {"name": "notification_channels", "type": "list[str] | None", "default": "None"}], "is_async": false, "description": "Creates and configures an alert rule with specified parameters including name, condition, severity, and notification settings.", "signature": "alert_rule(name: str, condition: str, severity: AlertSeverity = AlertSeverity.WARNING, description: str = , cooldown: float = 300.0, escalation_delay: float = 1800.0, notification_channels: list[str] | None = None)"}], "classes": [{"name": "AlertError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to alert processing and management."}, {"name": "AlertSeverity", "line": 27, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "INFO", "line": 28, "type": ""}, {"name": "WARNING", "line": 29, "type": ""}, {"name": "ERROR", "line": 30, "type": ""}, {"name": "CRITICAL", "line": 31, "type": ""}], "description": "Defines the severity levels for alerts, such as warning or critical."}, {"name": "AlertStatus", "line": 36, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ACTIVE", "line": 37, "type": ""}, {"name": "ACKNOWLEDGED", "line": 38, "type": ""}, {"name": "RESOLVED", "line": 39, "type": ""}, {"name": "SUPPRESSED", "line": 40, "type": ""}], "description": "Represents the current status of an alert, such as active or resolved."}, {"name": "AlertRule", "line": 46, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the logic and configuration for an alert rule."}, {"name": "Alert", "line": 60, "inherits_from": [], "methods": [], "properties": [], "description": "Represents an individual alert instance generated by an alert rule."}, {"name": "NotificationChannel", "line": 76, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "dict[str, Any]):"}], "is_async": false, "description": "\n        Initialize notification channel.\n\n        Args:\n            name: Channel name\n            config: Channel configuration\n        ", "signature": "__init__(self, name: str, config: dict[str, Any]):)"}, {"name": "send_notification", "line": 91, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Send notification.\n\n        Args:\n            alert: Alert to notify about\n            message: Notification message\n\n        Returns:\n            True if notification sent successfully\n        ", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Base class for different notification channels used to send alert notifications."}, {"name": "EmailNotificationChannel", "line": 104, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send email notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel that sends alert notifications via email."}, {"name": "SlackNotificationChannel", "line": 121, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 124, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send Slack notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel that sends alert notifications to Slack."}, {"name": "WebhookNotificationChannel", "line": 138, "inherits_from": ["NotificationChannel):"], "methods": [{"name": "send_notification", "line": 141, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, message: str"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Send webhook notification.", "signature": "async send_notification(self, alert: Alert, message: str, message: str) -> bool"}], "properties": [], "description": "Notification channel that sends alert notifications via webhooks."}, {"name": "AlertManager", "line": 167, "inherits_from": [], "methods": [{"name": "__init__", "line": 170, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize alert manager.", "signature": "__init__(self)"}, {"name": "add_rule", "line": 179, "parameters": [{"name": "self", "type": "self"}, {"name": "rule", "type": "AlertRule"}], "is_async": false, "return_type": "None", "description": "\n        Add alert rule.\n\n        Args:\n            rule: Alert rule to add\n        ", "signature": "add_rule(self, rule: AlertRule) -> None"}, {"name": "remove_rule", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove alert rule.\n\n        Args:\n            name: Rule name\n        ", "signature": "remove_rule(self, name: str) -> None"}, {"name": "add_notification_channel", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "channel", "type": "NotificationChannel"}], "is_async": false, "return_type": "None", "description": "\n        Add notification channel.\n\n        Args:\n            channel: Notification channel to add\n        ", "signature": "add_notification_channel(self, channel: NotificationChannel) -> None"}, {"name": "remove_notification_channel", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove notification channel.\n\n        Args:\n            name: Channel name\n        ", "signature": "remove_notification_channel(self, name: str) -> None"}, {"name": "create_alert", "line": 215, "parameters": [{"name": "self", "type": "self"}, {"name": "rule_name", "type": "str"}, {"name": "message", "type": "str"}, {"name": "severity", "type": "AlertSeverity | None", "default": "None"}, {"name": "details", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "Alert | None", "description": "\n        Create a new alert.\n\n        Args:\n            rule_name: Name of the alert rule\n            message: Alert message\n            severity: Alert severity (uses rule severity if None)\n            details: Additional alert details\n\n        Returns:\n            Created alert or None if suppressed\n        ", "signature": "async create_alert(self, rule_name: str, message: str, severity: AlertSeverity | None = None, details: dict[str, Any] | None = None) -> Alert | None"}, {"name": "acknowledge_alert", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Acknowledge an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User acknowledging the alert\n\n        Returns:\n            True if alert acknowledged successfully\n        ", "signature": "async acknowledge_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "resolve_alert", "line": 303, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Resolve an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User resolving the alert\n\n        Returns:\n            True if alert resolved successfully\n        ", "signature": "async resolve_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "suppress_alert", "line": 332, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_id", "type": "str, user: str"}, {"name": "user", "type": "str"}], "is_async": true, "return_type": "bool", "description": "\n        Suppress an alert.\n\n        Args:\n            alert_id: Alert ID\n            user: User suppressing the alert\n\n        Returns:\n            True if alert suppressed successfully\n        ", "signature": "async suppress_alert(self, alert_id: str, user: str, user: str) -> bool"}, {"name": "_send_notifications", "line": 359, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert"}], "is_async": true, "return_type": "None", "description": "Send notifications for an alert.", "signature": "async _send_notifications(self, alert: Alert) -> None"}, {"name": "_format_notification_message", "line": 375, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert"}], "is_async": false, "return_type": "str", "description": "Format notification message.", "signature": "_format_notification_message(self, alert: Alert) -> str"}, {"name": "_schedule_escalation", "line": 388, "parameters": [{"name": "self", "type": "self"}, {"name": "alert", "type": "Alert, rule: AlertRule"}, {"name": "rule", "type": "AlertRule"}], "is_async": false, "return_type": "None", "description": "Schedule alert escalation.", "signature": "_schedule_escalation(self, alert: Alert, rule: AlertRule, rule: AlertRule) -> None"}, {"name": "get_active_alerts", "line": 404, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[Alert]", "description": "Get all active alerts.", "signature": "get_active_alerts(self) -> list[Alert]"}, {"name": "get_alerts_by_severity", "line": 412, "parameters": [{"name": "self", "type": "self"}, {"name": "severity", "type": "AlertSeverity"}], "is_async": false, "return_type": "list[Alert]", "description": "Get alerts by severity.", "signature": "get_alerts_by_severity(self, severity: AlertSeverity) -> list[Alert]"}, {"name": "get_alerts_by_rule", "line": 416, "parameters": [{"name": "self", "type": "self"}, {"name": "rule_name", "type": "str"}], "is_async": false, "return_type": "list[Alert]", "description": "Get alerts by rule name.", "signature": "get_alerts_by_rule(self, rule_name: str) -> list[Alert]"}, {"name": "get_alert_summary", "line": 420, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get alert summary.", "signature": "get_alert_summary(self) -> dict[str, Any]"}], "properties": [], "description": "Manages alert rules, alert lifecycle, and notification dispatching."}, {"name": "AlertEvaluator", "line": 447, "inherits_from": [], "methods": [{"name": "__init__", "line": 450, "parameters": [{"name": "self", "type": "self"}, {"name": "alert_manager", "type": "AlertManager):"}], "is_async": false, "description": "\n        Initialize alert evaluator.\n\n        Args:\n            alert_manager: Alert manager instance\n        ", "signature": "__init__(self, alert_manager: AlertManager):)"}, {"name": "register_evaluation_function", "line": 460, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, func: Callable"}, {"name": "func", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register an evaluation function.\n\n        Args:\n            name: Function name\n            func: Evaluation function\n        ", "signature": "register_evaluation_function(self, name: str, func: Callable, func: Callable) -> None"}, {"name": "evaluate_condition", "line": 470, "parameters": [{"name": "self", "type": "self"}, {"name": "condition", "type": "str, context: dict[str, Any]"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "bool", "description": "\n        Evaluate a condition string.\n\n        Args:\n            condition: Condition string to evaluate\n            context: Context data for evaluation\n\n        Returns:\n            True if condition is met\n        ", "signature": "async evaluate_condition(self, condition: str, context: dict[str, Any], context: dict[str, Any]) -> bool"}, {"name": "evaluate_all_rules", "line": 519, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "\n        Evaluate all alert rules.\n\n        Args:\n            context: Context data for evaluation\n        ", "signature": "async evaluate_all_rules(self, context: dict[str, Any]) -> None"}], "properties": [], "description": "Evaluates alert rules against data to determine if alerts should be triggered."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 15, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 16, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 16, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 17, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 18, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 20, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 14}, {"name": "from abc import abstractmethod", "type": "import", "line": 14}, {"name": "from collections.abc import Callable", "type": "import", "line": 15}, {"name": "from dataclasses import dataclass", "type": "import", "line": 16}, {"name": "from dataclasses import field", "type": "import", "line": 16}, {"name": "from enum import Enum", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 18}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 20}, {"name": "AlertError", "type": "class", "line": 23}, {"name": "AlertSeverity", "type": "class", "line": 27}, {"name": "AlertStatus", "type": "class", "line": 36}, {"name": "AlertRule", "type": "class", "line": 46}, {"name": "Alert", "type": "class", "line": 60}, {"name": "NotificationChannel", "type": "class", "line": 76}, {"name": "EmailNotificationChannel", "type": "class", "line": 104}, {"name": "SlackNotificationChannel", "type": "class", "line": 121}, {"name": "WebhookNotificationChannel", "type": "class", "line": 138}, {"name": "AlertManager", "type": "class", "line": 167}, {"name": "AlertEvaluator", "type": "class", "line": 447}, {"name": "alert_rule", "type": "function", "line": 547}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 20}, {"name": "alert_rule Function", "description": "Function alert_rule implementation.", "line_start": 547, "line_end": 552}, {"name": "AlertError Class", "description": "Class AlertError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "AlertSeverity Class", "description": "Class AlertSeverity definition and methods.", "line_start": 27, "line_end": 37}, {"name": "AlertStatus Class", "description": "Class AlertStatus definition and methods.", "line_start": 36, "line_end": 46}, {"name": "AlertRule Class", "description": "Class AlertRule definition and methods.", "line_start": 46, "line_end": 56}, {"name": "Alert Class", "description": "Class Alert definition and methods.", "line_start": 60, "line_end": 70}, {"name": "NotificationChannel Class", "description": "Class NotificationChannel definition and methods.", "line_start": 76, "line_end": 94}, {"name": "EmailNotificationChannel Class", "description": "Class EmailNotificationChannel definition and methods.", "line_start": 104, "line_end": 110}, {"name": "SlackNotificationChannel Class", "description": "Class SlackNotificationChannel definition and methods.", "line_start": 121, "line_end": 127}, {"name": "WebhookNotificationChannel Class", "description": "Class WebhookNotificationChannel definition and methods.", "line_start": 138, "line_end": 144}, {"name": "AlertManager Class", "description": "Class AlertManager definition and methods.", "line_start": 167, "line_end": 423}, {"name": "AlertEvaluator Class", "description": "Class AlertEvaluator definition and methods.", "line_start": 447, "line_end": 522}], "content_hash": "02acb2c855b6d4327ab79283bf98be70"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/profiling.py
  line_count: 539
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "profiling.py", "description": "Python module with 3 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "profile_function", "line": 368, "parameters": [{"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": false, "description": "Profiles the execution of a synchronous function using the specified profiling type and profiler.", "signature": "profile_function(name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}, {"name": "async_profile_function", "line": 390, "parameters": [{"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": true, "description": "Profiles the execution of an asynchronous function using the specified profiling type and profiler.", "signature": "async async_profile_function(name: str, profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}, {"name": "profile_decorator", "line": 411, "parameters": [{"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}, {"name": "profiler_name", "type": "str", "default": "default"}], "is_async": false, "description": "Creates a decorator to profile functions with the given profiling type and profiler.", "signature": "profile_decorator(profiling_type: ProfilingType = ProfilingType.COMBINED, profiler_name: str = default)"}], "classes": [{"name": "ProfilingError", "line": 27, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to profiling operations."}, {"name": "ProfilingType", "line": 31, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CPU", "line": 32, "type": ""}, {"name": "MEMORY", "line": 33, "type": ""}, {"name": "ASYNC", "line": 34, "type": ""}, {"name": "COMBINED", "line": 35, "type": ""}], "description": "Enumeration defining different types of profiling modes available."}, {"name": "ProfilingResult", "line": 41, "inherits_from": [], "methods": [], "properties": [], "description": "Represents the results obtained from a profiling session."}, {"name": "CPUProfiler", "line": 52, "inherits_from": [], "methods": [{"name": "__init__", "line": 55, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize CPU profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 60, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start CPU profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "pstats.Stats", "description": "Stop CPU profiling and return stats.", "signature": "stop(self) -> pstats.Stats"}, {"name": "get_stats_summary", "line": 70, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get profiling stats summary.", "signature": "get_stats_summary(self) -> dict[str, Any]"}], "properties": [], "description": "Handles CPU usage profiling with methods to start, stop, and retrieve profiling data."}, {"name": "MemoryProfiler", "line": 113, "inherits_from": [], "methods": [{"name": "__init__", "line": 116, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize memory profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 121, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start memory profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 126, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Stop memory profiling and return analysis.", "signature": "stop(self) -> dict[str, Any]"}], "properties": [], "description": "Manages memory usage profiling including tracking and reporting memory consumption."}, {"name": "AsyncProfiler", "line": 164, "inherits_from": [], "methods": [{"name": "__init__", "line": 167, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize async profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start async profiling.", "signature": "start(self) -> None"}, {"name": "stop", "line": 180, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Stop async profiling and return analysis.", "signature": "stop(self) -> dict[str, Any]"}, {"name": "track_task", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "task", "type": "asyncio.Task"}], "is_async": false, "return_type": "None", "description": "Track an async task.", "signature": "track_task(self, task: asyncio.Task) -> None"}], "properties": [], "description": "Profiles asynchronous code execution with support for starting, stopping, and collecting data."}, {"name": "PerformanceProfiler", "line": 207, "inherits_from": [], "methods": [{"name": "__init__", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize performance profiler.", "signature": "__init__(self)"}, {"name": "start", "line": 217, "parameters": [{"name": "self", "type": "self"}, {"name": "profiling_type", "type": "ProfilingType = ProfilingType.COMBINED", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "None", "description": "\n        Start profiling.\n\n        Args:\n            profiling_type: Type of profiling to perform\n        ", "signature": "start(self, profiling_type: ProfilingType = ProfilingType.COMBINED = ProfilingType.COMBINED) -> None"}, {"name": "stop", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "ProfilingResult", "description": "\n        Stop profiling and return results.\n\n        Args:\n            profiling_type: Type of profiling to stop\n\n        Returns:\n            Profiling result\n        ", "signature": "stop(self, profiling_type: ProfilingType = ProfilingType.COMBINED) -> ProfilingResult"}], "properties": [], "description": "Aggregates various performance metrics including CPU and memory profiling."}, {"name": "ProfilingManager", "line": 285, "inherits_from": [], "methods": [{"name": "__init__", "line": 288, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize profiling manager.", "signature": "__init__(self)"}, {"name": "create_profiler", "line": 293, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "PerformanceProfiler", "description": "\n        Create a new profiler.\n\n        Args:\n            name: Profiler name\n\n        Returns:\n            Created profiler\n        ", "signature": "create_profiler(self, name: str) -> PerformanceProfiler"}, {"name": "get_profiler", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "PerformanceProfiler | None", "description": "Get profiler by name.", "signature": "get_profiler(self, name: str) -> PerformanceProfiler | None"}, {"name": "start_profiling", "line": 312, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "None", "description": "\n        Start profiling with named profiler.\n\n        Args:\n            name: Profiler name\n            profiling_type: Type of profiling\n        ", "signature": "start_profiling(self, name: str, profiling_type: ProfilingType = ProfilingType.COMBINED) -> None"}, {"name": "stop_profiling", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "profiling_type", "type": "ProfilingType", "default": "ProfilingType.COMBINED"}], "is_async": false, "return_type": "ProfilingResult", "description": "\n        Stop profiling with named profiler.\n\n        Args:\n            name: Profiler name\n            profiling_type: Type of profiling\n\n        Returns:\n            Profiling result\n        ", "signature": "stop_profiling(self, name: str, profiling_type: ProfilingType = ProfilingType.COMBINED) -> ProfilingResult"}, {"name": "get_results", "line": 353, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "list[ProfilingResult]", "description": "Get profiling results for named profiler.", "signature": "get_results(self, name: str) -> list[ProfilingResult]"}, {"name": "clear_results", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Clear profiling results for named profiler.", "signature": "clear_results(self, name: str) -> None"}], "properties": [], "description": "Coordinates multiple profilers and manages profiling sessions across different profiling types."}, {"name": "PerformanceMonitor", "line": 451, "inherits_from": [], "methods": [{"name": "__init__", "line": 454, "parameters": [{"name": "self", "type": "self"}, {"name": "interval", "type": "float", "default": "60.0"}], "is_async": false, "description": "\n        Initialize performance monitor.\n\n        Args:\n            interval: Monitoring interval in seconds\n        ", "signature": "__init__(self, interval: float = 60.0)"}, {"name": "start_monitoring", "line": 466, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start continuous monitoring.", "signature": "async start_monitoring(self) -> None"}, {"name": "stop_monitoring", "line": 474, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop continuous monitoring.", "signature": "async stop_monitoring(self) -> None"}, {"name": "_monitor_loop", "line": 484, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Background monitoring loop.", "signature": "async _monitor_loop(self) -> None"}, {"name": "get_metrics_summary", "line": 513, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get metrics summary.", "signature": "get_metrics_summary(self) -> dict[str, Any]"}], "properties": [], "description": "Monitors and reports on system performance metrics during profiling."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "cProfile", "alias": null, "line": 13, "statement": "import cProfile"}, {"module": "functools", "alias": null, "line": 14, "statement": "import functools"}, {"module": "io", "alias": null, "line": 15, "statement": "import io"}, {"module": "pstats", "alias": null, "line": 16, "statement": "import pstats"}, {"module": "time", "alias": null, "line": 17, "statement": "import time"}, {"module": "tracemalloc", "alias": null, "line": 18, "statement": "import tracemalloc"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "contextlib", "alias": null, "line": 19, "statement": "from contextlib import asynccontextmanager"}, {"module": "contextlib", "alias": null, "line": 19, "statement": "from contextlib import contextmanager"}, {"module": "dataclasses", "alias": null, "line": 20, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 21, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 22, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 24, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "cProfile", "type": "import", "line": 13}, {"name": "functools", "type": "import", "line": 14}, {"name": "io", "type": "import", "line": 15}, {"name": "pstats", "type": "import", "line": 16}, {"name": "time", "type": "import", "line": 17}, {"name": "tracemalloc", "type": "import", "line": 18}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 19}, {"name": "from contextlib import contextmanager", "type": "import", "line": 19}, {"name": "from dataclasses import dataclass", "type": "import", "line": 20}, {"name": "from enum import Enum", "type": "import", "line": 21}, {"name": "from typing import Any", "type": "import", "line": 22}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 24}, {"name": "ProfilingError", "type": "class", "line": 27}, {"name": "ProfilingType", "type": "class", "line": 31}, {"name": "ProfilingResult", "type": "class", "line": 41}, {"name": "CPUProfiler", "type": "class", "line": 52}, {"name": "MemoryProfiler", "type": "class", "line": 113}, {"name": "AsyncProfiler", "type": "class", "line": 164}, {"name": "PerformanceProfiler", "type": "class", "line": 207}, {"name": "ProfilingManager", "type": "class", "line": 285}, {"name": "profile_function", "type": "function", "line": 368}, {"name": "async_profile_function", "type": "function", "line": 390}, {"name": "profile_decorator", "type": "function", "line": 411}, {"name": "PerformanceMonitor", "type": "class", "line": 451}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 24}, {"name": "profile_function Function", "description": "Function profile_function implementation.", "line_start": 368, "line_end": 389}, {"name": "async_profile_function Function", "description": "Function async_profile_function implementation.", "line_start": 390, "line_end": 410}, {"name": "profile_decorator Function", "description": "Function profile_decorator implementation.", "line_start": 411, "line_end": 450}, {"name": "ProfilingError Class", "description": "Class ProfilingError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "ProfilingType Class", "description": "Class ProfilingType definition and methods.", "line_start": 31, "line_end": 41}, {"name": "ProfilingResult Class", "description": "Class ProfilingResult definition and methods.", "line_start": 41, "line_end": 51}, {"name": "CPUProfiler Class", "description": "Class CPUProfiler definition and methods.", "line_start": 52, "line_end": 73}, {"name": "MemoryProfiler Class", "description": "Class MemoryProfiler definition and methods.", "line_start": 113, "line_end": 129}, {"name": "AsyncProfiler Class", "description": "Class AsyncProfiler definition and methods.", "line_start": 164, "line_end": 204}, {"name": "PerformanceProfiler Class", "description": "Class PerformanceProfiler definition and methods.", "line_start": 207, "line_end": 238}, {"name": "ProfilingManager Class", "description": "Class ProfilingManager definition and methods.", "line_start": 285, "line_end": 360}, {"name": "PerformanceMonitor Class", "description": "Class PerformanceMonitor definition and methods.", "line_start": 451, "line_end": 516}], "content_hash": "f1e9beefa4da74561baf061e065c55a3"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/tracing.py
  line_count: 482
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "tracing.py", "description": "Python module with 5 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "trace_span", "line": 352, "parameters": [{"name": "name", "type": "str"}, {"name": "tracer_name", "type": "str | None", "default": "None"}], "is_async": false, "description": "Create a tracing span with the given name and optional tracer.", "signature": "trace_span(name: str, tracer_name: str | None = None)"}, {"name": "async_trace_span", "line": 377, "parameters": [{"name": "name", "type": "str"}, {"name": "tracer_name", "type": "str | None", "default": "None"}], "is_async": true, "description": "Asynchronously create a tracing span with the given name and optional tracer.", "signature": "async async_trace_span(name: str, tracer_name: str | None = None)"}, {"name": "trace_function", "line": 401, "parameters": [{"name": "name", "type": "str | None", "default": "None"}, {"name": "tracer_name", "type": "str | None", "default": "None"}], "is_async": false, "description": "Decorator to trace the execution of a function with an optional name and tracer.", "signature": "trace_function(name: str | None = None, tracer_name: str | None = None)"}, {"name": "inject_trace_context", "line": 438, "parameters": [{"name": "carrier", "type": "dict[str, str]"}, {"name": "tracer_name", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Inject the current trace context into a carrier dictionary for propagation.", "signature": "inject_trace_context(carrier: dict[str, str], tracer_name: str | None = None) -> None"}, {"name": "extract_trace_context", "line": 462, "parameters": [{"name": "carrier", "type": "dict[str, str]"}, {"name": "tracer_name", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "TraceContext | None", "description": "Extract a trace context from a carrier dictionary if present.", "signature": "extract_trace_context(carrier: dict[str, str], tracer_name: str | None = None) -> TraceContext | None"}], "classes": [{"name": "TracingError", "line": 22, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to tracing operations."}, {"name": "SamplingStrategy", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ALWAYS", "line": 27, "type": ""}, {"name": "NEVER", "line": 28, "type": ""}, {"name": "PROBABILISTIC", "line": 29, "type": ""}, {"name": "RATE_LIMITING", "line": 30, "type": ""}, {"name": "DYNAMIC", "line": 31, "type": ""}], "description": "Defines the strategy used to sample traces for collection."}, {"name": "TracingConfig", "line": 37, "inherits_from": [], "methods": [], "properties": [], "description": "Configuration settings for tracing behavior and parameters."}, {"name": "TraceContext", "line": 53, "inherits_from": [], "methods": [{"name": "__init__", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str"}, {"name": "span_id", "type": "str"}, {"name": "sampled", "type": "bool", "default": "True"}], "is_async": false, "description": "\n        Initialize trace context.\n\n        Args:\n            trace_id: Trace ID\n            span_id: Span ID\n            sampled: Whether trace is sampled\n        ", "signature": "__init__(self, trace_id: str, span_id: str, sampled: bool = True)"}, {"name": "to_dict", "line": 69, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "Convert to dictionary for propagation.", "signature": "to_dict(self) -> dict[str, str]"}, {"name": "from_dict", "line": 78, "parameters": [{"name": "cls", "type": "self"}, {"name": "data", "type": "dict[str, str]"}], "is_async": false, "return_type": "TraceContext", "description": "Create from dictionary.", "signature": "from_dict(cls, data: dict[str, str]) -> TraceContext"}], "properties": [], "description": "Represents the context of a trace including trace identifiers and metadata."}, {"name": "Span", "line": 87, "inherits_from": [], "methods": [{"name": "__init__", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "context", "type": "TraceContext | None", "default": "None"}], "is_async": false, "description": "\n        Initialize span.\n\n        Args:\n            name: Span name\n            context: Trace context\n        ", "signature": "__init__(self, name: str, context: TraceContext | None = None)"}, {"name": "_generate_context", "line": 109, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "TraceContext", "description": "Generate new trace context.", "signature": "_generate_context(self) -> TraceContext"}, {"name": "start", "line": 117, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Start the span.", "signature": "start(self) -> None"}, {"name": "end", "line": 124, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "End the span.", "signature": "end(self) -> None"}, {"name": "set_attribute", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Set span attribute.\n\n        Args:\n            key: Attribute key\n            value: Attribute value\n        ", "signature": "set_attribute(self, key: str, value: Any, value: Any) -> None"}, {"name": "add_event", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, attributes: dict[str, Any] | None = None"}, {"name": "attributes", "type": "dict[str, Any] | None = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Add event to span.\n\n        Args:\n            name: Event name\n            attributes: Event attributes\n        ", "signature": "add_event(self, name: str, attributes: dict[str, Any] | None = None, attributes: dict[str, Any] | None = None = None) -> None"}, {"name": "set_status", "line": 160, "parameters": [{"name": "self", "type": "self"}, {"name": "status", "type": "str, message: str = \"\""}, {"name": "message", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "None", "description": "\n        Set span status.\n\n        Args:\n            status: Status (OK, ERROR, UNSET)\n            message: Status message\n        ", "signature": "set_status(self, status: str, message: str = \"\", message: str = \"\" = ) -> None"}, {"name": "add_link", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str"}, {"name": "span_id", "type": "str"}, {"name": "attributes", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Add link to span.\n\n        Args:\n            trace_id: Linked trace ID\n            span_id: Linked span ID\n            attributes: Link attributes\n        ", "signature": "add_link(self, trace_id: str, span_id: str, attributes: dict[str, Any] | None = None) -> None"}, {"name": "duration", "line": 194, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float | None", "description": "Get span duration in seconds.", "signature": "duration(self) -> float | None"}, {"name": "is_active", "line": 201, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if span is active.", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Represents a single unit of work within a trace, capturing timing and metadata."}, {"name": "Tracer", "line": 206, "inherits_from": [], "methods": [{"name": "__init__", "line": 209, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TracingConfig):"}], "is_async": false, "description": "\n        Initialize tracer.\n\n        Args:\n            config: Tracing configuration\n        ", "signature": "__init__(self, config: TracingConfig):)"}, {"name": "start_span", "line": 220, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, context: TraceContext | None = None"}, {"name": "context", "type": "TraceContext | None = None", "default": "None"}], "is_async": false, "return_type": "Span", "description": "\n        Start a new span.\n\n        Args:\n            name: Span name\n            context: Trace context\n\n        Returns:\n            Started span\n        ", "signature": "start_span(self, name: str, context: TraceContext | None = None, context: TraceContext | None = None = None) -> Span"}, {"name": "end_span", "line": 240, "parameters": [{"name": "self", "type": "self"}, {"name": "span", "type": "Span"}], "is_async": false, "return_type": "None", "description": "\n        End a span.\n\n        Args:\n            span: Span to end\n        ", "signature": "end_span(self, span: Span) -> None"}, {"name": "get_current_span", "line": 253, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Span | None", "description": "Get current active span.", "signature": "get_current_span(self) -> Span | None"}, {"name": "inject_context", "line": 261, "parameters": [{"name": "self", "type": "self"}, {"name": "span", "type": "Span, carrier: dict[str, str]"}, {"name": "carrier", "type": "dict[str, str]"}], "is_async": false, "return_type": "None", "description": "\n        Inject trace context into carrier.\n\n        Args:\n            span: Span to inject\n            carrier: Carrier dictionary\n        ", "signature": "inject_context(self, span: Span, carrier: dict[str, str], carrier: dict[str, str]) -> None"}, {"name": "extract_context", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "carrier", "type": "dict[str, str]"}], "is_async": false, "return_type": "TraceContext | None", "description": "\n        Extract trace context from carrier.\n\n        Args:\n            carrier: Carrier dictionary\n\n        Returns:\n            Extracted trace context\n        ", "signature": "extract_context(self, carrier: dict[str, str]) -> TraceContext | None"}, {"name": "should_sample", "line": 285, "parameters": [{"name": "self", "type": "self"}, {"name": "trace_id", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Determine if trace should be sampled.\n\n        Args:\n            trace_id: Trace ID\n\n        Returns:\n            True if should sample, False otherwise\n        ", "signature": "should_sample(self, trace_id: str) -> bool"}], "properties": [], "description": "Manages the creation and lifecycle of spans within a trace."}, {"name": "TraceManager", "line": 306, "inherits_from": [], "methods": [{"name": "__init__", "line": 309, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize trace manager.", "signature": "__init__(self)"}, {"name": "add_tracer", "line": 314, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: TracingConfig"}, {"name": "config", "type": "TracingConfig"}], "is_async": false, "return_type": "Tracer", "description": "\n        Add tracer.\n\n        Args:\n            name: Tracer name\n            config: Tracer configuration\n\n        Returns:\n            Created tracer\n        ", "signature": "add_tracer(self, name: str, config: TracingConfig, config: TracingConfig) -> Tracer"}, {"name": "get_tracer", "line": 333, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Tracer | None", "description": "Get tracer by name.", "signature": "get_tracer(self, name: str) -> Tracer | None"}, {"name": "get_default_tracer", "line": 337, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Tracer | None", "description": "Get default tracer.", "signature": "get_default_tracer(self) -> Tracer | None"}, {"name": "set_default_tracer", "line": 341, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set default tracer.", "signature": "set_default_tracer(self, name: str) -> None"}], "properties": [], "description": "Coordinates tracing operations and manages active trace contexts."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "functools", "alias": null, "line": 13, "statement": "import functools"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import asynccontextmanager"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import contextmanager"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 19, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 50, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "functools", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 14}, {"name": "from contextlib import contextmanager", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from typing import TypeVar", "type": "import", "line": 17}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 19}, {"name": "TracingError", "type": "class", "line": 22}, {"name": "SamplingStrategy", "type": "class", "line": 26}, {"name": "TracingConfig", "type": "class", "line": 37}, {"name": "T", "type": "constant", "line": 50}, {"name": "TraceContext", "type": "class", "line": 53}, {"name": "Span", "type": "class", "line": 87}, {"name": "Tracer", "type": "class", "line": 206}, {"name": "TraceManager", "type": "class", "line": 306}, {"name": "trace_span", "type": "function", "line": 352}, {"name": "async_trace_span", "type": "function", "line": 377}, {"name": "trace_function", "type": "function", "line": 401}, {"name": "inject_trace_context", "type": "function", "line": 438}, {"name": "extract_trace_context", "type": "function", "line": 462}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "trace_span Function", "description": "Function trace_span implementation.", "line_start": 352, "line_end": 376}, {"name": "async_trace_span Function", "description": "Function async_trace_span implementation.", "line_start": 377, "line_end": 400}, {"name": "trace_function Function", "description": "Function trace_function implementation.", "line_start": 401, "line_end": 437}, {"name": "inject_trace_context Function", "description": "Function inject_trace_context implementation.", "line_start": 438, "line_end": 461}, {"name": "extract_trace_context Function", "description": "Function extract_trace_context implementation.", "line_start": 462, "line_end": 467}, {"name": "TracingError Class", "description": "Class TracingError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "SamplingStrategy Class", "description": "Class SamplingStrategy definition and methods.", "line_start": 26, "line_end": 36}, {"name": "TracingConfig Class", "description": "Class TracingConfig definition and methods.", "line_start": 37, "line_end": 47}, {"name": "TraceContext Class", "description": "Class TraceContext definition and methods.", "line_start": 53, "line_end": 81}, {"name": "Span Class", "description": "Class Span definition and methods.", "line_start": 87, "line_end": 204}, {"name": "Tracer Class", "description": "Class Tracer definition and methods.", "line_start": 206, "line_end": 288}, {"name": "TraceManager Class", "description": "Class TraceManager definition and methods.", "line_start": 306, "line_end": 344}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 50, "line_end": 50}], "content_hash": "1b8aab3523f591ae181b96e03ae67b0b"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/health.py
  line_count: 595
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "health.py", "description": "Python module with 1 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "health_check", "line": 570, "parameters": [{"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}, {"name": "timeout", "type": "float", "default": "30.0"}, {"name": "critical", "type": "bool", "default": "True"}], "is_async": false, "description": "Performs a health check with specified parameters including name, description, timeout, and criticality.", "signature": "health_check(name: str, description: str = , timeout: float = 30.0, critical: bool = True)"}], "classes": [{"name": "HealthError", "line": 25, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error encountered during a health check."}, {"name": "HealthStatus", "line": 29, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "HEALTHY", "line": 30, "type": ""}, {"name": "UNHEALTHY", "line": 31, "type": ""}, {"name": "DEGRADED", "line": 32, "type": ""}, {"name": "UNKNOWN", "line": 33, "type": ""}], "description": "Encapsulates the status information of a health check."}, {"name": "HealthCheck", "line": 39, "inherits_from": [], "methods": [], "properties": [], "description": "Defines a health check with its associated properties and behavior."}, {"name": "HealthChecker", "line": 53, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 56, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}, {"name": "timeout", "type": "float", "default": "30.0"}, {"name": "critical", "type": "bool", "default": "True"}], "is_async": false, "description": "\n        Initialize health checker.\n\n        Args:\n            name: Health check name\n            description: Health check description\n            timeout: Health check timeout\n            critical: Whether this check is critical\n        ", "signature": "__init__(self, name: str, description: str = , timeout: float = 30.0, critical: bool = True)"}, {"name": "check", "line": 78, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "\n        Perform health check.\n\n        Returns:\n            Health check result\n        ", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Base class for implementing various health check mechanisms."}, {"name": "PingHealthChecker", "line": 87, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "host", "type": "str"}, {"name": "port", "type": "int", "default": "80"}], "is_async": false, "description": "\n        Initialize ping health checker.\n\n        Args:\n            host: Host to ping\n            port: Port to check\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, host: str, port: int = 80, **kwargs)"}, {"name": "check", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform ping health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies system availability via ping."}, {"name": "HttpHealthChecker", "line": 147, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 150, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}, {"name": "expected_status", "type": "int", "default": "200"}], "is_async": false, "description": "\n        Initialize HTTP health checker.\n\n        Args:\n            url: URL to check\n            expected_status: Expected HTTP status code\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, url: str, expected_status: int = 200, **kwargs)"}, {"name": "check", "line": 163, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform HTTP health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies service health through HTTP requests."}, {"name": "DatabaseHealthChecker", "line": 214, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 217, "parameters": [{"name": "self", "type": "self"}, {"name": "connection_func", "type": "Callable"}], "is_async": false, "description": "\n        Initialize database health checker.\n\n        Args:\n            connection_func: Function to test database connection\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, connection_func: Callable, **kwargs)"}, {"name": "check", "line": 228, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform database health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Implements a health checker that verifies database connectivity and health."}, {"name": "CustomHealthChecker", "line": 269, "inherits_from": ["HealthChecker):"], "methods": [{"name": "__init__", "line": 272, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "check_func", "type": "Callable"}], "is_async": false, "description": "\n        Initialize custom health checker.\n\n        Args:\n            name: Health check name\n            check_func: Function to perform health check\n            **kwargs: Additional arguments\n        ", "signature": "__init__(self, name: str, check_func: Callable, **kwargs)"}, {"name": "check", "line": 284, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "HealthCheck", "description": "Perform custom health check.", "signature": "async check(self) -> HealthCheck"}], "properties": [], "description": "Allows creation of custom health check implementations."}, {"name": "HealthMonitor", "line": 344, "inherits_from": [], "methods": [{"name": "__init__", "line": 347, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize health monitor.", "signature": "__init__(self)"}, {"name": "add_checker", "line": 355, "parameters": [{"name": "self", "type": "self"}, {"name": "checker", "type": "HealthChecker"}], "is_async": false, "return_type": "None", "description": "\n        Add health checker.\n\n        Args:\n            checker: Health checker to add\n        ", "signature": "add_checker(self, checker: HealthChecker) -> None"}, {"name": "remove_checker", "line": 364, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove health checker.\n\n        Args:\n            name: Health checker name\n        ", "signature": "remove_checker(self, name: str) -> None"}, {"name": "run_check", "line": 374, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "HealthCheck", "description": "\n        Run specific health check.\n\n        Args:\n            name: Health checker name\n\n        Returns:\n            Health check result\n\n        Raises:\n            ValueError: If checker not found\n        ", "signature": "async run_check(self, name: str) -> HealthCheck"}, {"name": "run_all_checks", "line": 395, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, HealthCheck]", "description": "\n        Run all health checks.\n\n        Returns:\n            Dictionary of health check results\n        ", "signature": "async run_all_checks(self) -> dict[str, HealthCheck]"}, {"name": "get_overall_status", "line": 425, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "HealthStatus", "description": "\n        Get overall health status.\n\n        Returns:\n            Overall health status\n        ", "signature": "get_overall_status(self) -> HealthStatus"}, {"name": "get_health_summary", "line": 458, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Get health summary.\n\n        Returns:\n            Health summary dictionary\n        ", "signature": "get_health_summary(self) -> dict[str, Any]"}, {"name": "start_auto_refresh", "line": 482, "parameters": [{"name": "self", "type": "self"}, {"name": "interval", "type": "float | None = None", "default": "None"}], "is_async": false, "return_type": "None", "description": "\n        Start automatic health check refresh.\n\n        Args:\n            interval: Refresh interval in seconds\n        ", "signature": "start_auto_refresh(self, interval: float | None = None = None) -> None"}, {"name": "stop_auto_refresh", "line": 496, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Stop automatic health check refresh.", "signature": "stop_auto_refresh(self) -> None"}, {"name": "_refresh_loop", "line": 503, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Background refresh loop.", "signature": "async _refresh_loop(self) -> None"}], "properties": [], "description": "Manages and aggregates multiple health checks to monitor overall system health."}, {"name": "HealthEndpoint", "line": 517, "inherits_from": [], "methods": [{"name": "__init__", "line": 520, "parameters": [{"name": "self", "type": "self"}, {"name": "monitor", "type": "HealthMonitor"}, {"name": "path", "type": "str", "default": "/health"}], "is_async": false, "description": "\n        Initialize health endpoint.\n\n        Args:\n            monitor: Health monitor\n            path: Endpoint path\n        ", "signature": "__init__(self, monitor: HealthMonitor, path: str = /health)"}, {"name": "handle_request", "line": 531, "parameters": [{"name": "self", "type": "self"}, {"name": "request", "type": "dict[str, Any]"}], "is_async": true, "return_type": "dict[str, Any]", "description": "\n        Handle health check request.\n\n        Args:\n            request: HTTP request\n\n        Returns:\n            HTTP response\n        ", "signature": "async handle_request(self, request: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Exposes health check results through an API endpoint."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 15, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 16, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import TYPE_CHECKING"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 22, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 14}, {"name": "from abc import abstractmethod", "type": "import", "line": 14}, {"name": "from dataclasses import dataclass", "type": "import", "line": 15}, {"name": "from dataclasses import field", "type": "import", "line": 15}, {"name": "from enum import Enum", "type": "import", "line": 16}, {"name": "from typing import TYPE_CHECKING", "type": "import", "line": 17}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 22}, {"name": "HealthError", "type": "class", "line": 25}, {"name": "HealthStatus", "type": "class", "line": 29}, {"name": "HealthCheck", "type": "class", "line": 39}, {"name": "HealthChecker", "type": "class", "line": 53}, {"name": "PingHealthChecker", "type": "class", "line": 87}, {"name": "HttpHealthChecker", "type": "class", "line": 147}, {"name": "DatabaseHealthChecker", "type": "class", "line": 214}, {"name": "CustomHealthChecker", "type": "class", "line": 269}, {"name": "HealthMonitor", "type": "class", "line": 344}, {"name": "HealthEndpoint", "type": "class", "line": 517}, {"name": "health_check", "type": "function", "line": 570}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 22}, {"name": "health_check Function", "description": "Function health_check implementation.", "line_start": 570, "line_end": 575}, {"name": "HealthError Class", "description": "Class HealthError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "HealthStatus Class", "description": "Class HealthStatus definition and methods.", "line_start": 29, "line_end": 39}, {"name": "HealthCheck Class", "description": "Class HealthCheck definition and methods.", "line_start": 39, "line_end": 49}, {"name": "HealthChecker Class", "description": "Class HealthChecker definition and methods.", "line_start": 53, "line_end": 81}, {"name": "PingHealthChecker Class", "description": "Class PingHealthChecker definition and methods.", "line_start": 87, "line_end": 106}, {"name": "HttpHealthChecker Class", "description": "Class HttpHealthChecker definition and methods.", "line_start": 147, "line_end": 166}, {"name": "DatabaseHealthChecker Class", "description": "Class DatabaseHealthChecker definition and methods.", "line_start": 214, "line_end": 231}, {"name": "CustomHealthChecker Class", "description": "Class CustomHealthChecker definition and methods.", "line_start": 269, "line_end": 287}, {"name": "HealthMonitor Class", "description": "Class HealthMonitor definition and methods.", "line_start": 344, "line_end": 506}, {"name": "HealthEndpoint Class", "description": "Class HealthEndpoint definition and methods.", "line_start": 517, "line_end": 534}], "content_hash": "a782226940b0b60609ead39a112a28fb"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/logging.py
  line_count: 56
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 17, "parameters": [{"name": "log_level", "type": "str = \"INFO\"", "default": "INFO"}], "is_async": false, "return_type": "None", "description": "Configures the logging system with the specified log level.", "signature": "setup_logging(log_level: str = \"INFO\" = INFO) -> None"}, {"name": "get_logger", "line": 47, "parameters": [{"name": "name", "type": "str"}], "is_async": false, "return_type": "structlog.stdlib.BoundLogger", "description": "Retrieves a logger instance with the given name.", "signature": "get_logger(name: str) -> structlog.stdlib.BoundLogger"}, {"name": "log_context", "line": 52, "parameters": [], "is_async": false, "return_type": "structlog.stdlib.BoundLogger", "description": "Creates a logger with additional contextual information.", "signature": "log_context(**kwargs: Any) -> structlog.stdlib.BoundLogger"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "sys", "alias": null, "line": 10, "statement": "import sys"}, {"module": "orjson", "alias": null, "line": 13, "statement": "import orjson"}, {"module": "structlog", "alias": null, "line": 14, "statement": "import structlog"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "sys", "type": "import", "line": 10}, {"name": "orjson", "type": "import", "line": 13}, {"name": "structlog", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "setup_logging", "type": "function", "line": 17}, {"name": "get_logger", "type": "function", "line": 47}, {"name": "log_context", "type": "function", "line": 52}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 17, "line_end": 46}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 47, "line_end": 51}, {"name": "log_context Function", "description": "Function log_context implementation.", "line_start": 52, "line_end": 57}], "content_hash": "6e16f08e76c033c9b6bbc8e2f7080db1"}'
- path: libs/opsvi-foundation/opsvi_foundation/observability/metrics.py
  line_count: 348
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "metrics.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "time_operation", "line": 337, "parameters": [{"name": "histogram", "type": "Histogram"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "TimingContext", "description": "Creates a timing context that records the duration of an operation and updates the given histogram with optional labels.", "signature": "time_operation(histogram: Histogram, labels: dict[str, str] | None = None) -> TimingContext"}], "classes": [{"name": "MetricsConfig", "line": 30, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for metrics collection and reporting."}, {"name": "MetricsCollector", "line": 39, "inherits_from": [], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MetricsConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: MetricsConfig | None = None)"}, {"name": "_initialize_default_metrics", "line": 56, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize default system metrics.", "signature": "_initialize_default_metrics(self)"}, {"name": "create_counter", "line": 95, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Counter", "description": "Create a Prometheus counter.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Counter instance\n        ", "signature": "create_counter(self, name: str, description: str, labels: list[str] | None = None) -> Counter"}, {"name": "create_gauge", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Gauge", "description": "Create a Prometheus gauge.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Gauge instance\n        ", "signature": "create_gauge(self, name: str, description: str, labels: list[str] | None = None) -> Gauge"}, {"name": "create_histogram", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "Histogram", "description": "Create a Prometheus histogram.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n\n        Returns:\n            Prometheus Histogram instance\n        ", "signature": "create_histogram(self, name: str, description: str, labels: list[str] | None = None) -> Histogram"}, {"name": "create_enum", "line": 188, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "labels", "type": "list[str]"}, {"name": "states", "type": "list[str]"}], "is_async": false, "return_type": "Enum", "description": "Create a Prometheus enum.\n\n        Args:\n            name: Metric name\n            description: Metric description\n            labels: Label names\n            states: Possible enum states\n\n        Returns:\n            Prometheus Enum instance\n        ", "signature": "create_enum(self, name: str, description: str, labels: list[str], states: list[str]) -> Enum"}, {"name": "_build_metric_name", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "str", "description": "Build full metric name with namespace and subsystem.\n\n        Args:\n            name: Base metric name\n\n        Returns:\n            Full metric name\n        ", "signature": "_build_metric_name(self, name: str) -> str"}, {"name": "record_request", "line": 239, "parameters": [{"name": "self", "type": "self"}, {"name": "method", "type": "str"}, {"name": "endpoint", "type": "str"}, {"name": "status", "type": "str"}, {"name": "duration", "type": "float):"}], "is_async": false, "description": "Record request metrics.\n\n        Args:\n            method: HTTP method\n            endpoint: Request endpoint\n            status: Response status\n            duration: Request duration in seconds\n        ", "signature": "record_request(self, method: str, endpoint: str, status: str, duration: float):)"}, {"name": "record_error", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "error_type", "type": "str"}, {"name": "component", "type": "str):"}], "is_async": false, "description": "Record error metrics.\n\n        Args:\n            error_type: Type of error\n            component: Component that generated the error\n        ", "signature": "record_error(self, error_type: str, component: str):)"}, {"name": "set_component_status", "line": 275, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "str"}, {"name": "status", "type": "str):"}], "is_async": false, "description": "Set component health status.\n\n        Args:\n            component: Component name\n            status: Health status (healthy, degraded, unhealthy)\n        ", "signature": "set_component_status(self, component: str, status: str):)"}, {"name": "get_metrics", "line": 288, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get metrics in Prometheus format.\n\n        Returns:\n            Metrics as Prometheus text format\n        ", "signature": "get_metrics(self) -> str"}, {"name": "get_content_type", "line": 299, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get Prometheus content type.\n\n        Returns:\n            Prometheus content type\n        ", "signature": "get_content_type(self) -> str"}], "properties": [], "description": "Manages the collection, aggregation, and export of application metrics."}, {"name": "TimingContext", "line": 308, "inherits_from": [], "methods": [{"name": "__init__", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "histogram", "type": "Histogram | None"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, histogram: Histogram | None, labels: dict[str, str] | None = None)"}, {"name": "__enter__", "line": 320, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__enter__(self)"}, {"name": "__exit__", "line": 324, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": false, "signature": "__exit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Context manager for measuring the duration of code execution and recording it to a histogram."}], "imports": [{"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import CONTENT_TYPE_LATEST"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import CollectorRegistry"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Counter"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Enum"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Gauge"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import Histogram"}, {"module": "prometheus_client", "alias": null, "line": 14, "statement": "from prometheus_client import generate_latest"}, {"module": "pydantic", "alias": null, "line": 23, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 25, "statement": "from observability import get_logger"}], "constants": []}, "key_elements": [{"name": "time", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from prometheus_client import CONTENT_TYPE_LATEST", "type": "import", "line": 14}, {"name": "from prometheus_client import CollectorRegistry", "type": "import", "line": 14}, {"name": "from prometheus_client import Counter", "type": "import", "line": 14}, {"name": "from prometheus_client import Enum", "type": "import", "line": 14}, {"name": "from prometheus_client import Gauge", "type": "import", "line": 14}, {"name": "from prometheus_client import Histogram", "type": "import", "line": 14}, {"name": "from prometheus_client import generate_latest", "type": "import", "line": 14}, {"name": "from pydantic import BaseModel", "type": "import", "line": 23}, {"name": "from observability import get_logger", "type": "import", "line": 25}, {"name": "MetricsConfig", "type": "class", "line": 30}, {"name": "MetricsCollector", "type": "class", "line": 39}, {"name": "TimingContext", "type": "class", "line": 308}, {"name": "time_operation", "type": "function", "line": 337}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 25}, {"name": "time_operation Function", "description": "Function time_operation implementation.", "line_start": 337, "line_end": 342}, {"name": "MetricsConfig Class", "description": "Class MetricsConfig definition and methods.", "line_start": 30, "line_end": 40}, {"name": "MetricsCollector Class", "description": "Class MetricsCollector definition and methods.", "line_start": 39, "line_end": 302}, {"name": "TimingContext Class", "description": "Class TimingContext definition and methods.", "line_start": 308, "line_end": 327}], "content_hash": "3d78cc24c9e99aa604022f40b6ff1b13"}'
- path: libs/opsvi-foundation/opsvi_foundation/scaffolding/__init__.py
  line_count: 94
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "base", "alias": null, "line": 11, "statement": "from base import ConfigurableLibrary"}, {"module": "base", "alias": null, "line": 11, "statement": "from base import LibraryBase"}, {"module": "base", "alias": null, "line": 11, "statement": "from base import ManagerLibrary"}, {"module": "base", "alias": null, "line": 11, "statement": "from base import ServiceLibrary"}, {"module": "base", "alias": null, "line": 11, "statement": "from base import create_library_base"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import LibraryConfig"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import LibrarySettings"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import create_library_config"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import create_library_settings"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import create_settings_instance"}, {"module": "config", "alias": null, "line": 18, "statement": "from config import global_settings"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryConfigurationError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryConnectionError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryInitializationError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryResourceError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryShutdownError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryTimeoutError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import LibraryValidationError"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import configuration_error"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import connection_error"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import create_library_exceptions"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import get_library_exception"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import resource_error"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import timeout_error"}, {"module": "exceptions", "alias": null, "line": 26, "statement": "from exceptions import validation_error"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import ConfigurableLibraryTestBase"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import LibraryTestBase"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import ManagerLibraryTestBase"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import ServiceLibraryTestBase"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import async_mock_component"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import create_library_test_class"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import create_test_suite"}, {"module": "testing", "alias": null, "line": 43, "statement": "from testing import mock_component"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from base import ConfigurableLibrary", "type": "import", "line": 11}, {"name": "from base import LibraryBase", "type": "import", "line": 11}, {"name": "from base import ManagerLibrary", "type": "import", "line": 11}, {"name": "from base import ServiceLibrary", "type": "import", "line": 11}, {"name": "from base import create_library_base", "type": "import", "line": 11}, {"name": "from config import LibraryConfig", "type": "import", "line": 18}, {"name": "from config import LibrarySettings", "type": "import", "line": 18}, {"name": "from config import create_library_config", "type": "import", "line": 18}, {"name": "from config import create_library_settings", "type": "import", "line": 18}, {"name": "from config import create_settings_instance", "type": "import", "line": 18}, {"name": "from config import global_settings", "type": "import", "line": 18}, {"name": "from exceptions import LibraryConfigurationError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryConnectionError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryInitializationError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryResourceError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryShutdownError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryTimeoutError", "type": "import", "line": 26}, {"name": "from exceptions import LibraryValidationError", "type": "import", "line": 26}, {"name": "from exceptions import configuration_error", "type": "import", "line": 26}, {"name": "from exceptions import connection_error", "type": "import", "line": 26}, {"name": "from exceptions import create_library_exceptions", "type": "import", "line": 26}, {"name": "from exceptions import get_library_exception", "type": "import", "line": 26}, {"name": "from exceptions import resource_error", "type": "import", "line": 26}, {"name": "from exceptions import timeout_error", "type": "import", "line": 26}, {"name": "from exceptions import validation_error", "type": "import", "line": 26}, {"name": "from testing import ConfigurableLibraryTestBase", "type": "import", "line": 43}, {"name": "from testing import LibraryTestBase", "type": "import", "line": 43}, {"name": "from testing import ManagerLibraryTestBase", "type": "import", "line": 43}, {"name": "from testing import ServiceLibraryTestBase", "type": "import", "line": 43}, {"name": "from testing import async_mock_component", "type": "import", "line": 43}, {"name": "from testing import create_library_test_class", "type": "import", "line": 43}, {"name": "from testing import create_test_suite", "type": "import", "line": 43}, {"name": "from testing import mock_component", "type": "import", "line": 43}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 43}], "content_hash": "7cfd1cec18730dfcae1e9d25e00c345e"}'
- path: libs/opsvi-foundation/opsvi_foundation/scaffolding/exceptions.py
  line_count: 121
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 7 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library_exceptions", "line": 51, "parameters": [{"name": "library_name", "type": "str"}], "is_async": false, "return_type": "Dict[str, Type[LibraryError]]", "description": "Creates a dictionary of custom exception classes for a given library.", "signature": "create_library_exceptions(library_name: str) -> Dict[str, Type[LibraryError]]"}, {"name": "get_library_exception", "line": 88, "parameters": [{"name": "library_name", "type": "str, exception_type: str"}, {"name": "exception_type", "type": "str"}], "is_async": false, "return_type": "Type[LibraryError]", "description": "Retrieves a specific exception class for a given library and exception type.", "signature": "get_library_exception(library_name: str, exception_type: str, exception_type: str) -> Type[LibraryError]"}, {"name": "configuration_error", "line": 96, "parameters": [{"name": "library_name", "type": "str, message: str, details: Optional[Dict[str, Any]] = None"}, {"name": "message", "type": "str, details: Optional[Dict[str, Any]] = None"}, {"name": "details", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "LibraryConfigurationError", "description": "Generates a LibraryConfigurationError with an optional detailed message for a library.", "signature": "configuration_error(library_name: str, message: str, details: Optional[Dict[str, Any]] = None, message: str, details: Optional[Dict[str, Any]] = None, details: Optional[Dict[str, Any]] = None = None) -> LibraryConfigurationError"}, {"name": "connection_error", "line": 102, "parameters": [{"name": "library_name", "type": "str, message: str, details: Optional[Dict[str, Any]] = None"}, {"name": "message", "type": "str, details: Optional[Dict[str, Any]] = None"}, {"name": "details", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "LibraryConnectionError", "description": "Generates a LibraryConnectionError with an optional detailed message for a library.", "signature": "connection_error(library_name: str, message: str, details: Optional[Dict[str, Any]] = None, message: str, details: Optional[Dict[str, Any]] = None, details: Optional[Dict[str, Any]] = None = None) -> LibraryConnectionError"}, {"name": "validation_error", "line": 108, "parameters": [{"name": "library_name", "type": "str, message: str, details: Optional[Dict[str, Any]] = None"}, {"name": "message", "type": "str, details: Optional[Dict[str, Any]] = None"}, {"name": "details", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "LibraryValidationError", "description": "Generates a LibraryValidationError with an optional detailed message for a library.", "signature": "validation_error(library_name: str, message: str, details: Optional[Dict[str, Any]] = None, message: str, details: Optional[Dict[str, Any]] = None, details: Optional[Dict[str, Any]] = None = None) -> LibraryValidationError"}, {"name": "timeout_error", "line": 114, "parameters": [{"name": "library_name", "type": "str, message: str, details: Optional[Dict[str, Any]] = None"}, {"name": "message", "type": "str, details: Optional[Dict[str, Any]] = None"}, {"name": "details", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "LibraryTimeoutError", "description": "Generates a LibraryTimeoutError with an optional detailed message for a library.", "signature": "timeout_error(library_name: str, message: str, details: Optional[Dict[str, Any]] = None, message: str, details: Optional[Dict[str, Any]] = None, details: Optional[Dict[str, Any]] = None = None) -> LibraryTimeoutError"}, {"name": "resource_error", "line": 120, "parameters": [{"name": "library_name", "type": "str, message: str, details: Optional[Dict[str, Any]] = None"}, {"name": "message", "type": "str, details: Optional[Dict[str, Any]] = None"}, {"name": "details", "type": "Optional[Dict[str, Any]] = None", "default": "None"}], "is_async": false, "return_type": "LibraryResourceError", "description": "Generates a LibraryResourceError with an optional detailed message for a library.", "signature": "resource_error(library_name: str, message: str, details: Optional[Dict[str, Any]] = None, message: str, details: Optional[Dict[str, Any]] = None, details: Optional[Dict[str, Any]] = None = None) -> LibraryResourceError"}], "classes": [{"name": "LibraryError", "line": 16, "inherits_from": ["OPSVIError):"], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Base exception class for all library-related errors."}, {"name": "LibraryConfigurationError", "line": 23, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related errors in a library."}, {"name": "LibraryConnectionError", "line": 27, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised for connection-related errors in a library."}, {"name": "LibraryValidationError", "line": 31, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised for validation-related errors in a library."}, {"name": "LibraryTimeoutError", "line": 35, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised when a library operation times out."}, {"name": "LibraryResourceError", "line": 39, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised for resource-related errors in a library."}, {"name": "LibraryInitializationError", "line": 43, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised during library initialization failures."}, {"name": "LibraryShutdownError", "line": 47, "inherits_from": ["LibraryError):"], "methods": [], "properties": [], "description": "Exception raised during library shutdown failures."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Type"}, {"module": "opsvi_foundation.patterns.base", "alias": "OPSVIError", "line": 13, "statement": "from opsvi_foundation.patterns.base import ComponentError as OPSVIError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from typing import Type", "type": "import", "line": 11}, {"name": "from opsvi_foundation.patterns.base import ComponentError as OPSVIError", "type": "import", "line": 13}, {"name": "LibraryError", "type": "class", "line": 16}, {"name": "LibraryConfigurationError", "type": "class", "line": 23}, {"name": "LibraryConnectionError", "type": "class", "line": 27}, {"name": "LibraryValidationError", "type": "class", "line": 31}, {"name": "LibraryTimeoutError", "type": "class", "line": 35}, {"name": "LibraryResourceError", "type": "class", "line": 39}, {"name": "LibraryInitializationError", "type": "class", "line": 43}, {"name": "LibraryShutdownError", "type": "class", "line": 47}, {"name": "create_library_exceptions", "type": "function", "line": 51}, {"name": "get_library_exception", "type": "function", "line": 88}, {"name": "configuration_error", "type": "function", "line": 96}, {"name": "connection_error", "type": "function", "line": 102}, {"name": "validation_error", "type": "function", "line": 108}, {"name": "timeout_error", "type": "function", "line": 114}, {"name": "resource_error", "type": "function", "line": 120}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "create_library_exceptions Function", "description": "Function create_library_exceptions implementation.", "line_start": 51, "line_end": 87}, {"name": "get_library_exception Function", "description": "Function get_library_exception implementation.", "line_start": 88, "line_end": 95}, {"name": "configuration_error Function", "description": "Function configuration_error implementation.", "line_start": 96, "line_end": 101}, {"name": "connection_error Function", "description": "Function connection_error implementation.", "line_start": 102, "line_end": 107}, {"name": "validation_error Function", "description": "Function validation_error implementation.", "line_start": 108, "line_end": 113}, {"name": "timeout_error Function", "description": "Function timeout_error implementation.", "line_start": 114, "line_end": 119}, {"name": "resource_error Function", "description": "Function resource_error implementation.", "line_start": 120, "line_end": 125}, {"name": "LibraryError Class", "description": "Class LibraryError definition and methods.", "line_start": 16, "line_end": 22}, {"name": "LibraryConfigurationError Class", "description": "Class LibraryConfigurationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "LibraryConnectionError Class", "description": "Class LibraryConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "LibraryValidationError Class", "description": "Class LibraryValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "LibraryTimeoutError Class", "description": "Class LibraryTimeoutError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "LibraryResourceError Class", "description": "Class LibraryResourceError definition and methods.", "line_start": 39, "line_end": 49}, {"name": "LibraryInitializationError Class", "description": "Class LibraryInitializationError definition and methods.", "line_start": 43, "line_end": 53}, {"name": "LibraryShutdownError Class", "description": "Class LibraryShutdownError definition and methods.", "line_start": 47, "line_end": 57}], "content_hash": "f3710b9a2626456a87d7966d5efeda90"}'
- path: libs/opsvi-foundation/opsvi_foundation/scaffolding/config.py
  line_count: 109
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 3 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library_config", "line": 37, "parameters": [{"name": "library_name", "type": "str"}, {"name": "additional_fields", "type": "Optional[Dict[str, Any]]", "default": "None"}, {"name": "env_prefix", "type": "Optional[str]", "default": "None"}], "is_async": false, "return_type": "Type[LibraryConfig]", "description": "Generates a configuration class for a library with optional additional fields and environment variable prefix.", "signature": "create_library_config(library_name: str, additional_fields: Optional[Dict[str, Any]] = None, env_prefix: Optional[str] = None) -> Type[LibraryConfig]"}, {"name": "create_library_settings", "line": 69, "parameters": [{"name": "library_name", "type": "str"}, {"name": "config_class", "type": "Optional[Type[LibraryConfig]]", "default": "None"}, {"name": "additional_fields", "type": "Optional[Dict[str, Any]]", "default": "None"}, {"name": "env_prefix", "type": "Optional[str]", "default": "None"}], "is_async": false, "return_type": "Type[LibrarySettings]", "description": "Creates a settings class for a library, optionally based on a given config class and additional fields, supporting environment variable prefixing.", "signature": "create_library_settings(library_name: str, config_class: Optional[Type[LibraryConfig]] = None, additional_fields: Optional[Dict[str, Any]] = None, env_prefix: Optional[str] = None) -> Type[LibrarySettings]"}, {"name": "create_settings_instance", "line": 104, "parameters": [{"name": "library_name", "type": "str, **kwargs"}], "is_async": false, "return_type": "LibrarySettings", "description": "Instantiates a library settings object using the specified library name and configuration parameters.", "signature": "create_settings_instance(library_name: str, **kwargs, **kwargs) -> LibrarySettings"}], "classes": [{"name": "LibraryConfig", "line": 17, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents the configuration schema for a library."}, {"name": "LibrarySettings", "line": 28, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents the settings for a library, typically derived from a configuration class."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Type"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "pydantic_settings", "alias": null, "line": 14, "statement": "from pydantic_settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from typing import Type", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from pydantic_settings import BaseSettings", "type": "import", "line": 14}, {"name": "LibraryConfig", "type": "class", "line": 17}, {"name": "LibrarySettings", "type": "class", "line": 28}, {"name": "create_library_config", "type": "function", "line": 37}, {"name": "create_library_settings", "type": "function", "line": 69}, {"name": "create_settings_instance", "type": "function", "line": 104}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "create_library_config Function", "description": "Function create_library_config implementation.", "line_start": 37, "line_end": 68}, {"name": "create_library_settings Function", "description": "Function create_library_settings implementation.", "line_start": 69, "line_end": 103}, {"name": "create_settings_instance Function", "description": "Function create_settings_instance implementation.", "line_start": 104, "line_end": 109}, {"name": "LibraryConfig Class", "description": "Class LibraryConfig definition and methods.", "line_start": 17, "line_end": 27}, {"name": "LibrarySettings Class", "description": "Class LibrarySettings definition and methods.", "line_start": 28, "line_end": 38}], "content_hash": "285b5813e525de85aa008203da5533aa"}'
- path: libs/opsvi-foundation/opsvi_foundation/scaffolding/testing.py
  line_count: 187
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "testing.py", "description": "Python module with 4 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library_test_class", "line": 57, "parameters": [{"name": "library_name", "type": "str"}, {"name": "component_class", "type": "Type[LibraryBase]"}, {"name": "additional_tests", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "return_type": "Type[LibraryTestBase]", "description": "Dynamically creates a test class for a given library component, optionally including additional test methods.", "signature": "create_library_test_class(library_name: str, component_class: Type[LibraryBase], additional_tests: Optional[Dict[str, Any]] = None) -> Type[LibraryTestBase]"}, {"name": "create_test_suite", "line": 150, "parameters": [{"name": "library_name", "type": "str"}, {"name": "component_class", "type": "Type[LibraryBase]"}, {"name": "test_base_class", "type": "Type[LibraryTestBase]", "default": "LibraryTestBase"}, {"name": "additional_tests", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "return_type": "Type[LibraryTestBase]", "description": "Generates a complete test suite class for a specified library component, based on a given test base class and optional extra tests.", "signature": "create_test_suite(library_name: str, component_class: Type[LibraryBase], test_base_class: Type[LibraryTestBase] = LibraryTestBase, additional_tests: Optional[Dict[str, Any]] = None) -> Type[LibraryTestBase]"}, {"name": "mock_component", "line": 165, "parameters": [{"name": "health_check_result", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "Any", "description": "Creates a synchronous mock of a library component with a configurable health check result.", "signature": "mock_component(health_check_result: bool = True = True) -> Any"}, {"name": "async_mock_component", "line": 174, "parameters": [{"name": "health_check_result", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "Any", "description": "Creates an asynchronous mock of a library component with a configurable health check result.", "signature": "async_mock_component(health_check_result: bool = True = True) -> Any"}], "classes": [{"name": "LibraryTestBase", "line": 17, "inherits_from": [], "methods": [{"name": "component", "line": 21, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "LibraryBase", "description": "Create a test component instance.", "signature": "component(self) -> LibraryBase"}, {"name": "test_initialization", "line": 26, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test component initialization.", "signature": "async test_initialization(self, component: LibraryBase) -> None"}, {"name": "test_shutdown", "line": 32, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test component shutdown.", "signature": "async test_shutdown(self, component: LibraryBase) -> None"}, {"name": "test_health_check", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test health check functionality.", "signature": "async test_health_check(self, component: LibraryBase) -> None"}, {"name": "test_lifecycle", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test complete component lifecycle.", "signature": "async test_lifecycle(self, component: LibraryBase) -> None"}], "properties": [], "description": "Base class providing common test functionality for library components."}, {"name": "ConfigurableLibraryTestBase", "line": 83, "inherits_from": ["LibraryTestBase):"], "methods": [{"name": "test_config_validation", "line": 87, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test configuration validation.", "signature": "async test_config_validation(self, component: LibraryBase) -> None"}, {"name": "test_invalid_config", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test behavior with invalid configuration.", "signature": "async test_invalid_config(self, component: LibraryBase) -> None"}], "properties": [], "description": "Test base class for library components that support configuration."}, {"name": "ServiceLibraryTestBase", "line": 100, "inherits_from": ["LibraryTestBase):"], "methods": [{"name": "test_start_stop", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test service start and stop.", "signature": "async test_start_stop(self, component: LibraryBase) -> None"}, {"name": "test_service_health", "line": 114, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test service-specific health checks.", "signature": "async test_service_health(self, component: LibraryBase) -> None"}], "properties": [], "description": "Test base class tailored for service-oriented library components."}, {"name": "ManagerLibraryTestBase", "line": 122, "inherits_from": ["LibraryTestBase):"], "methods": [{"name": "test_component_registration", "line": 126, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test component registration functionality.", "signature": "async test_component_registration(self, component: LibraryBase) -> None"}, {"name": "test_component_removal", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "LibraryBase"}], "is_async": true, "return_type": "None", "description": "Test component removal functionality.", "signature": "async test_component_removal(self, component: LibraryBase) -> None"}], "properties": [], "description": "Test base class designed for manager-type library components."}], "imports": [{"module": "pytest", "alias": null, "line": 11, "statement": "import pytest"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Type"}, {"module": "opsvi_foundation.scaffolding.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.scaffolding.base import LibraryBase"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 11}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import Type", "type": "import", "line": 12}, {"name": "from opsvi_foundation.scaffolding.base import LibraryBase", "type": "import", "line": 14}, {"name": "LibraryTestBase", "type": "class", "line": 17}, {"name": "create_library_test_class", "type": "function", "line": 57}, {"name": "ConfigurableLibraryTestBase", "type": "class", "line": 83}, {"name": "ServiceLibraryTestBase", "type": "class", "line": 100}, {"name": "ManagerLibraryTestBase", "type": "class", "line": 122}, {"name": "create_test_suite", "type": "function", "line": 150}, {"name": "mock_component", "type": "function", "line": 165}, {"name": "async_mock_component", "type": "function", "line": 174}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "create_library_test_class Function", "description": "Function create_library_test_class implementation.", "line_start": 57, "line_end": 82}, {"name": "create_test_suite Function", "description": "Function create_test_suite implementation.", "line_start": 150, "line_end": 164}, {"name": "mock_component Function", "description": "Function mock_component implementation.", "line_start": 165, "line_end": 173}, {"name": "async_mock_component Function", "description": "Function async_mock_component implementation.", "line_start": 174, "line_end": 179}, {"name": "LibraryTestBase Class", "description": "Class LibraryTestBase definition and methods.", "line_start": 17, "line_end": 49}, {"name": "ConfigurableLibraryTestBase Class", "description": "Class ConfigurableLibraryTestBase definition and methods.", "line_start": 83, "line_end": 97}, {"name": "ServiceLibraryTestBase Class", "description": "Class ServiceLibraryTestBase definition and methods.", "line_start": 100, "line_end": 117}, {"name": "ManagerLibraryTestBase Class", "description": "Class ManagerLibraryTestBase definition and methods.", "line_start": 122, "line_end": 141}], "content_hash": "2a9be4939eef22ea4b2c5654e0d0395e"}'
- path: libs/opsvi-foundation/opsvi_foundation/scaffolding/base.py
  line_count: 180
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 1 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "create_library_base", "line": 167, "parameters": [{"name": "library_name", "type": "str, base_class: Type[LibraryBase] = LibraryBase"}, {"name": "base_class", "type": "Type[LibraryBase] = LibraryBase", "default": "LibraryBase"}], "is_async": false, "return_type": "Type[LibraryBase]", "description": "Creates a customized library base class with the specified name and base class.", "signature": "create_library_base(library_name: str, base_class: Type[LibraryBase] = LibraryBase, base_class: Type[LibraryBase] = LibraryBase = LibraryBase) -> Type[LibraryBase]"}], "classes": [{"name": "LibraryBase", "line": 19, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 22, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 27, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 32, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Base class providing core functionality for all libraries."}, {"name": "ConfigurableLibrary", "line": 42, "inherits_from": ["LibraryBase", "ABC):"], "methods": [{"name": "__init__", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize with configuration validation.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 66, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}, {"name": "_validate_config", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Validate configuration.", "signature": "async _validate_config(self) -> None"}, {"name": "_do_initialize", "line": 78, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Perform actual initialization.", "signature": "async _do_initialize(self) -> None"}, {"name": "_do_shutdown", "line": 83, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Perform actual shutdown.", "signature": "async _do_shutdown(self) -> None"}, {"name": "_do_health_check", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform actual health check.", "signature": "async _do_health_check(self) -> bool"}], "properties": [], "description": "Library class that supports configuration and setup options."}, {"name": "ServiceLibrary", "line": 93, "inherits_from": ["ConfigurableLibrary", "ABC):"], "methods": [{"name": "__init__", "line": 96, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "start", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the service.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 106, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the service.", "signature": "async stop(self) -> None"}, {"name": "_do_health_check", "line": 115, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Health check includes running status.", "signature": "async _do_health_check(self) -> bool"}, {"name": "_do_start", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the service.", "signature": "async _do_start(self) -> None"}, {"name": "_do_stop", "line": 125, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the service.", "signature": "async _do_stop(self) -> None"}, {"name": "_do_service_health_check", "line": 130, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform service-specific health check.", "signature": "async _do_service_health_check(self) -> bool"}], "properties": [], "description": "Library class designed to interact with external services."}, {"name": "ManagerLibrary", "line": 135, "inherits_from": ["ConfigurableLibrary", "ABC):"], "methods": [{"name": "__init__", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "register_component", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, component: Any"}, {"name": "component", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Register a component.", "signature": "async register_component(self, name: str, component: Any, component: Any) -> None"}, {"name": "get_component", "line": 146, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "Optional[Any]", "description": "Get a component by name.", "signature": "async get_component(self, name: str) -> Optional[Any]"}, {"name": "remove_component", "line": 150, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": true, "return_type": "None", "description": "Remove a component.", "signature": "async remove_component(self, name: str) -> None"}, {"name": "_do_health_check", "line": 155, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Health check includes all components.", "signature": "async _do_health_check(self) -> bool"}], "properties": [], "description": "Library class responsible for managing resources and coordinating operations."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Type"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import BaseComponent"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import ComponentError"}], "constants": [{"name": "T", "line": 16, "value": "TypeVar(''T'')", "type": ""}]}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from typing import Type", "type": "import", "line": 12}, {"name": "from typing import TypeVar", "type": "import", "line": 12}, {"name": "from opsvi_foundation.patterns.base import BaseComponent", "type": "import", "line": 14}, {"name": "from opsvi_foundation.patterns.base import ComponentError", "type": "import", "line": 14}, {"name": "T", "type": "constant", "line": 16}, {"name": "LibraryBase", "type": "class", "line": 19}, {"name": "ConfigurableLibrary", "type": "class", "line": 42}, {"name": "ServiceLibrary", "type": "class", "line": 93}, {"name": "ManagerLibrary", "type": "class", "line": 135}, {"name": "create_library_base", "type": "function", "line": 167}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "create_library_base Function", "description": "Function create_library_base implementation.", "line_start": 167, "line_end": 172}, {"name": "LibraryBase Class", "description": "Class LibraryBase definition and methods.", "line_start": 19, "line_end": 40}, {"name": "ConfigurableLibrary Class", "description": "Class ConfigurableLibrary definition and methods.", "line_start": 42, "line_end": 91}, {"name": "ServiceLibrary Class", "description": "Class ServiceLibrary definition and methods.", "line_start": 93, "line_end": 133}, {"name": "ManagerLibrary Class", "description": "Class ManagerLibrary definition and methods.", "line_start": 135, "line_end": 158}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 16, "line_end": 16}], "content_hash": "854437beff9303f5e7b6409fc9325d55"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/compression.py
  line_count: 586
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "compression.py", "description": "Python module with 18 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "compress", "line": 390, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "CompressionFormat | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the specified compression format.", "signature": "compress(data: str | bytes, format_type: CompressionFormat | None = None, **kwargs) -> bytes"}, {"name": "decompress", "line": 399, "parameters": [{"name": "data", "type": "bytes"}, {"name": "format_type", "type": "CompressionFormat | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using the specified compression format.", "signature": "decompress(data: bytes, format_type: CompressionFormat | None = None, **kwargs) -> str | bytes"}, {"name": "compress_gzip", "line": 408, "parameters": [{"name": "data", "type": "str | bytes, compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the GZIP compression algorithm.", "signature": "compress_gzip(data: str | bytes, compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_gzip", "line": 414, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress GZIP compressed data.", "signature": "decompress_gzip(data: bytes) -> str | bytes"}, {"name": "compress_bzip2", "line": 420, "parameters": [{"name": "data", "type": "str | bytes, compression_level: int = 9"}, {"name": "compression_level", "type": "int = 9", "default": "9"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the BZIP2 compression algorithm.", "signature": "compress_bzip2(data: str | bytes, compression_level: int = 9, compression_level: int = 9 = 9) -> bytes"}, {"name": "decompress_bzip2", "line": 426, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress BZIP2 compressed data.", "signature": "decompress_bzip2(data: bytes) -> str | bytes"}, {"name": "compress_lzma", "line": 432, "parameters": [{"name": "data", "type": "str | bytes, compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the LZMA compression algorithm.", "signature": "compress_lzma(data: str | bytes, compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_lzma", "line": 438, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress LZMA compressed data.", "signature": "decompress_lzma(data: bytes) -> str | bytes"}, {"name": "compress_zlib", "line": 444, "parameters": [{"name": "data", "type": "str | bytes, compression_level: int = 6"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the ZLIB compression algorithm.", "signature": "compress_zlib(data: str | bytes, compression_level: int = 6, compression_level: int = 6 = 6) -> bytes"}, {"name": "decompress_zlib", "line": 450, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress ZLIB compressed data.", "signature": "decompress_zlib(data: bytes) -> str | bytes"}, {"name": "compress_brotli", "line": 456, "parameters": [{"name": "data", "type": "str | bytes, quality: int = 11"}, {"name": "quality", "type": "int = 11", "default": "11"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the Brotli compression algorithm.", "signature": "compress_brotli(data: str | bytes, quality: int = 11, quality: int = 11 = 11) -> bytes"}, {"name": "decompress_brotli", "line": 462, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress Brotli compressed data.", "signature": "decompress_brotli(data: bytes) -> str | bytes"}, {"name": "compress_file", "line": 471, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "CompressionFormat", "default": "CompressionFormat.GZIP"}], "is_async": false, "return_type": "None", "description": "Compress a file and save the output in the specified format.", "signature": "compress_file(input_path: str, output_path: str, format_type: CompressionFormat = CompressionFormat.GZIP, **kwargs) -> None"}, {"name": "decompress_file", "line": 492, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "CompressionFormat | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Decompress a file and save the output.", "signature": "decompress_file(input_path: str, output_path: str, format_type: CompressionFormat | None = None, **kwargs) -> None"}, {"name": "analyze_compression", "line": 528, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "Analyze data compression results across different algorithms.", "signature": "analyze_compression(data: str | bytes) -> dict[str, dict[str, Any]]"}, {"name": "get_best_compression", "line": 533, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "tuple[CompressionFormat, bytes, float]", "description": "Determine the best compression format and compressed data for the input.", "signature": "get_best_compression(data: str | bytes) -> tuple[CompressionFormat, bytes, float]"}, {"name": "is_compressed", "line": 557, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "bool", "description": "Check if the given data is already compressed.", "signature": "is_compressed(data: bytes) -> bool"}, {"name": "get_compression_info", "line": 562, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "dict[str, Any] | None", "description": "Retrieve metadata and information about compressed data.", "signature": "get_compression_info(data: bytes) -> dict[str, Any] | None"}], "classes": [{"name": "CompressionFormat", "line": 23, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "GZIP", "line": 24, "type": ""}, {"name": "BZIP2", "line": 25, "type": ""}, {"name": "LZMA", "line": 26, "type": ""}, {"name": "ZLIB", "line": 27, "type": ""}, {"name": "BROTLI", "line": 28, "type": ""}, {"name": "NONE", "line": 29, "type": ""}], "description": "Enumeration of supported compression formats."}, {"name": "CompressionError", "line": 34, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during compression."}, {"name": "DecompressionError", "line": 38, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decompression."}, {"name": "Compressor", "line": 42, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: CompressionFormat) -> None"}, {"name": "compress", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Base class defining the interface for compression and decompression."}, {"name": "GzipCompressor", "line": 61, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using gzip.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using gzip.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for GZIP format."}, {"name": "Bzip2Compressor", "line": 99, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 102, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 9", "default": "9"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 9 = 9) -> None"}, {"name": "compress", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using bzip2.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using bzip2.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for BZIP2 format."}, {"name": "LzmaCompressor", "line": 137, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 140, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 144, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using LZMA.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using LZMA.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 168, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for LZMA format."}, {"name": "ZlibCompressor", "line": 175, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 178, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "compress", "line": 182, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using zlib.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 193, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using zlib.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for ZLIB format."}, {"name": "BrotliCompressor", "line": 213, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 216, "parameters": [{"name": "self", "type": "self"}, {"name": "quality", "type": "int = 11", "default": "11"}], "is_async": false, "return_type": "None", "signature": "__init__(self, quality: int = 11 = 11) -> None"}, {"name": "compress", "line": 220, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Compress data using Brotli.", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 231, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using Brotli.", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 244, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio.", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation for Brotli format."}, {"name": "NoCompressor", "line": 251, "inherits_from": ["Compressor):"], "methods": [{"name": "__init__", "line": 254, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "compress", "line": 257, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Return data as-is (no compression).", "signature": "compress(self, data: str | bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decompress", "line": 263, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Return data as-is (no decompression).", "signature": "decompress(self, data: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "get_compression_ratio", "line": 270, "parameters": [{"name": "self", "type": "self"}, {"name": "original_size", "type": "int, compressed_size: int"}, {"name": "compressed_size", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate compression ratio (always 0 for no compression).", "signature": "get_compression_ratio(self, original_size: int, compressed_size: int, compressed_size: int) -> float"}], "properties": [], "description": "Compressor implementation that performs no compression."}, {"name": "CompressionManager", "line": 275, "inherits_from": [], "methods": [{"name": "__init__", "line": 278, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_compressor", "line": 289, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "Compressor", "description": "Get a compressor for the specified format.", "signature": "get_compressor(self, format_type: CompressionFormat) -> Compressor"}, {"name": "register_compressor", "line": 295, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}, {"name": "compressor", "type": "Compressor"}], "is_async": false, "return_type": "None", "description": "Register a custom compressor.", "signature": "register_compressor(self, format_type: CompressionFormat, compressor: Compressor) -> None"}, {"name": "set_default_format", "line": 304, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "CompressionFormat"}], "is_async": false, "return_type": "None", "description": "Set the default compression format.", "signature": "set_default_format(self, format_type: CompressionFormat) -> None"}, {"name": "get_default_format", "line": 311, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "CompressionFormat", "description": "Get the default compression format.", "signature": "get_default_format(self) -> CompressionFormat"}, {"name": "compress", "line": 315, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "CompressionFormat | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Compress data using the specified format.", "signature": "compress(self, data: str | bytes, format_type: CompressionFormat | None = None, **kwargs) -> bytes"}, {"name": "decompress", "line": 326, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}, {"name": "format_type", "type": "CompressionFormat | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decompress data using the specified format.", "signature": "decompress(self, data: bytes, format_type: CompressionFormat | None = None, **kwargs) -> str | bytes"}, {"name": "auto_detect_format", "line": 337, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}], "is_async": false, "return_type": "CompressionFormat | None", "description": "Auto-detect the compression format of data.", "signature": "auto_detect_format(self, data: bytes) -> CompressionFormat | None"}, {"name": "benchmark_compression", "line": 351, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "formats", "type": "list | None", "default": "None"}], "is_async": false, "return_type": "dict[str, dict[str, Any]]", "description": "Benchmark compression across different formats.", "signature": "benchmark_compression(self, data: str | bytes, formats: list | None = None) -> dict[str, dict[str, Any]]"}], "properties": [], "description": "Manager class to handle compression and decompression operations across formats."}], "imports": [{"module": "bz2", "alias": null, "line": 9, "statement": "import bz2"}, {"module": "gzip", "alias": null, "line": 10, "statement": "import gzip"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "lzma", "alias": null, "line": 12, "statement": "import lzma"}, {"module": "zlib", "alias": null, "line": 13, "statement": "import zlib"}, {"module": "brotli", "alias": null, "line": 18, "statement": "import brotli"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "bz2", "type": "import", "line": 9}, {"name": "gzip", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "lzma", "type": "import", "line": 12}, {"name": "zlib", "type": "import", "line": 13}, {"name": "brotli", "type": "import", "line": 18}, {"name": "from abc import ABC", "type": "import", "line": 14}, {"name": "from abc import abstractmethod", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "CompressionFormat", "type": "class", "line": 23}, {"name": "CompressionError", "type": "class", "line": 34}, {"name": "DecompressionError", "type": "class", "line": 38}, {"name": "Compressor", "type": "class", "line": 42}, {"name": "GzipCompressor", "type": "class", "line": 61}, {"name": "Bzip2Compressor", "type": "class", "line": 99}, {"name": "LzmaCompressor", "type": "class", "line": 137}, {"name": "ZlibCompressor", "type": "class", "line": 175}, {"name": "BrotliCompressor", "type": "class", "line": 213}, {"name": "NoCompressor", "type": "class", "line": 251}, {"name": "CompressionManager", "type": "class", "line": 275}, {"name": "compress", "type": "function", "line": 390}, {"name": "decompress", "type": "function", "line": 399}, {"name": "compress_gzip", "type": "function", "line": 408}, {"name": "decompress_gzip", "type": "function", "line": 414}, {"name": "compress_bzip2", "type": "function", "line": 420}, {"name": "decompress_bzip2", "type": "function", "line": 426}, {"name": "compress_lzma", "type": "function", "line": 432}, {"name": "decompress_lzma", "type": "function", "line": 438}, {"name": "compress_zlib", "type": "function", "line": 444}, {"name": "decompress_zlib", "type": "function", "line": 450}, {"name": "compress_brotli", "type": "function", "line": 456}, {"name": "decompress_brotli", "type": "function", "line": 462}, {"name": "compress_file", "type": "function", "line": 471}, {"name": "decompress_file", "type": "function", "line": 492}, {"name": "analyze_compression", "type": "function", "line": 528}, {"name": "get_best_compression", "type": "function", "line": 533}, {"name": "is_compressed", "type": "function", "line": 557}, {"name": "get_compression_info", "type": "function", "line": 562}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "compress Function", "description": "Function compress implementation.", "line_start": 390, "line_end": 398}, {"name": "decompress Function", "description": "Function decompress implementation.", "line_start": 399, "line_end": 407}, {"name": "compress_gzip Function", "description": "Function compress_gzip implementation.", "line_start": 408, "line_end": 413}, {"name": "decompress_gzip Function", "description": "Function decompress_gzip implementation.", "line_start": 414, "line_end": 419}, {"name": "compress_bzip2 Function", "description": "Function compress_bzip2 implementation.", "line_start": 420, "line_end": 425}, {"name": "decompress_bzip2 Function", "description": "Function decompress_bzip2 implementation.", "line_start": 426, "line_end": 431}, {"name": "compress_lzma Function", "description": "Function compress_lzma implementation.", "line_start": 432, "line_end": 437}, {"name": "decompress_lzma Function", "description": "Function decompress_lzma implementation.", "line_start": 438, "line_end": 443}, {"name": "compress_zlib Function", "description": "Function compress_zlib implementation.", "line_start": 444, "line_end": 449}, {"name": "decompress_zlib Function", "description": "Function decompress_zlib implementation.", "line_start": 450, "line_end": 455}, {"name": "compress_brotli Function", "description": "Function compress_brotli implementation.", "line_start": 456, "line_end": 461}, {"name": "decompress_brotli Function", "description": "Function decompress_brotli implementation.", "line_start": 462, "line_end": 470}, {"name": "compress_file Function", "description": "Function compress_file implementation.", "line_start": 471, "line_end": 491}, {"name": "decompress_file Function", "description": "Function decompress_file implementation.", "line_start": 492, "line_end": 527}, {"name": "analyze_compression Function", "description": "Function analyze_compression implementation.", "line_start": 528, "line_end": 532}, {"name": "get_best_compression Function", "description": "Function get_best_compression implementation.", "line_start": 533, "line_end": 556}, {"name": "is_compressed Function", "description": "Function is_compressed implementation.", "line_start": 557, "line_end": 561}, {"name": "get_compression_info Function", "description": "Function get_compression_info implementation.", "line_start": 562, "line_end": 567}, {"name": "CompressionFormat Class", "description": "Class CompressionFormat definition and methods.", "line_start": 23, "line_end": 33}, {"name": "CompressionError Class", "description": "Class CompressionError definition and methods.", "line_start": 34, "line_end": 44}, {"name": "DecompressionError Class", "description": "Class DecompressionError definition and methods.", "line_start": 38, "line_end": 48}, {"name": "Compressor Class", "description": "Class Compressor definition and methods.", "line_start": 42, "line_end": 60}, {"name": "GzipCompressor Class", "description": "Class GzipCompressor definition and methods.", "line_start": 61, "line_end": 95}, {"name": "Bzip2Compressor Class", "description": "Class Bzip2Compressor definition and methods.", "line_start": 99, "line_end": 133}, {"name": "LzmaCompressor Class", "description": "Class LzmaCompressor definition and methods.", "line_start": 137, "line_end": 171}, {"name": "ZlibCompressor Class", "description": "Class ZlibCompressor definition and methods.", "line_start": 175, "line_end": 209}, {"name": "BrotliCompressor Class", "description": "Class BrotliCompressor definition and methods.", "line_start": 213, "line_end": 247}, {"name": "NoCompressor Class", "description": "Class NoCompressor definition and methods.", "line_start": 251, "line_end": 273}, {"name": "CompressionManager Class", "description": "Class CompressionManager definition and methods.", "line_start": 275, "line_end": 354}], "content_hash": "6851e3d87e37702f68e2585cbd08f6ad"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/encoding.py
  line_count: 743
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encoding.py", "description": "Python module with 37 functions and 15 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "encode_data", "line": 438, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "EncodingFormat | None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Encodes input data into the specified encoding format.", "signature": "encode_data(data: str | bytes, format_type: EncodingFormat | None = None, **kwargs) -> str"}, {"name": "decode_data", "line": 447, "parameters": [{"name": "data", "type": "str"}, {"name": "format_type", "type": "EncodingFormat | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes input data from the specified encoding format.", "signature": "decode_data(data: str, format_type: EncodingFormat | None = None, **kwargs) -> str | bytes"}, {"name": "encode_base64", "line": 456, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base64 encoding.", "signature": "encode_base64(data: str | bytes) -> str"}, {"name": "decode_base64", "line": 462, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes Base64 encoded data.", "signature": "decode_base64(data: str) -> str | bytes"}, {"name": "encode_base32", "line": 468, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base32 encoding.", "signature": "encode_base32(data: str | bytes) -> str"}, {"name": "decode_base32", "line": 474, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes Base32 encoded data.", "signature": "decode_base32(data: str) -> str | bytes"}, {"name": "encode_base16", "line": 480, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using Base16 encoding.", "signature": "encode_base16(data: str | bytes) -> str"}, {"name": "decode_base16", "line": 486, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes Base16 encoded data.", "signature": "decode_base16(data: str) -> str | bytes"}, {"name": "encode_hex", "line": 492, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data into hexadecimal representation.", "signature": "encode_hex(data: str | bytes) -> str"}, {"name": "decode_hex", "line": 498, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes hexadecimal encoded data.", "signature": "decode_hex(data: str) -> str | bytes"}, {"name": "encode_url", "line": 504, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe inclusion in URLs.", "signature": "encode_url(data: str | bytes) -> str"}, {"name": "decode_url", "line": 510, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes URL-encoded data.", "signature": "decode_url(data: str) -> str | bytes"}, {"name": "encode_quoted_printable", "line": 516, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using quoted-printable encoding.", "signature": "encode_quoted_printable(data: str | bytes) -> str"}, {"name": "decode_quoted_printable", "line": 522, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes quoted-printable encoded data.", "signature": "decode_quoted_printable(data: str) -> str | bytes"}, {"name": "encode_json", "line": 528, "parameters": [{"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encodes data into JSON format.", "signature": "encode_json(data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode_json", "line": 534, "parameters": [{"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes JSON formatted data.", "signature": "decode_json(data: str, **kwargs, **kwargs) -> str | bytes"}, {"name": "encode_utf8", "line": 540, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using UTF-8 encoding.", "signature": "encode_utf8(data: str | bytes) -> str"}, {"name": "decode_utf8", "line": 546, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes UTF-8 encoded data.", "signature": "decode_utf8(data: str) -> str | bytes"}, {"name": "encode_ascii", "line": 552, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using ASCII encoding.", "signature": "encode_ascii(data: str | bytes) -> str"}, {"name": "decode_ascii", "line": 558, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes ASCII encoded data.", "signature": "decode_ascii(data: str) -> str | bytes"}, {"name": "encode_latin1", "line": 564, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data using Latin-1 encoding.", "signature": "encode_latin1(data: str | bytes) -> str"}, {"name": "decode_latin1", "line": 570, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes Latin-1 encoded data.", "signature": "decode_latin1(data: str) -> str | bytes"}, {"name": "encode_multiple_formats", "line": 579, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "formats", "type": "list[EncodingFormat]"}], "is_async": false, "return_type": "dict[str, str]", "description": "Encodes data into multiple specified encoding formats.", "signature": "encode_multiple_formats(data: str | bytes, formats: list[EncodingFormat]) -> dict[str, str]"}, {"name": "decode_multiple_formats", "line": 597, "parameters": [{"name": "data", "type": "str"}, {"name": "formats", "type": "list[EncodingFormat]"}], "is_async": false, "return_type": "dict[str, str | bytes]", "description": "Decodes data from multiple specified encoding formats.", "signature": "decode_multiple_formats(data: str, formats: list[EncodingFormat]) -> dict[str, str | bytes]"}, {"name": "detect_encoding_format", "line": 618, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "EncodingFormat | None", "description": "Detects the encoding format of the given data.", "signature": "detect_encoding_format(data: str) -> EncodingFormat | None"}, {"name": "is_valid_encoding", "line": 623, "parameters": [{"name": "data", "type": "str, format_type: EncodingFormat"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "bool", "description": "Checks if the data is valid for the specified encoding format.", "signature": "is_valid_encoding(data: str, format_type: EncodingFormat, format_type: EncodingFormat) -> bool"}, {"name": "get_encoding_info", "line": 632, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieves detailed information about the encoding of the data.", "signature": "get_encoding_info(data: str) -> dict[str, Any]"}, {"name": "encode_file", "line": 653, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "EncodingFormat", "default": "EncodingFormat.BASE64"}], "is_async": false, "return_type": "None", "description": "Encodes the contents of a file into the specified encoding format and writes to output.", "signature": "encode_file(input_path: str, output_path: str, format_type: EncodingFormat = EncodingFormat.BASE64) -> None"}, {"name": "decode_file", "line": 673, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "format_type", "type": "EncodingFormat | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Decodes the contents of a file from the specified encoding format and writes to output.", "signature": "decode_file(input_path: str, output_path: str, format_type: EncodingFormat | None = None) -> None"}, {"name": "encode_for_transmission", "line": 708, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe transmission over networks.", "signature": "encode_for_transmission(data: str | bytes) -> str"}, {"name": "decode_from_transmission", "line": 713, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes data received from transmission encoding.", "signature": "decode_from_transmission(data: str) -> str | bytes"}, {"name": "encode_for_url", "line": 718, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data specifically for URL usage.", "signature": "encode_for_url(data: str | bytes) -> str"}, {"name": "decode_from_url", "line": 723, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes data specifically encoded for URLs.", "signature": "decode_from_url(data: str) -> str | bytes"}, {"name": "encode_for_json", "line": 728, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe inclusion in JSON structures.", "signature": "encode_for_json(data: str | bytes) -> str"}, {"name": "decode_from_json", "line": 733, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes data from JSON-safe encoding.", "signature": "decode_from_json(data: str) -> str | bytes"}, {"name": "encode_for_storage", "line": 738, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "str", "description": "Encodes data for safe and efficient storage.", "signature": "encode_for_storage(data: str | bytes) -> str"}, {"name": "decode_from_storage", "line": 743, "parameters": [{"name": "data", "type": "str"}], "is_async": false, "return_type": "str | bytes", "description": "Decodes data from storage encoding.", "signature": "decode_from_storage(data: str) -> str | bytes"}], "classes": [{"name": "EncodingFormat", "line": 21, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "BASE64", "line": 22, "type": ""}, {"name": "BASE32", "line": 23, "type": ""}, {"name": "BASE16", "line": 24, "type": ""}, {"name": "HEX", "line": 25, "type": ""}, {"name": "URL_ENCODE", "line": 26, "type": ""}, {"name": "QUOTED_PRINTABLE", "line": 27, "type": ""}, {"name": "JSON", "line": 28, "type": ""}, {"name": "UTF8", "line": 29, "type": ""}, {"name": "ASCII", "line": 30, "type": ""}, {"name": "LATIN1", "line": 31, "type": ""}], "description": "Enumeration representing supported encoding formats."}, {"name": "EncodingError", "line": 36, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during encoding operations."}, {"name": "DecodingError", "line": 40, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decoding operations."}, {"name": "Encoder", "line": 44, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: EncodingFormat) -> None"}, {"name": "encode", "line": 51, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Base class providing common encoding and decoding interface."}, {"name": "Base64Encoder", "line": 59, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 62, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base64.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 74, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using base64.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for Base64 encoding and decoding."}, {"name": "Base32Encoder", "line": 88, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 91, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base32.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using base32.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for Base32 encoding and decoding."}, {"name": "Base16Encoder", "line": 117, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 120, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using base16.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using base16.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for Base16 encoding and decoding."}, {"name": "HexEncoder", "line": 146, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using hex.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using hex.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for hexadecimal encoding and decoding."}, {"name": "URLEncoder", "line": 175, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 178, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 181, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using URL encoding.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 190, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using URL decoding.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for URL encoding and decoding."}, {"name": "QuotedPrintableEncoder", "line": 199, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 202, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 205, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using quoted-printable.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using quoted-printable.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for quoted-printable encoding and decoding."}, {"name": "JSONEncoder", "line": 228, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using JSON.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using JSON.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for JSON encoding and decoding."}, {"name": "UTF8Encoder", "line": 252, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 255, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using UTF-8.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 267, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using UTF-8.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for UTF-8 encoding and decoding."}, {"name": "ASCIIEncoder", "line": 275, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 278, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 281, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using ASCII.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 290, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using ASCII.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for ASCII encoding and decoding."}, {"name": "Latin1Encoder", "line": 298, "inherits_from": ["Encoder):"], "methods": [{"name": "__init__", "line": 301, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "encode", "line": 304, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Encode data using Latin-1.", "signature": "encode(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "decode", "line": 313, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using Latin-1.", "signature": "decode(self, data: str, **kwargs, **kwargs) -> str | bytes"}], "properties": [], "description": "Encoder class for Latin-1 encoding and decoding."}, {"name": "EncodingManager", "line": 321, "inherits_from": [], "methods": [{"name": "__init__", "line": 324, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_encoder", "line": 339, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "Encoder", "description": "Get an encoder for the specified format.", "signature": "get_encoder(self, format_type: EncodingFormat) -> Encoder"}, {"name": "register_encoder", "line": 345, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat, encoder: Encoder"}, {"name": "encoder", "type": "Encoder"}], "is_async": false, "return_type": "None", "description": "Register a custom encoder.", "signature": "register_encoder(self, format_type: EncodingFormat, encoder: Encoder, encoder: Encoder) -> None"}, {"name": "set_default_format", "line": 350, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "EncodingFormat"}], "is_async": false, "return_type": "None", "description": "Set the default encoding format.", "signature": "set_default_format(self, format_type: EncodingFormat) -> None"}, {"name": "get_default_format", "line": 357, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EncodingFormat", "description": "Get the default encoding format.", "signature": "get_default_format(self) -> EncodingFormat"}, {"name": "encode", "line": 361, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "EncodingFormat | None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Encode data using the specified format.", "signature": "encode(self, data: str | bytes, format_type: EncodingFormat | None = None, **kwargs) -> str"}, {"name": "decode", "line": 372, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}, {"name": "format_type", "type": "EncodingFormat | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decode data using the specified format.", "signature": "decode(self, data: str, format_type: EncodingFormat | None = None, **kwargs) -> str | bytes"}, {"name": "auto_detect_format", "line": 383, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "EncodingFormat | None", "description": "Auto-detect the encoding format of data.", "signature": "auto_detect_format(self, data: str) -> EncodingFormat | None"}], "properties": [], "description": "Manager class coordinating multiple encoding and decoding operations."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "quopri", "alias": null, "line": 12, "statement": "import quopri"}, {"module": "urllib.parse", "alias": null, "line": 13, "statement": "import urllib.parse"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 14, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "quopri", "type": "import", "line": 12}, {"name": "urllib.parse", "type": "import", "line": 13}, {"name": "from abc import ABC", "type": "import", "line": 14}, {"name": "from abc import abstractmethod", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "EncodingFormat", "type": "class", "line": 21}, {"name": "EncodingError", "type": "class", "line": 36}, {"name": "DecodingError", "type": "class", "line": 40}, {"name": "Encoder", "type": "class", "line": 44}, {"name": "Base64Encoder", "type": "class", "line": 59}, {"name": "Base32Encoder", "type": "class", "line": 88}, {"name": "Base16Encoder", "type": "class", "line": 117}, {"name": "HexEncoder", "type": "class", "line": 146}, {"name": "URLEncoder", "type": "class", "line": 175}, {"name": "QuotedPrintableEncoder", "type": "class", "line": 199}, {"name": "JSONEncoder", "type": "class", "line": 228}, {"name": "UTF8Encoder", "type": "class", "line": 252}, {"name": "ASCIIEncoder", "type": "class", "line": 275}, {"name": "Latin1Encoder", "type": "class", "line": 298}, {"name": "EncodingManager", "type": "class", "line": 321}, {"name": "encode_data", "type": "function", "line": 438}, {"name": "decode_data", "type": "function", "line": 447}, {"name": "encode_base64", "type": "function", "line": 456}, {"name": "decode_base64", "type": "function", "line": 462}, {"name": "encode_base32", "type": "function", "line": 468}, {"name": "decode_base32", "type": "function", "line": 474}, {"name": "encode_base16", "type": "function", "line": 480}, {"name": "decode_base16", "type": "function", "line": 486}, {"name": "encode_hex", "type": "function", "line": 492}, {"name": "decode_hex", "type": "function", "line": 498}, {"name": "encode_url", "type": "function", "line": 504}, {"name": "decode_url", "type": "function", "line": 510}, {"name": "encode_quoted_printable", "type": "function", "line": 516}, {"name": "decode_quoted_printable", "type": "function", "line": 522}, {"name": "encode_json", "type": "function", "line": 528}, {"name": "decode_json", "type": "function", "line": 534}, {"name": "encode_utf8", "type": "function", "line": 540}, {"name": "decode_utf8", "type": "function", "line": 546}, {"name": "encode_ascii", "type": "function", "line": 552}, {"name": "decode_ascii", "type": "function", "line": 558}, {"name": "encode_latin1", "type": "function", "line": 564}, {"name": "decode_latin1", "type": "function", "line": 570}, {"name": "encode_multiple_formats", "type": "function", "line": 579}, {"name": "decode_multiple_formats", "type": "function", "line": 597}, {"name": "detect_encoding_format", "type": "function", "line": 618}, {"name": "is_valid_encoding", "type": "function", "line": 623}, {"name": "get_encoding_info", "type": "function", "line": 632}, {"name": "encode_file", "type": "function", "line": 653}, {"name": "decode_file", "type": "function", "line": 673}, {"name": "encode_for_transmission", "type": "function", "line": 708}, {"name": "decode_from_transmission", "type": "function", "line": 713}, {"name": "encode_for_url", "type": "function", "line": 718}, {"name": "decode_from_url", "type": "function", "line": 723}, {"name": "encode_for_json", "type": "function", "line": 728}, {"name": "decode_from_json", "type": "function", "line": 733}, {"name": "encode_for_storage", "type": "function", "line": 738}, {"name": "decode_from_storage", "type": "function", "line": 743}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "encode_data Function", "description": "Function encode_data implementation.", "line_start": 438, "line_end": 446}, {"name": "decode_data Function", "description": "Function decode_data implementation.", "line_start": 447, "line_end": 455}, {"name": "encode_base64 Function", "description": "Function encode_base64 implementation.", "line_start": 456, "line_end": 461}, {"name": "decode_base64 Function", "description": "Function decode_base64 implementation.", "line_start": 462, "line_end": 467}, {"name": "encode_base32 Function", "description": "Function encode_base32 implementation.", "line_start": 468, "line_end": 473}, {"name": "decode_base32 Function", "description": "Function decode_base32 implementation.", "line_start": 474, "line_end": 479}, {"name": "encode_base16 Function", "description": "Function encode_base16 implementation.", "line_start": 480, "line_end": 485}, {"name": "decode_base16 Function", "description": "Function decode_base16 implementation.", "line_start": 486, "line_end": 491}, {"name": "encode_hex Function", "description": "Function encode_hex implementation.", "line_start": 492, "line_end": 497}, {"name": "decode_hex Function", "description": "Function decode_hex implementation.", "line_start": 498, "line_end": 503}, {"name": "encode_url Function", "description": "Function encode_url implementation.", "line_start": 504, "line_end": 509}, {"name": "decode_url Function", "description": "Function decode_url implementation.", "line_start": 510, "line_end": 515}, {"name": "encode_quoted_printable Function", "description": "Function encode_quoted_printable implementation.", "line_start": 516, "line_end": 521}, {"name": "decode_quoted_printable Function", "description": "Function decode_quoted_printable implementation.", "line_start": 522, "line_end": 527}, {"name": "encode_json Function", "description": "Function encode_json implementation.", "line_start": 528, "line_end": 533}, {"name": "decode_json Function", "description": "Function decode_json implementation.", "line_start": 534, "line_end": 539}, {"name": "encode_utf8 Function", "description": "Function encode_utf8 implementation.", "line_start": 540, "line_end": 545}, {"name": "decode_utf8 Function", "description": "Function decode_utf8 implementation.", "line_start": 546, "line_end": 551}, {"name": "encode_ascii Function", "description": "Function encode_ascii implementation.", "line_start": 552, "line_end": 557}, {"name": "decode_ascii Function", "description": "Function decode_ascii implementation.", "line_start": 558, "line_end": 563}, {"name": "encode_latin1 Function", "description": "Function encode_latin1 implementation.", "line_start": 564, "line_end": 569}, {"name": "decode_latin1 Function", "description": "Function decode_latin1 implementation.", "line_start": 570, "line_end": 578}, {"name": "encode_multiple_formats Function", "description": "Function encode_multiple_formats implementation.", "line_start": 579, "line_end": 596}, {"name": "decode_multiple_formats Function", "description": "Function decode_multiple_formats implementation.", "line_start": 597, "line_end": 617}, {"name": "detect_encoding_format Function", "description": "Function detect_encoding_format implementation.", "line_start": 618, "line_end": 622}, {"name": "is_valid_encoding Function", "description": "Function is_valid_encoding implementation.", "line_start": 623, "line_end": 631}, {"name": "get_encoding_info Function", "description": "Function get_encoding_info implementation.", "line_start": 632, "line_end": 652}, {"name": "encode_file Function", "description": "Function encode_file implementation.", "line_start": 653, "line_end": 672}, {"name": "decode_file Function", "description": "Function decode_file implementation.", "line_start": 673, "line_end": 707}, {"name": "encode_for_transmission Function", "description": "Function encode_for_transmission implementation.", "line_start": 708, "line_end": 712}, {"name": "decode_from_transmission Function", "description": "Function decode_from_transmission implementation.", "line_start": 713, "line_end": 717}, {"name": "encode_for_url Function", "description": "Function encode_for_url implementation.", "line_start": 718, "line_end": 722}, {"name": "decode_from_url Function", "description": "Function decode_from_url implementation.", "line_start": 723, "line_end": 727}, {"name": "encode_for_json Function", "description": "Function encode_for_json implementation.", "line_start": 728, "line_end": 732}, {"name": "decode_from_json Function", "description": "Function decode_from_json implementation.", "line_start": 733, "line_end": 737}, {"name": "encode_for_storage Function", "description": "Function encode_for_storage implementation.", "line_start": 738, "line_end": 742}, {"name": "decode_from_storage Function", "description": "Function decode_from_storage implementation.", "line_start": 743, "line_end": 748}, {"name": "EncodingFormat Class", "description": "Class EncodingFormat definition and methods.", "line_start": 21, "line_end": 31}, {"name": "EncodingError Class", "description": "Class EncodingError definition and methods.", "line_start": 36, "line_end": 46}, {"name": "DecodingError Class", "description": "Class DecodingError definition and methods.", "line_start": 40, "line_end": 50}, {"name": "Encoder Class", "description": "Class Encoder definition and methods.", "line_start": 44, "line_end": 58}, {"name": "Base64Encoder Class", "description": "Class Base64Encoder definition and methods.", "line_start": 59, "line_end": 77}, {"name": "Base32Encoder Class", "description": "Class Base32Encoder definition and methods.", "line_start": 88, "line_end": 106}, {"name": "Base16Encoder Class", "description": "Class Base16Encoder definition and methods.", "line_start": 117, "line_end": 135}, {"name": "HexEncoder Class", "description": "Class HexEncoder definition and methods.", "line_start": 146, "line_end": 164}, {"name": "URLEncoder Class", "description": "Class URLEncoder definition and methods.", "line_start": 175, "line_end": 193}, {"name": "QuotedPrintableEncoder Class", "description": "Class QuotedPrintableEncoder definition and methods.", "line_start": 199, "line_end": 217}, {"name": "JSONEncoder Class", "description": "Class JSONEncoder definition and methods.", "line_start": 228, "line_end": 246}, {"name": "UTF8Encoder Class", "description": "Class UTF8Encoder definition and methods.", "line_start": 252, "line_end": 270}, {"name": "ASCIIEncoder Class", "description": "Class ASCIIEncoder definition and methods.", "line_start": 275, "line_end": 293}, {"name": "Latin1Encoder Class", "description": "Class Latin1Encoder definition and methods.", "line_start": 298, "line_end": 316}, {"name": "EncodingManager Class", "description": "Class EncodingManager definition and methods.", "line_start": 321, "line_end": 386}], "content_hash": "6ba9fbee6b2f4bfe28a100a2b9596036"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/hashing.py
  line_count: 665
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "hashing.py", "description": "Python module with 12 functions and 15 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "hash_data", "line": 447, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "algorithm", "type": "HashAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Generate a hash digest for the given data using the specified algorithm.", "signature": "hash_data(data: str | bytes, algorithm: HashAlgorithm | None = None, **kwargs) -> str"}, {"name": "verify_hash", "line": 456, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Check if the hash of the given data matches the provided hash value.", "signature": "verify_hash(data: str | bytes, hash_value: str, algorithm: HashAlgorithm | None = None, **kwargs) -> bool"}, {"name": "hash_password", "line": 466, "parameters": [{"name": "password", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.ARGON2"}], "is_async": false, "return_type": "str", "description": "Create a secure hash of a password using the specified hashing algorithm.", "signature": "hash_password(password: str, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs) -> str"}, {"name": "verify_password", "line": 477, "parameters": [{"name": "password", "type": "str"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.ARGON2"}], "is_async": false, "return_type": "bool", "description": "Verify if a password corresponds to a given hashed password.", "signature": "verify_password(password: str, hash_value: str, algorithm: HashAlgorithm = HashAlgorithm.ARGON2, **kwargs) -> bool"}, {"name": "generate_salt", "line": 489, "parameters": [{"name": "length", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "str", "description": "Generate a cryptographically secure random salt of the specified length.", "signature": "generate_salt(length: int = 32 = 32) -> str"}, {"name": "generate_hmac", "line": 494, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "key", "type": "str | bytes"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "str", "description": "Generate a keyed-hash message authentication code (HMAC) for the given data.", "signature": "generate_hmac(data: str | bytes, key: str | bytes, algorithm: HashAlgorithm = HashAlgorithm.SHA256) -> str"}, {"name": "verify_hmac", "line": 517, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "key", "type": "str | bytes"}, {"name": "hmac_value", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "bool", "description": "Verify that the HMAC for the given data and key matches the provided HMAC value.", "signature": "verify_hmac(data: str | bytes, key: str | bytes, hmac_value: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256) -> bool"}, {"name": "hash_file", "line": 534, "parameters": [{"name": "file_path", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.SHA256"}, {"name": "chunk_size", "type": "int", "default": "8192"}], "is_async": false, "return_type": "str", "description": "Compute the hash digest of a file''s contents using the specified algorithm.", "signature": "hash_file(file_path: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256, chunk_size: int = 8192) -> str"}, {"name": "verify_file_hash", "line": 577, "parameters": [{"name": "file_path", "type": "str"}, {"name": "expected_hash", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm", "default": "HashAlgorithm.SHA256"}], "is_async": false, "return_type": "bool", "description": "Verify that the hash of a file matches the expected hash value.", "signature": "verify_file_hash(file_path: str, expected_hash: str, algorithm: HashAlgorithm = HashAlgorithm.SHA256) -> bool"}, {"name": "analyze_hash", "line": 593, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Extract and return metadata and components from a given hash string.", "signature": "analyze_hash(hash_value: str) -> dict[str, Any]"}, {"name": "is_secure_hash", "line": 639, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determine if a hash value meets security standards and best practices.", "signature": "is_secure_hash(hash_value: str) -> bool"}, {"name": "get_hash_info", "line": 645, "parameters": [{"name": "hash_value", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieve detailed information about the hash, such as algorithm and parameters.", "signature": "get_hash_info(hash_value: str) -> dict[str, Any]"}], "classes": [{"name": "HashAlgorithm", "line": 23, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "MD5", "line": 24, "type": ""}, {"name": "SHA1", "line": 25, "type": ""}, {"name": "SHA256", "line": 26, "type": ""}, {"name": "SHA512", "line": 27, "type": ""}, {"name": "BLAKE2B", "line": 28, "type": ""}, {"name": "BLAKE2S", "line": 29, "type": ""}, {"name": "SHA3_256", "line": 30, "type": ""}, {"name": "SHA3_512", "line": 31, "type": ""}, {"name": "BCRYPT", "line": 32, "type": ""}, {"name": "ARGON2", "line": 33, "type": ""}], "description": "Enumeration of supported hashing algorithms."}, {"name": "HashingError", "line": 38, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for general hashing errors."}, {"name": "HashVerificationError", "line": 42, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when hash verification fails."}, {"name": "Hasher", "line": 46, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "None", "signature": "__init__(self, algorithm: HashAlgorithm) -> None"}, {"name": "hash", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the hashing algorithm is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Base class defining the interface for hash computation and verification."}, {"name": "MD5Hasher", "line": 65, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 68, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using MD5.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against MD5 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "MD5 is not secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the MD5 algorithm."}, {"name": "SHA1Hasher", "line": 93, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 99, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA1.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA1 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 116, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA1 is not secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-1 algorithm."}, {"name": "SHA256Hasher", "line": 121, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 124, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA256.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 136, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA256 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 144, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA256 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-256 algorithm."}, {"name": "SHA512Hasher", "line": 149, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 152, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA512.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA512 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 172, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA512 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA-512 algorithm."}, {"name": "Blake2bHasher", "line": 177, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "digest_size", "type": "int = 64", "default": "64"}], "is_async": false, "return_type": "None", "signature": "__init__(self, digest_size: int = 64 = 64) -> None"}, {"name": "hash", "line": 184, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Blake2b.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 194, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Blake2b hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 202, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Blake2b is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the BLAKE2b algorithm."}, {"name": "Blake2sHasher", "line": 207, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 210, "parameters": [{"name": "self", "type": "self"}, {"name": "digest_size", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "None", "signature": "__init__(self, digest_size: int = 32 = 32) -> None"}, {"name": "hash", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Blake2s.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 224, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Blake2s hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 232, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Blake2s is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the BLAKE2s algorithm."}, {"name": "SHA3_256Hasher", "line": 237, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 240, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA3-256.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 252, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA3-256 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 260, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA3-256 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA3-256 algorithm."}, {"name": "SHA3_512Hasher", "line": 265, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 268, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "hash", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using SHA3-512.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 280, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against SHA3-512 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 288, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "SHA3-512 is secure for general hashing but not for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the SHA3-512 algorithm."}, {"name": "BcryptHasher", "line": 293, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "rounds", "type": "int = 12", "default": "12"}], "is_async": false, "return_type": "None", "signature": "__init__(self, rounds: int = 12 = 12) -> None"}, {"name": "hash", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using bcrypt.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against bcrypt hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 322, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Bcrypt is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the bcrypt password hashing algorithm."}, {"name": "Argon2Hasher", "line": 327, "inherits_from": ["Hasher):"], "methods": [{"name": "__init__", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "time_cost", "type": "int", "default": "3"}, {"name": "memory_cost", "type": "int", "default": "65536"}, {"name": "parallelism", "type": "int", "default": "4"}], "is_async": false, "return_type": "None", "signature": "__init__(self, time_cost: int = 3, memory_cost: int = 65536, parallelism: int = 4) -> None"}, {"name": "hash", "line": 346, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, **kwargs"}], "is_async": false, "return_type": "str", "description": "Hash data using Argon2.", "signature": "hash(self, data: str | bytes, **kwargs, **kwargs) -> str"}, {"name": "verify", "line": 355, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, hash_value: str, **kwargs"}, {"name": "hash_value", "type": "str, **kwargs"}], "is_async": false, "return_type": "bool", "description": "Verify data against Argon2 hash.", "signature": "verify(self, data: str | bytes, hash_value: str, **kwargs, hash_value: str, **kwargs, **kwargs) -> bool"}, {"name": "is_secure", "line": 367, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Argon2 is secure for passwords.", "signature": "is_secure(self) -> bool"}], "properties": [], "description": "Hasher implementation using the Argon2 password hashing algorithm."}, {"name": "HashingManager", "line": 372, "inherits_from": [], "methods": [{"name": "__init__", "line": 375, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_hasher", "line": 390, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "Hasher", "description": "Get a hasher for the specified algorithm.", "signature": "get_hasher(self, algorithm: HashAlgorithm) -> Hasher"}, {"name": "register_hasher", "line": 396, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm, hasher: Hasher"}, {"name": "hasher", "type": "Hasher"}], "is_async": false, "return_type": "None", "description": "Register a custom hasher.", "signature": "register_hasher(self, algorithm: HashAlgorithm, hasher: Hasher, hasher: Hasher) -> None"}, {"name": "set_default_algorithm", "line": 401, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "HashAlgorithm"}], "is_async": false, "return_type": "None", "description": "Set the default hashing algorithm.", "signature": "set_default_algorithm(self, algorithm: HashAlgorithm) -> None"}, {"name": "get_default_algorithm", "line": 408, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "HashAlgorithm", "description": "Get the default hashing algorithm.", "signature": "get_default_algorithm(self) -> HashAlgorithm"}, {"name": "hash", "line": 412, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "algorithm", "type": "HashAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Hash data using the specified algorithm.", "signature": "hash(self, data: str | bytes, algorithm: HashAlgorithm | None = None, **kwargs) -> str"}, {"name": "verify", "line": 423, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "hash_value", "type": "str"}, {"name": "algorithm", "type": "HashAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "bool", "description": "Verify data against hash using the specified algorithm.", "signature": "verify(self, data: str | bytes, hash_value: str, algorithm: HashAlgorithm | None = None, **kwargs) -> bool"}, {"name": "get_secure_algorithms", "line": 435, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[HashAlgorithm]", "description": "Get list of algorithms secure for password hashing.", "signature": "get_secure_algorithms(self) -> list[HashAlgorithm]"}], "properties": [], "description": "Manager class coordinating hashing operations across multiple algorithms."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "secrets", "alias": null, "line": 12, "statement": "import secrets"}, {"module": "argon2", "alias": null, "line": 17, "statement": "import argon2"}, {"module": "bcrypt", "alias": null, "line": 18, "statement": "import bcrypt"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "secrets", "type": "import", "line": 12}, {"name": "argon2", "type": "import", "line": 17}, {"name": "bcrypt", "type": "import", "line": 18}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "HashAlgorithm", "type": "class", "line": 23}, {"name": "HashingError", "type": "class", "line": 38}, {"name": "HashVerificationError", "type": "class", "line": 42}, {"name": "Hasher", "type": "class", "line": 46}, {"name": "MD5Hasher", "type": "class", "line": 65}, {"name": "SHA1Hasher", "type": "class", "line": 93}, {"name": "SHA256Hasher", "type": "class", "line": 121}, {"name": "SHA512Hasher", "type": "class", "line": 149}, {"name": "Blake2bHasher", "type": "class", "line": 177}, {"name": "Blake2sHasher", "type": "class", "line": 207}, {"name": "SHA3_256Hasher", "type": "class", "line": 237}, {"name": "SHA3_512Hasher", "type": "class", "line": 265}, {"name": "BcryptHasher", "type": "class", "line": 293}, {"name": "Argon2Hasher", "type": "class", "line": 327}, {"name": "HashingManager", "type": "class", "line": 372}, {"name": "hash_data", "type": "function", "line": 447}, {"name": "verify_hash", "type": "function", "line": 456}, {"name": "hash_password", "type": "function", "line": 466}, {"name": "verify_password", "type": "function", "line": 477}, {"name": "generate_salt", "type": "function", "line": 489}, {"name": "generate_hmac", "type": "function", "line": 494}, {"name": "verify_hmac", "type": "function", "line": 517}, {"name": "hash_file", "type": "function", "line": 534}, {"name": "verify_file_hash", "type": "function", "line": 577}, {"name": "analyze_hash", "type": "function", "line": 593}, {"name": "is_secure_hash", "type": "function", "line": 639}, {"name": "get_hash_info", "type": "function", "line": 645}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 18}, {"name": "hash_data Function", "description": "Function hash_data implementation.", "line_start": 447, "line_end": 455}, {"name": "verify_hash Function", "description": "Function verify_hash implementation.", "line_start": 456, "line_end": 465}, {"name": "hash_password Function", "description": "Function hash_password implementation.", "line_start": 466, "line_end": 476}, {"name": "verify_password Function", "description": "Function verify_password implementation.", "line_start": 477, "line_end": 488}, {"name": "generate_salt Function", "description": "Function generate_salt implementation.", "line_start": 489, "line_end": 493}, {"name": "generate_hmac Function", "description": "Function generate_hmac implementation.", "line_start": 494, "line_end": 516}, {"name": "verify_hmac Function", "description": "Function verify_hmac implementation.", "line_start": 517, "line_end": 533}, {"name": "hash_file Function", "description": "Function hash_file implementation.", "line_start": 534, "line_end": 576}, {"name": "verify_file_hash Function", "description": "Function verify_file_hash implementation.", "line_start": 577, "line_end": 592}, {"name": "analyze_hash Function", "description": "Function analyze_hash implementation.", "line_start": 593, "line_end": 638}, {"name": "is_secure_hash Function", "description": "Function is_secure_hash implementation.", "line_start": 639, "line_end": 644}, {"name": "get_hash_info Function", "description": "Function get_hash_info implementation.", "line_start": 645, "line_end": 650}, {"name": "HashAlgorithm Class", "description": "Class HashAlgorithm definition and methods.", "line_start": 23, "line_end": 33}, {"name": "HashingError Class", "description": "Class HashingError definition and methods.", "line_start": 38, "line_end": 48}, {"name": "HashVerificationError Class", "description": "Class HashVerificationError definition and methods.", "line_start": 42, "line_end": 52}, {"name": "Hasher Class", "description": "Class Hasher definition and methods.", "line_start": 46, "line_end": 64}, {"name": "MD5Hasher Class", "description": "Class MD5Hasher definition and methods.", "line_start": 65, "line_end": 91}, {"name": "SHA1Hasher Class", "description": "Class SHA1Hasher definition and methods.", "line_start": 93, "line_end": 119}, {"name": "SHA256Hasher Class", "description": "Class SHA256Hasher definition and methods.", "line_start": 121, "line_end": 147}, {"name": "SHA512Hasher Class", "description": "Class SHA512Hasher definition and methods.", "line_start": 149, "line_end": 175}, {"name": "Blake2bHasher Class", "description": "Class Blake2bHasher definition and methods.", "line_start": 177, "line_end": 205}, {"name": "Blake2sHasher Class", "description": "Class Blake2sHasher definition and methods.", "line_start": 207, "line_end": 235}, {"name": "SHA3_256Hasher Class", "description": "Class SHA3_256Hasher definition and methods.", "line_start": 237, "line_end": 263}, {"name": "SHA3_512Hasher Class", "description": "Class SHA3_512Hasher definition and methods.", "line_start": 265, "line_end": 291}, {"name": "BcryptHasher Class", "description": "Class BcryptHasher definition and methods.", "line_start": 293, "line_end": 325}, {"name": "Argon2Hasher Class", "description": "Class Argon2Hasher definition and methods.", "line_start": 327, "line_end": 370}, {"name": "HashingManager Class", "description": "Class HashingManager definition and methods.", "line_start": 372, "line_end": 438}], "content_hash": "64dcc4b2073f11403c884bf621eca629"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/encryption.py
  line_count: 759
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encryption.py", "description": "Python module with 23 functions and 11 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "generate_key", "line": 511, "parameters": [{"name": "algorithm", "type": "EncryptionAlgorithm | None = None, **kwargs", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Generate a cryptographic key using the specified encryption algorithm and parameters.", "signature": "generate_key(algorithm: EncryptionAlgorithm | None = None, **kwargs = None, **kwargs) -> bytes"}, {"name": "encrypt_data", "line": 516, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the specified key and encryption algorithm.", "signature": "encrypt_data(data: str | bytes, key: bytes, algorithm: EncryptionAlgorithm | None = None, **kwargs) -> bytes"}, {"name": "decrypt_data", "line": 526, "parameters": [{"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using the specified key and encryption algorithm.", "signature": "decrypt_data(data: bytes, key: bytes, algorithm: EncryptionAlgorithm | None = None, **kwargs) -> str | bytes"}, {"name": "encrypt_aes", "line": 536, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "key", "type": "bytes"}, {"name": "mode", "type": "EncryptionMode", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES encryption with the specified mode.", "signature": "encrypt_aes(data: str | bytes, key: bytes, mode: EncryptionMode = EncryptionMode.GCM) -> bytes"}, {"name": "decrypt_aes", "line": 546, "parameters": [{"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "mode", "type": "EncryptionMode", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt AES-encrypted data using the specified mode.", "signature": "decrypt_aes(data: bytes, key: bytes, mode: EncryptionMode = EncryptionMode.GCM) -> str | bytes"}, {"name": "generate_rsa_key_pair", "line": 556, "parameters": [{"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate an RSA public and private key pair with the given key size.", "signature": "generate_rsa_key_pair(key_size: int = 2048 = 2048) -> tuple[bytes, bytes]"}, {"name": "encrypt_rsa", "line": 564, "parameters": [{"name": "data", "type": "str | bytes, public_key: bytes"}, {"name": "public_key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using an RSA public key.", "signature": "encrypt_rsa(data: str | bytes, public_key: bytes, public_key: bytes) -> bytes"}, {"name": "decrypt_rsa", "line": 570, "parameters": [{"name": "data", "type": "bytes, private_key: bytes"}, {"name": "private_key", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt RSA-encrypted data using a private key.", "signature": "decrypt_rsa(data: bytes, private_key: bytes, private_key: bytes) -> str | bytes"}, {"name": "encrypt_fernet", "line": 576, "parameters": [{"name": "data", "type": "str | bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the Fernet symmetric encryption scheme.", "signature": "encrypt_fernet(data: str | bytes, key: bytes, key: bytes) -> bytes"}, {"name": "decrypt_fernet", "line": 582, "parameters": [{"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data encrypted with Fernet using the provided key.", "signature": "decrypt_fernet(data: bytes, key: bytes, key: bytes) -> str | bytes"}, {"name": "encrypt_chacha20", "line": 588, "parameters": [{"name": "data", "type": "str | bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the ChaCha20 stream cipher with the given key.", "signature": "encrypt_chacha20(data: str | bytes, key: bytes, key: bytes) -> bytes"}, {"name": "decrypt_chacha20", "line": 594, "parameters": [{"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data encrypted with ChaCha20 using the given key.", "signature": "decrypt_chacha20(data: bytes, key: bytes, key: bytes) -> str | bytes"}, {"name": "derive_key_from_password", "line": 603, "parameters": [{"name": "password", "type": "str"}, {"name": "salt", "type": "bytes | None", "default": "None"}, {"name": "key_length", "type": "int", "default": "32"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Derive a cryptographic key from a password and optional salt.", "signature": "derive_key_from_password(password: str, salt: bytes | None = None, key_length: int = 32) -> tuple[bytes, bytes]"}, {"name": "derive_key_from_password_with_encryption", "line": 623, "parameters": [{"name": "password", "type": "str"}, {"name": "data", "type": "str | bytes"}, {"name": "salt", "type": "bytes | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Derive a key from a password and use it to encrypt data.", "signature": "derive_key_from_password_with_encryption(password: str, data: str | bytes, salt: bytes | None = None) -> bytes"}, {"name": "decrypt_with_password", "line": 636, "parameters": [{"name": "password", "type": "str"}, {"name": "encrypted_data", "type": "bytes"}, {"name": "salt_length", "type": "int", "default": "16"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data that was encrypted with a password-derived key.", "signature": "decrypt_with_password(password: str, encrypted_data: bytes, salt_length: int = 16) -> str | bytes"}, {"name": "encode_key", "line": 655, "parameters": [{"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encode a binary key into a string format for storage or transmission.", "signature": "encode_key(key: bytes) -> str"}, {"name": "decode_key", "line": 660, "parameters": [{"name": "key_str", "type": "str"}], "is_async": false, "return_type": "bytes", "description": "Decode a string-encoded key back into its binary form.", "signature": "decode_key(key_str: str) -> bytes"}, {"name": "encode_encrypted_data", "line": 665, "parameters": [{"name": "data", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encode encrypted binary data into a string format.", "signature": "encode_encrypted_data(data: bytes) -> str"}, {"name": "decode_encrypted_data", "line": 670, "parameters": [{"name": "data_str", "type": "str"}], "is_async": false, "return_type": "bytes", "description": "Decode string-encoded encrypted data back into binary form.", "signature": "decode_encrypted_data(data_str: str) -> bytes"}, {"name": "encrypt_file", "line": 678, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm", "default": "EncryptionAlgorithm.AES"}], "is_async": false, "return_type": "None", "description": "Encrypt the contents of a file and save the encrypted output.", "signature": "encrypt_file(input_path: str, output_path: str, key: bytes, algorithm: EncryptionAlgorithm = EncryptionAlgorithm.AES) -> None"}, {"name": "decrypt_file", "line": 699, "parameters": [{"name": "input_path", "type": "str"}, {"name": "output_path", "type": "str"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm", "default": "EncryptionAlgorithm.AES"}], "is_async": false, "return_type": "None", "description": "Decrypt an encrypted file and save the decrypted output.", "signature": "decrypt_file(input_path: str, output_path: str, key: bytes, algorithm: EncryptionAlgorithm = EncryptionAlgorithm.AES) -> None"}, {"name": "is_secure_algorithm", "line": 730, "parameters": [{"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "bool", "description": "Check if the specified encryption algorithm is considered secure.", "signature": "is_secure_algorithm(algorithm: EncryptionAlgorithm) -> bool"}, {"name": "get_algorithm_info", "line": 741, "parameters": [{"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Retrieve information and properties about a given encryption algorithm.", "signature": "get_algorithm_info(algorithm: EncryptionAlgorithm) -> dict[str, Any]"}], "classes": [{"name": "EncryptionAlgorithm", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "AES", "line": 26, "type": ""}, {"name": "RSA", "line": 27, "type": ""}, {"name": "FERNET", "line": 28, "type": ""}, {"name": "CHACHA20", "line": 29, "type": ""}], "description": "Enumeration of supported encryption algorithms."}, {"name": "EncryptionMode", "line": 34, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CBC", "line": 35, "type": ""}, {"name": "GCM", "line": 36, "type": ""}, {"name": "CTR", "line": 37, "type": ""}], "description": "Enumeration of supported encryption modes for block ciphers."}, {"name": "EncryptionError", "line": 42, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during encryption operations."}, {"name": "DecryptionError", "line": 46, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during decryption operations."}, {"name": "KeyGenerationError", "line": 50, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when key generation fails."}, {"name": "Encryptor", "line": 54, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "None", "signature": "__init__(self, algorithm: EncryptionAlgorithm) -> None"}, {"name": "generate_key", "line": 61, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an encryption key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data.", "signature": "encrypt(self, data: str | bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 69, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "is_symmetric", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the encryption is symmetric.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Base class defining the interface for encryption and decryption implementations."}, {"name": "AESEncryptor", "line": 77, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int", "default": "256"}, {"name": "mode", "type": "EncryptionMode", "default": "EncryptionMode.GCM"}], "is_async": false, "return_type": "None", "signature": "__init__(self, key_size: int = 256, mode: EncryptionMode = EncryptionMode.GCM) -> None"}, {"name": "generate_key", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an AES key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 100, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES.", "signature": "encrypt(self, data: str | bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using AES.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "_encrypt_gcm", "line": 140, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-GCM.", "signature": "_encrypt_gcm(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_gcm", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-GCM.", "signature": "_decrypt_gcm(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_encrypt_cbc", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-CBC.", "signature": "_encrypt_cbc(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_cbc", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-CBC.", "signature": "_decrypt_cbc(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_encrypt_ctr", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using AES-CTR.", "signature": "_encrypt_ctr(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "_decrypt_ctr", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using AES-CTR.", "signature": "_decrypt_ctr(self, data: bytes, key: bytes, key: bytes) -> bytes"}, {"name": "is_symmetric", "line": 219, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "AES is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation using AES symmetric encryption."}, {"name": "RSAEncryptor", "line": 224, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 227, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "None", "signature": "__init__(self, key_size: int = 2048 = 2048) -> None"}, {"name": "generate_key", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate an RSA key pair.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "generate_public_key", "line": 249, "parameters": [{"name": "self", "type": "self"}, {"name": "private_key_pem", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Generate public key from private key.", "signature": "generate_public_key(self, private_key_pem: bytes) -> bytes"}, {"name": "encrypt", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using RSA (public key).", "signature": "encrypt(self, data: str | bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using RSA (private key).", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "is_symmetric", "line": 312, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "RSA is asymmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation using RSA asymmetric encryption."}, {"name": "FernetEncryptor", "line": 317, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 320, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "generate_key", "line": 323, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate a Fernet key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using Fernet.", "signature": "encrypt(self, data: str | bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 341, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using Fernet.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "is_symmetric", "line": 355, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Fernet is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation using the Fernet symmetric encryption scheme."}, {"name": "ChaCha20Encryptor", "line": 360, "inherits_from": ["Encryptor):"], "methods": [{"name": "__init__", "line": 363, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "generate_key", "line": 366, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bytes", "description": "Generate a ChaCha20 key.", "signature": "generate_key(self, **kwargs) -> bytes"}, {"name": "encrypt", "line": 373, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using ChaCha20.", "signature": "encrypt(self, data: str | bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> bytes"}, {"name": "decrypt", "line": 388, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes, key: bytes, **kwargs"}, {"name": "key", "type": "bytes, **kwargs"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using ChaCha20.", "signature": "decrypt(self, data: bytes, key: bytes, **kwargs, key: bytes, **kwargs, **kwargs) -> str | bytes"}, {"name": "is_symmetric", "line": 410, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "ChaCha20 is symmetric encryption.", "signature": "is_symmetric(self) -> bool"}], "properties": [], "description": "Encryptor implementation using the ChaCha20 stream cipher."}, {"name": "EncryptionManager", "line": 415, "inherits_from": [], "methods": [{"name": "__init__", "line": 418, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_encryptor", "line": 427, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "Encryptor", "description": "Get an encryptor for the specified algorithm.", "signature": "get_encryptor(self, algorithm: EncryptionAlgorithm) -> Encryptor"}, {"name": "register_encryptor", "line": 433, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}, {"name": "encryptor", "type": "Encryptor"}], "is_async": false, "return_type": "None", "description": "Register a custom encryptor.", "signature": "register_encryptor(self, algorithm: EncryptionAlgorithm, encryptor: Encryptor) -> None"}, {"name": "set_default_algorithm", "line": 442, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm"}], "is_async": false, "return_type": "None", "description": "Set the default encryption algorithm.", "signature": "set_default_algorithm(self, algorithm: EncryptionAlgorithm) -> None"}, {"name": "get_default_algorithm", "line": 449, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EncryptionAlgorithm", "description": "Get the default encryption algorithm.", "signature": "get_default_algorithm(self) -> EncryptionAlgorithm"}, {"name": "generate_key", "line": 453, "parameters": [{"name": "self", "type": "self"}, {"name": "algorithm", "type": "EncryptionAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Generate a key for the specified algorithm.", "signature": "generate_key(self, algorithm: EncryptionAlgorithm | None = None, **kwargs) -> bytes"}, {"name": "encrypt", "line": 463, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "bytes", "description": "Encrypt data using the specified algorithm.", "signature": "encrypt(self, data: str | bytes, key: bytes, algorithm: EncryptionAlgorithm | None = None, **kwargs) -> bytes"}, {"name": "decrypt", "line": 475, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "bytes"}, {"name": "key", "type": "bytes"}, {"name": "algorithm", "type": "EncryptionAlgorithm | None", "default": "None"}], "is_async": false, "return_type": "str | bytes", "description": "Decrypt data using the specified algorithm.", "signature": "decrypt(self, data: bytes, key: bytes, algorithm: EncryptionAlgorithm | None = None, **kwargs) -> str | bytes"}, {"name": "get_symmetric_algorithms", "line": 487, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[EncryptionAlgorithm]", "description": "Get list of symmetric encryption algorithms.", "signature": "get_symmetric_algorithms(self) -> list[EncryptionAlgorithm]"}, {"name": "get_asymmetric_algorithms", "line": 495, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[EncryptionAlgorithm]", "description": "Get list of asymmetric encryption algorithms.", "signature": "get_asymmetric_algorithms(self) -> list[EncryptionAlgorithm]"}], "properties": [], "description": "Manager class coordinating encryption and decryption across algorithms and keys."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "os", "alias": null, "line": 11, "statement": "import os"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "cryptography.fernet", "alias": null, "line": 16, "statement": "from cryptography.fernet import Fernet"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives import hashes"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives import serialization"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.asymmetric import padding"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.asymmetric import rsa"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.ciphers import Cipher"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.ciphers import algorithms"}, {"module": "cryptography.hazmat.primitives.ciphers", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.ciphers import modes"}, {"module": "cryptography.hazmat.primitives.kdf.pbkdf2", "alias": null, "line": 20, "statement": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "os", "type": "import", "line": 11}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 16}, {"name": "from cryptography.hazmat.primitives import hashes", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives import serialization", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives.asymmetric import padding", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.asymmetric import rsa", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.ciphers import Cipher", "type": "import", "line": 19}, {"name": "from cryptography.hazmat.primitives.ciphers import algorithms", "type": "import", "line": 19}, {"name": "from cryptography.hazmat.primitives.ciphers import modes", "type": "import", "line": 19}, {"name": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC", "type": "import", "line": 20}, {"name": "EncryptionAlgorithm", "type": "class", "line": 25}, {"name": "EncryptionMode", "type": "class", "line": 34}, {"name": "EncryptionError", "type": "class", "line": 42}, {"name": "DecryptionError", "type": "class", "line": 46}, {"name": "KeyGenerationError", "type": "class", "line": 50}, {"name": "Encryptor", "type": "class", "line": 54}, {"name": "AESEncryptor", "type": "class", "line": 77}, {"name": "RSAEncryptor", "type": "class", "line": 224}, {"name": "FernetEncryptor", "type": "class", "line": 317}, {"name": "ChaCha20Encryptor", "type": "class", "line": 360}, {"name": "EncryptionManager", "type": "class", "line": 415}, {"name": "generate_key", "type": "function", "line": 511}, {"name": "encrypt_data", "type": "function", "line": 516}, {"name": "decrypt_data", "type": "function", "line": 526}, {"name": "encrypt_aes", "type": "function", "line": 536}, {"name": "decrypt_aes", "type": "function", "line": 546}, {"name": "generate_rsa_key_pair", "type": "function", "line": 556}, {"name": "encrypt_rsa", "type": "function", "line": 564}, {"name": "decrypt_rsa", "type": "function", "line": 570}, {"name": "encrypt_fernet", "type": "function", "line": 576}, {"name": "decrypt_fernet", "type": "function", "line": 582}, {"name": "encrypt_chacha20", "type": "function", "line": 588}, {"name": "decrypt_chacha20", "type": "function", "line": 594}, {"name": "derive_key_from_password", "type": "function", "line": 603}, {"name": "derive_key_from_password_with_encryption", "type": "function", "line": 623}, {"name": "decrypt_with_password", "type": "function", "line": 636}, {"name": "encode_key", "type": "function", "line": 655}, {"name": "decode_key", "type": "function", "line": 660}, {"name": "encode_encrypted_data", "type": "function", "line": 665}, {"name": "decode_encrypted_data", "type": "function", "line": 670}, {"name": "encrypt_file", "type": "function", "line": 678}, {"name": "decrypt_file", "type": "function", "line": 699}, {"name": "is_secure_algorithm", "type": "function", "line": 730}, {"name": "get_algorithm_info", "type": "function", "line": 741}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "generate_key Function", "description": "Function generate_key implementation.", "line_start": 511, "line_end": 515}, {"name": "encrypt_data Function", "description": "Function encrypt_data implementation.", "line_start": 516, "line_end": 525}, {"name": "decrypt_data Function", "description": "Function decrypt_data implementation.", "line_start": 526, "line_end": 535}, {"name": "encrypt_aes Function", "description": "Function encrypt_aes implementation.", "line_start": 536, "line_end": 545}, {"name": "decrypt_aes Function", "description": "Function decrypt_aes implementation.", "line_start": 546, "line_end": 555}, {"name": "generate_rsa_key_pair Function", "description": "Function generate_rsa_key_pair implementation.", "line_start": 556, "line_end": 563}, {"name": "encrypt_rsa Function", "description": "Function encrypt_rsa implementation.", "line_start": 564, "line_end": 569}, {"name": "decrypt_rsa Function", "description": "Function decrypt_rsa implementation.", "line_start": 570, "line_end": 575}, {"name": "encrypt_fernet Function", "description": "Function encrypt_fernet implementation.", "line_start": 576, "line_end": 581}, {"name": "decrypt_fernet Function", "description": "Function decrypt_fernet implementation.", "line_start": 582, "line_end": 587}, {"name": "encrypt_chacha20 Function", "description": "Function encrypt_chacha20 implementation.", "line_start": 588, "line_end": 593}, {"name": "decrypt_chacha20 Function", "description": "Function decrypt_chacha20 implementation.", "line_start": 594, "line_end": 602}, {"name": "derive_key_from_password Function", "description": "Function derive_key_from_password implementation.", "line_start": 603, "line_end": 622}, {"name": "derive_key_from_password_with_encryption Function", "description": "Function derive_key_from_password_with_encryption implementation.", "line_start": 623, "line_end": 635}, {"name": "decrypt_with_password Function", "description": "Function decrypt_with_password implementation.", "line_start": 636, "line_end": 654}, {"name": "encode_key Function", "description": "Function encode_key implementation.", "line_start": 655, "line_end": 659}, {"name": "decode_key Function", "description": "Function decode_key implementation.", "line_start": 660, "line_end": 664}, {"name": "encode_encrypted_data Function", "description": "Function encode_encrypted_data implementation.", "line_start": 665, "line_end": 669}, {"name": "decode_encrypted_data Function", "description": "Function decode_encrypted_data implementation.", "line_start": 670, "line_end": 677}, {"name": "encrypt_file Function", "description": "Function encrypt_file implementation.", "line_start": 678, "line_end": 698}, {"name": "decrypt_file Function", "description": "Function decrypt_file implementation.", "line_start": 699, "line_end": 729}, {"name": "is_secure_algorithm Function", "description": "Function is_secure_algorithm implementation.", "line_start": 730, "line_end": 740}, {"name": "get_algorithm_info Function", "description": "Function get_algorithm_info implementation.", "line_start": 741, "line_end": 746}, {"name": "EncryptionAlgorithm Class", "description": "Class EncryptionAlgorithm definition and methods.", "line_start": 25, "line_end": 35}, {"name": "EncryptionMode Class", "description": "Class EncryptionMode definition and methods.", "line_start": 34, "line_end": 44}, {"name": "EncryptionError Class", "description": "Class EncryptionError definition and methods.", "line_start": 42, "line_end": 52}, {"name": "DecryptionError Class", "description": "Class DecryptionError definition and methods.", "line_start": 46, "line_end": 56}, {"name": "KeyGenerationError Class", "description": "Class KeyGenerationError definition and methods.", "line_start": 50, "line_end": 60}, {"name": "Encryptor Class", "description": "Class Encryptor definition and methods.", "line_start": 54, "line_end": 76}, {"name": "AESEncryptor Class", "description": "Class AESEncryptor definition and methods.", "line_start": 77, "line_end": 222}, {"name": "RSAEncryptor Class", "description": "Class RSAEncryptor definition and methods.", "line_start": 224, "line_end": 315}, {"name": "FernetEncryptor Class", "description": "Class FernetEncryptor definition and methods.", "line_start": 317, "line_end": 358}, {"name": "ChaCha20Encryptor Class", "description": "Class ChaCha20Encryptor definition and methods.", "line_start": 360, "line_end": 413}, {"name": "EncryptionManager Class", "description": "Class EncryptionManager definition and methods.", "line_start": 415, "line_end": 498}], "content_hash": "08419a79ae95c29367ece7cca29f3ba4"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/caching.py
  line_count: 561
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "caching.py", "description": "Python module with 9 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "cached", "line": 426, "parameters": [{"name": "ttl", "type": "int | None", "default": "None"}, {"name": "key_prefix", "type": "str", "default": ""}, {"name": "cache_name", "type": "str | None", "default": "None"}], "is_async": false, "description": "Decorator to cache the result of a function with optional TTL and cache configuration.", "signature": "cached(ttl: int | None = None, key_prefix: str = , cache_name: str | None = None)"}, {"name": "cache_key", "line": 489, "parameters": [{"name": "key_func", "type": "callable):"}], "is_async": false, "description": "Decorator to specify a custom function for generating cache keys.", "signature": "cache_key(key_func: callable):)"}, {"name": "generate_cache_key", "line": 502, "parameters": [], "is_async": false, "return_type": "str", "description": "Generates a unique cache key based on function arguments.", "signature": "generate_cache_key(*args, **kwargs) -> str"}, {"name": "create_memory_cache", "line": 522, "parameters": [{"name": "max_size", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "Cache", "description": "Creates an in-memory cache instance with a specified maximum size.", "signature": "create_memory_cache(max_size: int = 1000 = 1000) -> Cache"}, {"name": "create_redis_cache", "line": 528, "parameters": [{"name": "redis_url", "type": "str = \"redis://localhost:6379/0\"", "default": "redis://localhost:6379/0"}], "is_async": false, "return_type": "Cache", "description": "Creates a Redis-backed cache instance using the provided Redis URL.", "signature": "create_redis_cache(redis_url: str = \"redis://localhost:6379/0\" = redis://localhost:6379/0) -> Cache"}, {"name": "get_cached", "line": 537, "parameters": [{"name": "key", "type": "str, cache_name: str | None = None"}, {"name": "cache_name", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "Any | None", "description": "Asynchronously retrieves a cached value by key from the specified cache.", "signature": "async get_cached(key: str, cache_name: str | None = None, cache_name: str | None = None = None) -> Any | None"}, {"name": "set_cached", "line": 543, "parameters": [{"name": "key", "type": "str"}, {"name": "value", "type": "Any"}, {"name": "ttl", "type": "int | None", "default": "None"}, {"name": "cache_name", "type": "str | None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously sets a value in the cache with an optional TTL.", "signature": "async set_cached(key: str, value: Any, ttl: int | None = None, cache_name: str | None = None) -> bool"}, {"name": "delete_cached", "line": 554, "parameters": [{"name": "key", "type": "str, cache_name: str | None = None"}, {"name": "cache_name", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously deletes a cached value by key from the specified cache.", "signature": "async delete_cached(key: str, cache_name: str | None = None, cache_name: str | None = None = None) -> bool"}, {"name": "exists_cached", "line": 560, "parameters": [{"name": "key", "type": "str, cache_name: str | None = None"}, {"name": "cache_name", "type": "str | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously checks if a key exists in the specified cache.", "signature": "async exists_cached(key: str, cache_name: str | None = None, cache_name: str | None = None = None) -> bool"}], "classes": [{"name": "CacheError", "line": 22, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Base exception class for cache-related errors."}, {"name": "CacheKeyError", "line": 26, "inherits_from": ["CacheError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to cache key generation or usage."}, {"name": "CacheValueError", "line": 30, "inherits_from": ["CacheError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to cache value handling."}, {"name": "CacheBackend", "line": 37, "inherits_from": ["ABC):"], "methods": [{"name": "get", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 45, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in cache.", "signature": "async set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "list[str]", "description": "Get keys matching a pattern.", "signature": "async keys(self, pattern: str = \"*\" = *) -> list[str]"}], "properties": [], "description": "Abstract base class defining the interface for cache backend implementations."}, {"name": "MemoryCacheBackend", "line": 65, "inherits_from": ["CacheBackend):"], "methods": [{"name": "__init__", "line": 68, "parameters": [{"name": "self", "type": "self"}, {"name": "max_size", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "None", "signature": "__init__(self, max_size: int = 1000 = 1000) -> None"}, {"name": "get", "line": 73, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from memory cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 92, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in memory cache.", "signature": "async set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 119, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from memory cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in memory cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 144, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from memory cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 154, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "list[str]", "description": "Get keys matching a pattern (simplified implementation).", "signature": "async keys(self, pattern: str = \"*\" = *) -> list[str]"}, {"name": "_evict_lru", "line": 169, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Evict least recently used items.", "signature": "async _evict_lru(self) -> None"}], "properties": [], "description": "In-memory cache backend implementation with size-limited storage."}, {"name": "RedisCacheBackend", "line": 177, "inherits_from": ["CacheBackend):"], "methods": [{"name": "__init__", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "redis_url", "type": "str", "default": "redis://localhost:6379/0"}, {"name": "connection_pool_size", "type": "int", "default": "10"}], "is_async": false, "return_type": "None", "signature": "__init__(self, redis_url: str = redis://localhost:6379/0, connection_pool_size: int = 10) -> None"}, {"name": "_get_redis", "line": 189, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "redis.Redis", "description": "Get Redis connection.", "signature": "async _get_redis(self) -> redis.Redis"}, {"name": "get", "line": 199, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from Redis cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 216, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in Redis cache.", "signature": "async set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from Redis cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 245, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in Redis cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 254, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from Redis cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 264, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "list[str]", "description": "Get keys matching a pattern from Redis cache.", "signature": "async keys(self, pattern: str = \"*\" = *) -> list[str]"}, {"name": "close", "line": 273, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Close Redis connection.", "signature": "async close(self) -> None"}], "properties": [], "description": "Redis-based cache backend implementation supporting async operations."}, {"name": "Cache", "line": 280, "inherits_from": [], "methods": [{"name": "__init__", "line": 283, "parameters": [{"name": "self", "type": "self"}, {"name": "backend", "type": "CacheBackend"}], "is_async": false, "return_type": "None", "signature": "__init__(self, backend: CacheBackend) -> None"}, {"name": "set_key_prefix", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set a prefix for all cache keys.", "signature": "set_key_prefix(self, prefix: str) -> None"}, {"name": "set_default_ttl", "line": 292, "parameters": [{"name": "self", "type": "self"}, {"name": "ttl", "type": "int"}], "is_async": false, "return_type": "None", "description": "Set default TTL for cache entries.", "signature": "set_default_ttl(self, ttl: int) -> None"}, {"name": "_make_key", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "str", "description": "Make a full cache key with prefix.", "signature": "_make_key(self, key: str) -> str"}, {"name": "get", "line": 300, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "Any | None", "description": "Get a value from cache.", "signature": "async get(self, key: str) -> Any | None"}, {"name": "set", "line": 305, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any, ttl: int | None = None"}, {"name": "value", "type": "Any, ttl: int | None = None"}, {"name": "ttl", "type": "int | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Set a value in cache.", "signature": "async set(self, key: str, value: Any, ttl: int | None = None, value: Any, ttl: int | None = None, ttl: int | None = None = None) -> bool"}, {"name": "delete", "line": 311, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Delete a value from cache.", "signature": "async delete(self, key: str) -> bool"}, {"name": "exists", "line": 316, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": true, "return_type": "bool", "description": "Check if a key exists in cache.", "signature": "async exists(self, key: str) -> bool"}, {"name": "clear", "line": 321, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Clear all values from cache.", "signature": "async clear(self) -> bool"}, {"name": "keys", "line": 325, "parameters": [{"name": "self", "type": "self"}, {"name": "pattern", "type": "str = \"*\"", "default": "*"}], "is_async": true, "return_type": "list[str]", "description": "Get keys matching a pattern.", "signature": "async keys(self, pattern: str = \"*\" = *) -> list[str]"}, {"name": "get_or_set", "line": 336, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}, {"name": "default_func", "type": "callable"}, {"name": "ttl", "type": "int | None", "default": "None"}], "is_async": true, "return_type": "Any", "description": "Get a value from cache or set it using a default function.", "signature": "async get_or_set(self, key: str, default_func: callable, ttl: int | None = None) -> Any"}, {"name": "increment", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, amount: int = 1"}, {"name": "amount", "type": "int = 1", "default": "1"}], "is_async": true, "return_type": "int | None", "description": "Increment a numeric value in cache.", "signature": "async increment(self, key: str, amount: int = 1, amount: int = 1 = 1) -> int | None"}, {"name": "decrement", "line": 371, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, amount: int = 1"}, {"name": "amount", "type": "int = 1", "default": "1"}], "is_async": true, "return_type": "int | None", "description": "Decrement a numeric value in cache.", "signature": "async decrement(self, key: str, amount: int = 1, amount: int = 1 = 1) -> int | None"}], "properties": [], "description": "High-level cache interface managing backend operations and cache logic."}, {"name": "CacheManager", "line": 376, "inherits_from": [], "methods": [{"name": "__init__", "line": 379, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register_cache", "line": 383, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, cache: Cache"}, {"name": "cache", "type": "Cache"}], "is_async": false, "return_type": "None", "description": "Register a cache instance.", "signature": "register_cache(self, name: str, cache: Cache, cache: Cache) -> None"}, {"name": "get_cache", "line": 390, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "Cache", "description": "Get a cache instance by name.", "signature": "get_cache(self, name: str | None = None = None) -> Cache"}, {"name": "set_default_cache", "line": 401, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set the default cache.", "signature": "set_default_cache(self, name: str) -> None"}, {"name": "list_caches", "line": 408, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "List all registered cache names.", "signature": "list_caches(self) -> list[str]"}, {"name": "clear_all_caches", "line": 412, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Clear all registered caches.", "signature": "async clear_all_caches(self) -> None"}], "properties": [], "description": "Manages multiple cache instances and coordinates cache operations."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "hashlib", "alias": null, "line": 10, "statement": "import hashlib"}, {"module": "json", "alias": null, "line": 11, "statement": "import json"}, {"module": "logging", "alias": null, "line": 12, "statement": "import logging"}, {"module": "redis.asyncio", "alias": "redis", "line": 17, "statement": "import redis.asyncio as redis"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 13, "statement": "from abc import abstractmethod"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import timedelta"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 34, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "hashlib", "type": "import", "line": 10}, {"name": "json", "type": "import", "line": 11}, {"name": "logging", "type": "import", "line": 12}, {"name": "redis.asyncio", "type": "import", "line": 17}, {"name": "from abc import ABC", "type": "import", "line": 13}, {"name": "from abc import abstractmethod", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from datetime import timedelta", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "CacheError", "type": "class", "line": 22}, {"name": "CacheKeyError", "type": "class", "line": 26}, {"name": "CacheValueError", "type": "class", "line": 30}, {"name": "T", "type": "constant", "line": 34}, {"name": "CacheBackend", "type": "class", "line": 37}, {"name": "MemoryCacheBackend", "type": "class", "line": 65}, {"name": "RedisCacheBackend", "type": "class", "line": 177}, {"name": "Cache", "type": "class", "line": 280}, {"name": "CacheManager", "type": "class", "line": 376}, {"name": "cached", "type": "function", "line": 426}, {"name": "cache_key", "type": "function", "line": 489}, {"name": "generate_cache_key", "type": "function", "line": 502}, {"name": "create_memory_cache", "type": "function", "line": 522}, {"name": "create_redis_cache", "type": "function", "line": 528}, {"name": "get_cached", "type": "function", "line": 537}, {"name": "set_cached", "type": "function", "line": 543}, {"name": "delete_cached", "type": "function", "line": 554}, {"name": "exists_cached", "type": "function", "line": 560}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "cached Function", "description": "Function cached implementation.", "line_start": 426, "line_end": 488}, {"name": "cache_key Function", "description": "Function cache_key implementation.", "line_start": 489, "line_end": 501}, {"name": "generate_cache_key Function", "description": "Function generate_cache_key implementation.", "line_start": 502, "line_end": 521}, {"name": "create_memory_cache Function", "description": "Function create_memory_cache implementation.", "line_start": 522, "line_end": 527}, {"name": "create_redis_cache Function", "description": "Function create_redis_cache implementation.", "line_start": 528, "line_end": 536}, {"name": "get_cached Function", "description": "Function get_cached implementation.", "line_start": 537, "line_end": 542}, {"name": "set_cached Function", "description": "Function set_cached implementation.", "line_start": 543, "line_end": 553}, {"name": "delete_cached Function", "description": "Function delete_cached implementation.", "line_start": 554, "line_end": 559}, {"name": "exists_cached Function", "description": "Function exists_cached implementation.", "line_start": 560, "line_end": 565}, {"name": "CacheError Class", "description": "Class CacheError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "CacheKeyError Class", "description": "Class CacheKeyError definition and methods.", "line_start": 26, "line_end": 36}, {"name": "CacheValueError Class", "description": "Class CacheValueError definition and methods.", "line_start": 30, "line_end": 40}, {"name": "CacheBackend Class", "description": "Class CacheBackend definition and methods.", "line_start": 37, "line_end": 64}, {"name": "MemoryCacheBackend Class", "description": "Class MemoryCacheBackend definition and methods.", "line_start": 65, "line_end": 172}, {"name": "RedisCacheBackend Class", "description": "Class RedisCacheBackend definition and methods.", "line_start": 177, "line_end": 276}, {"name": "Cache Class", "description": "Class Cache definition and methods.", "line_start": 280, "line_end": 374}, {"name": "CacheManager Class", "description": "Class CacheManager definition and methods.", "line_start": 376, "line_end": 415}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 34, "line_end": 34}], "content_hash": "48cc9f76c9b1a6190d00081d878f484c"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/serialization.py
  line_count: 506
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "serialization.py", "description": "Python module with 16 functions and 12 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "serialize", "line": 393, "parameters": [{"name": "data", "type": "Any"}, {"name": "format_type", "type": "SerializationFormat", "default": "SerializationFormat.JSON"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize data into the specified format, returning a string or bytes.", "signature": "serialize(data: Any, format_type: SerializationFormat = SerializationFormat.JSON) -> str | bytes"}, {"name": "deserialize", "line": 401, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "SerializationFormat | None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from a string or bytes into a Python object, optionally specifying the format.", "signature": "deserialize(data: str | bytes, format_type: SerializationFormat | None = None) -> Any"}, {"name": "to_json", "line": 414, "parameters": [{"name": "data", "type": "Any, indent: int | None = None"}, {"name": "indent", "type": "int | None = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Convert data to a JSON-formatted string with optional indentation.", "signature": "to_json(data: Any, indent: int | None = None, indent: int | None = None = None) -> str"}, {"name": "from_json", "line": 420, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Parse JSON-formatted string or bytes into a Python object.", "signature": "from_json(data: str | bytes) -> Any"}, {"name": "to_yaml", "line": 426, "parameters": [{"name": "data", "type": "Any, indent: int = 2"}, {"name": "indent", "type": "int = 2", "default": "2"}], "is_async": false, "return_type": "str", "description": "Convert data to a YAML-formatted string with specified indentation.", "signature": "to_yaml(data: Any, indent: int = 2, indent: int = 2 = 2) -> str"}, {"name": "from_yaml", "line": 432, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Parse YAML-formatted string or bytes into a Python object.", "signature": "from_yaml(data: str | bytes) -> Any"}, {"name": "to_msgpack", "line": 438, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to MessagePack format as bytes.", "signature": "to_msgpack(data: Any) -> bytes"}, {"name": "from_msgpack", "line": 444, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize MessagePack-formatted string or bytes into a Python object.", "signature": "from_msgpack(data: str | bytes) -> Any"}, {"name": "to_pickle", "line": 450, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to Python pickle format as bytes.", "signature": "to_pickle(data: Any) -> bytes"}, {"name": "from_pickle", "line": 456, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize pickle-formatted string or bytes into a Python object.", "signature": "from_pickle(data: str | bytes) -> Any"}, {"name": "to_base64", "line": 462, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Encode data into a Base64 string.", "signature": "to_base64(data: Any) -> str"}, {"name": "from_base64", "line": 468, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "bytes", "description": "Decode Base64 string or bytes back into bytes.", "signature": "from_base64(data: str | bytes) -> bytes"}, {"name": "to_compressed_json", "line": 474, "parameters": [{"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to compressed JSON format as bytes.", "signature": "to_compressed_json(data: Any) -> bytes"}, {"name": "from_compressed_json", "line": 480, "parameters": [{"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize compressed JSON string or bytes into a Python object.", "signature": "from_compressed_json(data: str | bytes) -> Any"}, {"name": "serialize_typed", "line": 489, "parameters": [{"name": "data", "type": "T"}, {"name": "format_type", "type": "SerializationFormat", "default": "SerializationFormat.JSON"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize typed data into the specified format, returning a string or bytes.", "signature": "serialize_typed(data: T, format_type: SerializationFormat = SerializationFormat.JSON) -> str | bytes"}, {"name": "deserialize_typed", "line": 497, "parameters": [{"name": "data", "type": "str | bytes"}, {"name": "target_type", "type": "type[T]"}, {"name": "format_type", "type": "SerializationFormat | None", "default": "None"}], "is_async": false, "return_type": "T", "description": "Deserialize data into a specified target type from string or bytes, optionally specifying the format.", "signature": "deserialize_typed(data: str | bytes, target_type: type[T], format_type: SerializationFormat | None = None) -> T"}], "classes": [{"name": "SerializationFormat", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "JSON", "line": 27, "type": ""}, {"name": "ORJSON", "line": 28, "type": ""}, {"name": "MSGPACK", "line": 29, "type": ""}, {"name": "YAML", "line": 30, "type": ""}, {"name": "PICKLE", "line": 31, "type": ""}, {"name": "BASE64", "line": 32, "type": ""}, {"name": "COMPRESSED_JSON", "line": 33, "type": ""}], "description": "Enumeration of supported serialization formats."}, {"name": "SerializationError", "line": 38, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during serialization."}, {"name": "DeserializationError", "line": 42, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for errors during deserialization."}, {"name": "Serializer", "line": 49, "inherits_from": [], "methods": [{"name": "__init__", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "None", "signature": "__init__(self, format_type: SerializationFormat) -> None"}, {"name": "serialize", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize data to the specified format.", "signature": "serialize(self, data: Any) -> str | bytes"}, {"name": "deserialize", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from the specified format.", "signature": "deserialize(self, data: str | bytes) -> Any"}], "properties": [], "description": "Base class defining the interface for serializers."}, {"name": "JSONSerializer", "line": 64, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "indent", "type": "int | None", "default": "None"}, {"name": "ensure_ascii", "type": "bool", "default": "False"}], "is_async": false, "return_type": "None", "signature": "__init__(self, indent: int | None = None, ensure_ascii: bool = False) -> None"}, {"name": "serialize", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to JSON string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from JSON string.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "_json_serializer", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom JSON serializer for special types.", "signature": "_json_serializer(self, obj: Any) -> Any"}, {"name": "_json_deserializer", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "dict[str, Any]"}], "is_async": false, "return_type": "Any", "description": "Custom JSON deserializer for special types.", "signature": "_json_deserializer(self, obj: dict[str, Any]) -> Any"}], "properties": [], "description": "Serializer implementation for JSON format."}, {"name": "ORJSONSerializer", "line": 115, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "option", "type": "int | None = None", "default": "None"}], "is_async": false, "return_type": "None", "signature": "__init__(self, option: int | None = None = None) -> None"}, {"name": "serialize", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to ORJSON bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from ORJSON bytes.", "signature": "deserialize(self, data: str | bytes) -> Any"}], "properties": [], "description": "Serializer implementation using the orjson library for JSON format."}, {"name": "MessagePackSerializer", "line": 139, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 142, "parameters": [{"name": "self", "type": "self"}, {"name": "use_bin_type", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "None", "signature": "__init__(self, use_bin_type: bool = True = True) -> None"}, {"name": "serialize", "line": 146, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to MessagePack bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from MessagePack bytes.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "_msgpack_serializer", "line": 166, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom MessagePack serializer for special types.", "signature": "_msgpack_serializer(self, obj: Any) -> Any"}], "properties": [], "description": "Serializer implementation for MessagePack format."}, {"name": "YAMLSerializer", "line": 177, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 180, "parameters": [{"name": "self", "type": "self"}, {"name": "default_flow_style", "type": "bool = False, indent: int = 2", "default": "False"}, {"name": "indent", "type": "int = 2", "default": "2"}], "is_async": false, "return_type": "None", "signature": "__init__(self, default_flow_style: bool = False, indent: int = 2 = False, indent: int = 2 = 2) -> None"}, {"name": "serialize", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to YAML string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 197, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from YAML string.", "signature": "deserialize(self, data: str | bytes) -> Any"}, {"name": "_yaml_representer", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "representer", "type": "Any, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Custom YAML representer for special types.", "signature": "_yaml_representer(self, representer: Any, data: Any, data: Any) -> Any"}], "properties": [], "description": "Serializer implementation for YAML format."}, {"name": "PickleSerializer", "line": 217, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 220, "parameters": [{"name": "self", "type": "self"}, {"name": "protocol", "type": "int = pickle.HIGHEST_PROTOCOL", "default": "pickle.HIGHEST_PROTOCOL"}], "is_async": false, "return_type": "None", "signature": "__init__(self, protocol: int = pickle.HIGHEST_PROTOCOL = pickle.HIGHEST_PROTOCOL) -> None"}, {"name": "serialize", "line": 224, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to pickle bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 231, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from pickle bytes.", "signature": "deserialize(self, data: str | bytes) -> Any"}], "properties": [], "description": "Serializer implementation for Python pickle format."}, {"name": "Base64Serializer", "line": 241, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 244, "parameters": [{"name": "self", "type": "self"}, {"name": "encoding", "type": "str = \"utf-8\"", "default": "utf-8"}], "is_async": false, "return_type": "None", "signature": "__init__(self, encoding: str = \"utf-8\" = utf-8) -> None"}, {"name": "serialize", "line": 248, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Serialize data to base64 string.", "signature": "serialize(self, data: Any) -> str"}, {"name": "deserialize", "line": 259, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "bytes", "description": "Deserialize data from base64 string.", "signature": "deserialize(self, data: str | bytes) -> bytes"}], "properties": [], "description": "Serializer implementation for Base64 encoding and decoding."}, {"name": "CompressedJSONSerializer", "line": 269, "inherits_from": ["Serializer):"], "methods": [{"name": "__init__", "line": 272, "parameters": [{"name": "self", "type": "self"}, {"name": "compression_level", "type": "int = 6", "default": "6"}], "is_async": false, "return_type": "None", "signature": "__init__(self, compression_level: int = 6 = 6) -> None"}, {"name": "serialize", "line": 277, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bytes", "description": "Serialize data to compressed JSON bytes.", "signature": "serialize(self, data: Any) -> bytes"}, {"name": "deserialize", "line": 287, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "Any", "description": "Deserialize data from compressed JSON bytes.", "signature": "deserialize(self, data: str | bytes) -> Any"}], "properties": [], "description": "Serializer implementation for compressed JSON format."}, {"name": "SerializationManager", "line": 299, "inherits_from": [], "methods": [{"name": "__init__", "line": 302, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "get_serializer", "line": 313, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "Serializer", "description": "Get a serializer for the specified format.", "signature": "get_serializer(self, format_type: SerializationFormat) -> Serializer"}, {"name": "register_serializer", "line": 319, "parameters": [{"name": "self", "type": "self"}, {"name": "format_type", "type": "SerializationFormat"}, {"name": "serializer", "type": "Serializer"}], "is_async": false, "return_type": "None", "description": "Register a custom serializer.", "signature": "register_serializer(self, format_type: SerializationFormat, serializer: Serializer) -> None"}, {"name": "serialize", "line": 328, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "str | bytes", "description": "Serialize data using the specified format.", "signature": "serialize(self, data: Any, format_type: SerializationFormat) -> str | bytes"}, {"name": "deserialize", "line": 337, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}, {"name": "format_type", "type": "SerializationFormat"}], "is_async": false, "return_type": "Any", "description": "Deserialize data using the specified format.", "signature": "deserialize(self, data: str | bytes, format_type: SerializationFormat) -> Any"}, {"name": "auto_detect_format", "line": 346, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes"}], "is_async": false, "return_type": "SerializationFormat | None", "description": "Auto-detect the format of serialized data.", "signature": "auto_detect_format(self, data: str | bytes) -> SerializationFormat | None"}, {"name": "_detect_string_format", "line": 366, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "SerializationFormat | None", "description": "Detect format from string data.", "signature": "_detect_string_format(self, data: str) -> SerializationFormat | None"}], "properties": [], "description": "Manager class to handle multiple serializers and coordinate serialization tasks."}], "imports": [{"module": "base64", "alias": null, "line": 9, "statement": "import base64"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "logging", "alias": null, "line": 11, "statement": "import logging"}, {"module": "pickle", "alias": null, "line": 12, "statement": "import pickle"}, {"module": "zlib", "alias": null, "line": 13, "statement": "import zlib"}, {"module": "msgpack", "alias": null, "line": 19, "statement": "import msgpack"}, {"module": "orjson", "alias": null, "line": 20, "statement": "import orjson"}, {"module": "yaml", "alias": null, "line": 21, "statement": "import yaml"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import TypeVar"}, {"module": "uuid", "alias": null, "line": 17, "statement": "from uuid import UUID"}], "constants": [{"name": "T", "line": 46, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "base64", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "logging", "type": "import", "line": 11}, {"name": "pickle", "type": "import", "line": 12}, {"name": "zlib", "type": "import", "line": 13}, {"name": "msgpack", "type": "import", "line": 19}, {"name": "orjson", "type": "import", "line": 20}, {"name": "yaml", "type": "import", "line": 21}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from typing import TypeVar", "type": "import", "line": 16}, {"name": "from uuid import UUID", "type": "import", "line": 17}, {"name": "SerializationFormat", "type": "class", "line": 26}, {"name": "SerializationError", "type": "class", "line": 38}, {"name": "DeserializationError", "type": "class", "line": 42}, {"name": "T", "type": "constant", "line": 46}, {"name": "Serializer", "type": "class", "line": 49}, {"name": "JSONSerializer", "type": "class", "line": 64}, {"name": "ORJSONSerializer", "type": "class", "line": 115}, {"name": "MessagePackSerializer", "type": "class", "line": 139}, {"name": "YAMLSerializer", "type": "class", "line": 177}, {"name": "PickleSerializer", "type": "class", "line": 217}, {"name": "Base64Serializer", "type": "class", "line": 241}, {"name": "CompressedJSONSerializer", "type": "class", "line": 269}, {"name": "SerializationManager", "type": "class", "line": 299}, {"name": "serialize", "type": "function", "line": 393}, {"name": "deserialize", "type": "function", "line": 401}, {"name": "to_json", "type": "function", "line": 414}, {"name": "from_json", "type": "function", "line": 420}, {"name": "to_yaml", "type": "function", "line": 426}, {"name": "from_yaml", "type": "function", "line": 432}, {"name": "to_msgpack", "type": "function", "line": 438}, {"name": "from_msgpack", "type": "function", "line": 444}, {"name": "to_pickle", "type": "function", "line": 450}, {"name": "from_pickle", "type": "function", "line": 456}, {"name": "to_base64", "type": "function", "line": 462}, {"name": "from_base64", "type": "function", "line": 468}, {"name": "to_compressed_json", "type": "function", "line": 474}, {"name": "from_compressed_json", "type": "function", "line": 480}, {"name": "serialize_typed", "type": "function", "line": 489}, {"name": "deserialize_typed", "type": "function", "line": 497}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 21}, {"name": "serialize Function", "description": "Function serialize implementation.", "line_start": 393, "line_end": 400}, {"name": "deserialize Function", "description": "Function deserialize implementation.", "line_start": 401, "line_end": 413}, {"name": "to_json Function", "description": "Function to_json implementation.", "line_start": 414, "line_end": 419}, {"name": "from_json Function", "description": "Function from_json implementation.", "line_start": 420, "line_end": 425}, {"name": "to_yaml Function", "description": "Function to_yaml implementation.", "line_start": 426, "line_end": 431}, {"name": "from_yaml Function", "description": "Function from_yaml implementation.", "line_start": 432, "line_end": 437}, {"name": "to_msgpack Function", "description": "Function to_msgpack implementation.", "line_start": 438, "line_end": 443}, {"name": "from_msgpack Function", "description": "Function from_msgpack implementation.", "line_start": 444, "line_end": 449}, {"name": "to_pickle Function", "description": "Function to_pickle implementation.", "line_start": 450, "line_end": 455}, {"name": "from_pickle Function", "description": "Function from_pickle implementation.", "line_start": 456, "line_end": 461}, {"name": "to_base64 Function", "description": "Function to_base64 implementation.", "line_start": 462, "line_end": 467}, {"name": "from_base64 Function", "description": "Function from_base64 implementation.", "line_start": 468, "line_end": 473}, {"name": "to_compressed_json Function", "description": "Function to_compressed_json implementation.", "line_start": 474, "line_end": 479}, {"name": "from_compressed_json Function", "description": "Function from_compressed_json implementation.", "line_start": 480, "line_end": 488}, {"name": "serialize_typed Function", "description": "Function serialize_typed implementation.", "line_start": 489, "line_end": 496}, {"name": "deserialize_typed Function", "description": "Function deserialize_typed implementation.", "line_start": 497, "line_end": 502}, {"name": "SerializationFormat Class", "description": "Class SerializationFormat definition and methods.", "line_start": 26, "line_end": 36}, {"name": "SerializationError Class", "description": "Class SerializationError definition and methods.", "line_start": 38, "line_end": 48}, {"name": "DeserializationError Class", "description": "Class DeserializationError definition and methods.", "line_start": 42, "line_end": 52}, {"name": "Serializer Class", "description": "Class Serializer definition and methods.", "line_start": 49, "line_end": 62}, {"name": "JSONSerializer Class", "description": "Class JSONSerializer definition and methods.", "line_start": 64, "line_end": 112}, {"name": "ORJSONSerializer Class", "description": "Class ORJSONSerializer definition and methods.", "line_start": 115, "line_end": 132}, {"name": "MessagePackSerializer Class", "description": "Class MessagePackSerializer definition and methods.", "line_start": 139, "line_end": 169}, {"name": "YAMLSerializer Class", "description": "Class YAMLSerializer definition and methods.", "line_start": 177, "line_end": 209}, {"name": "PickleSerializer Class", "description": "Class PickleSerializer definition and methods.", "line_start": 217, "line_end": 234}, {"name": "Base64Serializer Class", "description": "Class Base64Serializer definition and methods.", "line_start": 241, "line_end": 262}, {"name": "CompressedJSONSerializer Class", "description": "Class CompressedJSONSerializer definition and methods.", "line_start": 269, "line_end": 290}, {"name": "SerializationManager Class", "description": "Class SerializationManager definition and methods.", "line_start": 299, "line_end": 369}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 46, "line_end": 46}], "content_hash": "9da92348bf4fc104fcaebd0e01be14a7"}'
- path: libs/opsvi-foundation/opsvi_foundation/utils/validation.py
  line_count: 577
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 21 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "is_not_empty", "line": 90, "parameters": [{"name": "value", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Checks if the given value is not empty.", "signature": "is_not_empty(value: Any) -> bool"}, {"name": "is_valid_email", "line": 103, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates whether the given string is a properly formatted email address.", "signature": "is_valid_email(value: str) -> bool"}, {"name": "is_valid_url", "line": 112, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if the given string is a valid URL.", "signature": "is_valid_url(value: str) -> bool"}, {"name": "is_valid_uuid", "line": 124, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string is a valid UUID.", "signature": "is_valid_uuid(value: str) -> bool"}, {"name": "is_valid_phone", "line": 136, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates if the given string is a valid phone number.", "signature": "is_valid_phone(value: str) -> bool"}, {"name": "is_valid_date", "line": 146, "parameters": [{"name": "value", "type": "str, format_str: str = \"%Y-%m-%d\""}, {"name": "format_str", "type": "str = \"%Y-%m-%d\"", "default": "%Y-%m-%d"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string matches the specified date format.", "signature": "is_valid_date(value: str, format_str: str = \"%Y-%m-%d\", format_str: str = \"%Y-%m-%d\" = %Y-%m-%d) -> bool"}, {"name": "is_valid_datetime", "line": 158, "parameters": [{"name": "value", "type": "str, format_str: str = \"%Y-%m-%d %H:%M:%S\""}, {"name": "format_str", "type": "str = \"%Y-%m-%d %H:%M:%S\"", "default": "%Y-%m-%d %H:%M:%S"}], "is_async": false, "return_type": "bool", "description": "Validates whether the given string matches the specified datetime format.", "signature": "is_valid_datetime(value: str, format_str: str = \"%Y-%m-%d %H:%M:%S\", format_str: str = \"%Y-%m-%d %H:%M:%S\" = %Y-%m-%d %H:%M:%S) -> bool"}, {"name": "is_valid_json", "line": 170, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines if the given string is a valid JSON format.", "signature": "is_valid_json(value: str) -> bool"}, {"name": "is_valid_ip_address", "line": 184, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the given string is a valid IP address (IPv4 or IPv6).", "signature": "is_valid_ip_address(value: str) -> bool"}, {"name": "is_valid_credit_card", "line": 200, "parameters": [{"name": "value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Validates if the given string is a valid credit card number.", "signature": "is_valid_credit_card(value: str) -> bool"}, {"name": "is_valid_password", "line": 227, "parameters": [{"name": "value", "type": "str, min_length: int = 8"}, {"name": "min_length", "type": "int = 8", "default": "8"}], "is_async": false, "return_type": "bool", "description": "Checks if the password meets the minimum length and complexity requirements.", "signature": "is_valid_password(value: str, min_length: int = 8, min_length: int = 8 = 8) -> bool"}, {"name": "validate_input", "line": 257, "parameters": [{"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates input data against a specified validation schema.", "signature": "validate_input(schema: ValidationSchema):)"}, {"name": "validate_output", "line": 277, "parameters": [{"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates output data against a specified validation schema.", "signature": "validate_output(schema: ValidationSchema):)"}, {"name": "validate_field", "line": 295, "parameters": [{"name": "field_name", "type": "str"}, {"name": "schema", "type": "ValidationSchema):"}], "is_async": false, "description": "Validates a specific field against its validation schema.", "signature": "validate_field(field_name: str, schema: ValidationSchema):)"}, {"name": "validate_type", "line": 485, "parameters": [{"name": "value", "type": "Any, expected_type: type[T]"}, {"name": "expected_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Ensures the value matches the expected type, returning the typed value.", "signature": "validate_type(value: Any, expected_type: type[T], expected_type: type[T]) -> T"}, {"name": "validate_optional_type", "line": 494, "parameters": [{"name": "value", "type": "Any, expected_type: type[T]"}, {"name": "expected_type", "type": "type[T]"}], "is_async": false, "return_type": "T | None", "description": "Validates the value against an expected type or None if optional.", "signature": "validate_optional_type(value: Any, expected_type: type[T], expected_type: type[T]) -> T | None"}, {"name": "validate_union_type", "line": 501, "parameters": [{"name": "value", "type": "Any, expected_types: list[type]"}, {"name": "expected_types", "type": "list[type]"}], "is_async": false, "return_type": "Any", "description": "Validates the value against multiple possible expected types.", "signature": "validate_union_type(value: Any, expected_types: list[type], expected_types: list[type]) -> Any"}, {"name": "validate_range", "line": 514, "parameters": [{"name": "value", "type": "float"}, {"name": "min_value", "type": "float | None", "default": "None"}, {"name": "max_value", "type": "float | None", "default": "None"}], "is_async": false, "return_type": "int | float", "description": "Checks if a numeric value falls within an optional minimum and maximum range.", "signature": "validate_range(value: float, min_value: float | None = None, max_value: float | None = None) -> int | float"}, {"name": "validate_length", "line": 531, "parameters": [{"name": "value", "type": "str | list | dict"}, {"name": "min_length", "type": "int | None", "default": "None"}, {"name": "max_length", "type": "int | None", "default": "None"}], "is_async": false, "return_type": "str | list | dict", "description": "Validates the length of a string, list, or dictionary within optional bounds.", "signature": "validate_length(value: str | list | dict, min_length: int | None = None, max_length: int | None = None) -> str | list | dict"}, {"name": "validate_pattern", "line": 555, "parameters": [{"name": "value", "type": "str, pattern: str, flags: int = 0"}, {"name": "pattern", "type": "str, flags: int = 0"}, {"name": "flags", "type": "int = 0", "default": "0"}], "is_async": false, "return_type": "str", "description": "Validates that a string matches a given regular expression pattern.", "signature": "validate_pattern(value: str, pattern: str, flags: int = 0, pattern: str, flags: int = 0, flags: int = 0 = 0) -> str"}, {"name": "validate_enum", "line": 568, "parameters": [{"name": "value", "type": "Any, enum_class: type"}, {"name": "enum_class", "type": "type"}], "is_async": false, "return_type": "Any", "description": "Checks if the value is a valid member of the specified enumeration.", "signature": "validate_enum(value: Any, enum_class: type, enum_class: type) -> Any"}], "classes": [{"name": "CustomValidationError", "line": 22, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception class representing validation errors."}, {"name": "ValidationRule", "line": 26, "inherits_from": [], "methods": [{"name": "__init__", "line": 29, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, validator_func: Callable, error_message: str"}, {"name": "validator_func", "type": "Callable, error_message: str"}, {"name": "error_message", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str, validator_func: Callable, error_message: str, validator_func: Callable, error_message: str, error_message: str) -> None"}, {"name": "validate", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Validate a value.", "signature": "validate(self, value: Any) -> bool"}, {"name": "get_error_message", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Get error message for validation failure.", "signature": "get_error_message(self, value: Any) -> str"}], "properties": [], "description": "Represents a single validation rule with methods to apply it."}, {"name": "ValidationSchema", "line": 46, "inherits_from": [], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_rule", "line": 53, "parameters": [{"name": "self", "type": "self"}, {"name": "rule", "type": "ValidationRule"}], "is_async": false, "return_type": "\"ValidationSchema\"", "description": "Add a validation rule.", "signature": "add_rule(self, rule: ValidationRule) -> \"ValidationSchema\""}, {"name": "add_custom_validator", "line": 58, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "validator_func", "type": "Callable"}], "is_async": false, "return_type": "\"ValidationSchema\"", "description": "Add a custom validator.", "signature": "add_custom_validator(self, name: str, validator_func: Callable) -> \"ValidationSchema\""}, {"name": "validate", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "list[str]", "description": "Validate data against all rules.", "signature": "validate(self, data: Any) -> list[str]"}], "properties": [], "description": "Defines a schema composed of multiple validation rules for data validation."}, {"name": "EmailValidator", "line": 316, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_email", "line": 322, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_email(cls, v)"}], "properties": [], "description": "Validator class specialized in validating email addresses."}, {"name": "URLValidator", "line": 328, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_url", "line": 334, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_url(cls, v)"}], "properties": [], "description": "Validator class specialized in validating URLs."}, {"name": "PhoneValidator", "line": 340, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_phone", "line": 346, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_phone(cls, v)"}], "properties": [], "description": "Validator class specialized in validating phone numbers."}, {"name": "PasswordValidator", "line": 352, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_password", "line": 358, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_password(cls, v)"}], "properties": [], "description": "Validator class specialized in validating password strength and requirements."}, {"name": "CreditCardValidator", "line": 366, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_credit_card", "line": 372, "parameters": [{"name": "cls", "type": "self"}, {"name": "v", "type": "unknown"}], "is_async": false, "signature": "validate_credit_card(cls, v)"}], "properties": [], "description": "Validator class specialized in validating credit card numbers."}, {"name": "ValidationUtils", "line": 381, "inherits_from": [], "methods": [{"name": "create_email_schema", "line": 385, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create email validation schema.", "signature": "create_email_schema() -> ValidationSchema"}, {"name": "create_password_schema", "line": 401, "parameters": [{"name": "min_length", "type": "int = 8", "default": "8"}], "is_async": false, "return_type": "ValidationSchema", "description": "Create password validation schema.", "signature": "create_password_schema(min_length: int = 8 = 8) -> ValidationSchema"}, {"name": "create_url_schema", "line": 424, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create URL validation schema.", "signature": "create_url_schema() -> ValidationSchema"}, {"name": "create_phone_schema", "line": 436, "parameters": [], "is_async": false, "return_type": "ValidationSchema", "description": "Create phone validation schema.", "signature": "create_phone_schema() -> ValidationSchema"}, {"name": "validate_dict", "line": 452, "parameters": [{"name": "data", "type": "dict[str, Any]"}, {"name": "validators", "type": "dict[str, ValidationSchema]"}], "is_async": false, "return_type": "dict[str, list[str]]", "description": "Validate a dictionary against multiple schemas.", "signature": "validate_dict(data: dict[str, Any], validators: dict[str, ValidationSchema]) -> dict[str, list[str]]"}, {"name": "validate_list", "line": 468, "parameters": [{"name": "data", "type": "list[Any], schema: ValidationSchema"}, {"name": "schema", "type": "ValidationSchema"}], "is_async": false, "return_type": "list[str]", "description": "Validate a list of items against a schema.", "signature": "validate_list(data: list[Any], schema: ValidationSchema, schema: ValidationSchema) -> list[str]"}], "properties": [], "description": "Utility class providing common validation helper methods."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "re", "alias": null, "line": 10, "statement": "import re"}, {"module": "uuid", "alias": null, "line": 11, "statement": "import uuid"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "datetime", "alias": null, "line": 13, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import TypeVar"}, {"module": "urllib.parse", "alias": null, "line": 15, "statement": "from urllib.parse import urlparse"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 17, "statement": "from pydantic import validator"}], "constants": [{"name": "T", "line": 482, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "re", "type": "import", "line": 10}, {"name": "uuid", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from datetime import datetime", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 14}, {"name": "from urllib.parse import urlparse", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 17}, {"name": "from pydantic import Field", "type": "import", "line": 17}, {"name": "from pydantic import validator", "type": "import", "line": 17}, {"name": "CustomValidationError", "type": "class", "line": 22}, {"name": "ValidationRule", "type": "class", "line": 26}, {"name": "ValidationSchema", "type": "class", "line": 46}, {"name": "is_not_empty", "type": "function", "line": 90}, {"name": "is_valid_email", "type": "function", "line": 103}, {"name": "is_valid_url", "type": "function", "line": 112}, {"name": "is_valid_uuid", "type": "function", "line": 124}, {"name": "is_valid_phone", "type": "function", "line": 136}, {"name": "is_valid_date", "type": "function", "line": 146}, {"name": "is_valid_datetime", "type": "function", "line": 158}, {"name": "is_valid_json", "type": "function", "line": 170}, {"name": "is_valid_ip_address", "type": "function", "line": 184}, {"name": "is_valid_credit_card", "type": "function", "line": 200}, {"name": "is_valid_password", "type": "function", "line": 227}, {"name": "validate_input", "type": "function", "line": 257}, {"name": "validate_output", "type": "function", "line": 277}, {"name": "validate_field", "type": "function", "line": 295}, {"name": "EmailValidator", "type": "class", "line": 316}, {"name": "URLValidator", "type": "class", "line": 328}, {"name": "PhoneValidator", "type": "class", "line": 340}, {"name": "PasswordValidator", "type": "class", "line": 352}, {"name": "CreditCardValidator", "type": "class", "line": 366}, {"name": "ValidationUtils", "type": "class", "line": 381}, {"name": "T", "type": "constant", "line": 482}, {"name": "validate_type", "type": "function", "line": 485}, {"name": "validate_optional_type", "type": "function", "line": 494}, {"name": "validate_union_type", "type": "function", "line": 501}, {"name": "validate_range", "type": "function", "line": 514}, {"name": "validate_length", "type": "function", "line": 531}, {"name": "validate_pattern", "type": "function", "line": 555}, {"name": "validate_enum", "type": "function", "line": 568}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 17}, {"name": "is_not_empty Function", "description": "Function is_not_empty implementation.", "line_start": 90, "line_end": 102}, {"name": "is_valid_email Function", "description": "Function is_valid_email implementation.", "line_start": 103, "line_end": 111}, {"name": "is_valid_url Function", "description": "Function is_valid_url implementation.", "line_start": 112, "line_end": 123}, {"name": "is_valid_uuid Function", "description": "Function is_valid_uuid implementation.", "line_start": 124, "line_end": 135}, {"name": "is_valid_phone Function", "description": "Function is_valid_phone implementation.", "line_start": 136, "line_end": 145}, {"name": "is_valid_date Function", "description": "Function is_valid_date implementation.", "line_start": 146, "line_end": 157}, {"name": "is_valid_datetime Function", "description": "Function is_valid_datetime implementation.", "line_start": 158, "line_end": 169}, {"name": "is_valid_json Function", "description": "Function is_valid_json implementation.", "line_start": 170, "line_end": 183}, {"name": "is_valid_ip_address Function", "description": "Function is_valid_ip_address implementation.", "line_start": 184, "line_end": 199}, {"name": "is_valid_credit_card Function", "description": "Function is_valid_credit_card implementation.", "line_start": 200, "line_end": 226}, {"name": "is_valid_password Function", "description": "Function is_valid_password implementation.", "line_start": 227, "line_end": 256}, {"name": "validate_input Function", "description": "Function validate_input implementation.", "line_start": 257, "line_end": 276}, {"name": "validate_output Function", "description": "Function validate_output implementation.", "line_start": 277, "line_end": 294}, {"name": "validate_field Function", "description": "Function validate_field implementation.", "line_start": 295, "line_end": 315}, {"name": "validate_type Function", "description": "Function validate_type implementation.", "line_start": 485, "line_end": 493}, {"name": "validate_optional_type Function", "description": "Function validate_optional_type implementation.", "line_start": 494, "line_end": 500}, {"name": "validate_union_type Function", "description": "Function validate_union_type implementation.", "line_start": 501, "line_end": 513}, {"name": "validate_range Function", "description": "Function validate_range implementation.", "line_start": 514, "line_end": 530}, {"name": "validate_length Function", "description": "Function validate_length implementation.", "line_start": 531, "line_end": 554}, {"name": "validate_pattern Function", "description": "Function validate_pattern implementation.", "line_start": 555, "line_end": 567}, {"name": "validate_enum Function", "description": "Function validate_enum implementation.", "line_start": 568, "line_end": 573}, {"name": "CustomValidationError Class", "description": "Class CustomValidationError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "ValidationRule Class", "description": "Class ValidationRule definition and methods.", "line_start": 26, "line_end": 44}, {"name": "ValidationSchema Class", "description": "Class ValidationSchema definition and methods.", "line_start": 46, "line_end": 70}, {"name": "EmailValidator Class", "description": "Class EmailValidator definition and methods.", "line_start": 316, "line_end": 325}, {"name": "URLValidator Class", "description": "Class URLValidator definition and methods.", "line_start": 328, "line_end": 337}, {"name": "PhoneValidator Class", "description": "Class PhoneValidator definition and methods.", "line_start": 340, "line_end": 349}, {"name": "PasswordValidator Class", "description": "Class PasswordValidator definition and methods.", "line_start": 352, "line_end": 361}, {"name": "CreditCardValidator Class", "description": "Class CreditCardValidator definition and methods.", "line_start": 366, "line_end": 375}, {"name": "ValidationUtils Class", "description": "Class ValidationUtils definition and methods.", "line_start": 381, "line_end": 471}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 482, "line_end": 482}], "content_hash": "d8633dc7984feac6081b70b5d9cc9626"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/permissions.py
  line_count: 468
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "permissions.py", "description": "Python module with 1 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "require_permission", "line": 457, "parameters": [{"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "description": "Decorator that enforces a required permission level for a given resource and action.", "signature": "require_permission(resource: str, action: str, level: PermissionLevel = PermissionLevel.READ)"}], "classes": [{"name": "PermissionError", "line": 19, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a permission-related error occurs."}, {"name": "RoleError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a role-related error occurs."}, {"name": "PermissionLevel", "line": 27, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "NONE", "line": 28, "type": ""}, {"name": "READ", "line": 29, "type": ""}, {"name": "WRITE", "line": 30, "type": ""}, {"name": "ADMIN", "line": 31, "type": ""}, {"name": "OWNER", "line": 32, "type": ""}], "description": "Enumeration representing different levels of permissions."}, {"name": "Permission", "line": 37, "inherits_from": [], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "description": "\n        Initialize permission.\n\n        Args:\n            resource: Resource being accessed\n            action: Action being performed\n            level: Permission level\n        ", "signature": "__init__(self, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ)"}, {"name": "__str__", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "__str__(self) -> str"}, {"name": "__eq__", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "other", "type": "object"}], "is_async": false, "return_type": "bool", "signature": "__eq__(self, other: object) -> bool"}, {"name": "__hash__", "line": 70, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "signature": "__hash__(self) -> int"}], "properties": [], "description": "Represents a permission with associated resource, action, and level."}, {"name": "Role", "line": 74, "inherits_from": [], "methods": [{"name": "__init__", "line": 77, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "description", "type": "str", "default": ""}], "is_async": false, "description": "\n        Initialize role.\n\n        Args:\n            name: Role name\n            description: Role description\n        ", "signature": "__init__(self, name: str, description: str = )"}, {"name": "add_permission", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Add permission to role.\n\n        Args:\n            permission: Permission to add\n        ", "signature": "add_permission(self, permission: Permission) -> None"}, {"name": "remove_permission", "line": 99, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Remove permission from role.\n\n        Args:\n            permission: Permission to remove\n        ", "signature": "remove_permission(self, permission: Permission) -> None"}, {"name": "has_permission", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "bool", "description": "\n        Check if role has specific permission.\n\n        Args:\n            permission: Permission to check\n\n        Returns:\n            True if role has permission, False otherwise\n        ", "signature": "has_permission(self, permission: Permission) -> bool"}, {"name": "inherit_from", "line": 120, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Inherit permissions from another role.\n\n        Args:\n            role_name: Name of role to inherit from\n        ", "signature": "inherit_from(self, role_name: str) -> None"}], "properties": [], "description": "Represents a user role that aggregates multiple permissions."}, {"name": "User", "line": 130, "inherits_from": [], "methods": [{"name": "__init__", "line": 133, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "username", "type": "str):"}], "is_async": false, "description": "\n        Initialize user.\n\n        Args:\n            user_id: Unique user identifier\n            username: User''s username\n        ", "signature": "__init__(self, user_id: str, username: str):)"}, {"name": "add_role", "line": 146, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Add role to user.\n\n        Args:\n            role_name: Name of role to add\n        ", "signature": "add_role(self, role_name: str) -> None"}, {"name": "remove_role", "line": 155, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove role from user.\n\n        Args:\n            role_name: Name of role to remove\n        ", "signature": "remove_role(self, role_name: str) -> None"}, {"name": "add_custom_permission", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Add custom permission to user.\n\n        Args:\n            permission: Permission to add\n        ", "signature": "add_custom_permission(self, permission: Permission) -> None"}, {"name": "remove_custom_permission", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "permission", "type": "Permission"}], "is_async": false, "return_type": "None", "description": "\n        Remove custom permission from user.\n\n        Args:\n            permission: Permission to remove\n        ", "signature": "remove_custom_permission(self, permission: Permission) -> None"}], "properties": [], "description": "Represents a system user with assigned roles and permissions."}, {"name": "PolicyEngine", "line": 183, "inherits_from": [], "methods": [{"name": "__init__", "line": 186, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize policy engine.", "signature": "__init__(self)"}, {"name": "add_role", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "role", "type": "Role"}], "is_async": false, "return_type": "None", "description": "\n        Add role to policy engine.\n\n        Args:\n            role: Role to add\n        ", "signature": "add_role(self, role: Role) -> None"}, {"name": "remove_role", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove role from policy engine.\n\n        Args:\n            role_name: Name of role to remove\n        ", "signature": "remove_role(self, role_name: str) -> None"}, {"name": "add_user", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "user", "type": "User"}], "is_async": false, "return_type": "None", "description": "\n        Add user to policy engine.\n\n        Args:\n            user: User to add\n        ", "signature": "add_user(self, user: User) -> None"}, {"name": "remove_user", "line": 223, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove user from policy engine.\n\n        Args:\n            user_id: ID of user to remove\n        ", "signature": "remove_user(self, user_id: str) -> None"}, {"name": "add_policy", "line": 233, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, policy_func: Callable"}, {"name": "policy_func", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Add custom policy function.\n\n        Args:\n            name: Policy name\n            policy_func: Policy function to execute\n        ", "signature": "add_policy(self, name: str, policy_func: Callable, policy_func: Callable) -> None"}, {"name": "check_permission", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "return_type": "bool", "description": "\n        Check if user has permission for resource and action.\n\n        Args:\n            user_id: User ID\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n\n        Returns:\n            True if user has permission, False otherwise\n        ", "signature": "check_permission(self, user_id: str, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ) -> bool"}, {"name": "get_user_permissions", "line": 288, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}], "is_async": false, "return_type": "set[Permission]", "description": "\n        Get all permissions for a user.\n\n        Args:\n            user_id: User ID\n\n        Returns:\n            Set of user permissions\n        ", "signature": "get_user_permissions(self, user_id: str) -> set[Permission]"}], "properties": [], "description": "Manages and evaluates access control policies."}, {"name": "RBACManager", "line": 319, "inherits_from": [], "methods": [{"name": "__init__", "line": 322, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize RBAC manager.", "signature": "__init__(self)"}, {"name": "_setup_default_roles", "line": 327, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup default roles and permissions.", "signature": "_setup_default_roles(self) -> None"}, {"name": "create_user", "line": 345, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "username", "type": "str"}, {"name": "roles", "type": "list[str] | None", "default": "None"}], "is_async": false, "return_type": "User", "description": "\n        Create a new user.\n\n        Args:\n            user_id: Unique user identifier\n            username: User''s username\n            roles: List of role names to assign\n\n        Returns:\n            Created user\n        ", "signature": "create_user(self, user_id: str, username: str, roles: list[str] | None = None) -> User"}, {"name": "assign_role", "line": 370, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, role_name: str"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Assign role to user.\n\n        Args:\n            user_id: User ID\n            role_name: Role name to assign\n        ", "signature": "assign_role(self, user_id: str, role_name: str, role_name: str) -> None"}, {"name": "revoke_role", "line": 381, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, role_name: str"}, {"name": "role_name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Revoke role from user.\n\n        Args:\n            user_id: User ID\n            role_name: Role name to revoke\n        ", "signature": "revoke_role(self, user_id: str, role_name: str, role_name: str) -> None"}, {"name": "has_permission", "line": 392, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "return_type": "bool", "description": "\n        Check if user has permission.\n\n        Args:\n            user_id: User ID\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n\n        Returns:\n            True if user has permission, False otherwise\n        ", "signature": "has_permission(self, user_id: str, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ) -> bool"}, {"name": "require_permission", "line": 413, "parameters": [{"name": "self", "type": "self"}, {"name": "resource", "type": "str"}, {"name": "action", "type": "str"}, {"name": "level", "type": "PermissionLevel", "default": "PermissionLevel.READ"}], "is_async": false, "description": "\n        Decorator to require permission for function execution.\n\n        Args:\n            resource: Resource being accessed\n            action: Action being performed\n            level: Required permission level\n        ", "signature": "require_permission(self, resource: str, action: str, level: PermissionLevel = PermissionLevel.READ)"}], "properties": [], "description": "Manages role-based access control including users, roles, and permissions."}], "imports": [{"module": "functools", "alias": null, "line": 12, "statement": "import functools"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 16, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "functools", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 16}, {"name": "PermissionError", "type": "class", "line": 19}, {"name": "RoleError", "type": "class", "line": 23}, {"name": "PermissionLevel", "type": "class", "line": 27}, {"name": "Permission", "type": "class", "line": 37}, {"name": "Role", "type": "class", "line": 74}, {"name": "User", "type": "class", "line": 130}, {"name": "PolicyEngine", "type": "class", "line": 183}, {"name": "RBACManager", "type": "class", "line": 319}, {"name": "require_permission", "type": "function", "line": 457}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "require_permission Function", "description": "Function require_permission implementation.", "line_start": 457, "line_end": 462}, {"name": "PermissionError Class", "description": "Class PermissionError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "RoleError Class", "description": "Class RoleError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "PermissionLevel Class", "description": "Class PermissionLevel definition and methods.", "line_start": 27, "line_end": 37}, {"name": "Permission Class", "description": "Class Permission definition and methods.", "line_start": 37, "line_end": 73}, {"name": "Role Class", "description": "Class Role definition and methods.", "line_start": 74, "line_end": 123}, {"name": "User Class", "description": "Class User definition and methods.", "line_start": 130, "line_end": 176}, {"name": "PolicyEngine Class", "description": "Class PolicyEngine definition and methods.", "line_start": 183, "line_end": 291}, {"name": "RBACManager Class", "description": "Class RBACManager definition and methods.", "line_start": 319, "line_end": 416}], "content_hash": "6607fa90b794bb63cecf5b2c014c0347"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/__init__.py
  line_count: 26
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "auth", "alias": null, "line": 9, "statement": "from auth import AuthConfig"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import AuthManager"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import TokenPayload"}, {"module": "auth", "alias": null, "line": 9, "statement": "from auth import sanitize_input"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import AdvancedEncryption"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import EncryptionConfig"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import generate_secure_token"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import hash_password"}, {"module": "encryption", "alias": null, "line": 10, "statement": "from encryption import verify_password"}], "constants": []}, "key_elements": [{"name": "from auth import AuthConfig", "type": "import", "line": 9}, {"name": "from auth import AuthManager", "type": "import", "line": 9}, {"name": "from auth import TokenPayload", "type": "import", "line": 9}, {"name": "from auth import sanitize_input", "type": "import", "line": 9}, {"name": "from encryption import AdvancedEncryption", "type": "import", "line": 10}, {"name": "from encryption import EncryptionConfig", "type": "import", "line": 10}, {"name": "from encryption import generate_secure_token", "type": "import", "line": 10}, {"name": "from encryption import hash_password", "type": "import", "line": 10}, {"name": "from encryption import verify_password", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "250b4e64e0b770929a74c1cfa5c62446"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/oauth.py
  line_count: 395
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "oauth.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OAuthError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to OAuth operations."}, {"name": "TokenValidationError", "line": 25, "inherits_from": ["OAuthError):"], "methods": [], "properties": [], "description": "Indicates errors encountered during token validation."}, {"name": "PKCEError", "line": 29, "inherits_from": ["OAuthError):"], "methods": [], "properties": [], "description": "Represents errors specific to the PKCE (Proof Key for Code Exchange) process."}, {"name": "OAuthConfig", "line": 33, "inherits_from": [], "methods": [{"name": "__init__", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "client_id", "type": "str"}, {"name": "client_secret", "type": "str"}, {"name": "redirect_uri", "type": "str"}, {"name": "authorization_endpoint", "type": "str"}, {"name": "token_endpoint", "type": "str"}, {"name": "scope", "type": "str | None", "default": "None"}, {"name": "response_type", "type": "str", "default": "code"}, {"name": "grant_type", "type": "str", "default": "authorization_code"}], "is_async": false, "description": "\n        Initialize OAuth configuration.\n\n        Args:\n            client_id: OAuth client ID\n            client_secret: OAuth client secret\n            redirect_uri: Redirect URI for authorization\n            authorization_endpoint: Authorization server endpoint\n            token_endpoint: Token server endpoint\n            scope: Requested scopes\n            response_type: Response type (code, token)\n            grant_type: Grant type for token exchange\n        ", "signature": "__init__(self, client_id: str, client_secret: str, redirect_uri: str, authorization_endpoint: str, token_endpoint: str, scope: str | None = None, response_type: str = code, grant_type: str = authorization_code)"}], "properties": [], "description": "Holds configuration settings for OAuth authentication."}, {"name": "PKCE", "line": 70, "inherits_from": [], "methods": [{"name": "generate_code_verifier", "line": 74, "parameters": [], "is_async": false, "return_type": "str", "description": "\n        Generate a random code verifier for PKCE.\n\n        Returns:\n            Random code verifier string\n        ", "signature": "generate_code_verifier() -> str"}, {"name": "generate_code_challenge", "line": 85, "parameters": [{"name": "code_verifier", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Generate code challenge from code verifier.\n\n        Args:\n            code_verifier: The code verifier\n\n        Returns:\n            Base64 URL-encoded code challenge\n        ", "signature": "generate_code_challenge(code_verifier: str) -> str"}, {"name": "verify_code_challenge", "line": 99, "parameters": [{"name": "code_verifier", "type": "str, code_challenge: str"}, {"name": "code_challenge", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Verify code challenge against code verifier.\n\n        Args:\n            code_verifier: The code verifier\n            code_challenge: The code challenge to verify\n\n        Returns:\n            True if verification succeeds, False otherwise\n        ", "signature": "verify_code_challenge(code_verifier: str, code_challenge: str, code_challenge: str) -> bool"}], "properties": [], "description": "Manages the PKCE flow including code challenge and verifier generation."}, {"name": "OAuthClient", "line": 114, "inherits_from": [], "methods": [{"name": "__init__", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OAuthConfig):"}], "is_async": false, "description": "\n        Initialize OAuth client.\n\n        Args:\n            config: OAuth configuration\n        ", "signature": "__init__(self, config: OAuthConfig):)"}, {"name": "generate_authorization_url", "line": 129, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "str | None", "default": "None"}, {"name": "use_pkce", "type": "bool", "default": "True"}, {"name": "additional_params", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "str", "description": "\n        Generate authorization URL for OAuth flow.\n\n        Args:\n            state: State parameter for CSRF protection\n            use_pkce: Whether to use PKCE\n            additional_params: Additional parameters to include\n\n        Returns:\n            Authorization URL\n        ", "signature": "generate_authorization_url(self, state: str | None = None, use_pkce: bool = True, additional_params: dict[str, str] | None = None) -> str"}, {"name": "exchange_code_for_token", "line": 176, "parameters": [{"name": "self", "type": "self"}, {"name": "authorization_code", "type": "str"}, {"name": "state", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Exchange authorization code for access token.\n\n        Args:\n            authorization_code: Authorization code from callback\n            state: State parameter for verification\n\n        Returns:\n            Token response dictionary\n\n        Raises:\n            OAuthError: If token exchange fails\n        ", "signature": "exchange_code_for_token(self, authorization_code: str, state: str | None = None) -> dict[str, Any]"}, {"name": "refresh_token", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "refresh_token", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Refresh access token using refresh token.\n\n        Args:\n            refresh_token: Refresh token\n\n        Returns:\n            New token response dictionary\n        ", "signature": "refresh_token(self, refresh_token: str) -> dict[str, Any]"}], "properties": [], "description": "Handles OAuth client operations such as authorization and token requests."}, {"name": "TokenValidator", "line": 251, "inherits_from": [], "methods": [{"name": "validate_access_token", "line": 255, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Validate access token format and structure.\n\n        Args:\n            token: Access token to validate\n\n        Returns:\n            True if token appears valid, False otherwise\n        ", "signature": "validate_access_token(token: str) -> bool"}, {"name": "extract_token_claims", "line": 283, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Extract claims from JWT token.\n\n        Args:\n            token: JWT token\n\n        Returns:\n            Token claims dictionary\n\n        Raises:\n            TokenValidationError: If token is invalid\n        ", "signature": "extract_token_claims(token: str) -> dict[str, Any]"}, {"name": "is_token_expired", "line": 318, "parameters": [{"name": "token", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if token is expired.\n\n        Args:\n            token: JWT token\n\n        Returns:\n            True if expired, False otherwise\n        ", "signature": "is_token_expired(token: str) -> bool"}], "properties": [], "description": "Validates OAuth tokens to ensure authenticity and integrity."}, {"name": "OIDCClient", "line": 344, "inherits_from": ["OAuthClient):"], "methods": [{"name": "__init__", "line": 347, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "OAuthConfig"}, {"name": "issuer", "type": "str):"}], "is_async": false, "description": "\n        Initialize OIDC client.\n\n        Args:\n            config: OAuth configuration\n            issuer: OIDC issuer URL\n        ", "signature": "__init__(self, config: OAuthConfig, issuer: str):)"}, {"name": "discover_endpoints", "line": 360, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, str]", "description": "\n        Discover OIDC endpoints from issuer.\n\n        Returns:\n            Dictionary of discovered endpoints\n        ", "signature": "discover_endpoints(self) -> dict[str, str]"}, {"name": "get_user_info", "line": 378, "parameters": [{"name": "self", "type": "self"}, {"name": "access_token", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Get user information using access token.\n\n        Args:\n            access_token: Valid access token\n\n        Returns:\n            User information dictionary\n        ", "signature": "get_user_info(self, access_token: str) -> dict[str, Any]"}], "properties": [], "description": "Extends OAuthClient to support OpenID Connect specific features."}], "imports": [{"module": "base64", "alias": null, "line": 12, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 13, "statement": "import hashlib"}, {"module": "secrets", "alias": null, "line": 14, "statement": "import secrets"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "urllib.parse", "alias": null, "line": 16, "statement": "from urllib.parse import urlencode"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 12}, {"name": "hashlib", "type": "import", "line": 13}, {"name": "secrets", "type": "import", "line": 14}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from urllib.parse import urlencode", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "OAuthError", "type": "class", "line": 21}, {"name": "TokenValidationError", "type": "class", "line": 25}, {"name": "PKCEError", "type": "class", "line": 29}, {"name": "OAuthConfig", "type": "class", "line": 33}, {"name": "PKCE", "type": "class", "line": 70}, {"name": "OAuthClient", "type": "class", "line": 114}, {"name": "TokenValidator", "type": "class", "line": 251}, {"name": "OIDCClient", "type": "class", "line": 344}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "OAuthError Class", "description": "Class OAuthError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "TokenValidationError Class", "description": "Class TokenValidationError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "PKCEError Class", "description": "Class PKCEError definition and methods.", "line_start": 29, "line_end": 39}, {"name": "OAuthConfig Class", "description": "Class OAuthConfig definition and methods.", "line_start": 33, "line_end": 39}, {"name": "PKCE Class", "description": "Class PKCE definition and methods.", "line_start": 70, "line_end": 102}, {"name": "OAuthClient Class", "description": "Class OAuthClient definition and methods.", "line_start": 114, "line_end": 225}, {"name": "TokenValidator Class", "description": "Class TokenValidator definition and methods.", "line_start": 251, "line_end": 321}, {"name": "OIDCClient Class", "description": "Class OIDCClient definition and methods.", "line_start": 344, "line_end": 381}], "content_hash": "6470e2590fdf3111ac9089fcae22a22d"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/encryption.py
  line_count: 206
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "encryption.py", "description": "Python module with 3 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "generate_secure_token", "line": 152, "parameters": [{"name": "length", "type": "int = 32", "default": "32"}], "is_async": false, "return_type": "str", "description": "Generates a cryptographically secure random token of specified length.", "signature": "generate_secure_token(length: int = 32 = 32) -> str"}, {"name": "hash_password", "line": 166, "parameters": [{"name": "password", "type": "str, salt: bytes | None = None"}, {"name": "salt", "type": "bytes | None = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Creates a hashed password with an optional salt for secure storage.", "signature": "hash_password(password: str, salt: bytes | None = None, salt: bytes | None = None = None) -> tuple[str, str]"}, {"name": "verify_password", "line": 185, "parameters": [{"name": "password", "type": "str, hash_hex: str, salt_hex: str"}, {"name": "hash_hex", "type": "str, salt_hex: str"}, {"name": "salt_hex", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if a given password matches the stored hash using the provided salt.", "signature": "verify_password(password: str, hash_hex: str, salt_hex: str, hash_hex: str, salt_hex: str, salt_hex: str) -> bool"}], "classes": [{"name": "EncryptionConfig", "line": 27, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for encryption operations."}, {"name": "AdvancedEncryption", "line": 36, "inherits_from": [], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EncryptionConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: EncryptionConfig | None = None)"}, {"name": "generate_key", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "password", "type": "str"}, {"name": "salt", "type": "bytes | None", "default": "None"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate encryption key from password using PBKDF2.\n\n        Args:\n            password: Password to derive key from\n            salt: Optional salt, generated if not provided\n\n        Returns:\n            Tuple of (key, salt)\n        ", "signature": "generate_key(self, password: str, salt: bytes | None = None) -> tuple[bytes, bytes]"}, {"name": "encrypt_data", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str | bytes, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "str", "description": "Encrypt data using Fernet symmetric encryption.\n\n        Args:\n            data: Data to encrypt\n            key: Encryption key\n\n        Returns:\n            Base64 encoded encrypted data\n        ", "signature": "encrypt_data(self, data: str | bytes, key: bytes, key: bytes) -> str"}, {"name": "decrypt_data", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str, key: bytes"}, {"name": "key", "type": "bytes"}], "is_async": false, "return_type": "bytes", "description": "Decrypt data using Fernet symmetric encryption.\n\n        Args:\n            encrypted_data: Base64 encoded encrypted data\n            key: Encryption key\n\n        Returns:\n            Decrypted data as bytes\n\n        Raises:\n            ValueError: If decryption fails\n        ", "signature": "decrypt_data(self, encrypted_data: str, key: bytes, key: bytes) -> bytes"}, {"name": "generate_rsa_keypair", "line": 122, "parameters": [{"name": "self", "type": "self"}, {"name": "key_size", "type": "int = 2048", "default": "2048"}], "is_async": false, "return_type": "tuple[bytes, bytes]", "description": "Generate RSA public/private key pair.\n\n        Args:\n            key_size: RSA key size in bits\n\n        Returns:\n            Tuple of (private_key_pem, public_key_pem)\n        ", "signature": "generate_rsa_keypair(self, key_size: int = 2048 = 2048) -> tuple[bytes, bytes]"}], "properties": [], "description": "Provides advanced encryption and decryption methods with enhanced security features."}], "imports": [{"module": "base64", "alias": null, "line": 11, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 12, "statement": "import hashlib"}, {"module": "os", "alias": null, "line": 13, "statement": "import os"}, {"module": "secrets", "alias": null, "line": 14, "statement": "import secrets"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "cryptography.fernet", "alias": null, "line": 16, "statement": "from cryptography.fernet import Fernet"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives import hashes"}, {"module": "cryptography.hazmat.primitives", "alias": null, "line": 17, "statement": "from cryptography.hazmat.primitives import serialization"}, {"module": "cryptography.hazmat.primitives.asymmetric", "alias": null, "line": 18, "statement": "from cryptography.hazmat.primitives.asymmetric import rsa"}, {"module": "cryptography.hazmat.primitives.kdf.pbkdf2", "alias": null, "line": 19, "statement": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC"}, {"module": "pydantic", "alias": null, "line": 20, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 22, "statement": "from observability import get_logger"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 11}, {"name": "hashlib", "type": "import", "line": 12}, {"name": "os", "type": "import", "line": 13}, {"name": "secrets", "type": "import", "line": 14}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 16}, {"name": "from cryptography.hazmat.primitives import hashes", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives import serialization", "type": "import", "line": 17}, {"name": "from cryptography.hazmat.primitives.asymmetric import rsa", "type": "import", "line": 18}, {"name": "from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC", "type": "import", "line": 19}, {"name": "from pydantic import BaseModel", "type": "import", "line": 20}, {"name": "from observability import get_logger", "type": "import", "line": 22}, {"name": "EncryptionConfig", "type": "class", "line": 27}, {"name": "AdvancedEncryption", "type": "class", "line": 36}, {"name": "generate_secure_token", "type": "function", "line": 152}, {"name": "hash_password", "type": "function", "line": 166}, {"name": "verify_password", "type": "function", "line": 185}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 22}, {"name": "generate_secure_token Function", "description": "Function generate_secure_token implementation.", "line_start": 152, "line_end": 165}, {"name": "hash_password Function", "description": "Function hash_password implementation.", "line_start": 166, "line_end": 184}, {"name": "verify_password Function", "description": "Function verify_password implementation.", "line_start": 185, "line_end": 190}, {"name": "EncryptionConfig Class", "description": "Class EncryptionConfig definition and methods.", "line_start": 27, "line_end": 37}, {"name": "AdvancedEncryption Class", "description": "Class AdvancedEncryption definition and methods.", "line_start": 36, "line_end": 125}], "content_hash": "1eda907c0b49f989626fac8f600732a0"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/auth.py
  line_count: 134
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "auth.py", "description": "Python module with 1 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 125, "parameters": [{"name": "data", "type": "str, max_length: int = 1000"}, {"name": "max_length", "type": "int = 1000", "default": "1000"}], "is_async": false, "return_type": "str", "description": "Cleans and trims the input string to ensure it does not exceed the specified maximum length.", "signature": "sanitize_input(data: str, max_length: int = 1000, max_length: int = 1000 = 1000) -> str"}], "classes": [{"name": "AuthConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings related to authentication."}, {"name": "TokenPayload", "line": 29, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents the data contained within an authentication token."}, {"name": "AuthManager", "line": 39, "inherits_from": [], "methods": [{"name": "__init__", "line": 42, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AuthConfig):"}], "is_async": false, "signature": "__init__(self, config: AuthConfig):)"}, {"name": "generate_jwt", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "user_id", "type": "str, email: str, roles: list[str]"}, {"name": "email", "type": "str, roles: list[str]"}, {"name": "roles", "type": "list[str]"}], "is_async": false, "return_type": "str", "description": "Generate a JWT token for the user.", "signature": "generate_jwt(self, user_id: str, email: str, roles: list[str], email: str, roles: list[str], roles: list[str]) -> str"}, {"name": "validate_jwt", "line": 65, "parameters": [{"name": "self", "type": "self"}, {"name": "token", "type": "str"}], "is_async": false, "return_type": "TokenPayload", "description": "Validate and decode a JWT token.", "signature": "validate_jwt(self, token: str) -> TokenPayload"}, {"name": "generate_api_key", "line": 85, "parameters": [{"name": "self", "type": "self"}, {"name": "prefix", "type": "str = \"opsvi\"", "default": "opsvi"}], "is_async": false, "return_type": "str", "description": "Generate a secure API key.", "signature": "generate_api_key(self, prefix: str = \"opsvi\" = opsvi) -> str"}, {"name": "hash_api_key", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, salt: str | None = None"}, {"name": "salt", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "tuple[str, str]", "description": "Hash an API key for secure storage.", "signature": "hash_api_key(self, api_key: str, salt: str | None = None, salt: str | None = None = None) -> tuple[str, str]"}, {"name": "verify_api_key", "line": 103, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str, stored_hash: str, salt: str"}, {"name": "stored_hash", "type": "str, salt: str"}, {"name": "salt", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verify an API key against its stored hash.", "signature": "verify_api_key(self, api_key: str, stored_hash: str, salt: str, stored_hash: str, salt: str, salt: str) -> bool"}, {"name": "encrypt_data", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Encrypt sensitive data.", "signature": "encrypt_data(self, data: str) -> str"}, {"name": "decrypt_data", "line": 116, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_data", "type": "str"}], "is_async": false, "return_type": "str", "description": "Decrypt sensitive data.", "signature": "decrypt_data(self, encrypted_data: str) -> str"}], "properties": [], "description": "Manages authentication processes including token generation, validation, and user session handling."}], "imports": [{"module": "hashlib", "alias": null, "line": 9, "statement": "import hashlib"}, {"module": "hmac", "alias": null, "line": 10, "statement": "import hmac"}, {"module": "secrets", "alias": null, "line": 11, "statement": "import secrets"}, {"module": "jwt", "alias": null, "line": 14, "statement": "import jwt"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import datetime"}, {"module": "datetime", "alias": null, "line": 12, "statement": "from datetime import timedelta"}, {"module": "cryptography.fernet", "alias": null, "line": 15, "statement": "from cryptography.fernet import Fernet"}, {"module": "pydantic", "alias": null, "line": 16, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "hashlib", "type": "import", "line": 9}, {"name": "hmac", "type": "import", "line": 10}, {"name": "secrets", "type": "import", "line": 11}, {"name": "jwt", "type": "import", "line": 14}, {"name": "from datetime import datetime", "type": "import", "line": 12}, {"name": "from datetime import timedelta", "type": "import", "line": 12}, {"name": "from cryptography.fernet import Fernet", "type": "import", "line": 15}, {"name": "from pydantic import BaseModel", "type": "import", "line": 16}, {"name": "AuthConfig", "type": "class", "line": 19}, {"name": "TokenPayload", "type": "class", "line": 29}, {"name": "AuthManager", "type": "class", "line": 39}, {"name": "sanitize_input", "type": "function", "line": 125}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 125, "line_end": 130}, {"name": "AuthConfig Class", "description": "Class AuthConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "TokenPayload Class", "description": "Class TokenPayload definition and methods.", "line_start": 29, "line_end": 39}, {"name": "AuthManager Class", "description": "Class AuthManager definition and methods.", "line_start": 39, "line_end": 119}], "content_hash": "ff7231b7023473144a3f72d2f09dd5e8"}'
- path: libs/opsvi-foundation/opsvi_foundation/security/validation.py
  line_count: 283
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "validation.py", "description": "Python module with 8 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "sanitize_input", "line": 27, "parameters": [{"name": "data", "type": "Any, max_length: int | None = None"}, {"name": "max_length", "type": "int | None = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Cleans and trims input data to a safe string format, optionally limiting its length.", "signature": "sanitize_input(data: Any, max_length: int | None = None, max_length: int | None = None = None) -> str"}, {"name": "validate_email", "line": 57, "parameters": [{"name": "email", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Checks if the provided string is a valid email address format.", "signature": "validate_email(email: str) -> bool"}, {"name": "validate_url", "line": 71, "parameters": [{"name": "url", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Determines whether the given string is a properly formatted URL.", "signature": "validate_url(url: str) -> bool"}, {"name": "sanitize_sql_input", "line": 85, "parameters": [{"name": "value", "type": "Any"}], "is_async": false, "return_type": "str", "description": "Escapes and cleans input to prevent SQL injection vulnerabilities.", "signature": "sanitize_sql_input(value: Any) -> str"}, {"name": "validate_json_schema", "line": 107, "parameters": [{"name": "data", "type": "dict[str, Any], schema: dict[str, Any]"}, {"name": "schema", "type": "dict[str, Any]"}], "is_async": false, "return_type": "bool", "description": "Validates a JSON object against a specified schema to ensure structure and data types.", "signature": "validate_json_schema(data: dict[str, Any], schema: dict[str, Any], schema: dict[str, Any]) -> bool"}, {"name": "sanitize_filename", "line": 127, "parameters": [{"name": "filename", "type": "str"}], "is_async": false, "return_type": "str", "description": "Removes unsafe characters from a filename to ensure it is safe for file system usage.", "signature": "sanitize_filename(filename: str) -> str"}, {"name": "validate_phone_number", "line": 150, "parameters": [{"name": "phone", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Verifies if the input string is a valid phone number format.", "signature": "validate_phone_number(phone: str) -> bool"}, {"name": "sanitize_html", "line": 167, "parameters": [{"name": "html_content", "type": "str, allowed_tags: list[str] | None = None"}, {"name": "allowed_tags", "type": "list[str] | None = None", "default": "None"}], "is_async": false, "return_type": "str", "description": "Cleans HTML content by removing disallowed tags and attributes, preserving only allowed tags.", "signature": "sanitize_html(html_content: str, allowed_tags: list[str] | None = None, allowed_tags: list[str] | None = None = None) -> str"}], "classes": [{"name": "ValidationError", "line": 19, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when input validation fails."}, {"name": "SanitizationError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised during input sanitization errors."}, {"name": "InputValidator", "line": 197, "inherits_from": [], "methods": [{"name": "__init__", "line": 200, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "description": "\n        Initialize the input validator.\n\n        Args:\n            config: Configuration options for validation\n        ", "signature": "__init__(self, config: dict[str, Any] | None = None)"}, {"name": "validate_and_sanitize", "line": 211, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}, {"name": "field_name", "type": "str"}, {"name": "field_type", "type": "str", "default": "string"}], "is_async": false, "return_type": "Any", "description": "\n        Validate and sanitize input data based on field type.\n\n        Args:\n            data: Input data\n            field_name: Name of the field for error reporting\n            field_type: Type of field (string, email, url, etc.)\n\n        Returns:\n            Validated and sanitized data\n\n        Raises:\n            ValidationError: If validation fails\n        ", "signature": "validate_and_sanitize(self, data: Any, field_name: str, field_type: str = string) -> Any"}, {"name": "validate_required_fields", "line": 263, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "dict[str, Any]"}, {"name": "required_fields", "type": "list[str]"}], "is_async": false, "return_type": "None", "description": "\n        Validate that all required fields are present and not empty.\n\n        Args:\n            data: Data dictionary to validate\n            required_fields: List of required field names\n\n        Raises:\n            ValidationError: If any required field is missing or empty\n        ", "signature": "validate_required_fields(self, data: dict[str, Any], required_fields: list[str]) -> None"}], "properties": [], "description": "Provides methods to validate various types of user input."}], "imports": [{"module": "html", "alias": null, "line": 12, "statement": "import html"}, {"module": "re", "alias": null, "line": 13, "statement": "import re"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 16, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "html", "type": "import", "line": 12}, {"name": "re", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 16}, {"name": "ValidationError", "type": "class", "line": 19}, {"name": "SanitizationError", "type": "class", "line": 23}, {"name": "sanitize_input", "type": "function", "line": 27}, {"name": "validate_email", "type": "function", "line": 57}, {"name": "validate_url", "type": "function", "line": 71}, {"name": "sanitize_sql_input", "type": "function", "line": 85}, {"name": "validate_json_schema", "type": "function", "line": 107}, {"name": "sanitize_filename", "type": "function", "line": 127}, {"name": "validate_phone_number", "type": "function", "line": 150}, {"name": "sanitize_html", "type": "function", "line": 167}, {"name": "InputValidator", "type": "class", "line": 197}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 16}, {"name": "sanitize_input Function", "description": "Function sanitize_input implementation.", "line_start": 27, "line_end": 56}, {"name": "validate_email Function", "description": "Function validate_email implementation.", "line_start": 57, "line_end": 70}, {"name": "validate_url Function", "description": "Function validate_url implementation.", "line_start": 71, "line_end": 84}, {"name": "sanitize_sql_input Function", "description": "Function sanitize_sql_input implementation.", "line_start": 85, "line_end": 106}, {"name": "validate_json_schema Function", "description": "Function validate_json_schema implementation.", "line_start": 107, "line_end": 126}, {"name": "sanitize_filename Function", "description": "Function sanitize_filename implementation.", "line_start": 127, "line_end": 149}, {"name": "validate_phone_number Function", "description": "Function validate_phone_number implementation.", "line_start": 150, "line_end": 166}, {"name": "sanitize_html Function", "description": "Function sanitize_html implementation.", "line_start": 167, "line_end": 196}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "SanitizationError Class", "description": "Class SanitizationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "InputValidator Class", "description": "Class InputValidator definition and methods.", "line_start": 197, "line_end": 266}], "content_hash": "722f8f766676dbedf59291dfa624026c"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/__init__.py
  line_count: 34
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitBreaker"}, {"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitBreakerConfig"}, {"module": "circuit_breaker", "alias": null, "line": 9, "statement": "from circuit_breaker import CircuitState"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import ExponentialBackoff"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import RetryConfig"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import RetryExecutor"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import retry"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import DeadlineContext"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import Timeout"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import TimeoutConfig"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import TimeoutError"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import timeout_manager"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import wait_for"}, {"module": "timeout", "alias": null, "line": 11, "statement": "from timeout import with_timeout"}], "constants": []}, "key_elements": [{"name": "from circuit_breaker import CircuitBreaker", "type": "import", "line": 9}, {"name": "from circuit_breaker import CircuitBreakerConfig", "type": "import", "line": 9}, {"name": "from circuit_breaker import CircuitState", "type": "import", "line": 9}, {"name": "from retry import ExponentialBackoff", "type": "import", "line": 10}, {"name": "from retry import RetryConfig", "type": "import", "line": 10}, {"name": "from retry import RetryExecutor", "type": "import", "line": 10}, {"name": "from retry import retry", "type": "import", "line": 10}, {"name": "from timeout import DeadlineContext", "type": "import", "line": 11}, {"name": "from timeout import Timeout", "type": "import", "line": 11}, {"name": "from timeout import TimeoutConfig", "type": "import", "line": 11}, {"name": "from timeout import TimeoutError", "type": "import", "line": 11}, {"name": "from timeout import timeout_manager", "type": "import", "line": 11}, {"name": "from timeout import wait_for", "type": "import", "line": 11}, {"name": "from timeout import with_timeout", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "73d79700c29c7f13197f19610a79146b"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/rate_limiter.py
  line_count: 492
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rate_limiter.py", "description": "Python module with 1 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "rate_limit", "line": 462, "parameters": [{"name": "name", "type": "str"}, {"name": "rate", "type": "int", "default": "100"}, {"name": "window", "type": "float", "default": "60.0"}, {"name": "strategy", "type": "RateLimitStrategy", "default": "RateLimitStrategy.TOKEN_BUCKET"}], "is_async": false, "description": "Decorator to apply rate limiting to a function based on the specified strategy and parameters.", "signature": "rate_limit(name: str, rate: int = 100, window: float = 60.0, strategy: RateLimitStrategy = RateLimitStrategy.TOKEN_BUCKET)"}], "classes": [{"name": "RateLimitError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a rate limit is exceeded."}, {"name": "RateLimitStrategy", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "TOKEN_BUCKET", "line": 26, "type": ""}, {"name": "SLIDING_WINDOW", "line": 27, "type": ""}, {"name": "FIXED_WINDOW", "line": 28, "type": ""}, {"name": "LEAKY_BUCKET", "line": 29, "type": ""}], "description": "Enumeration of different rate limiting strategies."}, {"name": "RateLimitConfig", "line": 35, "inherits_from": [], "methods": [], "properties": [], "description": "Configuration settings for rate limiting behavior."}, {"name": "TokenBucket", "line": 45, "inherits_from": [], "methods": [{"name": "__init__", "line": 48, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "capacity", "type": "int):"}], "is_async": false, "description": "\n        Initialize token bucket.\n\n        Args:\n            rate: Tokens per second\n            capacity: Maximum bucket capacity\n        ", "signature": "__init__(self, rate: int, capacity: int):)"}, {"name": "acquire", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "tokens", "type": "int = 1, timeout: float | None = None", "default": "1"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire tokens from bucket.\n\n        Args:\n            tokens: Number of tokens to acquire\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if tokens acquired, False if timeout\n        ", "signature": "async acquire(self, tokens: int = 1, timeout: float | None = None = 1, timeout: float | None = None = None) -> bool"}, {"name": "_refill_tokens", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Refill tokens based on elapsed time.", "signature": "async _refill_tokens(self) -> None"}, {"name": "available_tokens", "line": 110, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get number of available tokens.", "signature": "available_tokens(self) -> float"}], "properties": [], "description": "Implements the token bucket rate limiting algorithm."}, {"name": "SlidingWindow", "line": 115, "inherits_from": [], "methods": [{"name": "__init__", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "window", "type": "float):"}], "is_async": false, "description": "\n        Initialize sliding window.\n\n        Args:\n            rate: Maximum requests per window\n            window: Time window in seconds\n        ", "signature": "__init__(self, rate: int, window: float):)"}, {"name": "acquire", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "current_requests", "line": 169, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get current number of requests in window.", "signature": "current_requests(self) -> int"}], "properties": [], "description": "Implements the sliding window rate limiting algorithm."}, {"name": "FixedWindow", "line": 176, "inherits_from": [], "methods": [{"name": "__init__", "line": 179, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "window", "type": "float):"}], "is_async": false, "description": "\n        Initialize fixed window.\n\n        Args:\n            rate: Maximum requests per window\n            window: Time window in seconds\n        ", "signature": "__init__(self, rate: int, window: float):)"}, {"name": "acquire", "line": 193, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "remaining_requests", "line": 230, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get remaining requests in current window.", "signature": "remaining_requests(self) -> int"}], "properties": [], "description": "Implements the fixed window rate limiting algorithm."}, {"name": "LeakyBucket", "line": 235, "inherits_from": [], "methods": [{"name": "__init__", "line": 238, "parameters": [{"name": "self", "type": "self"}, {"name": "rate", "type": "int"}, {"name": "capacity", "type": "int):"}], "is_async": false, "description": "\n        Initialize leaky bucket.\n\n        Args:\n            rate: Requests per second (leak rate)\n            capacity: Maximum bucket capacity\n        ", "signature": "__init__(self, rate: int, capacity: int):)"}, {"name": "acquire", "line": 252, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "_leak", "line": 288, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Leak water from bucket based on elapsed time.", "signature": "async _leak(self) -> None"}, {"name": "current_level", "line": 298, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get current bucket level.", "signature": "current_level(self) -> float"}], "properties": [], "description": "Implements the leaky bucket rate limiting algorithm."}, {"name": "RateLimiter", "line": 303, "inherits_from": [], "methods": [{"name": "__init__", "line": 306, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RateLimitConfig):"}], "is_async": false, "description": "\n        Initialize rate limiter.\n\n        Args:\n            config: Rate limiter configuration\n        ", "signature": "__init__(self, config: RateLimitConfig):)"}, {"name": "acquire", "line": 326, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make request.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "__aenter__", "line": 338, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Async context manager entry.", "signature": "async __aenter__(self)"}, {"name": "__aexit__", "line": 344, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": true, "description": "Async context manager exit.", "signature": "async __aexit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Manages rate limiting logic using a chosen strategy."}, {"name": "DistributedRateLimiter", "line": 348, "inherits_from": [], "methods": [{"name": "__init__", "line": 351, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RateLimitConfig"}, {"name": "storage_backend", "type": "Any", "default": "None"}], "is_async": false, "description": "\n        Initialize distributed rate limiter.\n\n        Args:\n            config: Rate limiter configuration\n            storage_backend: Storage backend for distributed state\n        ", "signature": "__init__(self, config: RateLimitConfig, storage_backend: Any = None)"}, {"name": "acquire", "line": 363, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, timeout: float | None = None"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission for a specific key.\n\n        Args:\n            key: Rate limiting key (e.g., user ID, IP address)\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, key: str, timeout: float | None = None, timeout: float | None = None = None) -> bool"}], "properties": [], "description": "Handles rate limiting across distributed systems."}, {"name": "RateLimitManager", "line": 384, "inherits_from": [], "methods": [{"name": "__init__", "line": 387, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize rate limit manager.", "signature": "__init__(self)"}, {"name": "add_limiter", "line": 392, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: RateLimitConfig"}, {"name": "config", "type": "RateLimitConfig"}], "is_async": false, "return_type": "RateLimiter", "description": "\n        Add a rate limiter.\n\n        Args:\n            name: Limiter name\n            config: Rate limiter configuration\n\n        Returns:\n            Created rate limiter\n        ", "signature": "add_limiter(self, name: str, config: RateLimitConfig, config: RateLimitConfig) -> RateLimiter"}, {"name": "add_distributed_limiter", "line": 407, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "config", "type": "RateLimitConfig"}, {"name": "storage_backend", "type": "Any", "default": "None"}], "is_async": false, "return_type": "DistributedRateLimiter", "description": "\n        Add a distributed rate limiter.\n\n        Args:\n            name: Limiter name\n            config: Rate limiter configuration\n            storage_backend: Storage backend for distributed state\n\n        Returns:\n            Created distributed rate limiter\n        ", "signature": "add_distributed_limiter(self, name: str, config: RateLimitConfig, storage_backend: Any = None) -> DistributedRateLimiter"}, {"name": "get_limiter", "line": 428, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "RateLimiter | None", "description": "Get rate limiter by name.", "signature": "get_limiter(self, name: str) -> RateLimiter | None"}, {"name": "get_distributed_limiter", "line": 432, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "DistributedRateLimiter | None", "description": "Get distributed rate limiter by name.", "signature": "get_distributed_limiter(self, name: str) -> DistributedRateLimiter | None"}, {"name": "acquire", "line": 436, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, timeout: float | None = None"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission from named limiter.\n\n        Args:\n            name: Limiter name\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if permission granted, False if timeout\n        ", "signature": "async acquire(self, name: str, timeout: float | None = None, timeout: float | None = None = None) -> bool"}], "properties": [], "description": "Coordinates multiple rate limiters and manages their lifecycle."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "RateLimitError", "type": "class", "line": 21}, {"name": "RateLimitStrategy", "type": "class", "line": 25}, {"name": "RateLimitConfig", "type": "class", "line": 35}, {"name": "TokenBucket", "type": "class", "line": 45}, {"name": "SlidingWindow", "type": "class", "line": 115}, {"name": "FixedWindow", "type": "class", "line": 176}, {"name": "LeakyBucket", "type": "class", "line": 235}, {"name": "RateLimiter", "type": "class", "line": 303}, {"name": "DistributedRateLimiter", "type": "class", "line": 348}, {"name": "RateLimitManager", "type": "class", "line": 384}, {"name": "rate_limit", "type": "function", "line": 462}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "rate_limit Function", "description": "Function rate_limit implementation.", "line_start": 462, "line_end": 467}, {"name": "RateLimitError Class", "description": "Class RateLimitError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "RateLimitStrategy Class", "description": "Class RateLimitStrategy definition and methods.", "line_start": 25, "line_end": 35}, {"name": "RateLimitConfig Class", "description": "Class RateLimitConfig definition and methods.", "line_start": 35, "line_end": 45}, {"name": "TokenBucket Class", "description": "Class TokenBucket definition and methods.", "line_start": 45, "line_end": 113}, {"name": "SlidingWindow Class", "description": "Class SlidingWindow definition and methods.", "line_start": 115, "line_end": 172}, {"name": "FixedWindow Class", "description": "Class FixedWindow definition and methods.", "line_start": 176, "line_end": 233}, {"name": "LeakyBucket Class", "description": "Class LeakyBucket definition and methods.", "line_start": 235, "line_end": 301}, {"name": "RateLimiter Class", "description": "Class RateLimiter definition and methods.", "line_start": 303, "line_end": 347}, {"name": "DistributedRateLimiter Class", "description": "Class DistributedRateLimiter definition and methods.", "line_start": 348, "line_end": 366}, {"name": "RateLimitManager Class", "description": "Class RateLimitManager definition and methods.", "line_start": 384, "line_end": 439}], "content_hash": "7a2a9196bd962371f9c4487248ef4cf2"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/fallback.py
  line_count: 537
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "fallback.py", "description": "Python module with 1 functions and 12 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "fallback", "line": 511, "parameters": [{"name": "strategy", "type": "FallbackStrategy", "default": "FallbackStrategy.FAST_FAIL"}], "is_async": false, "description": "Creates and configures a fallback mechanism based on the specified strategy and additional parameters.", "signature": "fallback(strategy: FallbackStrategy = FallbackStrategy.FAST_FAIL, **config_kwargs)"}], "classes": [{"name": "FallbackError", "line": 21, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised when a fallback operation fails."}, {"name": "FallbackStrategy", "line": 25, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "FAST_FAIL", "line": 26, "type": ""}, {"name": "RETRY", "line": 27, "type": ""}, {"name": "CACHE", "line": 28, "type": ""}, {"name": "DEFAULT_VALUE", "line": 29, "type": ""}, {"name": "ALTERNATIVE_SERVICE", "line": 30, "type": ""}, {"name": "DEGRADED_MODE", "line": 31, "type": ""}], "description": "Enumeration of available fallback strategies."}, {"name": "FallbackConfig", "line": 37, "inherits_from": [], "methods": [], "properties": [], "description": "Configuration settings for fallback behavior."}, {"name": "FallbackHandler", "line": 51, "inherits_from": [], "methods": [{"name": "__init__", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig):"}], "is_async": false, "description": "\n        Initialize fallback handler.\n\n        Args:\n            config: Fallback configuration\n        ", "signature": "__init__(self, config: FallbackConfig):)"}, {"name": "execute", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fallback strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or fallback value\n\n        Raises:\n            FallbackError: If all fallback strategies fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Base class for handling fallback logic."}, {"name": "FastFailHandler", "line": 81, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 84, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fast fail strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            FallbackError: If function fails\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that immediately fails without retrying or fallback."}, {"name": "RetryHandler", "line": 114, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with retry strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            FallbackError: If all retry attempts fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that retries the operation upon failure."}, {"name": "CacheHandler", "line": 158, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 161, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig):"}], "is_async": false, "description": "Initialize cache handler.", "signature": "__init__(self, config: FallbackConfig):)"}, {"name": "execute", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with cache strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or cached value\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that uses cached results to provide fallback responses."}, {"name": "DefaultValueHandler", "line": 222, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "execute", "line": 225, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with default value strategy.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result or default value\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that returns a predefined default value as fallback."}, {"name": "AlternativeServiceHandler", "line": 252, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 255, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig"}, {"name": "services", "type": "dict[str, Callable]):"}], "is_async": false, "description": "\n        Initialize alternative service handler.\n\n        Args:\n            config: Fallback configuration\n            services: Dictionary of service name to function mapping\n        ", "signature": "__init__(self, config: FallbackConfig, services: dict[str, Callable]):)"}, {"name": "execute", "line": 266, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with alternative service strategy.\n\n        Args:\n            func: Primary function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from primary or alternative service\n\n        Raises:\n            FallbackError: If all services fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that redirects requests to an alternative service when the primary fails."}, {"name": "DegradedModeHandler", "line": 316, "inherits_from": ["FallbackHandler):"], "methods": [{"name": "__init__", "line": 319, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "FallbackConfig"}, {"name": "degraded_func", "type": "Callable):"}], "is_async": false, "description": "\n        Initialize degraded mode handler.\n\n        Args:\n            config: Fallback configuration\n            degraded_func: Function to execute in degraded mode\n        ", "signature": "__init__(self, config: FallbackConfig, degraded_func: Callable):)"}, {"name": "execute", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with degraded mode strategy.\n\n        Args:\n            func: Primary function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from primary or degraded function\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Handler that switches the system into a degraded mode during failures."}, {"name": "FallbackChain", "line": 367, "inherits_from": [], "methods": [{"name": "__init__", "line": 370, "parameters": [{"name": "self", "type": "self"}, {"name": "handlers", "type": "list[FallbackHandler]):"}], "is_async": false, "description": "\n        Initialize fallback chain.\n\n        Args:\n            handlers: List of fallback handlers in order of preference\n        ", "signature": "__init__(self, handlers: list[FallbackHandler]):)"}, {"name": "execute", "line": 379, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with fallback chain.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result from first successful handler\n\n        Raises:\n            FallbackError: If all handlers fail\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages a sequence of fallback handlers to apply in order."}, {"name": "FallbackManager", "line": 406, "inherits_from": [], "methods": [{"name": "__init__", "line": 409, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize fallback manager.", "signature": "__init__(self)"}, {"name": "add_handler", "line": 414, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, handler: FallbackHandler"}, {"name": "handler", "type": "FallbackHandler"}], "is_async": false, "return_type": "None", "description": "\n        Add fallback handler.\n\n        Args:\n            name: Handler name\n            handler: Fallback handler\n        ", "signature": "add_handler(self, name: str, handler: FallbackHandler, handler: FallbackHandler) -> None"}, {"name": "create_chain", "line": 424, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, handler_names: list[str]"}, {"name": "handler_names", "type": "list[str]"}], "is_async": false, "return_type": "FallbackChain", "description": "\n        Create fallback chain from handler names.\n\n        Args:\n            name: Chain name\n            handler_names: List of handler names in order\n\n        Returns:\n            Created fallback chain\n        ", "signature": "create_chain(self, name: str, handler_names: list[str], handler_names: list[str]) -> FallbackChain"}, {"name": "get_handler", "line": 442, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "FallbackHandler | None", "description": "Get fallback handler by name.", "signature": "get_handler(self, name: str) -> FallbackHandler | None"}, {"name": "get_chain", "line": 446, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "FallbackChain | None", "description": "Get fallback chain by name.", "signature": "get_chain(self, name: str) -> FallbackChain | None"}, {"name": "execute_with_handler", "line": 450, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with named handler.\n\n        Args:\n            name: Handler name\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ValueError: If handler not found\n        ", "signature": "async execute_with_handler(self, name: str, func: Callable[..., T], *args, **kwargs) -> T"}, {"name": "execute_with_chain", "line": 478, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "func", "type": "Callable[..., T]"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with named chain.\n\n        Args:\n            name: Chain name\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ValueError: If chain not found\n        ", "signature": "async execute_with_chain(self, name: str, func: Callable[..., T], *args, **kwargs) -> T"}], "properties": [], "description": "Coordinates fallback operations and manages multiple fallback handlers."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 18, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 48, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "from typing import TypeVar", "type": "import", "line": 16}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 18}, {"name": "FallbackError", "type": "class", "line": 21}, {"name": "FallbackStrategy", "type": "class", "line": 25}, {"name": "FallbackConfig", "type": "class", "line": 37}, {"name": "T", "type": "constant", "line": 48}, {"name": "FallbackHandler", "type": "class", "line": 51}, {"name": "FastFailHandler", "type": "class", "line": 81}, {"name": "RetryHandler", "type": "class", "line": 114}, {"name": "CacheHandler", "type": "class", "line": 158}, {"name": "DefaultValueHandler", "type": "class", "line": 222}, {"name": "AlternativeServiceHandler", "type": "class", "line": 252}, {"name": "DegradedModeHandler", "type": "class", "line": 316}, {"name": "FallbackChain", "type": "class", "line": 367}, {"name": "FallbackManager", "type": "class", "line": 406}, {"name": "fallback", "type": "function", "line": 511}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "fallback Function", "description": "Function fallback implementation.", "line_start": 511, "line_end": 516}, {"name": "FallbackError Class", "description": "Class FallbackError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "FallbackStrategy Class", "description": "Class FallbackStrategy definition and methods.", "line_start": 25, "line_end": 35}, {"name": "FallbackConfig Class", "description": "Class FallbackConfig definition and methods.", "line_start": 37, "line_end": 47}, {"name": "FallbackHandler Class", "description": "Class FallbackHandler definition and methods.", "line_start": 51, "line_end": 66}, {"name": "FastFailHandler Class", "description": "Class FastFailHandler definition and methods.", "line_start": 81, "line_end": 87}, {"name": "RetryHandler Class", "description": "Class RetryHandler definition and methods.", "line_start": 114, "line_end": 120}, {"name": "CacheHandler Class", "description": "Class CacheHandler definition and methods.", "line_start": 158, "line_end": 170}, {"name": "DefaultValueHandler Class", "description": "Class DefaultValueHandler definition and methods.", "line_start": 222, "line_end": 228}, {"name": "AlternativeServiceHandler Class", "description": "Class AlternativeServiceHandler definition and methods.", "line_start": 252, "line_end": 269}, {"name": "DegradedModeHandler Class", "description": "Class DegradedModeHandler definition and methods.", "line_start": 316, "line_end": 333}, {"name": "FallbackChain Class", "description": "Class FallbackChain definition and methods.", "line_start": 367, "line_end": 382}, {"name": "FallbackManager Class", "description": "Class FallbackManager definition and methods.", "line_start": 406, "line_end": 481}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 48, "line_end": 48}], "content_hash": "046ccf228643215605c099a9f372e8f8"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/circuit_breaker.py
  line_count: 120
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "circuit_breaker.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CircuitState", "line": 19, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 20, "type": ""}, {"name": "OPEN", "line": 21, "type": ""}, {"name": "HALF_OPEN", "line": 22, "type": ""}], "description": "Represents the state of a circuit breaker, such as closed, open, or half-open."}, {"name": "CircuitBreakerConfig", "line": 28, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a circuit breaker, including thresholds and timeouts."}, {"name": "CircuitBreaker", "line": 38, "inherits_from": [], "methods": [{"name": "__init__", "line": 41, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CircuitBreakerConfig):"}], "is_async": false, "signature": "__init__(self, config: CircuitBreakerConfig):)"}, {"name": "call", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with circuit breaker protection.", "signature": "async call(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_check_state", "line": 85, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Check and update circuit breaker state.", "signature": "async _check_state(self) -> None"}, {"name": "_on_success", "line": 92, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle successful call.", "signature": "async _on_success(self) -> None"}, {"name": "_on_failure", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Handle failed call.", "signature": "async _on_failure(self) -> None"}, {"name": "get_state", "line": 115, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current circuit breaker state information.", "signature": "get_state(self) -> dict[str, Any]"}], "properties": [], "description": "Implements the circuit breaker pattern to manage fault tolerance and control request flow."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "time", "alias": null, "line": 10, "statement": "import time"}, {"module": "collections.abc", "alias": null, "line": 11, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 12, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 13, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 16, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "time", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 11}, {"name": "from dataclasses import dataclass", "type": "import", "line": 12}, {"name": "from enum import Enum", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 14}, {"name": "T", "type": "constant", "line": 16}, {"name": "CircuitState", "type": "class", "line": 19}, {"name": "CircuitBreakerConfig", "type": "class", "line": 28}, {"name": "CircuitBreaker", "type": "class", "line": 38}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "CircuitState Class", "description": "Class CircuitState definition and methods.", "line_start": 19, "line_end": 29}, {"name": "CircuitBreakerConfig Class", "description": "Class CircuitBreakerConfig definition and methods.", "line_start": 28, "line_end": 38}, {"name": "CircuitBreaker Class", "description": "Class CircuitBreaker definition and methods.", "line_start": 38, "line_end": 118}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 16, "line_end": 16}], "content_hash": "5e0610b3f00e95e7efabd4f981d5c2f5"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/retry.py
  line_count: 130
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retry.py", "description": "Python module with 1 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "retry", "line": 119, "parameters": [{"name": "config", "type": "RetryConfig | None", "default": "None"}], "is_async": false, "description": "Decorator to automatically retry a function based on the given retry configuration.", "signature": "retry(config: RetryConfig | None = None)"}], "classes": [{"name": "BackoffStrategy", "line": 20, "inherits_from": ["ABC):"], "methods": [{"name": "get_delay", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Get delay for the given attempt number.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Base class defining the interface for backoff strategies used between retries."}, {"name": "ExponentialBackoff", "line": 28, "inherits_from": ["BackoffStrategy):"], "methods": [{"name": "__init__", "line": 31, "parameters": [{"name": "self", "type": "self"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "multiplier", "type": "float", "default": "2.0"}, {"name": "jitter", "type": "bool", "default": "True"}], "is_async": false, "signature": "__init__(self, base_delay: float = 1.0, max_delay: float = 60.0, multiplier: float = 2.0, jitter: bool = True)"}, {"name": "get_delay", "line": 43, "parameters": [{"name": "self", "type": "self"}, {"name": "attempt", "type": "int"}], "is_async": false, "return_type": "float", "description": "Calculate exponential backoff delay.", "signature": "get_delay(self, attempt: int) -> float"}], "properties": [], "description": "Implements an exponential backoff strategy with optional jitter for retry delays."}, {"name": "RetryConfig", "line": 56, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__post_init__(self)"}], "properties": [], "description": "Holds configuration parameters for retry behavior such as max attempts and backoff strategy."}, {"name": "RetryExecutor", "line": 69, "inherits_from": [], "methods": [{"name": "__init__", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RetryConfig):"}], "is_async": false, "signature": "__init__(self, config: RetryConfig):)"}, {"name": "execute", "line": 75, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with retry logic.", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_function", "line": 112, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function, handling both sync and async.", "signature": "async _execute_function(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Manages the execution of retry logic including attempts, delays, and error handling."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "random", "alias": null, "line": 10, "statement": "import random"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "functools", "alias": null, "line": 14, "statement": "from functools import wraps"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 17, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "random", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from functools import wraps", "type": "import", "line": 14}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "T", "type": "constant", "line": 17}, {"name": "BackoffStrategy", "type": "class", "line": 20}, {"name": "ExponentialBackoff", "type": "class", "line": 28}, {"name": "RetryConfig", "type": "class", "line": 56}, {"name": "RetryExecutor", "type": "class", "line": 69}, {"name": "retry", "type": "function", "line": 119}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "retry Function", "description": "Function retry implementation.", "line_start": 119, "line_end": 124}, {"name": "BackoffStrategy Class", "description": "Class BackoffStrategy definition and methods.", "line_start": 20, "line_end": 27}, {"name": "ExponentialBackoff Class", "description": "Class ExponentialBackoff definition and methods.", "line_start": 28, "line_end": 46}, {"name": "RetryConfig Class", "description": "Class RetryConfig definition and methods.", "line_start": 56, "line_end": 67}, {"name": "RetryExecutor Class", "description": "Class RetryExecutor definition and methods.", "line_start": 69, "line_end": 115}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 17, "line_end": 17}], "content_hash": "7e43f8a952daf7f079496e91c35f25ad"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/bulkhead.py
  line_count: 368
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "bulkhead.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "BulkheadError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to bulkhead operations."}, {"name": "ResourceExhaustedError", "line": 27, "inherits_from": ["BulkheadError):"], "methods": [], "properties": [], "description": "Exception indicating that a resource limit has been exceeded."}, {"name": "BulkheadState", "line": 31, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CLOSED", "line": 32, "type": ""}, {"name": "OPEN", "line": 33, "type": ""}, {"name": "HALF_OPEN", "line": 34, "type": ""}], "description": "Represents the current state of a bulkhead, tracking resource usage and availability."}, {"name": "BulkheadConfig", "line": 40, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for a bulkhead, such as limits and timeouts."}, {"name": "Bulkhead", "line": 54, "inherits_from": [], "methods": [{"name": "__init__", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "BulkheadConfig):"}], "is_async": false, "description": "\n        Initialize bulkhead.\n\n        Args:\n            config: Bulkhead configuration\n        ", "signature": "__init__(self, config: BulkheadConfig):)"}, {"name": "execute", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "\n        Execute function with bulkhead protection.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Function result\n\n        Raises:\n            ResourceExhaustedError: If bulkhead is exhausted\n            BulkheadError: If execution fails\n        ", "signature": "async execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_execute_with_timeout", "line": 101, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": true, "return_type": "T", "description": "Execute function with timeout.", "signature": "async _execute_with_timeout(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> T"}, {"name": "_record_failure", "line": 115, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Record a failure and potentially close the bulkhead.", "signature": "async _record_failure(self) -> None"}, {"name": "_schedule_recovery", "line": 126, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Schedule bulkhead recovery.", "signature": "async _schedule_recovery(self) -> None"}, {"name": "reset", "line": 133, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset bulkhead to open state.", "signature": "async reset(self) -> None"}, {"name": "is_open", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if bulkhead is open.", "signature": "is_open(self) -> bool"}, {"name": "is_closed", "line": 145, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if bulkhead is closed.", "signature": "is_closed(self) -> bool"}, {"name": "available_permits", "line": 150, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of available permits.", "signature": "available_permits(self) -> int"}], "properties": [], "description": "Implements the bulkhead pattern to isolate failures and limit resource usage."}, {"name": "ThreadPoolBulkhead", "line": 155, "inherits_from": [], "methods": [{"name": "__init__", "line": 158, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "BulkheadConfig):"}], "is_async": false, "description": "\n        Initialize thread pool bulkhead.\n\n        Args:\n            config: Bulkhead configuration\n        ", "signature": "__init__(self, config: BulkheadConfig):)"}, {"name": "execute", "line": 173, "parameters": [{"name": "self", "type": "self"}, {"name": "func", "type": "Callable[..., T], *args, **kwargs"}], "is_async": false, "return_type": "Future[T]", "description": "\n        Execute function in thread pool.\n\n        Args:\n            func: Function to execute\n            *args: Function arguments\n            **kwargs: Function keyword arguments\n\n        Returns:\n            Future containing the result\n\n        Raises:\n            ResourceExhaustedError: If thread pool is exhausted\n        ", "signature": "execute(self, func: Callable[..., T], *args, **kwargs, *args, **kwargs) -> Future[T]"}, {"name": "_on_task_complete", "line": 202, "parameters": [{"name": "self", "type": "self"}, {"name": "future", "type": "Future"}], "is_async": false, "return_type": "None", "description": "Callback when task completes.", "signature": "_on_task_complete(self, future: Future) -> None"}, {"name": "shutdown", "line": 207, "parameters": [{"name": "self", "type": "self"}, {"name": "wait", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "None", "description": "\n        Shutdown thread pool.\n\n        Args:\n            wait: Whether to wait for tasks to complete\n        ", "signature": "shutdown(self, wait: bool = True = True) -> None"}, {"name": "active_task_count", "line": 217, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of active tasks.", "signature": "active_task_count(self) -> int"}], "properties": [], "description": "A bulkhead implementation that uses a thread pool to manage concurrent execution."}, {"name": "ResourceLimiter", "line": 223, "inherits_from": [], "methods": [{"name": "__init__", "line": 226, "parameters": [{"name": "self", "type": "self"}, {"name": "max_resources", "type": "int):"}], "is_async": false, "description": "\n        Initialize resource limiter.\n\n        Args:\n            max_resources: Maximum number of resources\n        ", "signature": "__init__(self, max_resources: int):)"}, {"name": "acquire", "line": 238, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire a resource.\n\n        Args:\n            timeout: Timeout for acquisition\n\n        Returns:\n            True if resource acquired, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "release", "line": 270, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Release a resource.", "signature": "async release(self) -> None"}, {"name": "available_resources", "line": 282, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "int", "description": "Get number of available resources.", "signature": "available_resources(self) -> int"}, {"name": "utilization", "line": 287, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get resource utilization percentage.", "signature": "utilization(self) -> float"}], "properties": [], "description": "Manages and enforces limits on resource usage to prevent exhaustion."}, {"name": "IsolationManager", "line": 292, "inherits_from": [], "methods": [{"name": "__init__", "line": 295, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize isolation manager.", "signature": "__init__(self)"}, {"name": "add_bulkhead", "line": 301, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: BulkheadConfig"}, {"name": "config", "type": "BulkheadConfig"}], "is_async": false, "return_type": "Bulkhead", "description": "\n        Add a bulkhead.\n\n        Args:\n            name: Bulkhead name\n            config: Bulkhead configuration\n\n        Returns:\n            Created bulkhead\n        ", "signature": "add_bulkhead(self, name: str, config: BulkheadConfig, config: BulkheadConfig) -> Bulkhead"}, {"name": "add_thread_pool", "line": 316, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: BulkheadConfig"}, {"name": "config", "type": "BulkheadConfig"}], "is_async": false, "return_type": "ThreadPoolBulkhead", "description": "\n        Add a thread pool bulkhead.\n\n        Args:\n            name: Thread pool name\n            config: Bulkhead configuration\n\n        Returns:\n            Created thread pool bulkhead\n        ", "signature": "add_thread_pool(self, name: str, config: BulkheadConfig, config: BulkheadConfig) -> ThreadPoolBulkhead"}, {"name": "add_resource_limiter", "line": 331, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, max_resources: int"}, {"name": "max_resources", "type": "int"}], "is_async": false, "return_type": "ResourceLimiter", "description": "\n        Add a resource limiter.\n\n        Args:\n            name: Limiter name\n            max_resources: Maximum resources\n\n        Returns:\n            Created resource limiter\n        ", "signature": "add_resource_limiter(self, name: str, max_resources: int, max_resources: int) -> ResourceLimiter"}, {"name": "get_bulkhead", "line": 346, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Bulkhead | None", "description": "Get bulkhead by name.", "signature": "get_bulkhead(self, name: str) -> Bulkhead | None"}, {"name": "get_thread_pool", "line": 350, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "ThreadPoolBulkhead | None", "description": "Get thread pool by name.", "signature": "get_thread_pool(self, name: str) -> ThreadPoolBulkhead | None"}, {"name": "get_resource_limiter", "line": 354, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "ResourceLimiter | None", "description": "Get resource limiter by name.", "signature": "get_resource_limiter(self, name: str) -> ResourceLimiter | None"}, {"name": "reset_all", "line": 358, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Reset all bulkheads.", "signature": "async reset_all(self) -> None"}, {"name": "shutdown_all", "line": 363, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Shutdown all thread pools.", "signature": "shutdown_all(self) -> None"}], "properties": [], "description": "Coordinates isolation mechanisms to ensure system stability under load."}], "imports": [{"module": "asyncio", "alias": null, "line": 12, "statement": "import asyncio"}, {"module": "threading", "alias": null, "line": 13, "statement": "import threading"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "concurrent.futures", "alias": null, "line": 15, "statement": "from concurrent.futures import Future"}, {"module": "concurrent.futures", "alias": null, "line": 15, "statement": "from concurrent.futures import ThreadPoolExecutor"}, {"module": "dataclasses", "alias": null, "line": 16, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 17, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 18, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 20, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 51, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 12}, {"name": "threading", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from concurrent.futures import Future", "type": "import", "line": 15}, {"name": "from concurrent.futures import ThreadPoolExecutor", "type": "import", "line": 15}, {"name": "from dataclasses import dataclass", "type": "import", "line": 16}, {"name": "from enum import Enum", "type": "import", "line": 17}, {"name": "from typing import TypeVar", "type": "import", "line": 18}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 20}, {"name": "BulkheadError", "type": "class", "line": 23}, {"name": "ResourceExhaustedError", "type": "class", "line": 27}, {"name": "BulkheadState", "type": "class", "line": 31}, {"name": "BulkheadConfig", "type": "class", "line": 40}, {"name": "T", "type": "constant", "line": 51}, {"name": "Bulkhead", "type": "class", "line": 54}, {"name": "ThreadPoolBulkhead", "type": "class", "line": 155}, {"name": "ResourceLimiter", "type": "class", "line": 223}, {"name": "IsolationManager", "type": "class", "line": 292}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 20}, {"name": "BulkheadError Class", "description": "Class BulkheadError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "ResourceExhaustedError Class", "description": "Class ResourceExhaustedError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "BulkheadState Class", "description": "Class BulkheadState definition and methods.", "line_start": 31, "line_end": 41}, {"name": "BulkheadConfig Class", "description": "Class BulkheadConfig definition and methods.", "line_start": 40, "line_end": 50}, {"name": "Bulkhead Class", "description": "Class Bulkhead definition and methods.", "line_start": 54, "line_end": 153}, {"name": "ThreadPoolBulkhead Class", "description": "Class ThreadPoolBulkhead definition and methods.", "line_start": 155, "line_end": 220}, {"name": "ResourceLimiter Class", "description": "Class ResourceLimiter definition and methods.", "line_start": 223, "line_end": 290}, {"name": "IsolationManager Class", "description": "Class IsolationManager definition and methods.", "line_start": 292, "line_end": 366}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 51, "line_end": 51}], "content_hash": "e0e6b0a140ceeebb5122a9ac6bf4239a"}'
- path: libs/opsvi-foundation/opsvi_foundation/resilience/timeout.py
  line_count: 221
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "timeout.py", "description": "Python module with 2 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "with_timeout", "line": 195, "parameters": [{"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str | None", "default": "None"}], "is_async": false, "description": "Creates a context for executing code with an optional timeout and operation description.", "signature": "with_timeout(timeout: float | None = None, operation: str | None = None)"}, {"name": "wait_for", "line": 205, "parameters": [{"name": "coro", "type": "Awaitable[T]"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "return_type": "T", "description": "Asynchronously waits for a coroutine to complete within a specified timeout period.", "signature": "async wait_for(coro: Awaitable[T], timeout: float, operation: str = operation) -> T"}], "classes": [{"name": "TimeoutConfig", "line": 27, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings related to timeout behavior."}, {"name": "TimeoutError", "line": 35, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": false, "signature": "__init__(self, timeout: float, operation: str = operation)"}], "properties": [], "description": "Represents an error raised when an operation exceeds its allowed timeout."}, {"name": "Timeout", "line": 44, "inherits_from": [], "methods": [{"name": "__init__", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TimeoutConfig | None", "default": "None"}], "is_async": false, "signature": "__init__(self, config: TimeoutConfig | None = None)"}, {"name": "timeout_context", "line": 52, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "description": "Async context manager for timeout operations.\n\n        Args:\n            timeout: Timeout in seconds\n            operation: Operation name for error messages\n\n        Raises:\n            TimeoutError: If operation times out\n        ", "signature": "async timeout_context(self, timeout: float, operation: str = operation)"}, {"name": "run_with_timeout", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "coro", "type": "Awaitable[T]"}, {"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "return_type": "T", "description": "Run coroutine with timeout.\n\n        Args:\n            coro: Coroutine to run\n            timeout: Timeout in seconds, uses default if None\n            operation: Operation name for error messages\n\n        Returns:\n            Result of the coroutine\n\n        Raises:\n            TimeoutError: If operation times out\n        ", "signature": "async run_with_timeout(self, coro: Awaitable[T], timeout: float | None = None, operation: str = operation) -> T"}, {"name": "timeout_decorator", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None", "default": "None"}, {"name": "operation", "type": "str | None", "default": "None"}], "is_async": false, "description": "Decorator to add timeout to async functions.\n\n        Args:\n            timeout: Timeout in seconds, uses default if None\n            operation: Operation name, uses function name if None\n        ", "signature": "timeout_decorator(self, timeout: float | None = None, operation: str | None = None)"}], "properties": [], "description": "Manages timeout logic and enforces time limits on operations."}, {"name": "DeadlineContext", "line": 146, "inherits_from": [], "methods": [{"name": "__init__", "line": 149, "parameters": [{"name": "self", "type": "self"}, {"name": "deadline", "type": "float):"}], "is_async": false, "signature": "__init__(self, deadline: float):)"}, {"name": "remaining_time", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Get remaining time until deadline.\n\n        Returns:\n            Remaining seconds, 0 if deadline passed\n        ", "signature": "remaining_time(self) -> float"}, {"name": "is_expired", "line": 162, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if deadline has passed.\n\n        Returns:\n            True if deadline has passed\n        ", "signature": "is_expired(self) -> bool"}, {"name": "timeout_remaining", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "operation", "type": "str", "default": "operation"}], "is_async": true, "description": "Create timeout context for remaining time.\n\n        Args:\n            operation: Operation name for error messages\n\n        Raises:\n            TimeoutError: If deadline has passed or operation times out\n        ", "signature": "async timeout_remaining(self, operation: str = operation)"}], "properties": [], "description": "Provides a context for managing operation deadlines and timeout enforcement."}], "imports": [{"module": "asyncio", "alias": null, "line": 11, "statement": "import asyncio"}, {"module": "builtins", "alias": null, "line": 12, "statement": "import builtins"}, {"module": "time", "alias": null, "line": 13, "statement": "import time"}, {"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Awaitable"}, {"module": "collections.abc", "alias": null, "line": 14, "statement": "from collections.abc import Callable"}, {"module": "contextlib", "alias": null, "line": 15, "statement": "from contextlib import asynccontextmanager"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import TypeVar"}, {"module": "pydantic", "alias": null, "line": 18, "statement": "from pydantic import BaseModel"}, {"module": "observability", "alias": null, "line": 20, "statement": "from observability import get_logger"}], "constants": [{"name": "T", "line": 24, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "asyncio", "type": "import", "line": 11}, {"name": "builtins", "type": "import", "line": 12}, {"name": "time", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from collections.abc import Awaitable", "type": "import", "line": 14}, {"name": "from collections.abc import Callable", "type": "import", "line": 14}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 16}, {"name": "from pydantic import BaseModel", "type": "import", "line": 18}, {"name": "from observability import get_logger", "type": "import", "line": 20}, {"name": "T", "type": "constant", "line": 24}, {"name": "TimeoutConfig", "type": "class", "line": 27}, {"name": "TimeoutError", "type": "class", "line": 35}, {"name": "Timeout", "type": "class", "line": 44}, {"name": "DeadlineContext", "type": "class", "line": 146}, {"name": "with_timeout", "type": "function", "line": 195}, {"name": "wait_for", "type": "function", "line": 205}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 20}, {"name": "with_timeout Function", "description": "Function with_timeout implementation.", "line_start": 195, "line_end": 204}, {"name": "wait_for Function", "description": "Function wait_for implementation.", "line_start": 205, "line_end": 210}, {"name": "TimeoutConfig Class", "description": "Class TimeoutConfig definition and methods.", "line_start": 27, "line_end": 37}, {"name": "TimeoutError Class", "description": "Class TimeoutError definition and methods.", "line_start": 35, "line_end": 41}, {"name": "Timeout Class", "description": "Class Timeout definition and methods.", "line_start": 44, "line_end": 126}, {"name": "DeadlineContext Class", "description": "Class DeadlineContext definition and methods.", "line_start": 146, "line_end": 174}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 24, "line_end": 24}], "content_hash": "d2da376aff78cf83b89731cee7126ec4"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/__init__.py
  line_count: 25
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import auth_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import auth_manager"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import circuit_breaker"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import circuit_breaker_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import foundation_config"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import mock_async_function"}, {"module": "fixtures", "alias": null, "line": 9, "statement": "from fixtures import mock_sync_function"}], "constants": []}, "key_elements": [{"name": "from fixtures import auth_config", "type": "import", "line": 9}, {"name": "from fixtures import auth_manager", "type": "import", "line": 9}, {"name": "from fixtures import circuit_breaker", "type": "import", "line": 9}, {"name": "from fixtures import circuit_breaker_config", "type": "import", "line": 9}, {"name": "from fixtures import foundation_config", "type": "import", "line": 9}, {"name": "from fixtures import mock_async_function", "type": "import", "line": 9}, {"name": "from fixtures import mock_sync_function", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "dc62c407425bc1ab954159841c817b3e"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/assertions.py
  line_count: 444
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "assertions.py", "description": "Python module with 0 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AsyncAssertions", "line": 19, "inherits_from": [], "methods": [{"name": "assert_async_called_with", "line": 23, "parameters": [{"name": "mock", "type": "AsyncMock, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called with specific arguments.", "signature": "async assert_async_called_with(mock: AsyncMock, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_async_called_once", "line": 28, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called exactly once.", "signature": "async assert_async_called_once(mock: AsyncMock) -> None"}, {"name": "assert_async_not_called", "line": 33, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was not called.", "signature": "async assert_async_not_called(mock: AsyncMock) -> None"}, {"name": "assert_async_called_times", "line": 38, "parameters": [{"name": "mock", "type": "AsyncMock, expected_calls: int"}, {"name": "expected_calls", "type": "int"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called a specific number of times.", "signature": "async assert_async_called_times(mock: AsyncMock, expected_calls: int, expected_calls: int) -> None"}, {"name": "assert_async_called_with_any_order", "line": 46, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": true, "return_type": "None", "description": "Assert that an async mock was called with arguments in any order.", "signature": "async assert_async_called_with_any_order(mock: AsyncMock, *expected_calls) -> None"}], "properties": [], "description": "Provides assertion methods for testing asynchronous code behavior."}, {"name": "EventAssertions", "line": 67, "inherits_from": [], "methods": [{"name": "assert_event_published", "line": 71, "parameters": [{"name": "event_bus", "type": "MagicMock, event_type: str, **kwargs"}, {"name": "event_type", "type": "str, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that an event was published.", "signature": "assert_event_published(event_bus: MagicMock, event_type: str, **kwargs, event_type: str, **kwargs, **kwargs) -> None"}, {"name": "assert_event_not_published", "line": 89, "parameters": [{"name": "event_bus", "type": "MagicMock, event_type: str"}, {"name": "event_type", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that an event was not published.", "signature": "assert_event_not_published(event_bus: MagicMock, event_type: str, event_type: str) -> None"}, {"name": "assert_event_count", "line": 103, "parameters": [{"name": "event_bus", "type": "MagicMock, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of events were published.", "signature": "assert_event_count(event_bus: MagicMock, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Contains assertions related to event handling and event-driven logic."}, {"name": "LoggingAssertions", "line": 111, "inherits_from": [], "methods": [{"name": "assert_logged", "line": 115, "parameters": [{"name": "logger", "type": "MagicMock, level: str, message: str"}, {"name": "level", "type": "str, message: str"}, {"name": "message", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log message was recorded.", "signature": "assert_logged(logger: MagicMock, level: str, message: str, level: str, message: str, message: str) -> None"}, {"name": "assert_logged_with_level", "line": 128, "parameters": [{"name": "logger", "type": "MagicMock, level: str"}, {"name": "level", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log level was used.", "signature": "assert_logged_with_level(logger: MagicMock, level: str, level: str) -> None"}, {"name": "assert_not_logged", "line": 134, "parameters": [{"name": "logger", "type": "MagicMock, level: str, message: str"}, {"name": "level", "type": "str, message: str"}, {"name": "message", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a specific log message was not recorded.", "signature": "assert_not_logged(logger: MagicMock, level: str, message: str, level: str, message: str, message: str) -> None"}, {"name": "assert_log_count", "line": 148, "parameters": [{"name": "logger", "type": "MagicMock, level: str, expected_count: int"}, {"name": "level", "type": "str, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of log messages were recorded.", "signature": "assert_log_count(logger: MagicMock, level: str, expected_count: int, level: str, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Offers assertions to verify logging outputs and log message contents."}, {"name": "ConfigAssertions", "line": 157, "inherits_from": [], "methods": [{"name": "assert_config_value", "line": 161, "parameters": [{"name": "config", "type": "MagicMock, key: str, expected_value: Any"}, {"name": "key", "type": "str, expected_value: Any"}, {"name": "expected_value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration value matches expected value.", "signature": "assert_config_value(config: MagicMock, key: str, expected_value: Any, key: str, expected_value: Any, expected_value: Any) -> None"}, {"name": "assert_config_has_key", "line": 173, "parameters": [{"name": "config", "type": "MagicMock, key: str"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration key exists.", "signature": "assert_config_has_key(config: MagicMock, key: str, key: str) -> None"}, {"name": "assert_config_set", "line": 179, "parameters": [{"name": "config", "type": "MagicMock, key: str, value: Any"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a configuration value was set.", "signature": "assert_config_set(config: MagicMock, key: str, value: Any, key: str, value: Any, value: Any) -> None"}], "properties": [], "description": "Includes assertions for validating configuration settings and parameters."}, {"name": "MetricsAssertions", "line": 184, "inherits_from": [], "methods": [{"name": "assert_counter_incremented", "line": 188, "parameters": [{"name": "metrics_collector", "type": "MagicMock"}, {"name": "counter_name", "type": "str"}, {"name": "expected_increment", "type": "int", "default": "1"}], "is_async": false, "return_type": "None", "description": "Assert that a counter was incremented.", "signature": "assert_counter_incremented(metrics_collector: MagicMock, counter_name: str, expected_increment: int = 1) -> None"}, {"name": "assert_gauge_set", "line": 200, "parameters": [{"name": "metrics_collector", "type": "MagicMock"}, {"name": "gauge_name", "type": "str"}, {"name": "expected_value", "type": "float"}], "is_async": false, "return_type": "None", "description": "Assert that a gauge was set to a specific value.", "signature": "assert_gauge_set(metrics_collector: MagicMock, gauge_name: str, expected_value: float) -> None"}, {"name": "assert_histogram_recorded", "line": 209, "parameters": [{"name": "metrics_collector", "type": "MagicMock"}, {"name": "histogram_name", "type": "str"}, {"name": "expected_value", "type": "float"}], "is_async": false, "return_type": "None", "description": "Assert that a histogram value was recorded.", "signature": "assert_histogram_recorded(metrics_collector: MagicMock, histogram_name: str, expected_value: float) -> None"}, {"name": "assert_metrics_count", "line": 221, "parameters": [{"name": "metrics_collector", "type": "MagicMock, expected_count: int"}, {"name": "expected_count", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a specific number of metrics were recorded.", "signature": "assert_metrics_count(metrics_collector: MagicMock, expected_count: int, expected_count: int) -> None"}], "properties": [], "description": "Provides assertions to check metrics collection and reporting accuracy."}, {"name": "TimeAssertions", "line": 233, "inherits_from": [], "methods": [{"name": "assert_completes_within_timeout", "line": 237, "parameters": [{"name": "func", "type": "Callable"}, {"name": "timeout", "type": "float"}], "is_async": true, "return_type": "None", "description": "Assert that a function completes within a timeout.", "signature": "async assert_completes_within_timeout(func: Callable, timeout: float, *args, **kwargs) -> None"}, {"name": "assert_takes_at_least", "line": 262, "parameters": [{"name": "func", "type": "Callable"}, {"name": "min_time", "type": "float"}], "is_async": true, "return_type": "None", "description": "Assert that a function takes at least a minimum time.", "signature": "async assert_takes_at_least(func: Callable, min_time: float, *args, **kwargs) -> None"}], "properties": [], "description": "Contains assertions related to time-based operations and durations."}, {"name": "DataAssertions", "line": 287, "inherits_from": [], "methods": [{"name": "assert_dict_contains", "line": 291, "parameters": [{"name": "dict_obj", "type": "dict[str, Any]"}, {"name": "expected_items", "type": "dict[str, Any]"}], "is_async": false, "return_type": "None", "description": "Assert that a dictionary contains specific key-value pairs.", "signature": "assert_dict_contains(dict_obj: dict[str, Any], expected_items: dict[str, Any]) -> None"}, {"name": "assert_list_contains", "line": 304, "parameters": [{"name": "list_obj", "type": "list[Any], expected_item: Any"}, {"name": "expected_item", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a list contains a specific item.", "signature": "assert_list_contains(list_obj: list[Any], expected_item: Any, expected_item: Any) -> None"}, {"name": "assert_list_length", "line": 309, "parameters": [{"name": "list_obj", "type": "list[Any], expected_length: int"}, {"name": "expected_length", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a list has a specific length.", "signature": "assert_list_length(list_obj: list[Any], expected_length: int, expected_length: int) -> None"}, {"name": "assert_json_equals", "line": 317, "parameters": [{"name": "json_str", "type": "str, expected_data: Any"}, {"name": "expected_data", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a JSON string equals expected data.", "signature": "assert_json_equals(json_str: str, expected_data: Any, expected_data: Any) -> None"}, {"name": "assert_string_contains", "line": 328, "parameters": [{"name": "text", "type": "str, substring: str"}, {"name": "substring", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a string contains a substring.", "signature": "assert_string_contains(text: str, substring: str, substring: str) -> None"}, {"name": "assert_string_matches_pattern", "line": 333, "parameters": [{"name": "text", "type": "str, pattern: str"}, {"name": "pattern", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a string matches a regex pattern.", "signature": "assert_string_matches_pattern(text: str, pattern: str, pattern: str) -> None"}], "properties": [], "description": "Offers a set of assertions for validating data integrity and correctness."}, {"name": "ExceptionAssertions", "line": 340, "inherits_from": [], "methods": [{"name": "assert_raises_exception", "line": 344, "parameters": [{"name": "func", "type": "Callable"}, {"name": "exception_type", "type": "type"}], "is_async": false, "return_type": "None", "description": "Assert that a function raises a specific exception.", "signature": "assert_raises_exception(func: Callable, exception_type: type, *args, **kwargs) -> None"}, {"name": "assert_raises_async_exception", "line": 355, "parameters": [{"name": "func", "type": "Callable"}, {"name": "exception_type", "type": "type"}], "is_async": true, "return_type": "None", "description": "Assert that an async function raises a specific exception.", "signature": "async assert_raises_async_exception(func: Callable, exception_type: type, *args, **kwargs) -> None"}, {"name": "assert_raises_with_message", "line": 371, "parameters": [{"name": "func", "type": "Callable"}, {"name": "exception_type", "type": "type"}, {"name": "expected_message", "type": "str"}], "is_async": false, "return_type": "None", "description": "Assert that a function raises an exception with a specific message.", "signature": "assert_raises_with_message(func: Callable, exception_type: type, expected_message: str, *args, **kwargs) -> None"}, {"name": "assert_no_exception", "line": 383, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that a function does not raise any exception.", "signature": "assert_no_exception(func: Callable, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_no_async_exception", "line": 391, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": true, "return_type": "None", "description": "Assert that an async function does not raise any exception.", "signature": "async assert_no_async_exception(func: Callable, *args, **kwargs, *args, **kwargs) -> None"}], "properties": [], "description": "Includes assertions for verifying exception raising and handling."}, {"name": "MockAssertions", "line": 404, "inherits_from": [], "methods": [{"name": "assert_mock_called_with_args", "line": 408, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called with specific arguments.", "signature": "assert_mock_called_with_args(mock: MagicMock, *expected_args, **expected_kwargs) -> None"}, {"name": "assert_mock_called_times", "line": 417, "parameters": [{"name": "mock", "type": "MagicMock, expected_calls: int"}, {"name": "expected_calls", "type": "int"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called a specific number of times.", "signature": "assert_mock_called_times(mock: MagicMock, expected_calls: int, expected_calls: int) -> None"}, {"name": "assert_mock_not_called", "line": 425, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was not called.", "signature": "assert_mock_not_called(mock: MagicMock) -> None"}, {"name": "assert_mock_called_once", "line": 430, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock was called exactly once.", "signature": "assert_mock_called_once(mock: MagicMock) -> None"}, {"name": "assert_mock_return_value", "line": 435, "parameters": [{"name": "mock", "type": "MagicMock, expected_value: Any"}, {"name": "expected_value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Assert that a mock returns a specific value.", "signature": "assert_mock_return_value(mock: MagicMock, expected_value: Any, expected_value: Any) -> None"}, {"name": "assert_mock_side_effect_called", "line": 442, "parameters": [{"name": "mock", "type": "MagicMock"}], "is_async": false, "return_type": "None", "description": "Assert that a mock''s side effect was called.", "signature": "assert_mock_side_effect_called(mock: MagicMock) -> None"}], "properties": [], "description": "Provides assertions to validate mock object interactions and behaviors."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "json", "alias": null, "line": 10, "statement": "import json"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "pytest", "alias": null, "line": 16, "statement": "import pytest"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "unittest.mock", "alias": null, "line": 14, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 14, "statement": "from unittest.mock import MagicMock"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "json", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "pytest", "type": "import", "line": 16}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 14}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 14}, {"name": "AsyncAssertions", "type": "class", "line": 19}, {"name": "EventAssertions", "type": "class", "line": 67}, {"name": "LoggingAssertions", "type": "class", "line": 111}, {"name": "ConfigAssertions", "type": "class", "line": 157}, {"name": "MetricsAssertions", "type": "class", "line": 184}, {"name": "TimeAssertions", "type": "class", "line": 233}, {"name": "DataAssertions", "type": "class", "line": 287}, {"name": "ExceptionAssertions", "type": "class", "line": 340}, {"name": "MockAssertions", "type": "class", "line": 404}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "AsyncAssertions Class", "description": "Class AsyncAssertions definition and methods.", "line_start": 19, "line_end": 49}, {"name": "EventAssertions Class", "description": "Class EventAssertions definition and methods.", "line_start": 67, "line_end": 106}, {"name": "LoggingAssertions Class", "description": "Class LoggingAssertions definition and methods.", "line_start": 111, "line_end": 151}, {"name": "ConfigAssertions Class", "description": "Class ConfigAssertions definition and methods.", "line_start": 157, "line_end": 182}, {"name": "MetricsAssertions Class", "description": "Class MetricsAssertions definition and methods.", "line_start": 184, "line_end": 224}, {"name": "TimeAssertions Class", "description": "Class TimeAssertions definition and methods.", "line_start": 233, "line_end": 265}, {"name": "DataAssertions Class", "description": "Class DataAssertions definition and methods.", "line_start": 287, "line_end": 336}, {"name": "ExceptionAssertions Class", "description": "Class ExceptionAssertions definition and methods.", "line_start": 340, "line_end": 394}, {"name": "MockAssertions Class", "description": "Class MockAssertions definition and methods.", "line_start": 404, "line_end": 445}], "content_hash": "00c1946d975075b82953cd8e368436ed"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/fixtures.py
  line_count: 71
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "fixtures.py", "description": "Python module with 7 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "foundation_config", "line": 19, "parameters": [], "is_async": false, "description": "Returns the configuration settings for the foundation module.", "signature": "foundation_config()"}, {"name": "auth_config", "line": 32, "parameters": [], "is_async": false, "description": "Provides the configuration parameters required for authentication.", "signature": "auth_config()"}, {"name": "auth_manager", "line": 42, "parameters": [{"name": "auth_config", "type": "unknown"}], "is_async": false, "description": "Initializes and returns an authentication manager using the given auth configuration.", "signature": "auth_manager(auth_config)"}, {"name": "circuit_breaker_config", "line": 48, "parameters": [], "is_async": false, "description": "Generates configuration settings for the circuit breaker mechanism.", "signature": "circuit_breaker_config()"}, {"name": "circuit_breaker", "line": 59, "parameters": [{"name": "circuit_breaker_config", "type": "unknown"}], "is_async": false, "description": "Creates a circuit breaker instance based on the provided configuration.", "signature": "circuit_breaker(circuit_breaker_config)"}, {"name": "mock_async_function", "line": 65, "parameters": [], "is_async": false, "description": "A mock asynchronous function used for testing purposes.", "signature": "mock_async_function()"}, {"name": "mock_sync_function", "line": 71, "parameters": [], "is_async": false, "description": "A mock synchronous function used for testing purposes.", "signature": "mock_sync_function()"}], "classes": [], "imports": [{"module": "pytest", "alias": null, "line": 11, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 9, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 9, "statement": "from unittest.mock import MagicMock"}, {"module": "config", "alias": null, "line": 13, "statement": "from config import FoundationConfig"}, {"module": "resilience", "alias": null, "line": 14, "statement": "from resilience import CircuitBreaker"}, {"module": "resilience", "alias": null, "line": 14, "statement": "from resilience import CircuitBreakerConfig"}, {"module": "security", "alias": null, "line": 15, "statement": "from security import AuthConfig"}, {"module": "security", "alias": null, "line": 15, "statement": "from security import AuthManager"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 11}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 9}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 9}, {"name": "from config import FoundationConfig", "type": "import", "line": 13}, {"name": "from resilience import CircuitBreaker", "type": "import", "line": 14}, {"name": "from resilience import CircuitBreakerConfig", "type": "import", "line": 14}, {"name": "from security import AuthConfig", "type": "import", "line": 15}, {"name": "from security import AuthManager", "type": "import", "line": 15}, {"name": "foundation_config", "type": "function", "line": 19}, {"name": "auth_config", "type": "function", "line": 32}, {"name": "auth_manager", "type": "function", "line": 42}, {"name": "circuit_breaker_config", "type": "function", "line": 48}, {"name": "circuit_breaker", "type": "function", "line": 59}, {"name": "mock_async_function", "type": "function", "line": 65}, {"name": "mock_sync_function", "type": "function", "line": 71}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "foundation_config Function", "description": "Function foundation_config implementation.", "line_start": 19, "line_end": 31}, {"name": "auth_config Function", "description": "Function auth_config implementation.", "line_start": 32, "line_end": 41}, {"name": "auth_manager Function", "description": "Function auth_manager implementation.", "line_start": 42, "line_end": 47}, {"name": "circuit_breaker_config Function", "description": "Function circuit_breaker_config implementation.", "line_start": 48, "line_end": 58}, {"name": "circuit_breaker Function", "description": "Function circuit_breaker implementation.", "line_start": 59, "line_end": 64}, {"name": "mock_async_function Function", "description": "Function mock_async_function implementation.", "line_start": 65, "line_end": 70}, {"name": "mock_sync_function Function", "description": "Function mock_sync_function implementation.", "line_start": 71, "line_end": 76}], "content_hash": "913470ae67758cb20c22c829a90d44ed"}'
- path: libs/opsvi-foundation/opsvi_foundation/testing/helpers.py
  line_count: 403
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "helpers.py", "description": "Python module with 2 functions and 9 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "mock_time", "line": 247, "parameters": [{"name": "timestamp", "type": "float):"}], "is_async": false, "description": "Mocks the current time to a specified timestamp for testing purposes.", "signature": "mock_time(timestamp: float):)"}, {"name": "async_context_manager", "line": 254, "parameters": [], "is_async": true, "description": "An asynchronous context manager for managing async resources during tests.", "signature": "async async_context_manager()"}], "classes": [{"name": "AsyncTestCase", "line": 22, "inherits_from": [], "methods": [{"name": "setup_class", "line": 26, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "None", "description": "Set up the test class.", "signature": "setup_class(cls) -> None"}, {"name": "setup_method", "line": 31, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Set up each test method.", "signature": "setup_method(self) -> None"}, {"name": "teardown_method", "line": 34, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Tear down each test method.", "signature": "teardown_method(self) -> None"}], "properties": [], "description": "Base class for writing asynchronous test cases with setup and teardown support."}, {"name": "MockFactory", "line": 38, "inherits_from": [], "methods": [{"name": "create_logger", "line": 42, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock logger.", "signature": "create_logger() -> MagicMock"}, {"name": "create_async_logger", "line": 53, "parameters": [], "is_async": false, "return_type": "AsyncMock", "description": "Create a mock async logger.", "signature": "create_async_logger() -> AsyncMock"}, {"name": "create_config", "line": 64, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock configuration object.", "signature": "create_config() -> MagicMock"}, {"name": "create_event_bus", "line": 73, "parameters": [], "is_async": false, "return_type": "MagicMock", "description": "Create a mock event bus.", "signature": "create_event_bus() -> MagicMock"}], "properties": [], "description": "Factory class for creating various mock objects used in testing."}, {"name": "TestUtils", "line": 82, "inherits_from": [], "methods": [{"name": "assert_async_called_with", "line": 86, "parameters": [{"name": "mock", "type": "AsyncMock, *args, **kwargs"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was called with specific arguments.", "signature": "assert_async_called_with(mock: AsyncMock, *args, **kwargs, *args, **kwargs) -> None"}, {"name": "assert_async_called_once", "line": 91, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was called exactly once.", "signature": "assert_async_called_once(mock: AsyncMock) -> None"}, {"name": "assert_async_not_called", "line": 96, "parameters": [{"name": "mock", "type": "AsyncMock"}], "is_async": false, "return_type": "None", "description": "Assert that an async mock was not called.", "signature": "assert_async_not_called(mock: AsyncMock) -> None"}, {"name": "wait_for_condition", "line": 101, "parameters": [{"name": "condition", "type": "Callable[[], bool]"}, {"name": "timeout", "type": "float", "default": "5.0"}, {"name": "interval", "type": "float", "default": "0.1"}], "is_async": true, "return_type": "None", "description": "Wait for a condition to become true.", "signature": "async wait_for_condition(condition: Callable[[], bool], timeout: float = 5.0, interval: float = 0.1) -> None"}, {"name": "create_temp_file", "line": 114, "parameters": [{"name": "content", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "str", "description": "Create a temporary file with content.", "signature": "create_temp_file(content: str = \"\" = ) -> str"}, {"name": "create_temp_directory", "line": 121, "parameters": [], "is_async": false, "return_type": "str", "description": "Create a temporary directory.", "signature": "create_temp_directory() -> str"}], "properties": [], "description": "Utility class providing helper methods for common test operations."}, {"name": "AsyncTestRunner", "line": 126, "inherits_from": [], "methods": [{"name": "run_async_test", "line": 130, "parameters": [{"name": "test_func", "type": "Callable"}], "is_async": true, "return_type": "Any", "description": "Run an async test function.", "signature": "async run_async_test(test_func: Callable) -> Any"}, {"name": "run_sync_test", "line": 138, "parameters": [{"name": "test_func", "type": "Callable"}], "is_async": false, "return_type": "Any", "description": "Run a sync test function.", "signature": "run_sync_test(test_func: Callable) -> Any"}], "properties": [], "description": "Runs asynchronous tests and manages their execution lifecycle."}, {"name": "TestDataFactory", "line": 146, "inherits_from": [], "methods": [{"name": "create_test_event", "line": 150, "parameters": [{"name": "event_type", "type": "str", "default": "test_event"}, {"name": "data", "type": "Any", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Create a test event.", "signature": "create_test_event(event_type: str = test_event, data: Any = None) -> dict[str, Any]"}, {"name": "create_test_config", "line": 163, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Create test configuration data.", "signature": "create_test_config() -> dict[str, Any]"}, {"name": "create_test_user", "line": 175, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Create test user data.", "signature": "create_test_user() -> dict[str, Any]"}], "properties": [], "description": "Generates test data objects for use in unit tests."}, {"name": "PerformanceTestHelper", "line": 186, "inherits_from": [], "methods": [{"name": "measure_execution_time", "line": 190, "parameters": [{"name": "func", "type": "Callable, *args, **kwargs"}], "is_async": true, "return_type": "float", "description": "Measure the execution time of a function.", "signature": "async measure_execution_time(func: Callable, *args, **kwargs, *args, **kwargs) -> float"}, {"name": "benchmark_function", "line": 201, "parameters": [{"name": "func", "type": "Callable"}, {"name": "iterations", "type": "int", "default": "1000"}], "is_async": true, "return_type": "dict[str, float]", "description": "Benchmark a function over multiple iterations.", "signature": "async benchmark_function(func: Callable, iterations: int = 1000, *args, **kwargs) -> dict[str, float]"}], "properties": [], "description": "Provides methods to assist in performance testing and benchmarking."}, {"name": "MockContextManager", "line": 226, "inherits_from": [], "methods": [{"name": "__init__", "line": 229, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self, *patches: str) -> None"}, {"name": "__enter__", "line": 233, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Enter the context.", "signature": "__enter__(self)"}, {"name": "__exit__", "line": 240, "parameters": [{"name": "self", "type": "self"}, {"name": "exc_type", "type": "unknown"}, {"name": "exc_val", "type": "unknown"}, {"name": "exc_tb", "type": "unknown"}], "is_async": false, "description": "Exit the context.", "signature": "__exit__(self, exc_type, exc_val, exc_tb)"}], "properties": [], "description": "Context manager that mocks resources within a controlled scope."}, {"name": "TestEventBus", "line": 263, "inherits_from": [], "methods": [{"name": "__init__", "line": 266, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "publish", "line": 270, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "dict[str, Any]"}], "is_async": true, "return_type": "None", "description": "Publish an event.", "signature": "async publish(self, event: dict[str, Any]) -> None"}, {"name": "subscribe", "line": 284, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, callback: Callable"}, {"name": "callback", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Subscribe to events.", "signature": "subscribe(self, event_type: str, callback: Callable, callback: Callable) -> None"}, {"name": "unsubscribe", "line": 290, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, callback: Callable"}, {"name": "callback", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Unsubscribe from events.", "signature": "unsubscribe(self, event_type: str, callback: Callable, callback: Callable) -> None"}, {"name": "get_events", "line": 295, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Get published events.", "signature": "get_events(self, event_type: str | None = None = None) -> list[dict[str, Any]]"}, {"name": "clear_events", "line": 301, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all events.", "signature": "clear_events(self) -> None"}], "properties": [], "description": "Simulates an event bus for testing event-driven components."}, {"name": "TestMetricsCollector", "line": 306, "inherits_from": [], "methods": [{"name": "__init__", "line": 309, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "increment_counter", "line": 315, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "int", "default": "1"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Increment a counter.", "signature": "increment_counter(self, name: str, value: int = 1, labels: dict[str, str] | None = None) -> None"}, {"name": "set_gauge", "line": 337, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "float"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Set a gauge value.", "signature": "set_gauge(self, name: str, value: float, labels: dict[str, str] | None = None) -> None"}, {"name": "record_histogram", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "value", "type": "float"}, {"name": "labels", "type": "dict[str, str] | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Record a histogram value.", "signature": "record_histogram(self, name: str, value: float, labels: dict[str, str] | None = None) -> None"}, {"name": "get_counter", "line": 379, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "int", "description": "Get counter value.", "signature": "get_counter(self, name: str) -> int"}, {"name": "get_gauge", "line": 383, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "float", "description": "Get gauge value.", "signature": "get_gauge(self, name: str) -> float"}, {"name": "get_histogram", "line": 387, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "list[float]", "description": "Get histogram values.", "signature": "get_histogram(self, name: str) -> list[float]"}, {"name": "get_metrics", "line": 391, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str | None", "default": "None"}], "is_async": false, "return_type": "dict[str, list[dict[str, Any]]]", "description": "Get all metrics.", "signature": "get_metrics(self, name: str | None = None) -> dict[str, list[dict[str, Any]]]"}, {"name": "clear_metrics", "line": 400, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all metrics.", "signature": "clear_metrics(self) -> None"}], "properties": [], "description": "Collects and manages metrics data during test execution."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "tempfile", "alias": null, "line": 11, "statement": "import tempfile"}, {"module": "time", "alias": null, "line": 12, "statement": "import time"}, {"module": "pytest", "alias": null, "line": 18, "statement": "import pytest"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import asynccontextmanager"}, {"module": "contextlib", "alias": null, "line": 14, "statement": "from contextlib import contextmanager"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "unittest.mock", "alias": null, "line": 16, "statement": "from unittest.mock import AsyncMock"}, {"module": "unittest.mock", "alias": null, "line": 16, "statement": "from unittest.mock import MagicMock"}, {"module": "unittest.mock", "alias": null, "line": 16, "statement": "from unittest.mock import patch"}, {"module": "freezegun", "alias": null, "line": 19, "statement": "from freezegun import freeze_time"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "tempfile", "type": "import", "line": 11}, {"name": "time", "type": "import", "line": 12}, {"name": "pytest", "type": "import", "line": 18}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from contextlib import asynccontextmanager", "type": "import", "line": 14}, {"name": "from contextlib import contextmanager", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from unittest.mock import AsyncMock", "type": "import", "line": 16}, {"name": "from unittest.mock import MagicMock", "type": "import", "line": 16}, {"name": "from unittest.mock import patch", "type": "import", "line": 16}, {"name": "from freezegun import freeze_time", "type": "import", "line": 19}, {"name": "AsyncTestCase", "type": "class", "line": 22}, {"name": "MockFactory", "type": "class", "line": 38}, {"name": "TestUtils", "type": "class", "line": 82}, {"name": "AsyncTestRunner", "type": "class", "line": 126}, {"name": "TestDataFactory", "type": "class", "line": 146}, {"name": "PerformanceTestHelper", "type": "class", "line": 186}, {"name": "MockContextManager", "type": "class", "line": 226}, {"name": "mock_time", "type": "function", "line": 247}, {"name": "async_context_manager", "type": "function", "line": 254}, {"name": "TestEventBus", "type": "class", "line": 263}, {"name": "TestMetricsCollector", "type": "class", "line": 306}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}, {"name": "mock_time Function", "description": "Function mock_time implementation.", "line_start": 247, "line_end": 253}, {"name": "async_context_manager Function", "description": "Function async_context_manager implementation.", "line_start": 254, "line_end": 262}, {"name": "AsyncTestCase Class", "description": "Class AsyncTestCase definition and methods.", "line_start": 22, "line_end": 37}, {"name": "MockFactory Class", "description": "Class MockFactory definition and methods.", "line_start": 38, "line_end": 76}, {"name": "TestUtils Class", "description": "Class TestUtils definition and methods.", "line_start": 82, "line_end": 124}, {"name": "AsyncTestRunner Class", "description": "Class AsyncTestRunner definition and methods.", "line_start": 126, "line_end": 141}, {"name": "TestDataFactory Class", "description": "Class TestDataFactory definition and methods.", "line_start": 146, "line_end": 178}, {"name": "PerformanceTestHelper Class", "description": "Class PerformanceTestHelper definition and methods.", "line_start": 186, "line_end": 204}, {"name": "MockContextManager Class", "description": "Class MockContextManager definition and methods.", "line_start": 226, "line_end": 243}, {"name": "TestEventBus Class", "description": "Class TestEventBus definition and methods.", "line_start": 263, "line_end": 304}, {"name": "TestMetricsCollector Class", "description": "Class TestMetricsCollector definition and methods.", "line_start": 306, "line_end": 403}], "content_hash": "4401347185aa7577d2ffcd7958b1c59e"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/__init__.py
  line_count: 13
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "base", "alias": null, "line": 9, "statement": "from base import BaseComponent"}, {"module": "base", "alias": null, "line": 9, "statement": "from base import ComponentError"}, {"module": "base", "alias": null, "line": 9, "statement": "from base import LifecycleComponent"}], "constants": []}, "key_elements": [{"name": "from base import BaseComponent", "type": "import", "line": 9}, {"name": "from base import ComponentError", "type": "import", "line": 9}, {"name": "from base import LifecycleComponent", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "cd6460b87ad8b997da1c6e4691aca189"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/observer.py
  line_count: 166
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "observer.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "EventPriority", "line": 21, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "LOW", "line": 22, "type": ""}, {"name": "NORMAL", "line": 23, "type": ""}, {"name": "HIGH", "line": 24, "type": ""}, {"name": "CRITICAL", "line": 25, "type": ""}], "description": "Defines priority levels for events to control their processing order."}, {"name": "Event", "line": 31, "inherits_from": [], "methods": [], "properties": [], "description": "Represents an event with associated data to be dispatched to observers."}, {"name": "Observer", "line": 42, "inherits_from": ["ABC):"], "methods": [{"name": "on_event", "line": 46, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Handle an event.", "signature": "async on_event(self, event: Event) -> None"}], "properties": [], "description": "Defines an interface for objects that receive and handle events."}, {"name": "Subject", "line": 50, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "attach", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Attach an observer to an event type.", "signature": "attach(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "detach", "line": 64, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Detach an observer from an event type.", "signature": "detach(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "notify", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Notify all observers of an event.", "signature": "async notify(self, event: Event) -> None"}], "properties": [], "description": "Manages a list of observers and notifies them of events."}, {"name": "EventBus", "line": 97, "inherits_from": [], "methods": [{"name": "__init__", "line": 100, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register_subject", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, subject: Subject"}, {"name": "subject", "type": "Subject"}], "is_async": false, "return_type": "None", "description": "Register a subject with the event bus.", "signature": "register_subject(self, name: str, subject: Subject, subject: Subject) -> None"}, {"name": "unregister_subject", "line": 111, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a subject from the event bus.", "signature": "unregister_subject(self, name: str) -> None"}, {"name": "subscribe", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Subscribe to events globally.", "signature": "subscribe(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "unsubscribe", "line": 124, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str, observer: Observer"}, {"name": "observer", "type": "Observer"}], "is_async": false, "return_type": "None", "description": "Unsubscribe from global events.", "signature": "unsubscribe(self, event_type: str, observer: Observer, observer: Observer) -> None"}, {"name": "publish", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "event", "type": "Event"}], "is_async": true, "return_type": "None", "description": "Publish an event to all relevant observers.", "signature": "async publish(self, event: Event) -> None"}, {"name": "get_event_history", "line": 153, "parameters": [{"name": "self", "type": "self"}, {"name": "event_type", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "list[Event]", "description": "Get event history, optionally filtered by type.", "signature": "get_event_history(self, event_type: str | None = None = None) -> list[Event]"}, {"name": "clear_history", "line": 161, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear event history.", "signature": "clear_history(self) -> None"}], "properties": [], "description": "Handles event registration, dispatching, and observer management across the system."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 16, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from dataclasses import field", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 16}, {"name": "EventPriority", "type": "class", "line": 21}, {"name": "Event", "type": "class", "line": 31}, {"name": "Observer", "type": "class", "line": 42}, {"name": "Subject", "type": "class", "line": 50}, {"name": "EventBus", "type": "class", "line": 97}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 16}, {"name": "EventPriority Class", "description": "Class EventPriority definition and methods.", "line_start": 21, "line_end": 31}, {"name": "Event Class", "description": "Class Event definition and methods.", "line_start": 31, "line_end": 41}, {"name": "Observer Class", "description": "Class Observer definition and methods.", "line_start": 42, "line_end": 49}, {"name": "Subject Class", "description": "Class Subject definition and methods.", "line_start": 50, "line_end": 75}, {"name": "EventBus Class", "description": "Class EventBus definition and methods.", "line_start": 97, "line_end": 164}], "content_hash": "4de7b128909574a878217a35ab914319"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/base.py
  line_count: 88
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "ComponentError", "line": 13, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "dict[str, Any] | None", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: dict[str, Any] | None = None)"}], "properties": [], "description": "Represents errors related to component operations."}, {"name": "BaseComponent", "line": 22, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "signature": "__init__(self)"}, {"name": "initialize", "line": 29, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "start", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Start the component.", "signature": "async start(self) -> None"}, {"name": "stop", "line": 48, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Stop the component.", "signature": "async stop(self) -> None"}, {"name": "cleanup", "line": 56, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup component resources.", "signature": "async cleanup(self) -> None"}, {"name": "is_active", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if component is active.", "signature": "is_active(self) -> bool"}, {"name": "is_initialized", "line": 68, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if component is initialized.", "signature": "is_initialized(self) -> bool"}, {"name": "_initialize", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific initialization logic.", "signature": "async _initialize(self) -> None"}, {"name": "_start", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific start logic.", "signature": "async _start(self) -> None"}, {"name": "_stop", "line": 79, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific stop logic.", "signature": "async _stop(self) -> None"}, {"name": "_cleanup", "line": 82, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Component-specific cleanup logic.", "signature": "async _cleanup(self) -> None"}], "properties": [], "description": "Provides the foundational interface and common functionality for all components."}, {"name": "LifecycleComponent", "line": 86, "inherits_from": ["BaseComponent):"], "methods": [{"name": "_initialize", "line": 89, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Default initialization - override if needed.", "signature": "async _initialize(self) -> None"}], "properties": [], "description": "Extends BaseComponent to include lifecycle management capabilities."}], "imports": [{"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "ComponentError", "type": "class", "line": 13}, {"name": "BaseComponent", "type": "class", "line": 22}, {"name": "LifecycleComponent", "type": "class", "line": 86}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}, {"name": "ComponentError Class", "description": "Class ComponentError definition and methods.", "line_start": 13, "line_end": 19}, {"name": "BaseComponent Class", "description": "Class BaseComponent definition and methods.", "line_start": 22, "line_end": 85}, {"name": "LifecycleComponent Class", "description": "Class LifecycleComponent definition and methods.", "line_start": 86, "line_end": 92}], "content_hash": "ef9a8cec5d9680a3bd34bcb74ed8be23"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/factory.py
  line_count: 606
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "factory.py", "description": "Python module with 3 functions and 10 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "inject", "line": 563, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to mark a function or method parameter for dependency injection by name.", "signature": "inject(name: str):)"}, {"name": "singleton", "line": 581, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to define a singleton factory that provides a single shared instance by name.", "signature": "singleton(name: str):)"}, {"name": "factory_method", "line": 596, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Decorator to define a factory method that creates and returns new instances by name.", "signature": "factory_method(name: str):)"}], "classes": [{"name": "FactoryError", "line": 20, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to factory operations."}, {"name": "FactoryType", "line": 24, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "SIMPLE", "line": 25, "type": ""}, {"name": "ABSTRACT", "line": 26, "type": ""}, {"name": "BUILDER", "line": 27, "type": ""}, {"name": "PROTOTYPE", "line": 28, "type": ""}], "description": "Metaclass that manages registration and creation of factory classes."}, {"name": "Factory", "line": 36, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "\n        Initialize factory.\n\n        Args:\n            name: Factory name\n        ", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 50, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "T", "description": "\n        Create an instance.\n\n        Args:\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, *args, **kwargs) -> T"}, {"name": "register", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, cls: type[T]"}, {"name": "cls", "type": "type[T]"}], "is_async": false, "return_type": "None", "description": "\n        Register a class with the factory.\n\n        Args:\n            name: Registration name\n            cls: Class to register\n        ", "signature": "register(self, name: str, cls: type[T], cls: type[T]) -> None"}, {"name": "unregister", "line": 72, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Unregister a class from the factory.\n\n        Args:\n            name: Registration name\n        ", "signature": "unregister(self, name: str) -> None"}, {"name": "get_registered", "line": 81, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "type[T] | None", "description": "\n        Get registered class by name.\n\n        Args:\n            name: Registration name\n\n        Returns:\n            Registered class or None if not found\n        ", "signature": "get_registered(self, name: str) -> type[T] | None"}, {"name": "list_registered", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "\n        List all registered names.\n\n        Returns:\n            List of registered names\n        ", "signature": "list_registered(self) -> list[str]"}], "properties": [], "description": "Base class providing core factory methods for creating and managing object instances."}, {"name": "SimpleFactory", "line": 103, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 106, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}, {"name": "base_class", "type": "type[T] | None", "default": "None"}], "is_async": false, "description": "\n        Initialize simple factory.\n\n        Args:\n            name: Factory name\n            base_class: Base class for validation\n        ", "signature": "__init__(self, name: str, base_class: type[T] | None = None)"}, {"name": "create", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by name.\n\n        Args:\n            name: Registration name\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n\n        Raises:\n            FactoryError: If class not found or invalid\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "create_with_config", "line": 150, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: dict[str, Any]"}, {"name": "config", "type": "dict[str, Any]"}], "is_async": false, "return_type": "T", "description": "\n        Create instance with configuration.\n\n        Args:\n            name: Registration name\n            config: Configuration dictionary\n\n        Returns:\n            Created instance\n        ", "signature": "create_with_config(self, name: str, config: dict[str, Any], config: dict[str, Any]) -> T"}], "properties": [], "description": "Concrete factory class implementing basic object creation methods."}, {"name": "AbstractFactory", "line": 164, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 167, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize abstract factory.", "signature": "__init__(self, name: str):)"}, {"name": "register_factory", "line": 172, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str, factory: Factory"}, {"name": "factory", "type": "Factory"}], "is_async": false, "return_type": "None", "description": "\n        Register a factory for a category.\n\n        Args:\n            category: Category name\n            factory: Factory instance\n        ", "signature": "register_factory(self, category: str, factory: Factory, factory: Factory) -> None"}, {"name": "create", "line": 182, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str, name: str, *args, **kwargs"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by category and name.\n\n        Args:\n            category: Category name\n            name: Registration name\n            *args: Positional arguments\n            **kwargs: Keyword arguments\n\n        Returns:\n            Created instance\n\n        Raises:\n            FactoryError: If category or class not found\n        ", "signature": "create(self, category: str, name: str, *args, **kwargs, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "get_factory", "line": 206, "parameters": [{"name": "self", "type": "self"}, {"name": "category", "type": "str"}], "is_async": false, "return_type": "Factory | None", "description": "\n        Get factory for category.\n\n        Args:\n            category: Category name\n\n        Returns:\n            Factory instance or None if not found\n        ", "signature": "get_factory(self, category: str) -> Factory | None"}, {"name": "list_categories", "line": 218, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "\n        List all categories.\n\n        Returns:\n            List of category names\n        ", "signature": "list_categories(self) -> list[str]"}], "properties": [], "description": "Factory class defining an interface for creating families of related objects."}, {"name": "Builder", "line": 228, "inherits_from": [], "methods": [{"name": "__init__", "line": 231, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize builder.", "signature": "__init__(self)"}, {"name": "add_part", "line": 235, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "Builder", "description": "\n        Add a part to the builder.\n\n        Args:\n            name: Part name\n            value: Part value\n\n        Returns:\n            Self for chaining\n        ", "signature": "add_part(self, name: str, value: Any, value: Any) -> Builder"}, {"name": "add_parts", "line": 249, "parameters": [{"name": "self", "type": "self"}, {"name": "parts", "type": "dict[str, Any]"}], "is_async": false, "return_type": "Builder", "description": "\n        Add multiple parts to the builder.\n\n        Args:\n            parts: Dictionary of parts\n\n        Returns:\n            Self for chaining\n        ", "signature": "add_parts(self, parts: dict[str, Any]) -> Builder"}, {"name": "get_part", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Get a part from the builder.\n\n        Args:\n            name: Part name\n\n        Returns:\n            Part value\n        ", "signature": "get_part(self, name: str) -> Any"}, {"name": "has_part", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if builder has a part.\n\n        Args:\n            name: Part name\n\n        Returns:\n            True if part exists\n        ", "signature": "has_part(self, name: str) -> bool"}, {"name": "remove_part", "line": 286, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Builder", "description": "\n        Remove a part from the builder.\n\n        Args:\n            name: Part name\n\n        Returns:\n            Self for chaining\n        ", "signature": "remove_part(self, name: str) -> Builder"}, {"name": "clear", "line": 299, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Builder", "description": "\n        Clear all parts.\n\n        Returns:\n            Self for chaining\n        ", "signature": "clear(self) -> Builder"}, {"name": "build", "line": 309, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "\n        Build an instance using the collected parts.\n\n        Args:\n            cls: Class to instantiate\n\n        Returns:\n            Built instance\n        ", "signature": "build(self, cls: type[T]) -> T"}], "properties": [], "description": "Class implementing the builder pattern to construct complex objects step-by-step."}, {"name": "BuilderFactory", "line": 327, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 330, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize builder factory.", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 334, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance using builder pattern.\n\n        Args:\n            name: Registration name\n            *args: Positional arguments (ignored)\n            **kwargs: Keyword arguments for parts\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}], "properties": [], "description": "Factory class specialized in creating builder instances."}, {"name": "Prototype", "line": 357, "inherits_from": [], "methods": [{"name": "__init__", "line": 360, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize prototype.", "signature": "__init__(self)"}, {"name": "register_prototype", "line": 364, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, prototype: Any"}, {"name": "prototype", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Register a prototype.\n\n        Args:\n            name: Prototype name\n            prototype: Prototype instance\n        ", "signature": "register_prototype(self, name: str, prototype: Any, prototype: Any) -> None"}, {"name": "clone", "line": 374, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Clone a prototype.\n\n        Args:\n            name: Prototype name\n\n        Returns:\n            Cloned instance\n\n        Raises:\n            FactoryError: If prototype not found\n        ", "signature": "clone(self, name: str) -> Any"}, {"name": "list_prototypes", "line": 405, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "\n        List all prototype names.\n\n        Returns:\n            List of prototype names\n        ", "signature": "list_prototypes(self) -> list[str]"}], "properties": [], "description": "Class implementing the prototype pattern to clone existing objects."}, {"name": "PrototypeFactory", "line": 415, "inherits_from": ["Factory):"], "methods": [{"name": "__init__", "line": 418, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "Initialize prototype factory.", "signature": "__init__(self, name: str):)"}, {"name": "create", "line": 423, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, *args, **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create instance by cloning prototype.\n\n        Args:\n            name: Prototype name\n            *args: Positional arguments (ignored)\n            **kwargs: Keyword arguments for customization\n\n        Returns:\n            Created instance\n        ", "signature": "create(self, name: str, *args, **kwargs, *args, **kwargs) -> T"}, {"name": "register_prototype", "line": 444, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, prototype: T"}, {"name": "prototype", "type": "T"}], "is_async": false, "return_type": "None", "description": "\n        Register a prototype.\n\n        Args:\n            name: Prototype name\n            prototype: Prototype instance\n        ", "signature": "register_prototype(self, name: str, prototype: T, prototype: T) -> None"}], "properties": [], "description": "Factory class managing prototype instances and cloning them on demand."}, {"name": "DependencyInjector", "line": 455, "inherits_from": [], "methods": [{"name": "__init__", "line": 458, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize dependency injector.", "signature": "__init__(self)"}, {"name": "register_service", "line": 464, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, service: Any"}, {"name": "service", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Register a service instance.\n\n        Args:\n            name: Service name\n            service: Service instance\n        ", "signature": "register_service(self, name: str, service: Any, service: Any) -> None"}, {"name": "register_factory", "line": 474, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, factory: Callable"}, {"name": "factory", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register a service factory.\n\n        Args:\n            name: Service name\n            factory: Factory function\n        ", "signature": "register_factory(self, name: str, factory: Callable, factory: Callable) -> None"}, {"name": "register_singleton", "line": 484, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, factory: Callable"}, {"name": "factory", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "\n        Register a singleton factory.\n\n        Args:\n            name: Service name\n            factory: Factory function\n        ", "signature": "register_singleton(self, name: str, factory: Callable, factory: Callable) -> None"}, {"name": "get_service", "line": 495, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Any", "description": "\n        Get a service by name.\n\n        Args:\n            name: Service name\n\n        Returns:\n            Service instance\n\n        Raises:\n            FactoryError: If service not found\n        ", "signature": "get_service(self, name: str) -> Any"}, {"name": "inject_dependencies", "line": 529, "parameters": [{"name": "self", "type": "self"}, {"name": "obj", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Inject dependencies into an object.\n\n        Args:\n            obj: Object to inject dependencies into\n        ", "signature": "inject_dependencies(self, obj: Any) -> None"}, {"name": "create_with_dependencies", "line": 543, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "type[T], **kwargs"}], "is_async": false, "return_type": "T", "description": "\n        Create an instance and inject dependencies.\n\n        Args:\n            cls: Class to instantiate\n            **kwargs: Additional keyword arguments\n\n        Returns:\n            Created instance with dependencies injected\n        ", "signature": "create_with_dependencies(self, cls: type[T], **kwargs, **kwargs) -> T"}], "properties": [], "description": "Class responsible for managing dependencies and injecting them into objects."}], "imports": [{"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 12, "statement": "from abc import abstractmethod"}, {"module": "collections.abc", "alias": null, "line": 13, "statement": "from collections.abc import Callable"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 17, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": [{"name": "T", "line": 33, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 12}, {"name": "from abc import abstractmethod", "type": "import", "line": 12}, {"name": "from collections.abc import Callable", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 17}, {"name": "FactoryError", "type": "class", "line": 20}, {"name": "FactoryType", "type": "class", "line": 24}, {"name": "T", "type": "constant", "line": 33}, {"name": "Factory", "type": "class", "line": 36}, {"name": "SimpleFactory", "type": "class", "line": 103}, {"name": "AbstractFactory", "type": "class", "line": 164}, {"name": "Builder", "type": "class", "line": 228}, {"name": "BuilderFactory", "type": "class", "line": 327}, {"name": "Prototype", "type": "class", "line": 357}, {"name": "PrototypeFactory", "type": "class", "line": 415}, {"name": "DependencyInjector", "type": "class", "line": 455}, {"name": "inject", "type": "function", "line": 563}, {"name": "singleton", "type": "function", "line": 581}, {"name": "factory_method", "type": "function", "line": 596}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 17}, {"name": "inject Function", "description": "Function inject implementation.", "line_start": 563, "line_end": 580}, {"name": "singleton Function", "description": "Function singleton implementation.", "line_start": 581, "line_end": 595}, {"name": "factory_method Function", "description": "Function factory_method implementation.", "line_start": 596, "line_end": 601}, {"name": "FactoryError Class", "description": "Class FactoryError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "FactoryType Class", "description": "Class FactoryType definition and methods.", "line_start": 24, "line_end": 34}, {"name": "Factory Class", "description": "Class Factory definition and methods.", "line_start": 36, "line_end": 96}, {"name": "SimpleFactory Class", "description": "Class SimpleFactory definition and methods.", "line_start": 103, "line_end": 153}, {"name": "AbstractFactory Class", "description": "Class AbstractFactory definition and methods.", "line_start": 164, "line_end": 221}, {"name": "Builder Class", "description": "Class Builder definition and methods.", "line_start": 228, "line_end": 312}, {"name": "BuilderFactory Class", "description": "Class BuilderFactory definition and methods.", "line_start": 327, "line_end": 337}, {"name": "Prototype Class", "description": "Class Prototype definition and methods.", "line_start": 357, "line_end": 408}, {"name": "PrototypeFactory Class", "description": "Class PrototypeFactory definition and methods.", "line_start": 415, "line_end": 447}, {"name": "DependencyInjector Class", "description": "Class DependencyInjector definition and methods.", "line_start": 455, "line_end": 546}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 33, "line_end": 33}], "content_hash": "01daf45065d2721192567828b26316a1"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/state_machine.py
  line_count: 344
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "state_machine.py", "description": "Python module with 0 functions and 8 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StateTransitionError", "line": 20, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised for invalid state transitions."}, {"name": "StateTransition", "line": 25, "inherits_from": [], "methods": [], "properties": [], "description": "Represents a transition between two states in the state machine."}, {"name": "StateEvent", "line": 37, "inherits_from": [], "methods": [], "properties": [], "description": "Defines an event that triggers state transitions."}, {"name": "State", "line": 46, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 49, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str) -> None"}, {"name": "add_entry_action", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an action to execute when entering this state.", "signature": "add_entry_action(self, action: Callable) -> None"}, {"name": "add_exit_action", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an action to execute when exiting this state.", "signature": "add_exit_action(self, action: Callable) -> None"}, {"name": "add_internal_action", "line": 63, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, action: Callable"}, {"name": "action", "type": "Callable"}], "is_async": false, "return_type": "None", "description": "Add an internal action for this state.", "signature": "add_internal_action(self, trigger: str, action: Callable, action: Callable) -> None"}, {"name": "on_entry", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Execute entry actions.", "signature": "async on_entry(self, context: Any) -> None"}, {"name": "on_exit", "line": 78, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "None", "description": "Execute exit actions.", "signature": "async on_exit(self, context: Any) -> None"}, {"name": "on_internal_event", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, context: Any"}, {"name": "context", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Handle internal events within this state.", "signature": "async on_internal_event(self, trigger: str, context: Any, context: Any) -> bool"}], "properties": [], "description": "Represents a state within the state machine, managing its behavior and transitions."}, {"name": "StateMachine", "line": 104, "inherits_from": [], "methods": [{"name": "__init__", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "initial_state", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, initial_state: str) -> None"}, {"name": "add_state", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "State"}], "is_async": false, "return_type": "None", "description": "Add a state to the state machine.", "signature": "add_state(self, state: State) -> None"}, {"name": "add_transition", "line": 123, "parameters": [{"name": "self", "type": "self"}, {"name": "transition", "type": "StateTransition"}], "is_async": false, "return_type": "None", "description": "Add a transition to the state machine.", "signature": "add_transition(self, transition: StateTransition) -> None"}, {"name": "get_valid_transitions", "line": 130, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "str"}], "is_async": false, "return_type": "list[StateTransition]", "description": "Get all valid transitions from a state.", "signature": "get_valid_transitions(self, state: str) -> list[StateTransition]"}, {"name": "can_transition", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "from_state", "type": "str, trigger: str"}, {"name": "trigger", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if a transition is valid.", "signature": "can_transition(self, from_state: str, trigger: str, trigger: str) -> bool"}, {"name": "start", "line": 151, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any = None", "default": "None"}], "is_async": true, "return_type": "None", "description": "Start the state machine.", "signature": "async start(self, context: Any = None = None) -> None"}, {"name": "trigger", "line": 165, "parameters": [{"name": "self", "type": "self"}, {"name": "trigger", "type": "str, event_data: Any = None"}, {"name": "event_data", "type": "Any = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Trigger a state transition.", "signature": "async trigger(self, trigger: str, event_data: Any = None, event_data: Any = None = None) -> bool"}, {"name": "_execute_transition", "line": 204, "parameters": [{"name": "self", "type": "self"}, {"name": "transition", "type": "StateTransition"}, {"name": "event_data", "type": "Any"}], "is_async": true, "return_type": "bool", "description": "Execute a state transition.", "signature": "async _execute_transition(self, transition: StateTransition, event_data: Any) -> bool"}, {"name": "get_current_state", "line": 242, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str | None", "description": "Get the current state.", "signature": "get_current_state(self) -> str | None"}, {"name": "get_state_history", "line": 246, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[tuple[str, str, datetime]]", "description": "Get the state transition history.", "signature": "get_state_history(self) -> list[tuple[str, str, datetime]]"}, {"name": "is_in_state", "line": 250, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Check if the state machine is in a specific state.", "signature": "is_in_state(self, state: str) -> bool"}, {"name": "get_available_triggers", "line": 254, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[str]", "description": "Get all available triggers for the current state.", "signature": "get_available_triggers(self) -> list[str]"}], "properties": [], "description": "Manages states and transitions, controlling the workflow of the state machine."}, {"name": "StateMachineBuilder", "line": 266, "inherits_from": [], "methods": [{"name": "__init__", "line": 269, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_state", "line": 274, "parameters": [{"name": "self", "type": "self"}, {"name": "state", "type": "State"}], "is_async": false, "return_type": "\"StateMachineBuilder\"", "description": "Add a state to the builder.", "signature": "add_state(self, state: State) -> \"StateMachineBuilder\""}, {"name": "set_initial_state", "line": 279, "parameters": [{"name": "self", "type": "self"}, {"name": "state_name", "type": "str"}], "is_async": false, "return_type": "\"StateMachineBuilder\"", "description": "Set the initial state.", "signature": "set_initial_state(self, state_name: str) -> \"StateMachineBuilder\""}, {"name": "add_transition", "line": 284, "parameters": [{"name": "self", "type": "self"}, {"name": "from_state", "type": "str"}, {"name": "to_state", "type": "str"}, {"name": "trigger", "type": "str"}, {"name": "condition", "type": "Callable | None", "default": "None"}, {"name": "action", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "\"StateMachineBuilder\"", "description": "Add a transition to the builder.", "signature": "add_transition(self, from_state: str, to_state: str, trigger: str, condition: Callable | None = None, action: Callable | None = None) -> \"StateMachineBuilder\""}, {"name": "build", "line": 303, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "StateMachine", "description": "Build the state machine.", "signature": "build(self) -> StateMachine"}], "properties": [], "description": "Facilitates the construction and configuration of a state machine."}, {"name": "SimpleState", "line": 329, "inherits_from": ["State):"], "methods": [{"name": "__init__", "line": 332, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str) -> None"}], "properties": [], "description": "A basic implementation of a state with minimal behavior."}, {"name": "WorkflowState", "line": 336, "inherits_from": ["State):"], "methods": [{"name": "__init__", "line": 339, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, description: str = \"\""}, {"name": "description", "type": "str = \"\"", "default": ""}], "is_async": false, "return_type": "None", "signature": "__init__(self, name: str, description: str = \"\", description: str = \"\" = ) -> None"}, {"name": "add_metadata", "line": 344, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, value: Any"}, {"name": "value", "type": "Any"}], "is_async": false, "return_type": "None", "description": "Add metadata to the state.", "signature": "add_metadata(self, key: str, value: Any, value: Any) -> None"}], "properties": [], "description": "A state that supports workflow-specific features and actions."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "collections.abc", "alias": null, "line": 12, "statement": "from collections.abc import Callable"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import field"}, {"module": "datetime", "alias": null, "line": 14, "statement": "from datetime import datetime"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from collections.abc import Callable", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from dataclasses import field", "type": "import", "line": 13}, {"name": "from datetime import datetime", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "StateTransitionError", "type": "class", "line": 20}, {"name": "StateTransition", "type": "class", "line": 25}, {"name": "StateEvent", "type": "class", "line": 37}, {"name": "State", "type": "class", "line": 46}, {"name": "StateMachine", "type": "class", "line": 104}, {"name": "StateMachineBuilder", "type": "class", "line": 266}, {"name": "SimpleState", "type": "class", "line": 329}, {"name": "WorkflowState", "type": "class", "line": 336}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "StateTransitionError Class", "description": "Class StateTransitionError definition and methods.", "line_start": 20, "line_end": 30}, {"name": "StateTransition Class", "description": "Class StateTransition definition and methods.", "line_start": 25, "line_end": 35}, {"name": "StateEvent Class", "description": "Class StateEvent definition and methods.", "line_start": 37, "line_end": 47}, {"name": "State Class", "description": "Class State definition and methods.", "line_start": 46, "line_end": 92}, {"name": "StateMachine Class", "description": "Class StateMachine definition and methods.", "line_start": 104, "line_end": 257}, {"name": "StateMachineBuilder Class", "description": "Class StateMachineBuilder definition and methods.", "line_start": 266, "line_end": 306}, {"name": "SimpleState Class", "description": "Class SimpleState definition and methods.", "line_start": 329, "line_end": 335}, {"name": "WorkflowState Class", "description": "Class WorkflowState definition and methods.", "line_start": 336, "line_end": 347}], "content_hash": "fee23ec699db972620c707a40d105593"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/dependency_injection.py
  line_count: 339
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "dependency_injection.py", "description": "Python module with 4 functions and 7 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "inject", "line": 230, "parameters": [{"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Retrieves an instance of the specified service type from the dependency container.", "signature": "inject(service_type: type[T]) -> T"}, {"name": "get_container", "line": 325, "parameters": [], "is_async": false, "return_type": "DependencyContainer", "description": "Returns the current global dependency container instance.", "signature": "get_container() -> DependencyContainer"}, {"name": "set_container", "line": 333, "parameters": [{"name": "container", "type": "DependencyContainer"}], "is_async": false, "return_type": "None", "description": "Sets the global dependency container to the provided instance.", "signature": "set_container(container: DependencyContainer) -> None"}, {"name": "resolve", "line": 339, "parameters": [{"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Resolves and returns an instance of the specified service type from the container.", "signature": "resolve(service_type: type[T]) -> T"}], "classes": [{"name": "LifecycleScope", "line": 20, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "SINGLETON", "line": 21, "type": ""}, {"name": "TRANSIENT", "line": 22, "type": ""}, {"name": "REQUEST", "line": 23, "type": ""}, {"name": "SESSION", "line": 24, "type": ""}], "description": "Represents the lifecycle scope of a service instance within the dependency injection system."}, {"name": "DependencyResolutionError", "line": 29, "inherits_from": ["Exception):"], "methods": [], "properties": [], "description": "Exception raised when a dependency cannot be resolved from the container."}, {"name": "ServiceDescriptor", "line": 34, "inherits_from": [], "methods": [], "properties": [], "description": "Describes a service registration including its type, implementation, and lifecycle."}, {"name": "DependencyContainer", "line": 48, "inherits_from": [], "methods": [{"name": "__init__", "line": 51, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register", "line": 57, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}, {"name": "scope", "type": "LifecycleScope", "default": "LifecycleScope.TRANSIENT"}], "is_async": false, "return_type": "None", "description": "Register a service with the container.", "signature": "register(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None, scope: LifecycleScope = LifecycleScope.TRANSIENT) -> None"}, {"name": "register_singleton", "line": 76, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a singleton service.", "signature": "register_singleton(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> None"}, {"name": "register_transient", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a transient service.", "signature": "register_transient(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> None"}, {"name": "register_scoped", "line": 104, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "None", "description": "Register a scoped service.", "signature": "register_scoped(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> None"}, {"name": "resolve", "line": 118, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Resolve a service instance.", "signature": "resolve(self, service_type: type[T]) -> T"}, {"name": "_create_instance", "line": 147, "parameters": [{"name": "self", "type": "self"}, {"name": "descriptor", "type": "ServiceDescriptor"}], "is_async": false, "return_type": "Any", "description": "Create a new instance of a service.", "signature": "_create_instance(self, descriptor: ServiceDescriptor) -> Any"}, {"name": "_create_instance_from_type", "line": 164, "parameters": [{"name": "self", "type": "self"}, {"name": "type_class", "type": "type"}], "is_async": false, "return_type": "Any", "description": "Create an instance from a type, resolving dependencies.", "signature": "_create_instance_from_type(self, type_class: type) -> Any"}, {"name": "scope", "line": 192, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create a new scope for scoped services.", "signature": "scope(self)"}, {"name": "is_registered", "line": 201, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type"}], "is_async": false, "return_type": "bool", "description": "Check if a service is registered.", "signature": "is_registered(self, service_type: type) -> bool"}, {"name": "get_registered_services", "line": 205, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[type]", "description": "Get all registered service types.", "signature": "get_registered_services(self) -> list[type]"}, {"name": "clear", "line": 209, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Clear all registrations and instances.", "signature": "clear(self) -> None"}], "properties": [], "description": "Manages service registrations and resolves service instances based on their descriptors."}, {"name": "Injectable", "line": 218, "inherits_from": [], "methods": [{"name": "__init__", "line": 221, "parameters": [{"name": "self", "type": "self"}, {"name": "scope", "type": "LifecycleScope = LifecycleScope.TRANSIENT", "default": "LifecycleScope.TRANSIENT"}], "is_async": false, "return_type": "None", "signature": "__init__(self, scope: LifecycleScope = LifecycleScope.TRANSIENT = LifecycleScope.TRANSIENT) -> None"}, {"name": "__call__", "line": 224, "parameters": [{"name": "self", "type": "self"}, {"name": "cls", "type": "type[T]"}], "is_async": false, "return_type": "type[T]", "description": "Mark a class as injectable.", "signature": "__call__(self, cls: type[T]) -> type[T]"}], "properties": [], "description": "Base class or interface indicating that a class supports dependency injection."}, {"name": "ServiceProvider", "line": 255, "inherits_from": [], "methods": [{"name": "__init__", "line": 258, "parameters": [{"name": "self", "type": "self"}, {"name": "container", "type": "DependencyContainer"}], "is_async": false, "return_type": "None", "signature": "__init__(self, container: DependencyContainer) -> None"}, {"name": "get_service", "line": 261, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Get a service instance.", "signature": "get_service(self, service_type: type[T]) -> T"}, {"name": "get_required_service", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T", "description": "Get a required service instance.", "signature": "get_required_service(self, service_type: type[T]) -> T"}, {"name": "get_optional_service", "line": 273, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}], "is_async": false, "return_type": "T | None", "description": "Get an optional service instance.", "signature": "get_optional_service(self, service_type: type[T]) -> T | None"}], "properties": [], "description": "Provides service instances by resolving dependencies from a container."}, {"name": "ServiceCollection", "line": 280, "inherits_from": [], "methods": [{"name": "__init__", "line": 283, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_singleton", "line": 286, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "\"ServiceCollection\"", "description": "Add a singleton service.", "signature": "add_singleton(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> \"ServiceCollection\""}, {"name": "add_transient", "line": 296, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "\"ServiceCollection\"", "description": "Add a transient service.", "signature": "add_transient(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> \"ServiceCollection\""}, {"name": "add_scoped", "line": 306, "parameters": [{"name": "self", "type": "self"}, {"name": "service_type", "type": "type[T]"}, {"name": "implementation_type", "type": "type[T] | None", "default": "None"}, {"name": "factory", "type": "Callable | None", "default": "None"}], "is_async": false, "return_type": "\"ServiceCollection\"", "description": "Add a scoped service.", "signature": "add_scoped(self, service_type: type[T], implementation_type: type[T] | None = None, factory: Callable | None = None) -> \"ServiceCollection\""}, {"name": "build_service_provider", "line": 316, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "ServiceProvider", "description": "Build the service provider.", "signature": "build_service_provider(self) -> ServiceProvider"}], "properties": [], "description": "Maintains a collection of service descriptors for configuring dependency injection."}], "imports": [{"module": "inspect", "alias": null, "line": 9, "statement": "import inspect"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "collections.abc", "alias": null, "line": 11, "statement": "from collections.abc import Callable"}, {"module": "contextlib", "alias": null, "line": 12, "statement": "from contextlib import contextmanager"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 14, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 15, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 45, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "inspect", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 11}, {"name": "from contextlib import contextmanager", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from dataclasses import field", "type": "import", "line": 13}, {"name": "from enum import Enum", "type": "import", "line": 14}, {"name": "from typing import Any", "type": "import", "line": 15}, {"name": "from typing import TypeVar", "type": "import", "line": 15}, {"name": "LifecycleScope", "type": "class", "line": 20}, {"name": "DependencyResolutionError", "type": "class", "line": 29}, {"name": "ServiceDescriptor", "type": "class", "line": 34}, {"name": "T", "type": "constant", "line": 45}, {"name": "DependencyContainer", "type": "class", "line": 48}, {"name": "Injectable", "type": "class", "line": 218}, {"name": "inject", "type": "function", "line": 230}, {"name": "ServiceProvider", "type": "class", "line": 255}, {"name": "ServiceCollection", "type": "class", "line": 280}, {"name": "get_container", "type": "function", "line": 325}, {"name": "set_container", "type": "function", "line": 333}, {"name": "resolve", "type": "function", "line": 339}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "inject Function", "description": "Function inject implementation.", "line_start": 230, "line_end": 254}, {"name": "get_container Function", "description": "Function get_container implementation.", "line_start": 325, "line_end": 332}, {"name": "set_container Function", "description": "Function set_container implementation.", "line_start": 333, "line_end": 338}, {"name": "resolve Function", "description": "Function resolve implementation.", "line_start": 339, "line_end": 344}, {"name": "LifecycleScope Class", "description": "Class LifecycleScope definition and methods.", "line_start": 20, "line_end": 30}, {"name": "DependencyResolutionError Class", "description": "Class DependencyResolutionError definition and methods.", "line_start": 29, "line_end": 39}, {"name": "ServiceDescriptor Class", "description": "Class ServiceDescriptor definition and methods.", "line_start": 34, "line_end": 44}, {"name": "DependencyContainer Class", "description": "Class DependencyContainer definition and methods.", "line_start": 48, "line_end": 212}, {"name": "Injectable Class", "description": "Class Injectable definition and methods.", "line_start": 218, "line_end": 227}, {"name": "ServiceProvider Class", "description": "Class ServiceProvider definition and methods.", "line_start": 255, "line_end": 276}, {"name": "ServiceCollection Class", "description": "Class ServiceCollection definition and methods.", "line_start": 280, "line_end": 319}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 45, "line_end": 45}], "content_hash": "1c14a0dde8c0d2403b308d516c7949df"}'
- path: libs/opsvi-foundation/opsvi_foundation/patterns/strategy.py
  line_count: 254
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "strategy.py", "description": "Python module with 0 functions and 13 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "StrategyType", "line": 18, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "CACHING", "line": 19, "type": ""}, {"name": "ENCRYPTION", "line": 20, "type": ""}, {"name": "COMPRESSION", "line": 21, "type": ""}, {"name": "SERIALIZATION", "line": 22, "type": ""}, {"name": "VALIDATION", "line": 23, "type": ""}, {"name": "AUTHENTICATION", "line": 24, "type": ""}, {"name": "RATE_LIMITING", "line": 25, "type": ""}, {"name": "RETRY", "line": 26, "type": ""}, {"name": "FALLBACK", "line": 27, "type": ""}], "description": "Enumeration of different strategy types."}, {"name": "Strategy", "line": 35, "inherits_from": ["ABC", "Generic[T]):"], "methods": [{"name": "execute", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "T", "description": "Execute the strategy with given context.", "signature": "execute(self, context: Any) -> T"}, {"name": "get_name", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get the strategy name.", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class defining the interface for all strategies."}, {"name": "StrategyContext", "line": 47, "inherits_from": [], "methods": [{"name": "__init__", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy", "type": "Strategy"}], "is_async": false, "return_type": "None", "signature": "__init__(self, strategy: Strategy) -> None"}, {"name": "set_strategy", "line": 54, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy", "type": "Strategy"}], "is_async": false, "return_type": "None", "description": "Set a new strategy.", "signature": "set_strategy(self, strategy: Strategy) -> None"}, {"name": "execute_strategy", "line": 59, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the current strategy.", "signature": "execute_strategy(self, context: Any) -> Any"}], "properties": [], "description": "Context class that maintains a reference to a Strategy object and delegates execution."}, {"name": "StrategyRegistry", "line": 70, "inherits_from": [], "methods": [{"name": "__init__", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "register", "line": 77, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str"}, {"name": "name", "type": "str"}, {"name": "strategy_class", "type": "type[Strategy]"}], "is_async": false, "return_type": "None", "description": "Register a strategy.", "signature": "register(self, strategy_type: str, name: str, strategy_class: type[Strategy]) -> None"}, {"name": "unregister", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Unregister a strategy.", "signature": "unregister(self, strategy_type: str, name: str, name: str) -> None"}, {"name": "get_strategy", "line": 98, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Get a strategy instance by type and name.", "signature": "get_strategy(self, strategy_type: str, name: str, name: str) -> Strategy"}, {"name": "get_default_strategy", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Get the default strategy for a type.", "signature": "get_default_strategy(self, strategy_type: str) -> Strategy"}, {"name": "set_default_strategy", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "Set the default strategy for a type.", "signature": "set_default_strategy(self, strategy_type: str, name: str, name: str) -> None"}, {"name": "list_strategies", "line": 128, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "List all registered strategies.", "signature": "list_strategies(self, strategy_type: str | None = None = None) -> dict[str, Any]"}], "properties": [], "description": "Registry that manages the registration and retrieval of strategy instances."}, {"name": "StrategyFactory", "line": 149, "inherits_from": [], "methods": [{"name": "create_strategy", "line": 153, "parameters": [{"name": "strategy_type", "type": "str, name: str"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Create a strategy instance.", "signature": "create_strategy(strategy_type: str, name: str, name: str) -> Strategy"}, {"name": "create_default_strategy", "line": 158, "parameters": [{"name": "strategy_type", "type": "str"}], "is_async": false, "return_type": "Strategy", "description": "Create a default strategy instance.", "signature": "create_default_strategy(strategy_type: str) -> Strategy"}], "properties": [], "description": "Factory class responsible for creating strategy instances based on configuration."}, {"name": "StrategyConfig", "line": 164, "inherits_from": [], "methods": [{"name": "__post_init__", "line": 171, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__post_init__(self) -> None"}], "properties": [], "description": "Configuration holder for strategy parameters and settings."}, {"name": "StrategySelector", "line": 176, "inherits_from": [], "methods": [{"name": "__init__", "line": 179, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "signature": "__init__(self) -> None"}, {"name": "add_rule", "line": 182, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, rule: callable"}, {"name": "rule", "type": "callable"}], "is_async": false, "return_type": "None", "description": "Add a selection rule for a strategy type.", "signature": "add_rule(self, strategy_type: str, rule: callable, rule: callable) -> None"}, {"name": "select_strategy", "line": 187, "parameters": [{"name": "self", "type": "self"}, {"name": "strategy_type", "type": "str, context: Any"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "Strategy", "description": "Select the best strategy based on context.", "signature": "select_strategy(self, strategy_type: str, context: Any, context: Any) -> Strategy"}], "properties": [], "description": "Component that selects an appropriate strategy based on given criteria."}, {"name": "CachingStrategy", "line": 201, "inherits_from": ["Strategy[bool]):"], "methods": [{"name": "get_name", "line": 204, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class defining the interface for caching strategies."}, {"name": "MemoryCachingStrategy", "line": 208, "inherits_from": ["CachingStrategy):"], "methods": [{"name": "execute", "line": 211, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bool", "signature": "execute(self, context: Any) -> bool"}, {"name": "get_name", "line": 215, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Caching strategy implementation that stores data in memory."}, {"name": "RedisCachingStrategy", "line": 219, "inherits_from": ["CachingStrategy):"], "methods": [{"name": "execute", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bool", "signature": "execute(self, context: Any) -> bool"}, {"name": "get_name", "line": 226, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Caching strategy implementation that stores data in a Redis datastore."}, {"name": "EncryptionStrategy", "line": 230, "inherits_from": ["Strategy[bytes]):"], "methods": [{"name": "get_name", "line": 233, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Abstract base class defining the interface for encryption strategies."}, {"name": "AESEncryptionStrategy", "line": 237, "inherits_from": ["EncryptionStrategy):"], "methods": [{"name": "execute", "line": 240, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bytes", "signature": "execute(self, context: Any) -> bytes"}, {"name": "get_name", "line": 244, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Encryption strategy implementation using the AES algorithm."}, {"name": "ChaCha20EncryptionStrategy", "line": 248, "inherits_from": ["EncryptionStrategy):"], "methods": [{"name": "execute", "line": 251, "parameters": [{"name": "self", "type": "self"}, {"name": "context", "type": "Any"}], "is_async": false, "return_type": "bytes", "signature": "execute(self, context: Any) -> bytes"}, {"name": "get_name", "line": 255, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "signature": "get_name(self) -> str"}], "properties": [], "description": "Encryption strategy implementation using the ChaCha20 algorithm."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "dataclasses", "alias": null, "line": 11, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 12, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import Generic"}, {"module": "typing", "alias": null, "line": 13, "statement": "from typing import TypeVar"}], "constants": [{"name": "T", "line": 32, "value": "TypeVar(\"T\")", "type": ""}]}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 11}, {"name": "from enum import Enum", "type": "import", "line": 12}, {"name": "from typing import Any", "type": "import", "line": 13}, {"name": "from typing import Generic", "type": "import", "line": 13}, {"name": "from typing import TypeVar", "type": "import", "line": 13}, {"name": "StrategyType", "type": "class", "line": 18}, {"name": "T", "type": "constant", "line": 32}, {"name": "Strategy", "type": "class", "line": 35}, {"name": "StrategyContext", "type": "class", "line": 47}, {"name": "StrategyRegistry", "type": "class", "line": 70}, {"name": "StrategyFactory", "type": "class", "line": 149}, {"name": "StrategyConfig", "type": "class", "line": 164}, {"name": "StrategySelector", "type": "class", "line": 176}, {"name": "CachingStrategy", "type": "class", "line": 201}, {"name": "MemoryCachingStrategy", "type": "class", "line": 208}, {"name": "RedisCachingStrategy", "type": "class", "line": 219}, {"name": "EncryptionStrategy", "type": "class", "line": 230}, {"name": "AESEncryptionStrategy", "type": "class", "line": 237}, {"name": "ChaCha20EncryptionStrategy", "type": "class", "line": 248}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "StrategyType Class", "description": "Class StrategyType definition and methods.", "line_start": 18, "line_end": 28}, {"name": "Strategy Class", "description": "Class Strategy definition and methods.", "line_start": 35, "line_end": 46}, {"name": "StrategyContext Class", "description": "Class StrategyContext definition and methods.", "line_start": 47, "line_end": 62}, {"name": "StrategyRegistry Class", "description": "Class StrategyRegistry definition and methods.", "line_start": 70, "line_end": 131}, {"name": "StrategyFactory Class", "description": "Class StrategyFactory definition and methods.", "line_start": 149, "line_end": 161}, {"name": "StrategyConfig Class", "description": "Class StrategyConfig definition and methods.", "line_start": 164, "line_end": 174}, {"name": "StrategySelector Class", "description": "Class StrategySelector definition and methods.", "line_start": 176, "line_end": 190}, {"name": "CachingStrategy Class", "description": "Class CachingStrategy definition and methods.", "line_start": 201, "line_end": 207}, {"name": "MemoryCachingStrategy Class", "description": "Class MemoryCachingStrategy definition and methods.", "line_start": 208, "line_end": 218}, {"name": "RedisCachingStrategy Class", "description": "Class RedisCachingStrategy definition and methods.", "line_start": 219, "line_end": 229}, {"name": "EncryptionStrategy Class", "description": "Class EncryptionStrategy definition and methods.", "line_start": 230, "line_end": 236}, {"name": "AESEncryptionStrategy Class", "description": "Class AESEncryptionStrategy definition and methods.", "line_start": 237, "line_end": 247}, {"name": "ChaCha20EncryptionStrategy Class", "description": "Class ChaCha20EncryptionStrategy definition and methods.", "line_start": 248, "line_end": 258}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 32, "line_end": 32}], "content_hash": "edcd5b1b6ef9a6571a3d244c40ff6e1e"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/__init__.py
  line_count: 12
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "settings", "alias": null, "line": 9, "statement": "from settings import FoundationConfig"}, {"module": "settings", "alias": null, "line": 9, "statement": "from settings import config"}], "constants": []}, "key_elements": [{"name": "from settings import FoundationConfig", "type": "import", "line": 9}, {"name": "from settings import config", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "0dfa0d395b75aa40fb4f584e65899b9d"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/settings.py
  line_count: 71
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "settings.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "FoundationConfig", "line": 14, "inherits_from": ["BaseModel):"], "methods": [{"name": "from_env", "line": 42, "parameters": [{"name": "cls", "type": "self"}], "is_async": false, "return_type": "\"FoundationConfig\"", "description": "Create configuration from environment variables.", "signature": "from_env(cls) -> \"FoundationConfig\""}, {"name": "validate", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Validate configuration settings.", "signature": "validate(self) -> None"}], "properties": [], "description": "Manages configuration settings for the foundation module."}], "imports": [{"module": "os", "alias": null, "line": 9, "statement": "import os"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import Field"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 9}, {"name": "from pydantic import BaseModel", "type": "import", "line": 11}, {"name": "from pydantic import Field", "type": "import", "line": 11}, {"name": "FoundationConfig", "type": "class", "line": 14}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}, {"name": "FoundationConfig Class", "description": "Class FoundationConfig definition and methods.", "line_start": 14, "line_end": 66}], "content_hash": "17f1f64fc48b891c200fcf8f90c09288"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/secrets.py
  line_count: 521
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "secrets.py", "description": "Python module with 2 functions and 5 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "secret", "line": 481, "parameters": [{"name": "name", "type": "str"}, {"name": "source", "type": "SecretSource"}, {"name": "key", "type": "str"}], "is_async": false, "description": "Retrieves a secret value by name, source, and key with optional parameters.", "signature": "secret(name: str, source: SecretSource, key: str, **kwargs)"}, {"name": "require_secret", "line": 506, "parameters": [{"name": "name", "type": "str):"}], "is_async": false, "description": "Ensures that a secret with the given name exists and is accessible.", "signature": "require_secret(name: str):)"}], "classes": [{"name": "SecretError", "line": 23, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to secret handling."}, {"name": "SecretSource", "line": 27, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "ENVIRONMENT", "line": 28, "type": ""}, {"name": "FILE", "line": 29, "type": ""}, {"name": "VAULT", "line": 30, "type": ""}, {"name": "AWS_SECRETS_MANAGER", "line": 31, "type": ""}, {"name": "AZURE_KEY_VAULT", "line": 32, "type": ""}, {"name": "GOOGLE_SECRET_MANAGER", "line": 33, "type": ""}], "description": "Represents a source from which secrets can be retrieved."}, {"name": "SecretConfig", "line": 39, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration settings for secret management."}, {"name": "SecretManager", "line": 52, "inherits_from": [], "methods": [{"name": "__init__", "line": 55, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize secret manager.", "signature": "__init__(self)"}, {"name": "add_secret", "line": 61, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "None", "description": "\n        Add secret configuration.\n\n        Args:\n            config: Secret configuration\n        ", "signature": "add_secret(self, config: SecretConfig) -> None"}, {"name": "remove_secret", "line": 70, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove secret configuration.\n\n        Args:\n            name: Secret name\n        ", "signature": "remove_secret(self, name: str) -> None"}, {"name": "get_secret", "line": 80, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, refresh: bool = False"}, {"name": "refresh", "type": "bool = False", "default": "False"}], "is_async": false, "return_type": "str | None", "description": "\n        Get secret value.\n\n        Args:\n            name: Secret name\n            refresh: Whether to refresh from source\n\n        Returns:\n            Secret value or None if not found\n        ", "signature": "get_secret(self, name: str, refresh: bool = False, refresh: bool = False = False) -> str | None"}, {"name": "_load_secret", "line": 108, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "\n        Load secret from source.\n\n        Args:\n            config: Secret configuration\n\n        Returns:\n            Secret value or None if not found\n        ", "signature": "_load_secret(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_environment", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from environment variable.", "signature": "_load_from_environment(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_file", "line": 139, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from file.", "signature": "_load_from_file(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_vault", "line": 152, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from HashiCorp Vault.", "signature": "_load_from_vault(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_aws_secrets_manager", "line": 185, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from AWS Secrets Manager.", "signature": "_load_from_aws_secrets_manager(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_azure_key_vault", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from Azure Key Vault.", "signature": "_load_from_azure_key_vault(self, config: SecretConfig) -> str | None"}, {"name": "_load_from_google_secret_manager", "line": 243, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SecretConfig"}], "is_async": false, "return_type": "str | None", "description": "Load secret from Google Secret Manager.", "signature": "_load_from_google_secret_manager(self, config: SecretConfig) -> str | None"}, {"name": "set_encryption_key", "line": 271, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str | bytes"}], "is_async": false, "return_type": "None", "description": "\n        Set encryption key for decrypting secrets.\n\n        Args:\n            key: Encryption key\n        ", "signature": "set_encryption_key(self, key: str | bytes) -> None"}, {"name": "_decrypt_value", "line": 283, "parameters": [{"name": "self", "type": "self"}, {"name": "encrypted_value", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "\n        Decrypt a value.\n\n        Args:\n            encrypted_value: Encrypted value\n\n        Returns:\n            Decrypted value or None if decryption fails\n        ", "signature": "_decrypt_value(self, encrypted_value: str) -> str | None"}, {"name": "encrypt_value", "line": 308, "parameters": [{"name": "self", "type": "self"}, {"name": "value", "type": "str"}], "is_async": false, "return_type": "str", "description": "\n        Encrypt a value.\n\n        Args:\n            value: Value to encrypt\n\n        Returns:\n            Encrypted value\n        ", "signature": "encrypt_value(self, value: str) -> str"}, {"name": "refresh_secrets", "line": 329, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Refresh all secrets from their sources.", "signature": "refresh_secrets(self) -> None"}, {"name": "get_secret_hash", "line": 335, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "\n        Get hash of secret value for comparison.\n\n        Args:\n            name: Secret name\n\n        Returns:\n            Hash of secret value or None if not found\n        ", "signature": "get_secret_hash(self, name: str) -> str | None"}, {"name": "validate_secrets", "line": 350, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, bool]", "description": "\n        Validate all configured secrets.\n\n        Returns:\n            Dictionary mapping secret names to validation status\n        ", "signature": "validate_secrets(self) -> dict[str, bool]"}], "properties": [], "description": "Manages retrieval, storage, and lifecycle of secrets."}, {"name": "SecretRotator", "line": 367, "inherits_from": [], "methods": [{"name": "__init__", "line": 370, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_manager", "type": "SecretManager):"}], "is_async": false, "description": "\n        Initialize secret rotator.\n\n        Args:\n            secret_manager: Secret manager instance\n        ", "signature": "__init__(self, secret_manager: SecretManager):)"}, {"name": "should_rotate", "line": 380, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Check if secret should be rotated.\n\n        Args:\n            secret_name: Secret name\n\n        Returns:\n            True if secret should be rotated\n        ", "signature": "should_rotate(self, secret_name: str) -> bool"}, {"name": "rotate_secret", "line": 407, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str, new_value: str"}, {"name": "new_value", "type": "str"}], "is_async": false, "return_type": "bool", "description": "\n        Rotate a secret.\n\n        Args:\n            secret_name: Secret name\n            new_value: New secret value\n\n        Returns:\n            True if rotation successful\n        ", "signature": "rotate_secret(self, secret_name: str, new_value: str, new_value: str) -> bool"}, {"name": "get_rotation_history", "line": 464, "parameters": [{"name": "self", "type": "self"}, {"name": "secret_name", "type": "str"}], "is_async": false, "return_type": "list", "description": "\n        Get rotation history for a secret.\n\n        Args:\n            secret_name: Secret name\n\n        Returns:\n            List of rotation records\n        ", "signature": "get_rotation_history(self, secret_name: str) -> list"}], "properties": [], "description": "Handles automatic rotation and updating of secrets."}], "imports": [{"module": "base64", "alias": null, "line": 12, "statement": "import base64"}, {"module": "hashlib", "alias": null, "line": 13, "statement": "import hashlib"}, {"module": "json", "alias": null, "line": 14, "statement": "import json"}, {"module": "os", "alias": null, "line": 15, "statement": "import os"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "dataclasses", "alias": null, "line": 16, "statement": "from dataclasses import dataclass"}, {"module": "enum", "alias": null, "line": 17, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 18, "statement": "from pathlib import Path"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 20, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "base64", "type": "import", "line": 12}, {"name": "hashlib", "type": "import", "line": 13}, {"name": "json", "type": "import", "line": 14}, {"name": "os", "type": "import", "line": 15}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 16}, {"name": "from enum import Enum", "type": "import", "line": 17}, {"name": "from pathlib import Path", "type": "import", "line": 18}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 20}, {"name": "SecretError", "type": "class", "line": 23}, {"name": "SecretSource", "type": "class", "line": 27}, {"name": "SecretConfig", "type": "class", "line": 39}, {"name": "SecretManager", "type": "class", "line": 52}, {"name": "SecretRotator", "type": "class", "line": 367}, {"name": "secret", "type": "function", "line": 481}, {"name": "require_secret", "type": "function", "line": 506}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 20}, {"name": "secret Function", "description": "Function secret implementation.", "line_start": 481, "line_end": 505}, {"name": "require_secret Function", "description": "Function require_secret implementation.", "line_start": 506, "line_end": 511}, {"name": "SecretError Class", "description": "Class SecretError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "SecretSource Class", "description": "Class SecretSource definition and methods.", "line_start": 27, "line_end": 37}, {"name": "SecretConfig Class", "description": "Class SecretConfig definition and methods.", "line_start": 39, "line_end": 49}, {"name": "SecretManager Class", "description": "Class SecretManager definition and methods.", "line_start": 52, "line_end": 353}, {"name": "SecretRotator Class", "description": "Class SecretRotator definition and methods.", "line_start": 367, "line_end": 467}], "content_hash": "4fe0072e8a609ff9fae23428b30e9c61"}'
- path: libs/opsvi-foundation/opsvi_foundation/config/environments.py
  line_count: 529
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "environments.py", "description": "Python module with 2 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "environment_config", "line": 488, "parameters": [{"name": "environment", "type": "Environment):"}], "is_async": false, "description": "Retrieves the configuration settings for the specified environment.", "signature": "environment_config(environment: Environment):)"}, {"name": "feature_flag", "line": 513, "parameters": [{"name": "flag_name", "type": "str"}, {"name": "default", "type": "bool", "default": "False"}], "is_async": false, "description": "Checks the status of a feature flag, returning its value or a default.", "signature": "feature_flag(flag_name: str, default: bool = False)"}], "classes": [{"name": "EnvironmentError", "line": 22, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to environment operations."}, {"name": "Environment", "line": 26, "inherits_from": ["Enum):"], "methods": [], "properties": [{"name": "DEVELOPMENT", "line": 27, "type": ""}, {"name": "STAGING", "line": 28, "type": ""}, {"name": "PRODUCTION", "line": 29, "type": ""}, {"name": "TESTING", "line": 30, "type": ""}], "description": "Defines an environment with its associated properties and behaviors."}, {"name": "EnvironmentConfig", "line": 36, "inherits_from": [], "methods": [], "properties": [], "description": "Holds configuration details for a specific environment."}, {"name": "EnvironmentDetector", "line": 50, "inherits_from": [], "methods": [{"name": "__init__", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize environment detector.", "signature": "__init__(self)"}, {"name": "detect_environment", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "\n        Detect current environment.\n\n        Returns:\n            Current environment\n        ", "signature": "detect_environment(self) -> Environment"}, {"name": "set_environment", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "None", "description": "\n        Set current environment.\n\n        Args:\n            environment: Environment to set\n        ", "signature": "set_environment(self, environment: Environment) -> None"}, {"name": "get_environment", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "Get current environment.", "signature": "get_environment(self) -> Environment"}, {"name": "is_development", "line": 107, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is development.", "signature": "is_development(self) -> bool"}, {"name": "is_staging", "line": 111, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is staging.", "signature": "is_staging(self) -> bool"}, {"name": "is_production", "line": 115, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is production.", "signature": "is_production(self) -> bool"}, {"name": "is_testing", "line": 119, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is testing.", "signature": "is_testing(self) -> bool"}], "properties": [], "description": "Detects and identifies the current runtime environment."}, {"name": "EnvironmentConfigLoader", "line": 124, "inherits_from": [], "methods": [{"name": "__init__", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "config_dir", "type": "str | None", "default": "None"}], "is_async": false, "description": "\n        Initialize config loader.\n\n        Args:\n            config_dir: Configuration directory path\n        ", "signature": "__init__(self, config_dir: str | None = None)"}, {"name": "load_config", "line": 138, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment | None", "default": "None"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Load configuration for environment.\n\n        Args:\n            environment: Environment to load config for (uses detected if None)\n\n        Returns:\n            Environment configuration\n        ", "signature": "load_config(self, environment: Environment | None = None) -> EnvironmentConfig"}, {"name": "_load_from_file", "line": 168, "parameters": [{"name": "self", "type": "self"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "EnvironmentConfig | None", "description": "\n        Load configuration from file.\n\n        Args:\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration or None if not found\n        ", "signature": "_load_from_file(self, environment_name: str) -> EnvironmentConfig | None"}, {"name": "_parse_config_file", "line": 195, "parameters": [{"name": "self", "type": "self"}, {"name": "config_path", "type": "Path"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Parse configuration file.\n\n        Args:\n            config_path: Path to configuration file\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration\n        ", "signature": "_parse_config_file(self, config_path: Path, environment_name: str) -> EnvironmentConfig"}, {"name": "_create_config_from_dict", "line": 236, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "dict[str, Any]"}, {"name": "environment_name", "type": "str"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Create configuration from dictionary.\n\n        Args:\n            data: Configuration data\n            environment_name: Environment name\n\n        Returns:\n            Environment configuration\n        ", "signature": "_create_config_from_dict(self, data: dict[str, Any], environment_name: str) -> EnvironmentConfig"}, {"name": "_create_default_config", "line": 265, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Create default configuration for environment.\n\n        Args:\n            environment: Environment\n\n        Returns:\n            Default environment configuration\n        ", "signature": "_create_default_config(self, environment: Environment) -> EnvironmentConfig"}, {"name": "save_config", "line": 332, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EnvironmentConfig"}], "is_async": false, "return_type": "None", "description": "\n        Save configuration to file.\n\n        Args:\n            config: Configuration to save\n        ", "signature": "save_config(self, config: EnvironmentConfig) -> None"}, {"name": "reload_config", "line": 357, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment | None", "default": "None"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Reload configuration for environment.\n\n        Args:\n            environment: Environment to reload config for\n\n        Returns:\n            Reloaded environment configuration\n        ", "signature": "reload_config(self, environment: Environment | None = None) -> EnvironmentConfig"}], "properties": [], "description": "Loads environment configuration data from various sources."}, {"name": "EnvironmentManager", "line": 380, "inherits_from": [], "methods": [{"name": "__init__", "line": 383, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize environment manager.", "signature": "__init__(self)"}, {"name": "get_current_config", "line": 389, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Get current environment configuration.\n\n        Returns:\n            Current environment configuration\n        ", "signature": "get_current_config(self) -> EnvironmentConfig"}, {"name": "get_config", "line": 400, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "EnvironmentConfig", "description": "\n        Get configuration for specific environment.\n\n        Args:\n            environment: Environment\n\n        Returns:\n            Environment configuration\n        ", "signature": "get_config(self, environment: Environment) -> EnvironmentConfig"}, {"name": "set_environment", "line": 412, "parameters": [{"name": "self", "type": "self"}, {"name": "environment", "type": "Environment"}], "is_async": false, "return_type": "None", "description": "\n        Set current environment.\n\n        Args:\n            environment: Environment to set\n        ", "signature": "set_environment(self, environment: Environment) -> None"}, {"name": "get_environment", "line": 422, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Environment", "description": "Get current environment.", "signature": "get_environment(self) -> Environment"}, {"name": "is_development", "line": 426, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is development.", "signature": "is_development(self) -> bool"}, {"name": "is_staging", "line": 430, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is staging.", "signature": "is_staging(self) -> bool"}, {"name": "is_production", "line": 434, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is production.", "signature": "is_production(self) -> bool"}, {"name": "is_testing", "line": 438, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if current environment is testing.", "signature": "is_testing(self) -> bool"}, {"name": "get_feature_flag", "line": 442, "parameters": [{"name": "self", "type": "self"}, {"name": "flag_name", "type": "str, default: bool = False"}, {"name": "default", "type": "bool = False", "default": "False"}], "is_async": false, "return_type": "bool", "description": "\n        Get feature flag value.\n\n        Args:\n            flag_name: Feature flag name\n            default: Default value if flag not found\n\n        Returns:\n            Feature flag value\n        ", "signature": "get_feature_flag(self, flag_name: str, default: bool = False, default: bool = False = False) -> bool"}, {"name": "get_api_key", "line": 456, "parameters": [{"name": "self", "type": "self"}, {"name": "service_name", "type": "str"}], "is_async": false, "return_type": "str | None", "description": "\n        Get API key for service.\n\n        Args:\n            service_name: Service name\n\n        Returns:\n            API key or None if not found\n        ", "signature": "get_api_key(self, service_name: str) -> str | None"}, {"name": "get_custom_setting", "line": 469, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "\n        Get custom setting value.\n\n        Args:\n            key: Setting key\n            default: Default value if setting not found\n\n        Returns:\n            Setting value\n        ", "signature": "get_custom_setting(self, key: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Manages environment settings, configurations, and lifecycle operations."}], "imports": [{"module": "json", "alias": null, "line": 12, "statement": "import json"}, {"module": "os", "alias": null, "line": 13, "statement": "import os"}, {"module": "__future__", "alias": null, "line": 10, "statement": "from __future__ import annotations"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import dataclass"}, {"module": "dataclasses", "alias": null, "line": 14, "statement": "from dataclasses import field"}, {"module": "enum", "alias": null, "line": 15, "statement": "from enum import Enum"}, {"module": "pathlib", "alias": null, "line": 16, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 17, "statement": "from typing import Any"}, {"module": "opsvi_foundation.patterns", "alias": null, "line": 19, "statement": "from opsvi_foundation.patterns import ComponentError"}], "constants": []}, "key_elements": [{"name": "json", "type": "import", "line": 12}, {"name": "os", "type": "import", "line": 13}, {"name": "from __future__ import annotations", "type": "import", "line": 10}, {"name": "from dataclasses import dataclass", "type": "import", "line": 14}, {"name": "from dataclasses import field", "type": "import", "line": 14}, {"name": "from enum import Enum", "type": "import", "line": 15}, {"name": "from pathlib import Path", "type": "import", "line": 16}, {"name": "from typing import Any", "type": "import", "line": 17}, {"name": "from opsvi_foundation.patterns import ComponentError", "type": "import", "line": 19}, {"name": "EnvironmentError", "type": "class", "line": 22}, {"name": "Environment", "type": "class", "line": 26}, {"name": "EnvironmentConfig", "type": "class", "line": 36}, {"name": "EnvironmentDetector", "type": "class", "line": 50}, {"name": "EnvironmentConfigLoader", "type": "class", "line": 124}, {"name": "EnvironmentManager", "type": "class", "line": 380}, {"name": "environment_config", "type": "function", "line": 488}, {"name": "feature_flag", "type": "function", "line": 513}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 19}, {"name": "environment_config Function", "description": "Function environment_config implementation.", "line_start": 488, "line_end": 512}, {"name": "feature_flag Function", "description": "Function feature_flag implementation.", "line_start": 513, "line_end": 518}, {"name": "EnvironmentError Class", "description": "Class EnvironmentError definition and methods.", "line_start": 22, "line_end": 32}, {"name": "Environment Class", "description": "Class Environment definition and methods.", "line_start": 26, "line_end": 36}, {"name": "EnvironmentConfig Class", "description": "Class EnvironmentConfig definition and methods.", "line_start": 36, "line_end": 46}, {"name": "EnvironmentDetector Class", "description": "Class EnvironmentDetector definition and methods.", "line_start": 50, "line_end": 122}, {"name": "EnvironmentConfigLoader Class", "description": "Class EnvironmentConfigLoader definition and methods.", "line_start": 124, "line_end": 360}, {"name": "EnvironmentManager Class", "description": "Class EnvironmentManager definition and methods.", "line_start": 380, "line_end": 472}], "content_hash": "b58114aef2d26f8fd3d5841483040752"}'
- path: libs/opsvi-agents/opsvi_agents/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "c11e5a51a58789c731737737c3897509"}'
- path: libs/opsvi-agents/opsvi_agents/collaboration/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "5c3050b038f3f5e56bf4bfbc4846c27a"}'
- path: libs/opsvi-agents/opsvi_agents/observability/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f06ece95da89f27795df49c24e581e27"}'
- path: libs/opsvi-agents/opsvi_agents/adapters/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "9cc707fe19314d4d06c7f43362bab952"}'
- path: libs/opsvi-agents/opsvi_agents/monitoring/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "cff2f31d0db995460bc344ed7f860f4c"}'
- path: libs/opsvi-agents/opsvi_agents/communication/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "02b06865126143c2c6e352e7cb384130"}'
- path: libs/opsvi-agents/opsvi_agents/communication/protocols.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "protocols.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CommunicationError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to communication failures."}, {"name": "CommunicationProtocolsConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for communication protocols."}, {"name": "CommunicationProtocols", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "CommunicationProtocolsConfig):"}], "is_async": false, "description": "Initialize protocols communication.", "signature": "__init__(self, config: CommunicationProtocolsConfig):)"}, {"name": "send", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Any, target: str"}, {"name": "target", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Send a message.", "signature": "send(self, message: Any, target: str, target: str) -> bool"}, {"name": "receive", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "source", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Receive a message.", "signature": "receive(self, source: str) -> Any | None"}], "properties": [], "description": "Manages and executes different communication protocols."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "CommunicationError", "type": "class", "line": 15}, {"name": "CommunicationProtocolsConfig", "type": "class", "line": 19}, {"name": "CommunicationProtocols", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "CommunicationError Class", "description": "Class CommunicationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "CommunicationProtocolsConfig Class", "description": "Class CommunicationProtocolsConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "CommunicationProtocols Class", "description": "Class CommunicationProtocols definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "f14d78ac5a77eaafb59a79a290015856"}'
- path: libs/opsvi-agents/opsvi_agents/communication/routing.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "routing.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "CommunicationError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors in communication processes."}, {"name": "MessageRoutingConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for message routing behavior."}, {"name": "MessageRouting", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "MessageRoutingConfig):"}], "is_async": false, "description": "Initialize routing communication.", "signature": "__init__(self, config: MessageRoutingConfig):)"}, {"name": "send", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "Any, target: str"}, {"name": "target", "type": "str"}], "is_async": false, "return_type": "bool", "description": "Send a message.", "signature": "send(self, message: Any, target: str, target: str) -> bool"}, {"name": "receive", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "source", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Receive a message.", "signature": "receive(self, source: str) -> Any | None"}], "properties": [], "description": "Handles the routing of messages according to specified configurations."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "CommunicationError", "type": "class", "line": 15}, {"name": "MessageRoutingConfig", "type": "class", "line": 19}, {"name": "MessageRouting", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "CommunicationError Class", "description": "Class CommunicationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "MessageRoutingConfig Class", "description": "Class MessageRoutingConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "MessageRouting Class", "description": "Class MessageRouting definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "17460336e18242128993ff6b23336c88"}'
- path: libs/opsvi-agents/opsvi_agents/core/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "93426d142f684411994c248c6bcbdff1"}'
- path: libs/opsvi-agents/opsvi_agents/core/exceptions.py
  line_count: 38
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentsError", "line": 16, "inherits_from": ["OPSVIError):"], "methods": [{"name": "__init__", "line": 19, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "Optional[dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: Optional[dict[str, Any]] = None)"}], "properties": [], "description": "Base exception class for all agent-related errors."}, {"name": "AgentsConfigurationError", "line": 23, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related errors in agents."}, {"name": "AgentsConnectionError", "line": 27, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised when a connection to an agent fails."}, {"name": "AgentsValidationError", "line": 31, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised for validation errors in agent data or parameters."}, {"name": "AgentsTimeoutError", "line": 35, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised when an operation with an agent times out."}, {"name": "AgentsResourceError", "line": 39, "inherits_from": ["AgentsError):"], "methods": [], "properties": [], "description": "Exception raised when an agent encounters resource-related issues."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_foundation.core.exceptions import OPSVIError"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from opsvi_foundation.core.exceptions import OPSVIError", "type": "import", "line": 13}, {"name": "AgentsError", "type": "class", "line": 16}, {"name": "AgentsConfigurationError", "type": "class", "line": 23}, {"name": "AgentsConnectionError", "type": "class", "line": 27}, {"name": "AgentsValidationError", "type": "class", "line": 31}, {"name": "AgentsTimeoutError", "type": "class", "line": 35}, {"name": "AgentsResourceError", "type": "class", "line": 39}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "AgentsError Class", "description": "Class AgentsError definition and methods.", "line_start": 16, "line_end": 22}, {"name": "AgentsConfigurationError Class", "description": "Class AgentsConfigurationError definition and methods.", "line_start": 23, "line_end": 33}, {"name": "AgentsConnectionError Class", "description": "Class AgentsConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "AgentsValidationError Class", "description": "Class AgentsValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "AgentsTimeoutError Class", "description": "Class AgentsTimeoutError definition and methods.", "line_start": 35, "line_end": 45}, {"name": "AgentsResourceError Class", "description": "Class AgentsResourceError definition and methods.", "line_start": 39, "line_end": 49}], "content_hash": "95e27ab44afff6c0aa891cffce88b85c"}'
- path: libs/opsvi-agents/opsvi_agents/core/config.py
  line_count: 37
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentsConfig", "line": 18, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents configuration settings for agents."}, {"name": "AgentsSettings", "line": 29, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Holds customizable settings for agents."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import Field"}, {"module": "opsvi_foundation.config.settings", "alias": null, "line": 15, "statement": "from opsvi_foundation.config.settings import BaseSettings"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from typing import Dict", "type": "import", "line": 11}, {"name": "from typing import Optional", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "from pydantic import Field", "type": "import", "line": 13}, {"name": "from opsvi_foundation.config.settings import BaseSettings", "type": "import", "line": 15}, {"name": "AgentsConfig", "type": "class", "line": 18}, {"name": "AgentsSettings", "type": "class", "line": 29}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "AgentsConfig Class", "description": "Class AgentsConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "AgentsSettings Class", "description": "Class AgentsSettings definition and methods.", "line_start": 29, "line_end": 39}], "content_hash": "25bcb3654e24ee7d1491ee3c5aec9f69"}'
- path: libs/opsvi-agents/opsvi_agents/core/base.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentsBase", "line": 17, "inherits_from": ["BaseComponent", "ABC):"], "methods": [{"name": "__init__", "line": 20, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "Optional[Dict[str, Any]]", "default": "None"}], "is_async": false, "signature": "__init__(self, config: Optional[Dict[str, Any]] = None)"}, {"name": "initialize", "line": 25, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize the component.", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 30, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Shutdown the component.", "signature": "async shutdown(self) -> None"}, {"name": "health_check", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform health check.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Base class for managing and interacting with multiple agent instances."}], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 11, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Dict"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Optional"}, {"module": "opsvi_foundation.patterns.base", "alias": null, "line": 14, "statement": "from opsvi_foundation.patterns.base import BaseComponent"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 11}, {"name": "from abc import abstractmethod", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import Dict", "type": "import", "line": 12}, {"name": "from typing import Optional", "type": "import", "line": 12}, {"name": "from opsvi_foundation.patterns.base import BaseComponent", "type": "import", "line": 14}, {"name": "AgentsBase", "type": "class", "line": 17}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "AgentsBase Class", "description": "Class AgentsBase definition and methods.", "line_start": 17, "line_end": 38}], "content_hash": "09fdad27a70250b9e0a52f688666c206"}'
- path: libs/opsvi-agents/opsvi_agents/core/types.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "types.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to agent operations."}, {"name": "AgentState", "line": 21, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the state information of an agent."}, {"name": "AgentTypesConfig", "line": 29, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for different agent types."}, {"name": "AgentTypes", "line": 35, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AgentTypesConfig):"}], "is_async": false, "description": "Initialize types.", "signature": "__init__(self, config: AgentTypesConfig):)"}, {"name": "execute", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the types.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Defines various agent types and provides related utility methods."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "AgentError", "type": "class", "line": 16}, {"name": "AgentState", "type": "class", "line": 21}, {"name": "AgentTypesConfig", "type": "class", "line": 29}, {"name": "AgentTypes", "type": "class", "line": 35}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "AgentError Class", "description": "Class AgentError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "AgentState Class", "description": "Class AgentState definition and methods.", "line_start": 21, "line_end": 31}, {"name": "AgentTypesConfig Class", "description": "Class AgentTypesConfig definition and methods.", "line_start": 29, "line_end": 39}, {"name": "AgentTypes Class", "description": "Class AgentTypes definition and methods.", "line_start": 35, "line_end": 47}], "content_hash": "112271e3608ef8950911936d40dc5035"}'
- path: libs/opsvi-agents/opsvi_agents/core/registry.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "registry.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "AgentError", "line": 16, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to agent operations."}, {"name": "AgentState", "line": 21, "inherits_from": [], "methods": [], "properties": [], "description": "Encapsulates the state information of an agent."}, {"name": "AgentRegistryConfig", "line": 29, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for the agent registry."}, {"name": "AgentRegistry", "line": 35, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AgentRegistryConfig):"}], "is_async": false, "description": "Initialize registry.", "signature": "__init__(self, config: AgentRegistryConfig):)"}, {"name": "execute", "line": 44, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the registry.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Manages the registration and lookup of agents."}], "imports": [{"module": "dataclasses", "alias": null, "line": 9, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 12, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 13, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from dataclasses import dataclass", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 12}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 12}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 12}, {"name": "from pydantic import BaseModel", "type": "import", "line": 13}, {"name": "AgentError", "type": "class", "line": 16}, {"name": "AgentState", "type": "class", "line": 21}, {"name": "AgentRegistryConfig", "type": "class", "line": 29}, {"name": "AgentRegistry", "type": "class", "line": 35}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "AgentError Class", "description": "Class AgentError definition and methods.", "line_start": 16, "line_end": 26}, {"name": "AgentState Class", "description": "Class AgentState definition and methods.", "line_start": 21, "line_end": 31}, {"name": "AgentRegistryConfig Class", "description": "Class AgentRegistryConfig definition and methods.", "line_start": 29, "line_end": 39}, {"name": "AgentRegistry Class", "description": "Class AgentRegistry definition and methods.", "line_start": 35, "line_end": 47}], "content_hash": "9f9d20077be3ad1659a119a0c3b60baf"}'
- path: libs/opsvi-agents/opsvi_agents/workflows/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "1dcb5037a6105f71adc3570d69cf9caf"}'
- path: libs/opsvi-agents/opsvi_agents/workflows/sequential.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "sequential.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WorkflowError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors occurring within workflow processing."}, {"name": "SequentialWorkflowConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration class for setting up a sequential workflow."}, {"name": "SequentialWorkflow", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SequentialWorkflowConfig):"}], "is_async": false, "description": "Initialize sequential workflow.", "signature": "__init__(self, config: SequentialWorkflowConfig):)"}, {"name": "execute", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the workflow.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Manages and executes a series of tasks in a defined sequential order."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "WorkflowError", "type": "class", "line": 15}, {"name": "SequentialWorkflowConfig", "type": "class", "line": 19}, {"name": "SequentialWorkflow", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "WorkflowError Class", "description": "Class WorkflowError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "SequentialWorkflowConfig Class", "description": "Class SequentialWorkflowConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "SequentialWorkflow Class", "description": "Class SequentialWorkflow definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "23593f6b4b09426f229d95643d0fc4fa"}'
- path: libs/opsvi-agents/opsvi_agents/workflows/parallel.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "parallel.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WorkflowError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Raised when workflow operations fail."}, {"name": "ParallelWorkflowConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration for parallel workflow."}, {"name": "ParallelWorkflow", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ParallelWorkflowConfig):"}], "is_async": false, "description": "Initialize parallel workflow.", "signature": "__init__(self, config: ParallelWorkflowConfig):)"}, {"name": "execute", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the workflow.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "parallel workflow implementation."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "WorkflowError", "type": "class", "line": 15}, {"name": "ParallelWorkflowConfig", "type": "class", "line": 19}, {"name": "ParallelWorkflow", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "WorkflowError Class", "description": "Class WorkflowError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ParallelWorkflowConfig Class", "description": "Class ParallelWorkflowConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "ParallelWorkflow Class", "description": "Class ParallelWorkflow definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "28704dd11b93784e02fce02d0e98054b"}'
- path: libs/opsvi-agents/opsvi_agents/workflows/conditional.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "conditional.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "WorkflowError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents errors related to workflow processing."}, {"name": "ConditionalWorkflowConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration settings for conditional workflows."}, {"name": "ConditionalWorkflow", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ConditionalWorkflowConfig):"}], "is_async": false, "description": "Initialize conditional workflow.", "signature": "__init__(self, config: ConditionalWorkflowConfig):)"}, {"name": "execute", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Execute the workflow.", "signature": "execute(self, input_data: Any) -> Any"}], "properties": [], "description": "Manages the execution of workflows based on specified conditions."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "WorkflowError", "type": "class", "line": 15}, {"name": "ConditionalWorkflowConfig", "type": "class", "line": 19}, {"name": "ConditionalWorkflow", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "WorkflowError Class", "description": "Class WorkflowError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ConditionalWorkflowConfig Class", "description": "Class ConditionalWorkflowConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "ConditionalWorkflow Class", "description": "Class ConditionalWorkflow definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "fce94c4f12771f5b96d2caa4a43ab0e8"}'
- path: libs/opsvi-agents/opsvi_agents/learning/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "18030fab86e20a05f02ccbde9c05c809"}'
- path: libs/opsvi-agents/opsvi_agents/learning/reinforcement.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "reinforcement.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LearningError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors related to the learning process."}, {"name": "ReinforcementLearningConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration class for setting parameters of the reinforcement learning algorithm."}, {"name": "ReinforcementLearning", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ReinforcementLearningConfig):"}], "is_async": false, "description": "Initialize reinforcement learning.", "signature": "__init__(self, config: ReinforcementLearningConfig):)"}, {"name": "learn", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Learn from the given data.", "signature": "learn(self, data: Any) -> bool"}, {"name": "predict", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Make a prediction.", "signature": "predict(self, input_data: Any) -> Any"}], "properties": [], "description": "Core class implementing the reinforcement learning algorithm with methods to train, evaluate, and update the model."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "LearningError", "type": "class", "line": 15}, {"name": "ReinforcementLearningConfig", "type": "class", "line": 19}, {"name": "ReinforcementLearning", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "LearningError Class", "description": "Class LearningError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ReinforcementLearningConfig Class", "description": "Class ReinforcementLearningConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "ReinforcementLearning Class", "description": "Class ReinforcementLearning definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "37f0f3eb1e4d6b987351c74ce78055bf"}'
- path: libs/opsvi-agents/opsvi_agents/learning/supervised.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "supervised.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "LearningError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Represents an error encountered during the learning process."}, {"name": "SupervisedLearningConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Holds configuration parameters for supervised learning algorithms."}, {"name": "SupervisedLearning", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "SupervisedLearningConfig):"}], "is_async": false, "description": "Initialize supervised learning.", "signature": "__init__(self, config: SupervisedLearningConfig):)"}, {"name": "learn", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Learn from the given data.", "signature": "learn(self, data: Any) -> bool"}, {"name": "predict", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "input_data", "type": "Any"}], "is_async": false, "return_type": "Any", "description": "Make a prediction.", "signature": "predict(self, input_data: Any) -> Any"}], "properties": [], "description": "Implements supervised learning algorithms with methods for training, prediction, and evaluation."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "LearningError", "type": "class", "line": 15}, {"name": "SupervisedLearningConfig", "type": "class", "line": 19}, {"name": "SupervisedLearning", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "LearningError Class", "description": "Class LearningError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "SupervisedLearningConfig Class", "description": "Class SupervisedLearningConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "SupervisedLearning Class", "description": "Class SupervisedLearning definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "6151344f1c4b9279d48a8f7e2c2f23f9"}'
- path: libs/opsvi-agents/opsvi_agents/utils/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "504d5876ad3bb01c5d0768e3bb7e7e23"}'
- path: libs/opsvi-agents/opsvi_agents/tests/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "dd3b57a6a8ceab9ccd9344d9c96729ee"}'
- path: libs/opsvi-agents/opsvi_agents/planning/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "cac26b7ee47f2867d6ba91d0d7fa90b2"}'
- path: libs/opsvi-agents/opsvi_agents/planning/execution.py
  line_count: 39
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "execution.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PlanningError", "line": 14, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors encountered during the planning process."}, {"name": "PlanExecutionConfig", "line": 18, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for executing a plan."}, {"name": "PlanExecution", "line": 24, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "PlanExecutionConfig):"}], "is_async": false, "description": "Initialize execution planning.", "signature": "__init__(self, config: PlanExecutionConfig):)"}, {"name": "plan", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "goal", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Create a plan for the given goal.", "signature": "plan(self, goal: str) -> list[str]"}, {"name": "execute_plan", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "plan", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "Execute the given plan.", "signature": "execute_plan(self, plan: list[str]) -> bool"}], "properties": [], "description": "Manages the execution of a plan, including starting, monitoring, and stopping the process."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 10}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 10}, {"name": "from pydantic import BaseModel", "type": "import", "line": 11}, {"name": "PlanningError", "type": "class", "line": 14}, {"name": "PlanExecutionConfig", "type": "class", "line": 18}, {"name": "PlanExecution", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 11}, {"name": "PlanningError Class", "description": "Class PlanningError definition and methods.", "line_start": 14, "line_end": 24}, {"name": "PlanExecutionConfig Class", "description": "Class PlanExecutionConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "PlanExecution Class", "description": "Class PlanExecution definition and methods.", "line_start": 24, "line_end": 41}], "content_hash": "ed33922a95420dbb34d3506fdf3611f2"}'
- path: libs/opsvi-agents/opsvi_agents/planning/strategies.py
  line_count: 39
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "strategies.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "PlanningError", "line": 14, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors in the planning process."}, {"name": "PlanningStrategiesConfig", "line": 18, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for different planning strategies."}, {"name": "PlanningStrategies", "line": 24, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 27, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "PlanningStrategiesConfig):"}], "is_async": false, "description": "Initialize strategies planning.", "signature": "__init__(self, config: PlanningStrategiesConfig):)"}, {"name": "plan", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "goal", "type": "str"}], "is_async": false, "return_type": "list[str]", "description": "Create a plan for the given goal.", "signature": "plan(self, goal: str) -> list[str]"}, {"name": "execute_plan", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "plan", "type": "list[str]"}], "is_async": false, "return_type": "bool", "description": "Execute the given plan.", "signature": "execute_plan(self, plan: list[str]) -> bool"}], "properties": [], "description": "Implements various planning strategies with methods to execute and manage them."}], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 10, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 10}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 10}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 10}, {"name": "from pydantic import BaseModel", "type": "import", "line": 11}, {"name": "PlanningError", "type": "class", "line": 14}, {"name": "PlanningStrategiesConfig", "type": "class", "line": 18}, {"name": "PlanningStrategies", "type": "class", "line": 24}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 11}, {"name": "PlanningError Class", "description": "Class PlanningError definition and methods.", "line_start": 14, "line_end": 24}, {"name": "PlanningStrategiesConfig Class", "description": "Class PlanningStrategiesConfig definition and methods.", "line_start": 18, "line_end": 28}, {"name": "PlanningStrategies Class", "description": "Class PlanningStrategies definition and methods.", "line_start": 24, "line_end": 41}], "content_hash": "316deeb86412972c4d3de9042253fbf4"}'
- path: libs/opsvi-agents/opsvi_agents/security/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "8cd44a85087184164d138cf465b4a964"}'
- path: libs/opsvi-agents/opsvi_agents/resilience/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "229f7b2c540d154422d4a0f30f40efbb"}'
- path: libs/opsvi-agents/opsvi_agents/memory/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "884ddb9829aa7308f51d0a8bde6503e8"}'
- path: libs/opsvi-agents/opsvi_agents/memory/short_term.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "short_term.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to memory operations."}, {"name": "ShortTermMemoryConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for short-term memory behavior."}, {"name": "ShortTermMemory", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "ShortTermMemoryConfig):"}], "is_async": false, "description": "Initialize short_term memory.", "signature": "__init__(self, config: ShortTermMemoryConfig):)"}, {"name": "store", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data in memory.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data from memory.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "clear", "line": 44, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Clear memory.", "signature": "clear(self) -> bool"}], "properties": [], "description": "Manages short-term memory storage and retrieval."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "MemoryError", "type": "class", "line": 15}, {"name": "ShortTermMemoryConfig", "type": "class", "line": 19}, {"name": "ShortTermMemory", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "MemoryError Class", "description": "Class MemoryError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ShortTermMemoryConfig Class", "description": "Class ShortTermMemoryConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "ShortTermMemory Class", "description": "Class ShortTermMemory definition and methods.", "line_start": 25, "line_end": 47}], "content_hash": "08a218a7f009b04e59e653aa31e1cb06"}'
- path: libs/opsvi-agents/opsvi_agents/memory/episodic.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "episodic.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to memory operations."}, {"name": "EpisodicMemoryConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for episodic memory management."}, {"name": "EpisodicMemory", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "EpisodicMemoryConfig):"}], "is_async": false, "description": "Initialize episodic memory.", "signature": "__init__(self, config: EpisodicMemoryConfig):)"}, {"name": "store", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data in memory.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data from memory.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "clear", "line": 44, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Clear memory.", "signature": "clear(self) -> bool"}], "properties": [], "description": "Manages episodic memory storage and retrieval with methods to add, access, and manipulate memory episodes."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "MemoryError", "type": "class", "line": 15}, {"name": "EpisodicMemoryConfig", "type": "class", "line": 19}, {"name": "EpisodicMemory", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "MemoryError Class", "description": "Class MemoryError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "EpisodicMemoryConfig Class", "description": "Class EpisodicMemoryConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "EpisodicMemory Class", "description": "Class EpisodicMemory definition and methods.", "line_start": 25, "line_end": 47}], "content_hash": "15f1004395b7219f5264b615c193d1f4"}'
- path: libs/opsvi-agents/opsvi_agents/memory/long_term.py
  line_count: 45
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "long_term.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MemoryError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors related to memory operations."}, {"name": "LongTermMemoryConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for initializing long-term memory."}, {"name": "LongTermMemory", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "LongTermMemoryConfig):"}], "is_async": false, "description": "Initialize long_term memory.", "signature": "__init__(self, config: LongTermMemoryConfig):)"}, {"name": "store", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, data: Any"}, {"name": "data", "type": "Any"}], "is_async": false, "return_type": "bool", "description": "Store data in memory.", "signature": "store(self, key: str, data: Any, data: Any) -> bool"}, {"name": "retrieve", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str"}], "is_async": false, "return_type": "Any | None", "description": "Retrieve data from memory.", "signature": "retrieve(self, key: str) -> Any | None"}, {"name": "clear", "line": 44, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Clear memory.", "signature": "clear(self) -> bool"}], "properties": [], "description": "Manages long-term memory storage and retrieval with methods for adding, accessing, and maintaining memory."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "MemoryError", "type": "class", "line": 15}, {"name": "LongTermMemoryConfig", "type": "class", "line": 19}, {"name": "LongTermMemory", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "MemoryError Class", "description": "Class MemoryError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "LongTermMemoryConfig Class", "description": "Class LongTermMemoryConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "LongTermMemory Class", "description": "Class LongTermMemory definition and methods.", "line_start": 25, "line_end": 47}], "content_hash": "cf92ac7287ac356eb872be5da30695b5"}'
- path: libs/opsvi-agents/opsvi_agents/types/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "e12e38fe343b989eae980078f987d0cc"}'
- path: libs/opsvi-agents/opsvi_agents/registry/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "9a8b913ae67cd7d100d9ff5ebd96a722"}'
- path: libs/opsvi-agents/opsvi_agents/deployment/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "87cefa9642c37ca8316e81647e3b0b9d"}'
- path: libs/opsvi-agents/opsvi_agents/tools/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "9e7c398dec69ddd702fe68894d23ace9"}'
- path: libs/opsvi-agents/opsvi_agents/testing/unit.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "unit.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors encountered during testing."}, {"name": "UnitTestingConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for unit testing environment."}, {"name": "UnitTesting", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "UnitTestingConfig):"}], "is_async": false, "description": "Initialize unit testing.", "signature": "__init__(self, config: UnitTestingConfig):)"}, {"name": "test", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Test the given component.", "signature": "test(self, component: Any) -> dict[str, Any]"}, {"name": "simulate", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "scenario", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Simulate the given scenario.", "signature": "simulate(self, scenario: str) -> dict[str, Any]"}], "properties": [], "description": "Class to perform unit testing with setup, execution, and teardown methods."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "TestingError", "type": "class", "line": 15}, {"name": "UnitTestingConfig", "type": "class", "line": 19}, {"name": "UnitTesting", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "TestingError Class", "description": "Class TestingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "UnitTestingConfig Class", "description": "Class UnitTestingConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "UnitTesting Class", "description": "Class UnitTesting definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "4e4ce3713cd926918831065cd35efd4b"}'
- path: libs/opsvi-agents/opsvi_agents/testing/integration.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "integration.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Custom exception class for testing-related errors."}, {"name": "IntegrationTestingConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for integration testing."}, {"name": "IntegrationTesting", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "IntegrationTestingConfig):"}], "is_async": false, "description": "Initialize integration testing.", "signature": "__init__(self, config: IntegrationTestingConfig):)"}, {"name": "test", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Test the given component.", "signature": "test(self, component: Any) -> dict[str, Any]"}, {"name": "simulate", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "scenario", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Simulate the given scenario.", "signature": "simulate(self, scenario: str) -> dict[str, Any]"}], "properties": [], "description": "Manages and executes integration tests with setup, teardown, and test running methods."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "TestingError", "type": "class", "line": 15}, {"name": "IntegrationTestingConfig", "type": "class", "line": 19}, {"name": "IntegrationTesting", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "TestingError Class", "description": "Class TestingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "IntegrationTestingConfig Class", "description": "Class IntegrationTestingConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "IntegrationTesting Class", "description": "Class IntegrationTesting definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "d69e78f4ac166afd8745f08423f08d77"}'
- path: libs/opsvi-agents/opsvi_agents/testing/__init__.py
  line_count: 19
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 9, "statement": "from opsvi_foundation import get_logger"}], "constants": []}, "key_elements": [{"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 9}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 9}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "f0b6930f29ca39ae770298c4aaf8abff"}'
- path: libs/opsvi-agents/opsvi_agents/testing/simulation.py
  line_count: 40
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "simulation.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "TestingError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors encountered during testing."}, {"name": "AgentSimulationConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for initializing an agent simulation."}, {"name": "AgentSimulation", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AgentSimulationConfig):"}], "is_async": false, "description": "Initialize simulation testing.", "signature": "__init__(self, config: AgentSimulationConfig):)"}, {"name": "test", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "component", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Test the given component.", "signature": "test(self, component: Any) -> dict[str, Any]"}, {"name": "simulate", "line": 39, "parameters": [{"name": "self", "type": "self"}, {"name": "scenario", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Simulate the given scenario.", "signature": "simulate(self, scenario: str) -> dict[str, Any]"}], "properties": [], "description": "Manages the lifecycle and execution of an agent-based simulation."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "TestingError", "type": "class", "line": 15}, {"name": "AgentSimulationConfig", "type": "class", "line": 19}, {"name": "AgentSimulation", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "TestingError Class", "description": "Class TestingError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "AgentSimulationConfig Class", "description": "Class AgentSimulationConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "AgentSimulation Class", "description": "Class AgentSimulation definition and methods.", "line_start": 25, "line_end": 42}], "content_hash": "b536c23e0b345d21134c6f53336f3086"}'
- path: libs/opsvi-agents/opsvi_agents/orchestration/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "__future__", "alias": null, "line": 9, "statement": "from __future__ import annotations"}], "constants": []}, "key_elements": [{"name": "from __future__ import annotations", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "4b4237f4831e1adbb055bf1de122dd6b"}'
- path: libs/opsvi-agents/opsvi_agents/orchestration/scheduler.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "scheduler.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OrchestrationError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors occurring during orchestration processes."}, {"name": "TaskSchedulerConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration class for setting up task scheduler parameters."}, {"name": "TaskScheduler", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "TaskSchedulerConfig):"}], "is_async": false, "description": "Initialize scheduler orchestration.", "signature": "__init__(self, config: TaskSchedulerConfig):)"}, {"name": "orchestrate", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "tasks", "type": "list[Any]"}], "is_async": false, "return_type": "Any", "description": "Orchestrate the given tasks.", "signature": "orchestrate(self, tasks: list[Any]) -> Any"}], "properties": [], "description": "Class responsible for scheduling and managing tasks."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "OrchestrationError", "type": "class", "line": 15}, {"name": "TaskSchedulerConfig", "type": "class", "line": 19}, {"name": "TaskScheduler", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "OrchestrationError Class", "description": "Class OrchestrationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "TaskSchedulerConfig Class", "description": "Class TaskSchedulerConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "TaskScheduler Class", "description": "Class TaskScheduler definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "2fa1d81e6a8c07ee7ae157e9d122a25f"}'
- path: libs/opsvi-agents/opsvi_agents/orchestration/coordinator.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "coordinator.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OrchestrationError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception raised for errors during orchestration processes."}, {"name": "AgentCoordinatorConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration settings for initializing an AgentCoordinator."}, {"name": "AgentCoordinator", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "AgentCoordinatorConfig):"}], "is_async": false, "description": "Initialize coordinator orchestration.", "signature": "__init__(self, config: AgentCoordinatorConfig):)"}, {"name": "orchestrate", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "tasks", "type": "list[Any]"}], "is_async": false, "return_type": "Any", "description": "Orchestrate the given tasks.", "signature": "orchestrate(self, tasks: list[Any]) -> Any"}], "properties": [], "description": "Manages coordination and communication between multiple agents."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "OrchestrationError", "type": "class", "line": 15}, {"name": "AgentCoordinatorConfig", "type": "class", "line": 19}, {"name": "AgentCoordinator", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "OrchestrationError Class", "description": "Class OrchestrationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "AgentCoordinatorConfig Class", "description": "Class AgentCoordinatorConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "AgentCoordinator Class", "description": "Class AgentCoordinator definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "b9827c4fa8e2357a66317cb05f74fde1"}'
- path: libs/opsvi-agents/opsvi_agents/orchestration/load_balancer.py
  line_count: 35
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "load_balancer.py", "description": "Python module with 0 functions and 3 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "OrchestrationError", "line": 15, "inherits_from": ["ComponentError):"], "methods": [], "properties": [], "description": "Exception class for errors occurring during orchestration processes."}, {"name": "LoadBalancerConfig", "line": 19, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Configuration holder for load balancer settings and parameters."}, {"name": "LoadBalancer", "line": 25, "inherits_from": ["BaseComponent):"], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "LoadBalancerConfig):"}], "is_async": false, "description": "Initialize load_balancer orchestration.", "signature": "__init__(self, config: LoadBalancerConfig):)"}, {"name": "orchestrate", "line": 34, "parameters": [{"name": "self", "type": "self"}, {"name": "tasks", "type": "list[Any]"}], "is_async": false, "return_type": "Any", "description": "Orchestrate the given tasks.", "signature": "orchestrate(self, tasks: list[Any]) -> Any"}], "properties": [], "description": "Manages load balancing operations including distributing and monitoring traffic."}], "imports": [{"module": "typing", "alias": null, "line": 9, "statement": "from typing import Any"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import BaseComponent"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import ComponentError"}, {"module": "opsvi_foundation", "alias": null, "line": 11, "statement": "from opsvi_foundation import get_logger"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 9}, {"name": "from opsvi_foundation import BaseComponent", "type": "import", "line": 11}, {"name": "from opsvi_foundation import ComponentError", "type": "import", "line": 11}, {"name": "from opsvi_foundation import get_logger", "type": "import", "line": 11}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "OrchestrationError", "type": "class", "line": 15}, {"name": "LoadBalancerConfig", "type": "class", "line": 19}, {"name": "LoadBalancer", "type": "class", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "OrchestrationError Class", "description": "Class OrchestrationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "LoadBalancerConfig Class", "description": "Class LoadBalancerConfig definition and methods.", "line_start": 19, "line_end": 29}, {"name": "LoadBalancer Class", "description": "Class LoadBalancer definition and methods.", "line_start": 25, "line_end": 37}], "content_hash": "35076d80ffacfcf392d7f5335fbb3a31"}'
- path: libs/opsvi-agents/tests/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "63c0451e46689ea038c19b64797f165d"}'
- path: libs/opsvi-agents/tests/test_agents.py
  line_count: 267
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_agents.py", "description": "Python module with 0 functions and 4 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [], "classes": [{"name": "MockAgent", "line": 21, "inherits_from": ["BaseAgent):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str", "default": "test-agent"}], "is_async": false, "signature": "__init__(self, agent_id: str = test-agent, **kwargs)"}, {"name": "_initialize", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Initialize mock agent.", "signature": "async _initialize(self) -> None"}, {"name": "_cleanup", "line": 32, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Cleanup mock agent.", "signature": "async _cleanup(self) -> None"}, {"name": "process", "line": 36, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}], "is_async": true, "return_type": "str", "description": "Process message.", "signature": "async process(self, message: str) -> str"}, {"name": "is_active", "line": 40, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if agent is active.", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Simulates an agent for testing purposes with predefined behaviors."}, {"name": "TestCrewAdapter", "line": 45, "inherits_from": [], "methods": [{"name": "crew_adapter", "line": 49, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create CrewAdapter instance for testing.", "signature": "crew_adapter(self)"}, {"name": "mock_agents", "line": 54, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create mock agents for testing.", "signature": "mock_agents(self)"}, {"name": "test_create_crew_success", "line": 62, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test successful crew creation.", "signature": "async test_create_crew_success(self, crew_adapter, mock_agents)"}, {"name": "test_create_crew_no_agents", "line": 82, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}], "is_async": true, "description": "Test crew creation with no agents.", "signature": "async test_create_crew_no_agents(self, crew_adapter)"}, {"name": "test_create_crew_no_tasks", "line": 88, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test crew creation with no tasks.", "signature": "async test_create_crew_no_tasks(self, crew_adapter, mock_agents)"}, {"name": "test_get_crew", "line": 94, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test getting crew information.", "signature": "async test_get_crew(self, crew_adapter, mock_agents)"}, {"name": "test_delete_crew", "line": 111, "parameters": [{"name": "self", "type": "self"}, {"name": "crew_adapter", "type": "unknown"}, {"name": "mock_agents", "type": "unknown"}], "is_async": true, "description": "Test crew deletion.", "signature": "async test_delete_crew(self, crew_adapter, mock_agents)"}], "properties": [], "description": "Tests the CrewAdapter functionality ensuring correct integration and data handling."}, {"name": "TestGraphAdapter", "line": 128, "inherits_from": [], "methods": [{"name": "graph_adapter", "line": 132, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create GraphAdapter instance for testing.", "signature": "graph_adapter(self)"}, {"name": "test_create_graph_success", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test successful graph creation.", "signature": "async test_create_graph_success(self, graph_adapter)"}, {"name": "test_create_graph_no_nodes", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph creation with no nodes.", "signature": "async test_create_graph_no_nodes(self, graph_adapter)"}, {"name": "test_create_graph_invalid_node", "line": 163, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph creation with invalid node.", "signature": "async test_create_graph_invalid_node(self, graph_adapter)"}, {"name": "test_execute_graph", "line": 171, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test graph execution.", "signature": "async test_execute_graph(self, graph_adapter)"}, {"name": "test_execute_nonexistent_graph", "line": 186, "parameters": [{"name": "self", "type": "self"}, {"name": "graph_adapter", "type": "unknown"}], "is_async": true, "description": "Test executing non-existent graph.", "signature": "async test_execute_nonexistent_graph(self, graph_adapter)"}], "properties": [], "description": "Validates the GraphAdapter''s ability to manage and manipulate graph data structures."}, {"name": "TestAgentRegistry", "line": 192, "inherits_from": [], "methods": [{"name": "registry", "line": 196, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Create AgentRegistry instance for testing.", "signature": "registry(self)"}, {"name": "test_register_agent_type", "line": 200, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test agent type registration.", "signature": "test_register_agent_type(self, registry)"}, {"name": "test_register_duplicate_type", "line": 214, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test registering duplicate agent type.", "signature": "test_register_duplicate_type(self, registry)"}, {"name": "test_create_agent", "line": 222, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test agent creation.", "signature": "async test_create_agent(self, registry)"}, {"name": "test_create_unknown_agent_type", "line": 233, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test creating agent with unknown type.", "signature": "async test_create_unknown_agent_type(self, registry)"}, {"name": "test_create_duplicate_agent_id", "line": 239, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test creating agent with duplicate ID.", "signature": "async test_create_duplicate_agent_id(self, registry)"}, {"name": "test_remove_agent", "line": 248, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": true, "description": "Test agent removal.", "signature": "async test_remove_agent(self, registry)"}, {"name": "test_get_stats", "line": 262, "parameters": [{"name": "self", "type": "self"}, {"name": "registry", "type": "unknown"}], "is_async": false, "description": "Test registry statistics.", "signature": "test_get_stats(self, registry)"}], "properties": [], "description": "Ensures the AgentRegistry correctly registers, retrieves, and manages agents."}], "imports": [{"module": "pytest", "alias": null, "line": 10, "statement": "import pytest"}, {"module": "opsvi_agents", "alias": null, "line": 12, "statement": "from opsvi_agents import AgentRegistry"}, {"module": "opsvi_agents", "alias": null, "line": 12, "statement": "from opsvi_agents import CrewAdapter"}, {"module": "opsvi_agents", "alias": null, "line": 12, "statement": "from opsvi_agents import GraphAdapter"}, {"module": "opsvi_core.agents.base_agent", "alias": null, "line": 17, "statement": "from opsvi_core.agents.base_agent import BaseAgent"}, {"module": "opsvi_core.exceptions", "alias": null, "line": 18, "statement": "from opsvi_core.exceptions import ValidationError"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 10}, {"name": "from opsvi_agents import AgentRegistry", "type": "import", "line": 12}, {"name": "from opsvi_agents import CrewAdapter", "type": "import", "line": 12}, {"name": "from opsvi_agents import GraphAdapter", "type": "import", "line": 12}, {"name": "from opsvi_core.agents.base_agent import BaseAgent", "type": "import", "line": 17}, {"name": "from opsvi_core.exceptions import ValidationError", "type": "import", "line": 18}, {"name": "MockAgent", "type": "class", "line": 21}, {"name": "TestCrewAdapter", "type": "class", "line": 45}, {"name": "TestGraphAdapter", "type": "class", "line": 128}, {"name": "TestAgentRegistry", "type": "class", "line": 192}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 18}, {"name": "MockAgent Class", "description": "Class MockAgent definition and methods.", "line_start": 21, "line_end": 43}, {"name": "TestCrewAdapter Class", "description": "Class TestCrewAdapter definition and methods.", "line_start": 45, "line_end": 114}, {"name": "TestGraphAdapter Class", "description": "Class TestGraphAdapter definition and methods.", "line_start": 128, "line_end": 189}, {"name": "TestAgentRegistry Class", "description": "Class TestAgentRegistry definition and methods.", "line_start": 192, "line_end": 265}], "content_hash": "708aea033cc7303b0c3a4a0ce6e19fd4"}'
- path: tests/opsvi_core/test_logging.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_logging.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "test_get_logger_returns_logger", "line": 6, "parameters": [], "is_async": false, "return_type": "None", "signature": "test_get_logger_returns_logger() -> None", "description": "Tests that get_logger function returns a valid logger instance."}], "classes": [], "imports": [{"module": "opsvi_core.logging", "alias": "log_mod", "line": 3, "statement": "import opsvi_core.logging as log_mod"}], "constants": []}, "key_elements": [{"name": "opsvi_core.logging", "type": "import", "line": 3}, {"name": "test_get_logger_returns_logger", "type": "function", "line": 6}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 3}, {"name": "test_get_logger_returns_logger Function", "description": "Function test_get_logger_returns_logger implementation.", "line_start": 6, "line_end": 11}], "content_hash": "944ebe676ed84ac91ffe6c096fbe9e20"}'
- path: tools/rag_init.py
  line_count: 129
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rag_init.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-06"}, "code_elements": {"functions": [{"name": "init_rag_system", "line": 22, "parameters": [{"name": "collection_name", "type": "str = \"global__demo\"", "default": "global__demo"}], "is_async": true, "return_type": "None", "description": "Initializes the RAG system with the specified collection name.", "signature": "async init_rag_system(collection_name: str = \"global__demo\" = global__demo) -> None"}, {"name": "main", "line": 114, "parameters": [], "is_async": false, "return_type": "None", "description": "Entry point of the program that runs the main application logic.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 6, "statement": "import asyncio"}, {"module": "sys", "alias": null, "line": 7, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 8, "statement": "from pathlib import Path"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import get_logger"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import setup_logging"}, {"module": "qdrant_client", "alias": null, "line": 16, "statement": "from qdrant_client import QdrantClient"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import Distance"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import VectorParams"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 6}, {"name": "sys", "type": "import", "line": 7}, {"name": "from pathlib import Path", "type": "import", "line": 8}, {"name": "from opsvi_core import get_logger", "type": "import", "line": 15}, {"name": "from opsvi_core import setup_logging", "type": "import", "line": 15}, {"name": "from qdrant_client import QdrantClient", "type": "import", "line": 16}, {"name": "from qdrant_client.models import Distance", "type": "import", "line": 17}, {"name": "from qdrant_client.models import VectorParams", "type": "import", "line": 17}, {"name": "init_rag_system", "type": "function", "line": 22}, {"name": "main", "type": "function", "line": 114}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 6, "line_end": 17}, {"name": "init_rag_system Function", "description": "Function init_rag_system implementation.", "line_start": 22, "line_end": 113}, {"name": "main Function", "description": "Function main implementation.", "line_start": 114, "line_end": 119}], "content_hash": "39167ba7fbb839ddb12cdbf519704ce8"}'
