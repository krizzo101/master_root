# PROJECT MAP - AI AGENT OPTIMIZED
# ===============================
# Comprehensive project analysis for AI agents
# Generated by genfilemap utility
#
# AGENT USAGE:
# - project_structure: File organization and type distribution
# - entry_points: Application entry points and CLI interface
# - statistics: Overall code metrics and statistics
# - dependency_analysis: Import relationships and dependency mapping
# - workflow_analysis: Execution paths and workflow diagrams
# - files: Detailed analysis of each file in the project
#
# KEY INSIGHTS:
# - Find entry points in entry_points section
# - Understand dependencies in dependency_analysis section
# - Trace execution flows in workflow_analysis section
# - Navigate codebase using files section
#
# Generated: 2025-08-06T03:18:09+00:00
# Tool: genfilemap --project-map-in-memory

project_name: master_root
base_path: /home/opsvi/master_root
generated_at: '2025-08-06T03:18:09+00:00'
# Module organization and file type distribution
project_structure:
  file_type_distribution:
    python_files: 42
    config_files: 2
    total_files: 42
  module_structure:
    libs:
      files:
      - libs/opsvi-rag/opsvi_rag/__init__.py
      - libs/opsvi-rag/opsvi_rag/storage/__init__.py
      - libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
      - libs/opsvi-rag/src/opsvi_rag/__init__.py
      - libs/opsvi-rag/src/opsvi_rag/embeddings.py
      - libs/opsvi-rag/src/opsvi_rag/client.py
      - libs/opsvi-rag/src/opsvi_rag/search.py
      - libs/opsvi-llm/opsvi_llm/__init__.py
      - libs/opsvi-llm/opsvi_llm/utils/__init__.py
      - libs/opsvi-llm/opsvi_llm/utils/rate_limiting.py
      - libs/opsvi-llm/opsvi_llm/utils/retry.py
      - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
      - libs/opsvi-llm/opsvi_llm/schemas/responses.py
      - libs/opsvi-llm/opsvi_llm/providers/__init__.py
      - libs/opsvi-llm/opsvi_llm/providers/base.py
      - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
      - libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
      - libs/opsvi-llm/tests/__init__.py
      - libs/opsvi-llm/tests/test_schemas.py
      - libs/opsvi-llm/src/opsvi/__init__.py
      - libs/opsvi-llm/src/opsvi/llm/__init__.py
      - libs/opsvi-llm/src/opsvi/llm/client.py
      - libs/opsvi-core/opsvi_core/__init__.py
      - libs/opsvi-core/opsvi_core/core/__init__.py
      - libs/opsvi-core/opsvi_core/core/exceptions.py
      - libs/opsvi-core/opsvi_core/core/config.py
      - libs/opsvi-core/opsvi_core/core/logging.py
      - libs/opsvi-core/opsvi_core/core/patterns.py
      - libs/opsvi-core/opsvi_core/agents/__init__.py
      - libs/opsvi-core/opsvi_core/agents/base_agent.py
      - libs/opsvi-core/tests/__init__.py
      - libs/opsvi-core/tests/test_core.py
      - libs/opsvi-core/src/opsvi_core/__init__.py
      - libs/opsvi-core/src/opsvi_core/exceptions.py
      - libs/opsvi-core/src/opsvi_core/config.py
      - libs/opsvi-core/src/opsvi_core/logging.py
      - libs/opsvi-agents/src/opsvi/__init__.py
      - libs/opsvi-agents/src/opsvi/agents/__init__.py
      - libs/opsvi-agents/src/opsvi/agents/crew_adapter.py
      - libs/opsvi-agents/src/opsvi/agents/graph_adapter.py
      total_lines: 3150
      total_functions: 14
      total_classes: 50
    tests:
      files:
      - tests/opsvi_core/test_logging.py
      total_lines: 11
      total_functions: 1
      total_classes: 0
    tools:
      files:
      - tools/rag_init.py
      total_lines: 129
      total_functions: 2
      total_classes: 0
# Application entry points and CLI interface
entry_points:
  core:
    file: libs/opsvi-core/tests/test_core.py
    type: core_processor
    main_functions:
    - run_process
    description: Main processing workflow coordinator
# Overall code metrics and statistics
statistics:
  total_functions: 17
  total_classes: 50
  total_imports: 184
  total_lines: 3290
  external_dependencies: []
# Import relationships and dependency mapping between files
dependency_analysis:
  most_imported_files:
  - file_path: libs/opsvi-core/opsvi_core/core/logging.py
    imported_by_count: 14
    imported_by:
    - libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
    - libs/opsvi-llm/opsvi_llm/utils/rate_limiting.py
    - libs/opsvi-llm/opsvi_llm/utils/retry.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/opsvi_core/core/config.py
    - libs/opsvi-core/opsvi_core/core/logging.py
    - libs/opsvi-core/opsvi_core/core/patterns.py
    - libs/opsvi-core/opsvi_core/agents/base_agent.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-core/src/opsvi_core/__init__.py
    - tests/opsvi_core/test_logging.py
  - file_path: libs/opsvi-core/opsvi_core/core/exceptions.py
    imported_by_count: 8
    imported_by:
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/opsvi_core/core/config.py
    - libs/opsvi-core/opsvi_core/core/patterns.py
    - libs/opsvi-core/opsvi_core/agents/base_agent.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-core/src/opsvi_core/__init__.py
    - libs/opsvi-core/src/opsvi_core/config.py
  - file_path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
    imported_by_count: 6
    imported_by:
    - libs/opsvi-llm/opsvi_llm/__init__.py
    - libs/opsvi-llm/opsvi_llm/schemas/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/base.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
    - libs/opsvi-llm/tests/test_schemas.py
  - file_path: libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-rag/opsvi_rag/__init__.py
    - libs/opsvi-rag/opsvi_rag/storage/__init__.py
    - libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
    - tools/rag_init.py
  - file_path: libs/opsvi-llm/opsvi_llm/utils/rate_limiting.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-llm/opsvi_llm/__init__.py
    - libs/opsvi-llm/opsvi_llm/utils/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
  - file_path: libs/opsvi-llm/opsvi_llm/providers/base.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-llm/opsvi_llm/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
    - libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
  - file_path: libs/opsvi-core/opsvi_core/core/config.py
    imported_by_count: 4
    imported_by:
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/tests/test_core.py
    - libs/opsvi-core/src/opsvi_core/__init__.py
  - file_path: libs/opsvi-llm/opsvi_llm/utils/retry.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-llm/opsvi_llm/__init__.py
    - libs/opsvi-llm/opsvi_llm/utils/__init__.py
    - libs/opsvi-llm/opsvi_llm/providers/base.py
  - file_path: libs/opsvi-core/opsvi_core/core/patterns.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/core/__init__.py
    - libs/opsvi-core/tests/test_core.py
  - file_path: libs/opsvi-core/opsvi_core/agents/base_agent.py
    imported_by_count: 3
    imported_by:
    - libs/opsvi-core/opsvi_core/__init__.py
    - libs/opsvi-core/opsvi_core/agents/__init__.py
    - libs/opsvi-core/tests/test_core.py
  circular_dependencies:
  - cycle:
    - libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
    severity: high
  - cycle:
    - libs/opsvi-core/opsvi_core/core/logging.py
    severity: high
# Execution paths and workflow diagrams
workflow_analysis:
  workflow_paths: {}
  conditional_branches: []
  function_calls: {}
  workflow_diagram: "graph TD\n    A[Entry Point] --> B{Parse Arguments}\n    B --> C{Check Flags}\n\n    C -->|Flags Found| D[Process Flags]\n    C -->|No Flags| E[Default Processing]\n\n    D --> F[Execute Workflow]\n    E --> F\n\n    F --> G[Complete]\n\n    style A fill:#e1f5fe\n    style G fill:#c8e6c9\n    style C fill:#fff3e0\n    style F fill:#f3e5f5\n"
# Detailed analysis of each file in the project
files:
- path: libs/opsvi-rag/opsvi_rag/__init__.py
  line_count: 34
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "processors.document_processor", "alias": null, "line": 14, "statement": "from processors.document_processor import DocumentProcessor"}, {"module": "providers.embedding_provider", "alias": null, "line": 15, "statement": "from providers.embedding_provider import BaseEmbeddingProvider"}, {"module": "providers.openai_embedding", "alias": null, "line": 16, "statement": "from providers.openai_embedding import OpenAIEmbeddingProvider"}, {"module": "providers.sentence_transformers_embedding", "alias": null, "line": 17, "statement": "from providers.sentence_transformers_embedding import SentenceTransformersEmbeddingProvider"}, {"module": "retrieval.rag_pipeline", "alias": null, "line": 20, "statement": "from retrieval.rag_pipeline import RAGPipeline"}, {"module": "retrieval.retrieval_engine", "alias": null, "line": 21, "statement": "from retrieval.retrieval_engine import RetrievalEngine"}, {"module": "storage.qdrant_client", "alias": null, "line": 22, "statement": "from storage.qdrant_client import QdrantVectorStore"}], "constants": []}, "key_elements": [{"name": "from processors.document_processor import DocumentProcessor", "type": "import", "line": 14}, {"name": "from providers.embedding_provider import BaseEmbeddingProvider", "type": "import", "line": 15}, {"name": "from providers.openai_embedding import OpenAIEmbeddingProvider", "type": "import", "line": 16}, {"name": "from providers.sentence_transformers_embedding import SentenceTransformersEmbeddingProvider", "type": "import", "line": 17}, {"name": "from retrieval.rag_pipeline import RAGPipeline", "type": "import", "line": 20}, {"name": "from retrieval.retrieval_engine import RetrievalEngine", "type": "import", "line": 21}, {"name": "from storage.qdrant_client import QdrantVectorStore", "type": "import", "line": 22}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 14, "line_end": 22}], "content_hash": "f59b7403152d684a629bd8cea8e25348"}'
- path: libs/opsvi-rag/opsvi_rag/storage/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "qdrant_client", "alias": null, "line": 9, "statement": "from qdrant_client import QdrantVectorStore"}], "constants": []}, "key_elements": [{"name": "from qdrant_client import QdrantVectorStore", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "793564c48109203e61df1badf5476a64"}'
- path: libs/opsvi-rag/opsvi_rag/storage/qdrant_client.py
  line_count: 138
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "qdrant_client.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "QdrantVectorStore", "line": 20, "inherits_from": [], "methods": [{"name": "__init__", "line": 28, "parameters": [{"name": "self", "type": "self"}, {"name": "url", "type": "str"}, {"name": "collection_name", "type": "str"}, {"name": "api_key", "type": "str | None", "default": "None"}, {"name": "vector_size", "type": "int", "default": "768"}, {"name": "distance", "type": "str", "default": "Cosine"}], "is_async": false, "description": "\n        Initialize Qdrant vector store.\n\n        Args:\n            url: Qdrant server URL\n            collection_name: Name of the collection\n            api_key: Optional API key for authentication\n            vector_size: Dimension of vectors\n            distance: Distance metric (Cosine, Dot, Euclidean)\n        ", "signature": "__init__(self, url: str, collection_name: str, api_key: str | None = None, vector_size: int = 768, distance: str = Cosine)"}, {"name": "ensure_collection", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Ensure collection exists, create if missing.", "signature": "async ensure_collection(self) -> None"}, {"name": "create_collection", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "Create collection with specified parameters.", "signature": "async create_collection(self) -> None"}, {"name": "upsert_points", "line": 86, "parameters": [{"name": "self", "type": "self"}, {"name": "points", "type": "list[PointStruct]"}], "is_async": true, "return_type": "None", "description": "Upsert points into the collection.", "signature": "async upsert_points(self, points: list[PointStruct]) -> None"}, {"name": "search", "line": 97, "parameters": [{"name": "self", "type": "self"}, {"name": "vector", "type": "list[float]"}, {"name": "limit", "type": "int", "default": "5"}, {"name": "filter_payload", "type": "dict[str, Any] | None", "default": "None"}], "is_async": true, "return_type": "list[ScoredPoint]", "description": "Perform vector similarity search.", "signature": "async search(self, vector: list[float], limit: int = 5, filter_payload: dict[str, Any] | None = None) -> list[ScoredPoint]"}, {"name": "delete_points", "line": 117, "parameters": [{"name": "self", "type": "self"}, {"name": "point_ids", "type": "list[str]"}], "is_async": true, "return_type": "None", "description": "Delete points by IDs.", "signature": "async delete_points(self, point_ids: list[str]) -> None"}, {"name": "get_collection_info", "line": 128, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "dict[str, Any]", "description": "Get collection information.", "signature": "async get_collection_info(self) -> dict[str, Any]"}], "properties": [], "description": "Manages storage and retrieval of vectors using the Qdrant vector search engine."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "qdrant_client", "alias": null, "line": 12, "statement": "from qdrant_client import AsyncQdrantClient"}, {"module": "qdrant_client.http.models", "alias": "QdrantFilter", "line": 13, "statement": "from qdrant_client.http.models import Filter as QdrantFilter"}, {"module": "qdrant_client.http.models", "alias": null, "line": 14, "statement": "from qdrant_client.http.models import VectorParams"}, {"module": "qdrant_client.models", "alias": null, "line": 15, "statement": "from qdrant_client.models import PointStruct"}, {"module": "qdrant_client.models", "alias": null, "line": 15, "statement": "from qdrant_client.models import ScoredPoint"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from qdrant_client import AsyncQdrantClient", "type": "import", "line": 12}, {"name": "from qdrant_client.http.models import Filter as QdrantFilter", "type": "import", "line": 13}, {"name": "from qdrant_client.http.models import VectorParams", "type": "import", "line": 14}, {"name": "from qdrant_client.models import PointStruct", "type": "import", "line": 15}, {"name": "from qdrant_client.models import ScoredPoint", "type": "import", "line": 15}, {"name": "QdrantVectorStore", "type": "class", "line": 20}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "QdrantVectorStore Class", "description": "Class QdrantVectorStore definition and methods.", "line_start": 20, "line_end": 131}], "content_hash": "7ec8c9c442e3970e2b2124dafc219b71"}'
- path: libs/opsvi-rag/src/opsvi_rag/__init__.py
  line_count: 15
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "client", "alias": null, "line": 9, "statement": "from client import RAGClient"}, {"module": "embeddings", "alias": null, "line": 10, "statement": "from embeddings import get_embeddings"}, {"module": "search", "alias": null, "line": 11, "statement": "from search import search_documents"}], "constants": []}, "key_elements": [{"name": "from client import RAGClient", "type": "import", "line": 9}, {"name": "from embeddings import get_embeddings", "type": "import", "line": 10}, {"name": "from search import search_documents", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "189e619bb0de1bb9fe68b05cc94f9598"}'
- path: libs/opsvi-rag/src/opsvi_rag/embeddings.py
  line_count: 7
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "embeddings.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "get_embeddings", "line": 6, "parameters": [{"name": "texts", "type": "list[str]"}], "is_async": false, "return_type": "list[list[float]]", "description": "Generate vector embeddings for a list of input texts.", "signature": "get_embeddings(texts: list[str]) -> list[list[float]]"}], "classes": [], "imports": [], "constants": []}, "key_elements": [{"name": "get_embeddings", "type": "function", "line": 6}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "get_embeddings Function", "description": "Function get_embeddings implementation.", "line_start": 6, "line_end": 11}], "content_hash": "14bc756b0b53324013d3438feed141f7"}'
- path: libs/opsvi-rag/src/opsvi_rag/client.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "client.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "RAGClient", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the RAG client.", "signature": "__init__(self) -> None"}, {"name": "search", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "query", "type": "str, limit: int = 10"}, {"name": "limit", "type": "int = 10", "default": "10"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Search for documents.", "signature": "search(self, query: str, limit: int = 10, limit: int = 10 = 10) -> list[dict[str, Any]]"}], "properties": [], "description": "Client class for Retrieval-Augmented Generation, providing methods to retrieve relevant documents and generate responses."}], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "RAGClient", "type": "class", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "RAGClient Class", "description": "Class RAGClient definition and methods.", "line_start": 8, "line_end": 19}], "content_hash": "e35ae653c6717944b1e72b62b47d526f"}'
- path: libs/opsvi-rag/src/opsvi_rag/search.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "search.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "search_documents", "line": 8, "parameters": [{"name": "query", "type": "str"}, {"name": "collection", "type": "str"}, {"name": "limit", "type": "int", "default": "10"}], "is_async": false, "return_type": "list[dict[str, Any]]", "description": "Searches for documents in a specified collection matching the query and returns a list of results.", "signature": "search_documents(query: str, collection: str, limit: int = 10) -> list[dict[str, Any]]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "search_documents", "type": "function", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 11}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "search_documents Function", "description": "Function search_documents implementation.", "line_start": 8, "line_end": 13}], "content_hash": "060e86690fd0693ecf53f12d574078cd"}'
- path: libs/opsvi-llm/opsvi_llm/__init__.py
  line_count: 31
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "providers.anthropic_provider", "alias": null, "line": 14, "statement": "from providers.anthropic_provider import AnthropicProvider"}, {"module": "providers.base", "alias": null, "line": 15, "statement": "from providers.base import BaseLLMProvider"}, {"module": "providers.openai_provider", "alias": null, "line": 16, "statement": "from providers.openai_provider import OpenAIProvider"}, {"module": "schemas.responses", "alias": null, "line": 17, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 17, "statement": "from schemas.responses import FunctionCall"}, {"module": "schemas.responses", "alias": null, "line": 17, "statement": "from schemas.responses import LLMResponse"}, {"module": "utils.rate_limiting", "alias": null, "line": 18, "statement": "from utils.rate_limiting import RateLimiter"}, {"module": "utils.retry", "alias": null, "line": 19, "statement": "from utils.retry import retry_with_backoff"}], "constants": []}, "key_elements": [{"name": "from providers.anthropic_provider import AnthropicProvider", "type": "import", "line": 14}, {"name": "from providers.base import BaseLLMProvider", "type": "import", "line": 15}, {"name": "from providers.openai_provider import OpenAIProvider", "type": "import", "line": 16}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 17}, {"name": "from schemas.responses import FunctionCall", "type": "import", "line": 17}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 17}, {"name": "from utils.rate_limiting import RateLimiter", "type": "import", "line": 18}, {"name": "from utils.retry import retry_with_backoff", "type": "import", "line": 19}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 14, "line_end": 19}], "content_hash": "5ce7feedf4498b5d45e1b9f7047fbd06"}'
- path: libs/opsvi-llm/opsvi_llm/utils/__init__.py
  line_count: 13
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "rate_limiting", "alias": null, "line": 9, "statement": "from rate_limiting import RateLimiter"}, {"module": "retry", "alias": null, "line": 10, "statement": "from retry import retry_with_backoff"}], "constants": []}, "key_elements": [{"name": "from rate_limiting import RateLimiter", "type": "import", "line": 9}, {"name": "from retry import retry_with_backoff", "type": "import", "line": 10}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 10}], "content_hash": "273df5e2e771c8033253da103856fe23"}'
- path: libs/opsvi-llm/opsvi_llm/utils/rate_limiting.py
  line_count: 253
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rate_limiting.py", "description": "Python module with 3 functions and 3 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "get_global_rate_limit_manager", "line": 243, "parameters": [], "is_async": false, "return_type": "RateLimitManager", "description": "Retrieve the singleton instance of the global RateLimitManager.", "signature": "get_global_rate_limit_manager() -> RateLimitManager"}, {"name": "add_global_rate_limiter", "line": 248, "parameters": [{"name": "name", "type": "str, config: RateLimitConfig"}, {"name": "config", "type": "RateLimitConfig"}], "is_async": false, "return_type": "None", "description": "Add a new global rate limiter with the specified name and configuration.", "signature": "add_global_rate_limiter(name: str, config: RateLimitConfig, config: RateLimitConfig) -> None"}, {"name": "acquire_global_rate_limit", "line": 253, "parameters": [{"name": "name", "type": "str, timeout: float | None = None"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "Asynchronously attempt to acquire permission from the global rate limiter within an optional timeout.", "signature": "async acquire_global_rate_limit(name: str, timeout: float | None = None, timeout: float | None = None = None) -> bool"}], "classes": [{"name": "RateLimitConfig", "line": 20, "inherits_from": [], "methods": [], "properties": [], "description": "Configuration settings defining rate limiting parameters."}, {"name": "RateLimiter", "line": 29, "inherits_from": [], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "config", "type": "RateLimitConfig):"}], "is_async": false, "description": "\n        Initialize the rate limiter.\n\n        Args:\n            config: Rate limiting configuration\n        ", "signature": "__init__(self, config: RateLimitConfig):)"}, {"name": "acquire", "line": 50, "parameters": [{"name": "self", "type": "self"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission to make a request.\n\n        Args:\n            timeout: Maximum time to wait for permission\n\n        Returns:\n            bool: True if permission granted, False if timeout\n        ", "signature": "async acquire(self, timeout: float | None = None = None) -> bool"}, {"name": "_can_make_request", "line": 85, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if a request can be made.", "signature": "_can_make_request(self) -> bool"}, {"name": "_refill_tokens", "line": 99, "parameters": [{"name": "self", "type": "self"}, {"name": "current_time", "type": "float"}], "is_async": false, "return_type": "None", "description": "Refill tokens based on time elapsed.", "signature": "_refill_tokens(self, current_time: float) -> None"}, {"name": "_check_sliding_window", "line": 109, "parameters": [{"name": "self", "type": "self"}, {"name": "current_time", "type": "float"}], "is_async": false, "return_type": "bool", "description": "Check sliding window rate limit.", "signature": "_check_sliding_window(self, current_time: float) -> bool"}, {"name": "_record_request", "line": 121, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Record a request.", "signature": "_record_request(self) -> None"}, {"name": "_calculate_wait_time", "line": 127, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "float", "description": "Calculate how long to wait before next request.", "signature": "_calculate_wait_time(self) -> float"}, {"name": "get_stats", "line": 149, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Get current rate limiter statistics.", "signature": "get_stats(self) -> dict[str, Any]"}], "properties": [], "description": "Manages rate limiting logic and state for a specific resource or operation."}, {"name": "RateLimitManager", "line": 169, "inherits_from": [], "methods": [{"name": "__init__", "line": 177, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Initialize the rate limit manager.", "signature": "__init__(self)"}, {"name": "add_limiter", "line": 182, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, config: RateLimitConfig"}, {"name": "config", "type": "RateLimitConfig"}], "is_async": false, "return_type": "None", "description": "\n        Add a rate limiter for a specific service.\n\n        Args:\n            name: Name of the service/endpoint\n            config: Rate limiting configuration\n        ", "signature": "add_limiter(self, name: str, config: RateLimitConfig, config: RateLimitConfig) -> None"}, {"name": "acquire", "line": 192, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str, timeout: float | None = None"}, {"name": "timeout", "type": "float | None = None", "default": "None"}], "is_async": true, "return_type": "bool", "description": "\n        Acquire permission from a specific rate limiter.\n\n        Args:\n            name: Name of the service/endpoint\n            timeout: Maximum time to wait for permission\n\n        Returns:\n            bool: True if permission granted, False if timeout\n\n        Raises:\n            KeyError: If rate limiter not found\n        ", "signature": "async acquire(self, name: str, timeout: float | None = None, timeout: float | None = None = None) -> bool"}, {"name": "get_stats", "line": 211, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Get statistics for rate limiters.\n\n        Args:\n            name: Specific limiter name, or None for all\n\n        Returns:\n            Dict containing statistics\n        ", "signature": "get_stats(self, name: str | None = None = None) -> dict[str, Any]"}, {"name": "remove_limiter", "line": 228, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str"}], "is_async": false, "return_type": "None", "description": "\n        Remove a rate limiter.\n\n        Args:\n            name: Name of the service/endpoint\n        ", "signature": "remove_limiter(self, name: str) -> None"}], "properties": [], "description": "Coordinates multiple RateLimiter instances and manages global rate limiting."}], "imports": [{"module": "asyncio", "alias": null, "line": 9, "statement": "import asyncio"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "time", "alias": null, "line": 11, "statement": "import time"}, {"module": "collections", "alias": null, "line": 12, "statement": "from collections import deque"}, {"module": "dataclasses", "alias": null, "line": 13, "statement": "from dataclasses import dataclass"}, {"module": "typing", "alias": null, "line": 14, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "time", "type": "import", "line": 11}, {"name": "from collections import deque", "type": "import", "line": 12}, {"name": "from dataclasses import dataclass", "type": "import", "line": 13}, {"name": "from typing import Any", "type": "import", "line": 14}, {"name": "RateLimitConfig", "type": "class", "line": 20}, {"name": "RateLimiter", "type": "class", "line": 29}, {"name": "RateLimitManager", "type": "class", "line": 169}, {"name": "get_global_rate_limit_manager", "type": "function", "line": 243}, {"name": "add_global_rate_limiter", "type": "function", "line": 248}, {"name": "acquire_global_rate_limit", "type": "function", "line": 253}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "get_global_rate_limit_manager Function", "description": "Function get_global_rate_limit_manager implementation.", "line_start": 243, "line_end": 247}, {"name": "add_global_rate_limiter Function", "description": "Function add_global_rate_limiter implementation.", "line_start": 248, "line_end": 252}, {"name": "acquire_global_rate_limit Function", "description": "Function acquire_global_rate_limit implementation.", "line_start": 253, "line_end": 258}, {"name": "RateLimitConfig Class", "description": "Class RateLimitConfig definition and methods.", "line_start": 20, "line_end": 30}, {"name": "RateLimiter Class", "description": "Class RateLimiter definition and methods.", "line_start": 29, "line_end": 152}, {"name": "RateLimitManager Class", "description": "Class RateLimitManager definition and methods.", "line_start": 169, "line_end": 231}], "content_hash": "9a4ed6d92298d6cf9a7c72c969b89806"}'
- path: libs/opsvi-llm/opsvi_llm/utils/retry.py
  line_count: 168
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "retry.py", "description": "Python module with 2 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "retry_with_backoff", "line": 32, "parameters": [{"name": "max_retries", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "exceptions", "type": "type | tuple", "default": "RETRYABLE_EXCEPTIONS"}, {"name": "log_retries", "type": "bool", "default": "True"}], "is_async": false, "return_type": "Callable[[Callable[..., T]], Callable[..., T]]", "description": "Decorator that retries an asynchronous function with exponential backoff upon specified exceptions.", "signature": "retry_with_backoff(max_retries: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, exceptions: type | tuple = RETRYABLE_EXCEPTIONS, log_retries: bool = True) -> Callable[[Callable[..., T]], Callable[..., T]]"}, {"name": "retry_sync_with_backoff", "line": 75, "parameters": [{"name": "max_retries", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "exceptions", "type": "type | tuple", "default": "RETRYABLE_EXCEPTIONS"}, {"name": "log_retries", "type": "bool", "default": "True"}], "is_async": false, "return_type": "Callable[[Callable[..., T]], Callable[..., T]]", "description": "Decorator that retries a synchronous function with exponential backoff upon specified exceptions.", "signature": "retry_sync_with_backoff(max_retries: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, exceptions: type | tuple = RETRYABLE_EXCEPTIONS, log_retries: bool = True) -> Callable[[Callable[..., T]], Callable[..., T]]"}], "classes": [{"name": "RetryConfig", "line": 118, "inherits_from": [], "methods": [{"name": "__init__", "line": 121, "parameters": [{"name": "self", "type": "self"}, {"name": "max_retries", "type": "int", "default": "3"}, {"name": "base_delay", "type": "float", "default": "1.0"}, {"name": "max_delay", "type": "float", "default": "60.0"}, {"name": "exceptions", "type": "type | tuple", "default": "RETRYABLE_EXCEPTIONS"}, {"name": "log_retries", "type": "bool", "default": "True"}], "is_async": false, "description": "\n        Initialize retry configuration.\n\n        Args:\n            max_retries: Maximum number of retry attempts\n            base_delay: Base delay between retries in seconds\n            max_delay: Maximum delay between retries in seconds\n            exceptions: Exception types that should trigger retries\n            log_retries: Whether to log retry attempts\n        ", "signature": "__init__(self, max_retries: int = 3, base_delay: float = 1.0, max_delay: float = 60.0, exceptions: type | tuple = RETRYABLE_EXCEPTIONS, log_retries: bool = True)"}, {"name": "get_retry_decorator", "line": 145, "parameters": [{"name": "self", "type": "self"}, {"name": "is_async", "type": "bool = True", "default": "True"}], "is_async": false, "return_type": "Callable", "description": "\n        Get the appropriate retry decorator.\n\n        Args:\n            is_async: Whether the function is async\n\n        Returns:\n            Retry decorator function\n        ", "signature": "get_retry_decorator(self, is_async: bool = True = True) -> Callable"}], "properties": [], "description": "Configuration class that encapsulates retry parameters and behavior for retry decorators."}], "imports": [{"module": "functools", "alias": null, "line": 9, "statement": "import functools"}, {"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "collections.abc", "alias": null, "line": 11, "statement": "from collections.abc import Callable"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import TypeVar"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import after_log"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import before_sleep_log"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import retry"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import retry_if_exception_type"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import stop_after_attempt"}, {"module": "tenacity", "alias": null, "line": 14, "statement": "from tenacity import wait_exponential"}], "constants": [{"name": "T", "line": 26, "value": "TypeVar(\"T\")", "type": ""}, {"name": "RETRYABLE_EXCEPTIONS", "line": 29, "value": "(Exception,)  # Broad exception handling - customize as needed", "type": ""}]}, "key_elements": [{"name": "functools", "type": "import", "line": 9}, {"name": "logging", "type": "import", "line": 10}, {"name": "from collections.abc import Callable", "type": "import", "line": 11}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "from typing import TypeVar", "type": "import", "line": 12}, {"name": "from tenacity import after_log", "type": "import", "line": 14}, {"name": "from tenacity import before_sleep_log", "type": "import", "line": 14}, {"name": "from tenacity import retry", "type": "import", "line": 14}, {"name": "from tenacity import retry_if_exception_type", "type": "import", "line": 14}, {"name": "from tenacity import stop_after_attempt", "type": "import", "line": 14}, {"name": "from tenacity import wait_exponential", "type": "import", "line": 14}, {"name": "T", "type": "constant", "line": 26}, {"name": "RETRYABLE_EXCEPTIONS", "type": "constant", "line": 29}, {"name": "retry_with_backoff", "type": "function", "line": 32}, {"name": "retry_sync_with_backoff", "type": "function", "line": 75}, {"name": "RetryConfig", "type": "class", "line": 118}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "retry_with_backoff Function", "description": "Function retry_with_backoff implementation.", "line_start": 32, "line_end": 74}, {"name": "retry_sync_with_backoff Function", "description": "Function retry_sync_with_backoff implementation.", "line_start": 75, "line_end": 117}, {"name": "RetryConfig Class", "description": "Class RetryConfig definition and methods.", "line_start": 118, "line_end": 148}, {"name": "Constants", "description": "Global constants and configuration values.", "line_start": 26, "line_end": 29}], "content_hash": "badfa35db223c2df4105dbcb4c6bc9d4"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/__init__.py
  line_count: 13
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "responses", "alias": null, "line": 9, "statement": "from responses import ChatMessage"}, {"module": "responses", "alias": null, "line": 9, "statement": "from responses import FunctionCall"}, {"module": "responses", "alias": null, "line": 9, "statement": "from responses import LLMResponse"}], "constants": []}, "key_elements": [{"name": "from responses import ChatMessage", "type": "import", "line": 9}, {"name": "from responses import FunctionCall", "type": "import", "line": 9}, {"name": "from responses import LLMResponse", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "c30c8b4d1724e93c16dcf1974e1c9308"}'
- path: libs/opsvi-llm/opsvi_llm/schemas/responses.py
  line_count: 181
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "responses.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "MessageRole", "line": 15, "inherits_from": ["str", "Enum):"], "methods": [], "properties": [{"name": "SYSTEM", "line": 16, "type": ""}, {"name": "USER", "line": 17, "type": ""}, {"name": "ASSISTANT", "line": 18, "type": ""}, {"name": "FUNCTION", "line": 19, "type": ""}], "description": "Defines the roles that a message can have in a chat context."}, {"name": "ChatMessage", "line": 24, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_content", "line": 44, "parameters": [{"name": "cls", "type": "self"}, {"name": "values", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Validate that content is provided for non-function messages.", "signature": "validate_content(cls, values: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Represents a single message in a chat, including its content and role."}, {"name": "FunctionCall", "line": 59, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_arguments", "line": 73, "parameters": [{"name": "cls", "type": "self"}, {"name": "values", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Validate that arguments is a valid JSON string.", "signature": "validate_arguments(cls, values: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Encapsulates details about a function call made during a chat interaction."}, {"name": "LLMResponse", "line": 83, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_generated_text", "line": 115, "parameters": [{"name": "cls", "type": "self"}, {"name": "values", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Validate that generated_text is a non-empty string.", "signature": "validate_generated_text(cls, values: dict[str, Any]) -> dict[str, Any]"}, {"name": "to_dict", "line": 124, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Convert response to dictionary.", "signature": "to_dict(self) -> dict[str, Any]"}, {"name": "get_content", "line": 128, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "str", "description": "Get the main content of the response.", "signature": "get_content(self) -> str"}, {"name": "has_function_calls", "line": 132, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the response contains function calls.", "signature": "has_function_calls(self) -> bool"}, {"name": "get_function_calls", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[FunctionCall]", "description": "Get function calls from the response.", "signature": "get_function_calls(self) -> list[FunctionCall]"}], "properties": [], "description": "Handles the response from a language model, including generated messages and metadata."}, {"name": "GenerationConfig", "line": 141, "inherits_from": ["BaseModel):"], "methods": [{"name": "validate_stop_sequences", "line": 173, "parameters": [{"name": "cls", "type": "self"}, {"name": "values", "type": "dict[str, Any]"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Validate stop sequences.", "signature": "validate_stop_sequences(cls, values: dict[str, Any]) -> dict[str, Any]"}], "properties": [], "description": "Stores configuration settings for text generation parameters."}], "imports": [{"module": "enum", "alias": null, "line": 9, "statement": "from enum import Enum"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Optional"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import Field"}, {"module": "pydantic", "alias": null, "line": 12, "statement": "from pydantic import model_validator"}], "constants": []}, "key_elements": [{"name": "from enum import Enum", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from typing import Optional", "type": "import", "line": 10}, {"name": "from pydantic import BaseModel", "type": "import", "line": 12}, {"name": "from pydantic import Field", "type": "import", "line": 12}, {"name": "from pydantic import model_validator", "type": "import", "line": 12}, {"name": "MessageRole", "type": "class", "line": 15}, {"name": "ChatMessage", "type": "class", "line": 24}, {"name": "FunctionCall", "type": "class", "line": 59}, {"name": "LLMResponse", "type": "class", "line": 83}, {"name": "GenerationConfig", "type": "class", "line": 141}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 12}, {"name": "MessageRole Class", "description": "Class MessageRole definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ChatMessage Class", "description": "Class ChatMessage definition and methods.", "line_start": 24, "line_end": 47}, {"name": "FunctionCall Class", "description": "Class FunctionCall definition and methods.", "line_start": 59, "line_end": 76}, {"name": "LLMResponse Class", "description": "Class LLMResponse definition and methods.", "line_start": 83, "line_end": 139}, {"name": "GenerationConfig Class", "description": "Class GenerationConfig definition and methods.", "line_start": 141, "line_end": 176}], "content_hash": "1277a8ec5cb6504ce6597730908934c5"}'
- path: libs/opsvi-llm/opsvi_llm/providers/__init__.py
  line_count: 15
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "anthropic_provider", "alias": null, "line": 9, "statement": "from anthropic_provider import AnthropicProvider"}, {"module": "base", "alias": null, "line": 10, "statement": "from base import BaseLLMProvider"}, {"module": "openai_provider", "alias": null, "line": 11, "statement": "from openai_provider import OpenAIProvider"}], "constants": []}, "key_elements": [{"name": "from anthropic_provider import AnthropicProvider", "type": "import", "line": 9}, {"name": "from base import BaseLLMProvider", "type": "import", "line": 10}, {"name": "from openai_provider import OpenAIProvider", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "02ad29e49fa4bd089c11ebba94bd65c3"}'
- path: libs/opsvi-llm/opsvi_llm/providers/base.py
  line_count: 192
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "BaseLLMProvider", "line": 16, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "model", "type": "str"}], "is_async": false, "description": "\n        Initialize the LLM provider.\n\n        Args:\n            model: Model identifier for the LLM service\n            **kwargs: Additional provider-specific configuration\n        ", "signature": "__init__(self, model: str, **kwargs: Any):)"}, {"name": "_validate_config", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "\n        Validate provider-specific configuration.\n\n        Raises:\n            ValueError: If configuration is invalid\n        ", "signature": "_validate_config(self) -> None"}, {"name": "generate", "line": 47, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion based on prompt.\n\n        Args:\n            prompt: Input prompt for generation\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n\n        Raises:\n            Exception: If generation fails\n        ", "signature": "async generate(self, prompt: str, config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_chat", "line": 67, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate chat completion based on message history.\n\n        Args:\n            messages: List of chat messages\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n\n        Raises:\n            Exception: If generation fails\n        ", "signature": "async generate_chat(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_with_functions", "line": 90, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "functions", "type": "list[dict[str, Any]]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion with function calling support.\n\n        Args:\n            messages: List of chat messages\n            functions: List of function definitions\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with function calls\n\n        Raises:\n            Exception: If generation fails\n        ", "signature": "async generate_with_functions(self, messages: list[ChatMessage], functions: list[dict[str, Any]], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_with_retry", "line": 115, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion with automatic retry logic.\n\n        Args:\n            prompt: Input prompt for generation\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate_with_retry(self, prompt: str, config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_chat_with_retry", "line": 132, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate chat completion with automatic retry logic.\n\n        Args:\n            messages: List of chat messages\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate_chat_with_retry(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "get_model_info", "line": 151, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "dict[str, Any]", "description": "\n        Get information about the current model.\n\n        Returns:\n            Dict[str, Any]: Model information\n        ", "signature": "get_model_info(self) -> dict[str, Any]"}, {"name": "supports_function_calling", "line": 164, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "\n        Check if the provider supports function calling.\n\n        Returns:\n            bool: True if function calling is supported\n        ", "signature": "supports_function_calling(self) -> bool"}, {"name": "supports_streaming", "line": 173, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "\n        Check if the provider supports streaming responses.\n\n        Returns:\n            bool: True if streaming is supported\n        ", "signature": "supports_streaming(self) -> bool"}, {"name": "health_check", "line": 182, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "\n        Perform a health check on the provider.\n\n        Returns:\n            bool: True if provider is healthy\n        ", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Abstract base class defining the interface and common functionality for language model providers."}], "imports": [{"module": "abc", "alias": null, "line": 9, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 9, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "schemas.responses", "alias": null, "line": 12, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 12, "statement": "from schemas.responses import GenerationConfig"}, {"module": "schemas.responses", "alias": null, "line": 12, "statement": "from schemas.responses import LLMResponse"}, {"module": "utils.retry", "alias": null, "line": 13, "statement": "from utils.retry import retry_with_backoff"}], "constants": []}, "key_elements": [{"name": "from abc import ABC", "type": "import", "line": 9}, {"name": "from abc import abstractmethod", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 12}, {"name": "from schemas.responses import GenerationConfig", "type": "import", "line": 12}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 12}, {"name": "from utils.retry import retry_with_backoff", "type": "import", "line": 13}, {"name": "BaseLLMProvider", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "BaseLLMProvider Class", "description": "Class BaseLLMProvider definition and methods.", "line_start": 16, "line_end": 185}], "content_hash": "4df480a6b4bba41c4cab8149d3935bbe"}'
- path: libs/opsvi-llm/opsvi_llm/providers/openai_provider.py
  line_count: 344
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "openai_provider.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "OpenAIProvider", "line": 28, "inherits_from": ["BaseLLMProvider):"], "methods": [{"name": "__init__", "line": 40, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str"}, {"name": "model", "type": "str", "default": "gpt-4"}, {"name": "organization", "type": "str | None", "default": "None"}, {"name": "base_url", "type": "str | None", "default": "None"}], "is_async": false, "description": "\n        Initialize the OpenAI provider.\n\n        Args:\n            api_key: OpenAI API key\n            model: Model identifier (e.g., \"gpt-4\", \"gpt-3.5-turbo\")\n            organization: OpenAI organization ID (optional)\n            base_url: Custom base URL for API calls (optional)\n            **kwargs: Additional configuration options\n        ", "signature": "__init__(self, api_key: str, model: str = gpt-4, organization: str | None = None, base_url: str | None = None, **kwargs: Any)"}, {"name": "_validate_config", "line": 73, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Validate OpenAI-specific configuration.", "signature": "_validate_config(self) -> None"}, {"name": "_setup_rate_limiting", "line": 81, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup rate limiting for OpenAI API.", "signature": "_setup_rate_limiting(self) -> None"}, {"name": "generate", "line": 89, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion based on prompt.\n\n        Args:\n            prompt: Input prompt for generation\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate(self, prompt: str, config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_chat", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate chat completion based on message history.\n\n        Args:\n            messages: List of chat messages\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate_chat(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_with_functions", "line": 145, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "functions", "type": "list[dict[str, Any]]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion with function calling support.\n\n        Args:\n            messages: List of chat messages\n            functions: List of function definitions\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with function calls\n        ", "signature": "async generate_with_functions(self, messages: list[ChatMessage], functions: list[dict[str, Any]], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "_prepare_request_params", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Prepare request parameters for OpenAI API.", "signature": "_prepare_request_params(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> dict[str, Any]"}, {"name": "_parse_chat_response", "line": 234, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "ChatCompletion"}, {"name": "original_messages", "type": "list[ChatMessage]"}], "is_async": false, "return_type": "LLMResponse", "description": "Parse OpenAI chat completion response.", "signature": "_parse_chat_response(self, response: ChatCompletion, original_messages: list[ChatMessage]) -> LLMResponse"}, {"name": "generate_stream", "line": 285, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "description": "\n        Generate streaming chat completion.\n\n        Args:\n            messages: List of chat messages\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Yields:\n            LLMResponse: Partial responses as they arrive\n        ", "signature": "async generate_stream(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any)"}, {"name": "supports_function_calling", "line": 331, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the provider supports function calling.", "signature": "supports_function_calling(self) -> bool"}, {"name": "supports_streaming", "line": 335, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the provider supports streaming responses.", "signature": "supports_streaming(self) -> bool"}, {"name": "health_check", "line": 339, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform a health check on the provider.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Manages interactions with the OpenAI API, including request handling, response processing, and configuration management."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "openai", "alias": null, "line": 12, "statement": "from openai import AsyncOpenAI"}, {"module": "openai.types.chat", "alias": null, "line": 13, "statement": "from openai.types.chat import ChatCompletion"}, {"module": "schemas.responses", "alias": null, "line": 15, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 15, "statement": "from schemas.responses import FunctionCall"}, {"module": "schemas.responses", "alias": null, "line": 15, "statement": "from schemas.responses import GenerationConfig"}, {"module": "schemas.responses", "alias": null, "line": 15, "statement": "from schemas.responses import LLMResponse"}, {"module": "schemas.responses", "alias": null, "line": 15, "statement": "from schemas.responses import MessageRole"}, {"module": "utils.rate_limiting", "alias": null, "line": 22, "statement": "from utils.rate_limiting import RateLimitConfig"}, {"module": "utils.rate_limiting", "alias": null, "line": 22, "statement": "from utils.rate_limiting import add_global_rate_limiter"}, {"module": "base", "alias": null, "line": 23, "statement": "from base import BaseLLMProvider"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from openai import AsyncOpenAI", "type": "import", "line": 12}, {"name": "from openai.types.chat import ChatCompletion", "type": "import", "line": 13}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 15}, {"name": "from schemas.responses import FunctionCall", "type": "import", "line": 15}, {"name": "from schemas.responses import GenerationConfig", "type": "import", "line": 15}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 15}, {"name": "from schemas.responses import MessageRole", "type": "import", "line": 15}, {"name": "from utils.rate_limiting import RateLimitConfig", "type": "import", "line": 22}, {"name": "from utils.rate_limiting import add_global_rate_limiter", "type": "import", "line": 22}, {"name": "from base import BaseLLMProvider", "type": "import", "line": 23}, {"name": "OpenAIProvider", "type": "class", "line": 28}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 23}, {"name": "OpenAIProvider Class", "description": "Class OpenAIProvider definition and methods.", "line_start": 28, "line_end": 342}], "content_hash": "acc1e96b522694c925068a337c174035"}'
- path: libs/opsvi-llm/opsvi_llm/providers/anthropic_provider.py
  line_count: 247
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "anthropic_provider.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "AnthropicProvider", "line": 26, "inherits_from": ["BaseLLMProvider):"], "methods": [{"name": "__init__", "line": 37, "parameters": [{"name": "self", "type": "self"}, {"name": "api_key", "type": "str"}, {"name": "model", "type": "str", "default": "claude-3-sonnet-20240229"}], "is_async": false, "description": "\n        Initialize the Anthropic provider.\n\n        Args:\n            api_key: Anthropic API key\n            model: Model identifier (e.g., \"claude-3-sonnet-20240229\")\n            **kwargs: Additional configuration options\n        ", "signature": "__init__(self, api_key: str, model: str = claude-3-sonnet-20240229, **kwargs: Any)"}, {"name": "_validate_config", "line": 59, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Validate Anthropic-specific configuration.", "signature": "_validate_config(self) -> None"}, {"name": "_setup_rate_limiting", "line": 67, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Setup rate limiting for Anthropic API.", "signature": "_setup_rate_limiting(self) -> None"}, {"name": "generate", "line": 75, "parameters": [{"name": "self", "type": "self"}, {"name": "prompt", "type": "str"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion based on prompt.\n\n        Args:\n            prompt: Input prompt for generation\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate(self, prompt: str, config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_chat", "line": 93, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate chat completion based on message history.\n\n        Args:\n            messages: List of chat messages\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with generated content\n        ", "signature": "async generate_chat(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "generate_with_functions", "line": 131, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "functions", "type": "list[dict[str, Any]]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": true, "return_type": "LLMResponse", "description": "\n        Generate completion with function calling support.\n\n        Note: Anthropic''s function calling support may differ from OpenAI''s.\n        This is a placeholder implementation.\n\n        Args:\n            messages: List of chat messages\n            functions: List of function definitions\n            config: Generation configuration parameters\n            **kwargs: Additional generation parameters\n\n        Returns:\n            LLMResponse: Structured response with function calls\n        ", "signature": "async generate_with_functions(self, messages: list[ChatMessage], functions: list[dict[str, Any]], config: GenerationConfig | None = None, **kwargs: Any) -> LLMResponse"}, {"name": "_prepare_request_params", "line": 157, "parameters": [{"name": "self", "type": "self"}, {"name": "messages", "type": "list[ChatMessage]"}, {"name": "config", "type": "GenerationConfig | None", "default": "None"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Prepare request parameters for Anthropic API.", "signature": "_prepare_request_params(self, messages: list[ChatMessage], config: GenerationConfig | None = None, **kwargs: Any) -> dict[str, Any]"}, {"name": "_parse_chat_response", "line": 189, "parameters": [{"name": "self", "type": "self"}, {"name": "response", "type": "Any"}, {"name": "original_messages", "type": "list[ChatMessage]"}], "is_async": false, "return_type": "LLMResponse", "description": "Parse Anthropic chat completion response.", "signature": "_parse_chat_response(self, response: Any, original_messages: list[ChatMessage]) -> LLMResponse"}, {"name": "supports_function_calling", "line": 234, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the provider supports function calling.", "signature": "supports_function_calling(self) -> bool"}, {"name": "supports_streaming", "line": 238, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "Check if the provider supports streaming responses.", "signature": "supports_streaming(self) -> bool"}, {"name": "health_check", "line": 242, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "bool", "description": "Perform a health check on the provider.", "signature": "async health_check(self) -> bool"}], "properties": [], "description": "Handles interactions with the Anthropic API, providing methods for text generation, chat completions, and managing API requests."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 10, "statement": "from typing import Any"}, {"module": "anthropic", "alias": null, "line": 12, "statement": "from anthropic import AsyncAnthropic"}, {"module": "schemas.responses", "alias": null, "line": 14, "statement": "from schemas.responses import ChatMessage"}, {"module": "schemas.responses", "alias": null, "line": 14, "statement": "from schemas.responses import GenerationConfig"}, {"module": "schemas.responses", "alias": null, "line": 14, "statement": "from schemas.responses import LLMResponse"}, {"module": "schemas.responses", "alias": null, "line": 14, "statement": "from schemas.responses import MessageRole"}, {"module": "utils.rate_limiting", "alias": null, "line": 20, "statement": "from utils.rate_limiting import RateLimitConfig"}, {"module": "utils.rate_limiting", "alias": null, "line": 20, "statement": "from utils.rate_limiting import add_global_rate_limiter"}, {"module": "base", "alias": null, "line": 21, "statement": "from base import BaseLLMProvider"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from typing import Any", "type": "import", "line": 10}, {"name": "from anthropic import AsyncAnthropic", "type": "import", "line": 12}, {"name": "from schemas.responses import ChatMessage", "type": "import", "line": 14}, {"name": "from schemas.responses import GenerationConfig", "type": "import", "line": 14}, {"name": "from schemas.responses import LLMResponse", "type": "import", "line": 14}, {"name": "from schemas.responses import MessageRole", "type": "import", "line": 14}, {"name": "from utils.rate_limiting import RateLimitConfig", "type": "import", "line": 20}, {"name": "from utils.rate_limiting import add_global_rate_limiter", "type": "import", "line": 20}, {"name": "from base import BaseLLMProvider", "type": "import", "line": 21}, {"name": "AnthropicProvider", "type": "class", "line": 26}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 21}, {"name": "AnthropicProvider Class", "description": "Class AnthropicProvider definition and methods.", "line_start": 26, "line_end": 245}], "content_hash": "d88cb7d2ed806d56b596bdc520267a2a"}'
- path: libs/opsvi-llm/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "08edff2d89ff34f4badc935392c037de"}'
- path: libs/opsvi-llm/tests/test_schemas.py
  line_count: 224
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_schemas.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "TestMessageRole", "line": 19, "inherits_from": [], "methods": [{"name": "test_message_roles", "line": 22, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test all message roles are defined.", "signature": "test_message_roles(self)"}], "properties": [], "description": "Tests related to the roles assigned to messages in the chat system."}, {"name": "TestChatMessage", "line": 30, "inherits_from": [], "methods": [{"name": "test_valid_chat_message", "line": 33, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid chat message.", "signature": "test_valid_chat_message(self)"}, {"name": "test_chat_message_with_name", "line": 41, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with name.", "signature": "test_chat_message_with_name(self)"}, {"name": "test_chat_message_with_function_call", "line": 48, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test chat message with function call.", "signature": "test_chat_message_with_function_call(self)"}, {"name": "test_invalid_empty_content", "line": 58, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty content is rejected for non-function messages.", "signature": "test_invalid_empty_content(self)"}, {"name": "test_function_message_empty_content", "line": 63, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that function messages can have empty content.", "signature": "test_function_message_empty_content(self)"}], "properties": [], "description": "Tests for the ChatMessage class, covering message creation, serialization, and role handling."}, {"name": "TestFunctionCall", "line": 74, "inherits_from": [], "methods": [{"name": "test_valid_function_call", "line": 77, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid function call.", "signature": "test_valid_function_call(self)"}, {"name": "test_invalid_arguments_type", "line": 85, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that arguments must be a string.", "signature": "test_invalid_arguments_type(self)"}], "properties": [], "description": "Tests for function call representations within chat messages."}, {"name": "TestLLMResponse", "line": 93, "inherits_from": [], "methods": [{"name": "test_valid_llm_response", "line": 96, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid LLM response.", "signature": "test_valid_llm_response(self)"}, {"name": "test_llm_response_with_messages", "line": 105, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with messages.", "signature": "test_llm_response_with_messages(self)"}, {"name": "test_llm_response_with_function_calls", "line": 114, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with function calls.", "signature": "test_llm_response_with_function_calls(self)"}, {"name": "test_llm_response_with_metadata", "line": 125, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response with metadata.", "signature": "test_llm_response_with_metadata(self)"}, {"name": "test_invalid_empty_generated_text", "line": 131, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that empty generated_text is rejected.", "signature": "test_invalid_empty_generated_text(self)"}, {"name": "test_invalid_generated_text_type", "line": 136, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test that generated_text must be a string.", "signature": "test_invalid_generated_text_type(self)"}, {"name": "test_llm_response_methods", "line": 141, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test LLM response utility methods.", "signature": "test_llm_response_methods(self)"}, {"name": "test_llm_response_to_dict", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test converting LLM response to dictionary.", "signature": "test_llm_response_to_dict(self)"}], "properties": [], "description": "Tests for the response handling of large language model outputs, including parsing and validation."}, {"name": "TestGenerationConfig", "line": 161, "inherits_from": [], "methods": [{"name": "test_valid_generation_config", "line": 164, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test creating a valid generation config.", "signature": "test_valid_generation_config(self)"}, {"name": "test_generation_config_with_values", "line": 174, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config with custom values.", "signature": "test_generation_config_with_values(self)"}, {"name": "test_generation_config_validation", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test generation config validation.", "signature": "test_generation_config_validation(self)"}, {"name": "test_stop_sequences_validation", "line": 214, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test stop sequences validation.", "signature": "test_stop_sequences_validation(self)"}], "properties": [], "description": "Tests for configuration settings used during text generation by the language model."}], "imports": [{"module": "pytest", "alias": null, "line": 7, "statement": "import pytest"}, {"module": "pydantic", "alias": null, "line": 8, "statement": "from pydantic import ValidationError"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import ChatMessage"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import FunctionCall"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import GenerationConfig"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import LLMResponse"}, {"module": "opsvi_llm.schemas.responses", "alias": null, "line": 10, "statement": "from opsvi_llm.schemas.responses import MessageRole"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 7}, {"name": "from pydantic import ValidationError", "type": "import", "line": 8}, {"name": "from opsvi_llm.schemas.responses import ChatMessage", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import FunctionCall", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import GenerationConfig", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import LLMResponse", "type": "import", "line": 10}, {"name": "from opsvi_llm.schemas.responses import MessageRole", "type": "import", "line": 10}, {"name": "TestMessageRole", "type": "class", "line": 19}, {"name": "TestChatMessage", "type": "class", "line": 30}, {"name": "TestFunctionCall", "type": "class", "line": 74}, {"name": "TestLLMResponse", "type": "class", "line": 93}, {"name": "TestGenerationConfig", "type": "class", "line": 161}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 10}, {"name": "TestMessageRole Class", "description": "Class TestMessageRole definition and methods.", "line_start": 19, "line_end": 25}, {"name": "TestChatMessage Class", "description": "Class TestChatMessage definition and methods.", "line_start": 30, "line_end": 66}, {"name": "TestFunctionCall Class", "description": "Class TestFunctionCall definition and methods.", "line_start": 74, "line_end": 88}, {"name": "TestLLMResponse Class", "description": "Class TestLLMResponse definition and methods.", "line_start": 93, "line_end": 156}, {"name": "TestGenerationConfig Class", "description": "Class TestGenerationConfig definition and methods.", "line_start": 161, "line_end": 217}], "content_hash": "b41644fb5db6fecc02c3e2e1bec952d4"}'
- path: libs/opsvi-llm/src/opsvi/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "2a35222043dd8c22b1c74cc97aeffcaa"}'
- path: libs/opsvi-llm/src/opsvi/llm/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "client", "alias": null, "line": 5, "statement": "from client import call"}], "constants": []}, "key_elements": [{"name": "from client import call", "type": "import", "line": 5}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}], "content_hash": "9f81acd101b728b8e160bdd535094860"}'
- path: libs/opsvi-llm/src/opsvi/llm/client.py
  line_count: 28
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "client.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "call", "line": 8, "parameters": [{"name": "model", "type": "str"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Executes the specified model and returns the output as a dictionary.", "signature": "call(model: str) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "call", "type": "function", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 14}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "call Function", "description": "Function call implementation.", "line_start": 8, "line_end": 13}], "content_hash": "f2f318569567704c205c563c540b7e1d"}'
- path: libs/opsvi-core/opsvi_core/__init__.py
  line_count: 42
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "agents.base_agent", "alias": null, "line": 14, "statement": "from agents.base_agent import BaseAgent"}, {"module": "core.config", "alias": null, "line": 15, "statement": "from core.config import AppConfig"}, {"module": "core.config", "alias": null, "line": 15, "statement": "from core.config import config"}, {"module": "core.config", "alias": null, "line": 15, "statement": "from core.config import load_config"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import ConfigurationError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import DatabaseConnectionError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import ExternalServiceError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import InitializationError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import OpsviError"}, {"module": "core.exceptions", "alias": null, "line": 16, "statement": "from core.exceptions import ValidationError"}, {"module": "core.logging", "alias": null, "line": 24, "statement": "from core.logging import setup_logging"}, {"module": "core.patterns", "alias": null, "line": 25, "statement": "from core.patterns import BaseActor"}], "constants": []}, "key_elements": [{"name": "from agents.base_agent import BaseAgent", "type": "import", "line": 14}, {"name": "from core.config import AppConfig", "type": "import", "line": 15}, {"name": "from core.config import config", "type": "import", "line": 15}, {"name": "from core.config import load_config", "type": "import", "line": 15}, {"name": "from core.exceptions import ConfigurationError", "type": "import", "line": 16}, {"name": "from core.exceptions import DatabaseConnectionError", "type": "import", "line": 16}, {"name": "from core.exceptions import ExternalServiceError", "type": "import", "line": 16}, {"name": "from core.exceptions import InitializationError", "type": "import", "line": 16}, {"name": "from core.exceptions import OpsviError", "type": "import", "line": 16}, {"name": "from core.exceptions import ValidationError", "type": "import", "line": 16}, {"name": "from core.logging import setup_logging", "type": "import", "line": 24}, {"name": "from core.patterns import BaseActor", "type": "import", "line": 25}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 14, "line_end": 25}], "content_hash": "38d0d7705a23bbfeef60b798aa96755e"}'
- path: libs/opsvi-core/opsvi_core/core/__init__.py
  line_count: 31
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import AppConfig"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import config"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import load_config"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ConfigurationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import DatabaseConnectionError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ExternalServiceError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import InitializationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import OpsviError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ValidationError"}, {"module": "logging", "alias": null, "line": 18, "statement": "from logging import setup_logging"}, {"module": "patterns", "alias": null, "line": 19, "statement": "from patterns import BaseActor"}], "constants": []}, "key_elements": [{"name": "from config import AppConfig", "type": "import", "line": 9}, {"name": "from config import config", "type": "import", "line": 9}, {"name": "from config import load_config", "type": "import", "line": 9}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 10}, {"name": "from exceptions import DatabaseConnectionError", "type": "import", "line": 10}, {"name": "from exceptions import ExternalServiceError", "type": "import", "line": 10}, {"name": "from exceptions import InitializationError", "type": "import", "line": 10}, {"name": "from exceptions import OpsviError", "type": "import", "line": 10}, {"name": "from exceptions import ValidationError", "type": "import", "line": 10}, {"name": "from logging import setup_logging", "type": "import", "line": 18}, {"name": "from patterns import BaseActor", "type": "import", "line": 19}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 19}], "content_hash": "9f4902f0ba947c469afd6d9f3b4eee81"}'
- path: libs/opsvi-core/opsvi_core/core/exceptions.py
  line_count: 80
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 12 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "OpsviError", "line": 10, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 13, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "dict", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: dict = None)"}], "properties": [], "description": "Base exception class for Opsvi-related errors."}, {"name": "ConfigurationError", "line": 19, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related issues."}, {"name": "InitializationError", "line": 25, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised during initialization failures."}, {"name": "ValidationError", "line": 31, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised when validation of data fails."}, {"name": "ExternalServiceError", "line": 37, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised when an external service call fails."}, {"name": "DatabaseConnectionError", "line": 43, "inherits_from": ["ExternalServiceError):"], "methods": [], "properties": [], "description": "Exception raised when the database connection fails."}, {"name": "AuthenticationError", "line": 49, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised for authentication failures."}, {"name": "ResourceNotFoundError", "line": 55, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised when a requested resource is not found."}, {"name": "TimeoutError", "line": 61, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised when an operation times out."}, {"name": "RateLimitError", "line": 67, "inherits_from": ["ExternalServiceError):"], "methods": [], "properties": [], "description": "Exception raised when rate limits are exceeded."}, {"name": "NetworkError", "line": 73, "inherits_from": ["ExternalServiceError):"], "methods": [], "properties": [], "description": "Exception raised for network-related errors."}, {"name": "SerializationError", "line": 79, "inherits_from": ["OpsviError):"], "methods": [], "properties": [], "description": "Exception raised during serialization or deserialization failures."}], "imports": [], "constants": []}, "key_elements": [{"name": "OpsviError", "type": "class", "line": 10}, {"name": "ConfigurationError", "type": "class", "line": 19}, {"name": "InitializationError", "type": "class", "line": 25}, {"name": "ValidationError", "type": "class", "line": 31}, {"name": "ExternalServiceError", "type": "class", "line": 37}, {"name": "DatabaseConnectionError", "type": "class", "line": 43}, {"name": "AuthenticationError", "type": "class", "line": 49}, {"name": "ResourceNotFoundError", "type": "class", "line": 55}, {"name": "TimeoutError", "type": "class", "line": 61}, {"name": "RateLimitError", "type": "class", "line": 67}, {"name": "NetworkError", "type": "class", "line": 73}, {"name": "SerializationError", "type": "class", "line": 79}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "OpsviError Class", "description": "Class OpsviError definition and methods.", "line_start": 10, "line_end": 16}, {"name": "ConfigurationError Class", "description": "Class ConfigurationError definition and methods.", "line_start": 19, "line_end": 29}, {"name": "InitializationError Class", "description": "Class InitializationError definition and methods.", "line_start": 25, "line_end": 35}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 31, "line_end": 41}, {"name": "ExternalServiceError Class", "description": "Class ExternalServiceError definition and methods.", "line_start": 37, "line_end": 47}, {"name": "DatabaseConnectionError Class", "description": "Class DatabaseConnectionError definition and methods.", "line_start": 43, "line_end": 53}, {"name": "AuthenticationError Class", "description": "Class AuthenticationError definition and methods.", "line_start": 49, "line_end": 59}, {"name": "ResourceNotFoundError Class", "description": "Class ResourceNotFoundError definition and methods.", "line_start": 55, "line_end": 65}, {"name": "TimeoutError Class", "description": "Class TimeoutError definition and methods.", "line_start": 61, "line_end": 71}, {"name": "RateLimitError Class", "description": "Class RateLimitError definition and methods.", "line_start": 67, "line_end": 77}, {"name": "NetworkError Class", "description": "Class NetworkError definition and methods.", "line_start": 73, "line_end": 83}, {"name": "SerializationError Class", "description": "Class SerializationError definition and methods.", "line_start": 79, "line_end": 89}], "content_hash": "a3a043091714268a103f36a50d180d4d"}'
- path: libs/opsvi-core/opsvi_core/core/config.py
  line_count: 58
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 1 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "load_config", "line": 41, "parameters": [], "is_async": false, "return_type": "AppConfig", "description": "Loads and returns the application configuration settings.", "signature": "load_config() -> AppConfig"}], "classes": [{"name": "AppConfig", "line": 17, "inherits_from": ["BaseSettings):"], "methods": [], "properties": [], "description": "Represents the application configuration data."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "pydantic", "alias": null, "line": 11, "statement": "from pydantic import Field"}, {"module": "pydantic_settings", "alias": null, "line": 12, "statement": "from pydantic_settings import BaseSettings"}, {"module": "exceptions", "alias": null, "line": 14, "statement": "from exceptions import ConfigurationError"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from pydantic import Field", "type": "import", "line": 11}, {"name": "from pydantic_settings import BaseSettings", "type": "import", "line": 12}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 14}, {"name": "AppConfig", "type": "class", "line": 17}, {"name": "load_config", "type": "function", "line": 41}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 14}, {"name": "load_config Function", "description": "Function load_config implementation.", "line_start": 41, "line_end": 46}, {"name": "AppConfig Class", "description": "Class AppConfig definition and methods.", "line_start": 17, "line_end": 27}], "content_hash": "affe9cc06bceaa200ec8079df95bf818"}'
- path: libs/opsvi-core/opsvi_core/core/logging.py
  line_count: 79
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 3 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 18, "parameters": [{"name": "log_level", "type": "str = \"INFO\"", "default": "INFO"}], "is_async": false, "return_type": "None", "description": "Configures the logging system with the specified log level.", "signature": "setup_logging(log_level: str = \"INFO\" = INFO) -> None"}, {"name": "get_logger", "line": 54, "parameters": [{"name": "name", "type": "str"}], "is_async": false, "return_type": "structlog.stdlib.BoundLogger", "description": "Retrieves a logger instance with the given name.", "signature": "get_logger(name: str) -> structlog.stdlib.BoundLogger"}, {"name": "log_context", "line": 67, "parameters": [], "is_async": false, "return_type": "dict[str, Any]", "description": "Creates a logging context dictionary with additional key-value pairs.", "signature": "log_context(**kwargs: Any) -> dict[str, Any]"}], "classes": [], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "os", "alias": null, "line": 10, "statement": "import os"}, {"module": "sys", "alias": null, "line": 11, "statement": "import sys"}, {"module": "orjson", "alias": null, "line": 14, "statement": "import orjson"}, {"module": "structlog", "alias": null, "line": 15, "statement": "import structlog"}, {"module": "typing", "alias": null, "line": 12, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "os", "type": "import", "line": 10}, {"name": "sys", "type": "import", "line": 11}, {"name": "orjson", "type": "import", "line": 14}, {"name": "structlog", "type": "import", "line": 15}, {"name": "from typing import Any", "type": "import", "line": 12}, {"name": "setup_logging", "type": "function", "line": 18}, {"name": "get_logger", "type": "function", "line": 54}, {"name": "log_context", "type": "function", "line": 67}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 15}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 18, "line_end": 53}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 54, "line_end": 66}, {"name": "log_context Function", "description": "Function log_context implementation.", "line_start": 67, "line_end": 72}], "content_hash": "0c7c2e25ea76953f22b17830a5b68347"}'
- path: libs/opsvi-core/opsvi_core/core/patterns.py
  line_count: 201
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "patterns.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "BaseActor", "line": 16, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "\n        Initialize the actor.\n\n        Args:\n            name: Unique name for this actor\n        ", "signature": "__init__(self, name: str):)"}, {"name": "start", "line": 35, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Start the actor, initialize resources.\n\n        Raises:\n            InitializationError: If startup fails\n        ", "signature": "async start(self) -> None"}, {"name": "stop", "line": 50, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Stop the actor, release resources.\n\n        Raises:\n            InitializationError: If shutdown fails\n        ", "signature": "async stop(self) -> None"}, {"name": "on_start", "line": 66, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Hook for custom startup logic.\n\n        Override this method to implement custom initialization.\n        ", "signature": "async on_start(self) -> None"}, {"name": "on_stop", "line": 75, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Hook for custom shutdown logic.\n\n        Override this method to implement custom cleanup.\n        ", "signature": "async on_stop(self) -> None"}, {"name": "handle_message", "line": 83, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict[str, Any]"}], "is_async": true, "return_type": "Any", "description": "\n        Process incoming messages asynchronously.\n\n        Args:\n            message: Message to process\n\n        Returns:\n            Any: Processing result\n\n        Raises:\n            Exception: If message processing fails\n        ", "signature": "async handle_message(self, message: dict[str, Any]) -> Any"}, {"name": "process_message", "line": 107, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict[str, Any]"}], "is_async": true, "return_type": "Any", "description": "\n        To be implemented by subclasses for message processing.\n\n        Args:\n            message: Message to process\n\n        Returns:\n            Any: Processing result\n        ", "signature": "async process_message(self, message: dict[str, Any]) -> Any"}, {"name": "is_active", "line": 119, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "\n        Check if the actor is active.\n\n        Returns:\n            bool: True if actor is active, False otherwise\n        ", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Represents a fundamental actor with core behaviors and properties."}, {"name": "LifecycleComponent", "line": 129, "inherits_from": ["ABC):"], "methods": [{"name": "__init__", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "name", "type": "str):"}], "is_async": false, "description": "\n        Initialize the component.\n\n        Args:\n            name: Unique name for this component\n        ", "signature": "__init__(self, name: str):)"}, {"name": "initialize", "line": 148, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Initialize the component.\n\n        Raises:\n            InitializationError: If initialization fails\n        ", "signature": "async initialize(self) -> None"}, {"name": "shutdown", "line": 165, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Shutdown the component.\n\n        Raises:\n            InitializationError: If shutdown fails\n        ", "signature": "async shutdown(self) -> None"}, {"name": "on_initialize", "line": 183, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Hook for custom initialization logic.\n        ", "signature": "async on_initialize(self) -> None"}, {"name": "on_shutdown", "line": 190, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Hook for custom shutdown logic.\n        ", "signature": "async on_shutdown(self) -> None"}, {"name": "is_active", "line": 196, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "\n        Check if the component is active.\n\n        Returns:\n            bool: True if component is active, False otherwise\n        ", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Manages the lifecycle events and state transitions of an entity."}], "imports": [{"module": "logging", "alias": null, "line": 9, "statement": "import logging"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import ABC"}, {"module": "abc", "alias": null, "line": 10, "statement": "from abc import abstractmethod"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "exceptions", "alias": null, "line": 13, "statement": "from exceptions import InitializationError"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 9}, {"name": "from abc import ABC", "type": "import", "line": 10}, {"name": "from abc import abstractmethod", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from exceptions import InitializationError", "type": "import", "line": 13}, {"name": "BaseActor", "type": "class", "line": 16}, {"name": "LifecycleComponent", "type": "class", "line": 129}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 13}, {"name": "BaseActor Class", "description": "Class BaseActor definition and methods.", "line_start": 16, "line_end": 122}, {"name": "LifecycleComponent Class", "description": "Class LifecycleComponent definition and methods.", "line_start": 129, "line_end": 199}], "content_hash": "24054c45e62d166ad9bb4b847f6efe41"}'
- path: libs/opsvi-core/opsvi_core/agents/__init__.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "base_agent", "alias": null, "line": 9, "statement": "from base_agent import BaseAgent"}], "constants": []}, "key_elements": [{"name": "from base_agent import BaseAgent", "type": "import", "line": 9}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 9}], "content_hash": "15e1c4855806fe2dba99304c0bdfcc0a"}'
- path: libs/opsvi-core/opsvi_core/agents/base_agent.py
  line_count: 162
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "base_agent.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "BaseAgent", "line": 16, "inherits_from": [], "methods": [{"name": "__init__", "line": 24, "parameters": [{"name": "self", "type": "self"}, {"name": "agent_id", "type": "str"}, {"name": "plugins", "type": "list[Any] | None", "default": "None"}], "is_async": false, "description": "\n        Initialize the agent.\n\n        Args:\n            agent_id: Unique identifier for this agent\n            plugins: Optional list of plugins to attach to this agent\n        ", "signature": "__init__(self, agent_id: str, plugins: list[Any] | None = None)"}, {"name": "activate", "line": 37, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Activate the agent, initialize resources.\n\n        Raises:\n            InitializationError: If activation fails\n        ", "signature": "async activate(self) -> None"}, {"name": "deactivate", "line": 54, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Deactivate the agent, clean up resources.\n\n        Raises:\n            InitializationError: If deactivation fails\n        ", "signature": "async deactivate(self) -> None"}, {"name": "handle", "line": 71, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict[str, Any]"}], "is_async": true, "return_type": "Any", "description": "\n        Handle incoming messages asynchronously.\n\n        Args:\n            message: Message to process\n\n        Returns:\n            Any: Processing result\n\n        Raises:\n            Exception: If message processing fails\n        ", "signature": "async handle(self, message: dict[str, Any]) -> Any"}, {"name": "_initialize", "line": 94, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Initialization hook; override as needed.\n\n        Called during agent activation to perform custom initialization.\n        ", "signature": "async _initialize(self) -> None"}, {"name": "_cleanup", "line": 102, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "return_type": "None", "description": "\n        Cleanup hook; override as needed.\n\n        Called during agent deactivation to perform custom cleanup.\n        ", "signature": "async _cleanup(self) -> None"}, {"name": "process", "line": 110, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "dict[str, Any]"}], "is_async": true, "return_type": "Any", "description": "\n        Main message processing method; must be overridden.\n\n        Args:\n            message: Message to process\n\n        Returns:\n            Any: Processing result\n\n        Raises:\n            NotImplementedError: If not implemented by subclass\n        ", "signature": "async process(self, message: dict[str, Any]) -> Any"}, {"name": "add_plugin", "line": 127, "parameters": [{"name": "self", "type": "self"}, {"name": "plugin", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Add a plugin to this agent.\n\n        Args:\n            plugin: Plugin to add\n        ", "signature": "add_plugin(self, plugin: Any) -> None"}, {"name": "remove_plugin", "line": 137, "parameters": [{"name": "self", "type": "self"}, {"name": "plugin", "type": "Any"}], "is_async": false, "return_type": "None", "description": "\n        Remove a plugin from this agent.\n\n        Args:\n            plugin: Plugin to remove\n        ", "signature": "remove_plugin(self, plugin: Any) -> None"}, {"name": "get_plugins", "line": 148, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "list[Any]", "description": "\n        Get all plugins attached to this agent.\n\n        Returns:\n            List[Any]: List of plugins\n        ", "signature": "get_plugins(self) -> list[Any]"}, {"name": "is_active", "line": 157, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "bool", "description": "\n        Check if the agent is active.\n\n        Returns:\n            bool: True if agent is active, False otherwise\n        ", "signature": "is_active(self) -> bool"}], "properties": [], "description": "Represents a foundational agent with core functionalities for managing actions and interactions."}], "imports": [{"module": "logging", "alias": null, "line": 10, "statement": "import logging"}, {"module": "typing", "alias": null, "line": 11, "statement": "from typing import Any"}, {"module": "core.exceptions", "alias": null, "line": 13, "statement": "from core.exceptions import InitializationError"}], "constants": []}, "key_elements": [{"name": "logging", "type": "import", "line": 10}, {"name": "from typing import Any", "type": "import", "line": 11}, {"name": "from core.exceptions import InitializationError", "type": "import", "line": 13}, {"name": "BaseAgent", "type": "class", "line": 16}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 8}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 10, "line_end": 13}, {"name": "BaseAgent Class", "description": "Class BaseAgent definition and methods.", "line_start": 16, "line_end": 160}], "content_hash": "f09fc97ff467bd8ac794907b2bc1531e"}'
- path: libs/opsvi-core/tests/__init__.py
  line_count: 5
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}], "content_hash": "1b6ec8a3d830b8a6e90b76ec782cac26"}'
- path: libs/opsvi-core/tests/test_core.py
  line_count: 292
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_core.py", "description": "Python module with 0 functions and 6 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "TestConfiguration", "line": 25, "inherits_from": [], "methods": [{"name": "test_config_loading", "line": 28, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure config loads with expected attributes.", "signature": "test_config_loading(self)"}, {"name": "test_config_defaults", "line": 36, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test configuration default values.", "signature": "test_config_defaults(self)"}, {"name": "test_load_config_function", "line": 43, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test load_config function.", "signature": "test_load_config_function(self)"}], "properties": [], "description": "Tests for configuration loading and validation."}, {"name": "TestLogging", "line": 50, "inherits_from": [], "methods": [{"name": "test_logging_setup", "line": 53, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Ensure logging setup does not raise.", "signature": "test_logging_setup(self)"}, {"name": "test_get_logger", "line": 57, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting a structured logger.", "signature": "test_get_logger(self)"}, {"name": "test_log_context", "line": 64, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test log context creation.", "signature": "test_log_context(self)"}], "properties": [], "description": "Tests for logging functionality and output."}, {"name": "TestExceptions", "line": 73, "inherits_from": [], "methods": [{"name": "test_base_exception", "line": 76, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test base OpsviError exception.", "signature": "test_base_exception(self)"}, {"name": "test_exception_with_details", "line": 81, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test exception with additional details.", "signature": "test_exception_with_details(self)"}, {"name": "test_configuration_error", "line": 88, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ConfigurationError.", "signature": "test_configuration_error(self)"}, {"name": "test_initialization_error", "line": 93, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test InitializationError.", "signature": "test_initialization_error(self)"}, {"name": "test_validation_error", "line": 98, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ValidationError.", "signature": "test_validation_error(self)"}, {"name": "test_external_service_error", "line": 103, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test ExternalServiceError.", "signature": "test_external_service_error(self)"}, {"name": "test_database_connection_error", "line": 108, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test DatabaseConnectionError.", "signature": "test_database_connection_error(self)"}], "properties": [], "description": "Tests for exception handling and error cases."}, {"name": "TestBaseActor", "line": 114, "inherits_from": [], "methods": [{"name": "test_actor_initialization", "line": 133, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor initialization.", "signature": "async test_actor_initialization(self)"}, {"name": "test_actor_start_stop", "line": 140, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor start and stop lifecycle.", "signature": "async test_actor_start_stop(self)"}, {"name": "test_actor_message_handling", "line": 153, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test actor message handling.", "signature": "async test_actor_message_handling(self)"}, {"name": "test_actor_inactive_message_handling", "line": 163, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when actor is inactive.", "signature": "async test_actor_inactive_message_handling(self)"}, {"name": "test_actor_is_active", "line": 170, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test actor active status check.", "signature": "test_actor_is_active(self)"}], "properties": [], "description": "Tests for base actor behavior and interactions."}, {"name": "TestLifecycleComponent", "line": 176, "inherits_from": [], "methods": [{"name": "test_component_initialization", "line": 191, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialization.", "signature": "async test_component_initialization(self)"}, {"name": "test_component_initialize_shutdown", "line": 198, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test component initialize and shutdown lifecycle.", "signature": "async test_component_initialize_shutdown(self)"}, {"name": "test_component_is_active", "line": 210, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test component active status check.", "signature": "test_component_is_active(self)"}], "properties": [], "description": "Tests for component lifecycle management."}, {"name": "TestBaseAgent", "line": 216, "inherits_from": [], "methods": [{"name": "test_agent_initialization", "line": 227, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent initialization.", "signature": "async test_agent_initialization(self)"}, {"name": "test_agent_activation_deactivation", "line": 235, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent activation and deactivation.", "signature": "async test_agent_activation_deactivation(self)"}, {"name": "test_agent_message_handling", "line": 248, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test agent message handling.", "signature": "async test_agent_message_handling(self)"}, {"name": "test_agent_inactive_message_handling", "line": 258, "parameters": [{"name": "self", "type": "self"}], "is_async": true, "description": "Test message handling when agent is inactive.", "signature": "async test_agent_inactive_message_handling(self)"}, {"name": "test_agent_plugin_management", "line": 265, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent plugin management.", "signature": "test_agent_plugin_management(self)"}, {"name": "test_agent_get_plugins", "line": 280, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test getting agent plugins.", "signature": "test_agent_get_plugins(self)"}, {"name": "test_agent_is_active", "line": 291, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "description": "Test agent active status check.", "signature": "test_agent_is_active(self)"}], "properties": [], "description": "Tests for base agent operations and state management."}], "imports": [{"module": "pytest", "alias": null, "line": 9, "statement": "import pytest"}, {"module": "unittest.mock", "alias": null, "line": 7, "statement": "from unittest.mock import Mock"}, {"module": "opsvi_core.agents.base_agent", "alias": null, "line": 11, "statement": "from opsvi_core.agents.base_agent import BaseAgent"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import AppConfig"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import config"}, {"module": "opsvi_core.core.config", "alias": null, "line": 12, "statement": "from opsvi_core.core.config import load_config"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ConfigurationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import DatabaseConnectionError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ExternalServiceError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import InitializationError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import OpsviError"}, {"module": "opsvi_core.core.exceptions", "alias": null, "line": 13, "statement": "from opsvi_core.core.exceptions import ValidationError"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import get_logger"}, {"module": "opsvi_core.core.logging", "alias": null, "line": 21, "statement": "from opsvi_core.core.logging import setup_logging"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import BaseActor"}, {"module": "opsvi_core.core.patterns", "alias": null, "line": 22, "statement": "from opsvi_core.core.patterns import LifecycleComponent"}], "constants": []}, "key_elements": [{"name": "pytest", "type": "import", "line": 9}, {"name": "from unittest.mock import Mock", "type": "import", "line": 7}, {"name": "from opsvi_core.agents.base_agent import BaseAgent", "type": "import", "line": 11}, {"name": "from opsvi_core.core.config import AppConfig", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.config import load_config", "type": "import", "line": 12}, {"name": "from opsvi_core.core.exceptions import ConfigurationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import DatabaseConnectionError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ExternalServiceError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import InitializationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import OpsviError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.exceptions import ValidationError", "type": "import", "line": 13}, {"name": "from opsvi_core.core.logging import get_logger", "type": "import", "line": 21}, {"name": "from opsvi_core.core.logging import setup_logging", "type": "import", "line": 21}, {"name": "from opsvi_core.core.patterns import BaseActor", "type": "import", "line": 22}, {"name": "from opsvi_core.core.patterns import LifecycleComponent", "type": "import", "line": 22}, {"name": "TestConfiguration", "type": "class", "line": 25}, {"name": "TestLogging", "type": "class", "line": 50}, {"name": "TestExceptions", "type": "class", "line": 73}, {"name": "TestBaseActor", "type": "class", "line": 114}, {"name": "TestLifecycleComponent", "type": "class", "line": 176}, {"name": "TestBaseAgent", "type": "class", "line": 216}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 5}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 7, "line_end": 22}, {"name": "TestConfiguration Class", "description": "Class TestConfiguration definition and methods.", "line_start": 25, "line_end": 46}, {"name": "TestLogging Class", "description": "Class TestLogging definition and methods.", "line_start": 50, "line_end": 67}, {"name": "TestExceptions Class", "description": "Class TestExceptions definition and methods.", "line_start": 73, "line_end": 111}, {"name": "TestBaseActor Class", "description": "Class TestBaseActor definition and methods.", "line_start": 114, "line_end": 173}, {"name": "TestLifecycleComponent Class", "description": "Class TestLifecycleComponent definition and methods.", "line_start": 176, "line_end": 213}, {"name": "TestBaseAgent Class", "description": "Class TestBaseAgent definition and methods.", "line_start": 216, "line_end": 294}], "content_hash": "aee193451511c6b2cac4e03e863ee8aa"}'
- path: libs/opsvi-core/src/opsvi_core/__init__.py
  line_count: 19
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "config", "alias": null, "line": 9, "statement": "from config import Config"}, {"module": "config", "alias": null, "line": 9, "statement": "from config import ConfigManager"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ConfigurationError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import OPSVIError"}, {"module": "exceptions", "alias": null, "line": 10, "statement": "from exceptions import ValidationError"}, {"module": "logging", "alias": null, "line": 11, "statement": "from logging import get_logger"}, {"module": "logging", "alias": null, "line": 11, "statement": "from logging import setup_logging"}], "constants": []}, "key_elements": [{"name": "from config import Config", "type": "import", "line": 9}, {"name": "from config import ConfigManager", "type": "import", "line": 9}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 10}, {"name": "from exceptions import OPSVIError", "type": "import", "line": 10}, {"name": "from exceptions import ValidationError", "type": "import", "line": 10}, {"name": "from logging import get_logger", "type": "import", "line": 11}, {"name": "from logging import setup_logging", "type": "import", "line": 11}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 9, "line_end": 11}], "content_hash": "326b440bcc9e4fccf4ece5504ab93c4e"}'
- path: libs/opsvi-core/src/opsvi_core/exceptions.py
  line_count: 34
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "exceptions.py", "description": "Python module with 0 functions and 5 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "OPSVIError", "line": 6, "inherits_from": ["Exception):"], "methods": [{"name": "__init__", "line": 9, "parameters": [{"name": "self", "type": "self"}, {"name": "message", "type": "str"}, {"name": "details", "type": "dict | None", "default": "None"}], "is_async": false, "signature": "__init__(self, message: str, details: dict | None = None)"}], "properties": [], "description": "Base exception class for OPSVI-related errors."}, {"name": "ConfigurationError", "line": 15, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised for configuration-related issues."}, {"name": "ValidationError", "line": 21, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised when validation fails."}, {"name": "ConnectionError", "line": 27, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised for connection-related problems."}, {"name": "TimeoutError", "line": 33, "inherits_from": ["OPSVIError):"], "methods": [], "properties": [], "description": "Exception raised when an operation times out."}], "imports": [], "constants": []}, "key_elements": [{"name": "OPSVIError", "type": "class", "line": 6}, {"name": "ConfigurationError", "type": "class", "line": 15}, {"name": "ValidationError", "type": "class", "line": 21}, {"name": "ConnectionError", "type": "class", "line": 27}, {"name": "TimeoutError", "type": "class", "line": 33}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 7}, {"name": "OPSVIError Class", "description": "Class OPSVIError definition and methods.", "line_start": 6, "line_end": 12}, {"name": "ConfigurationError Class", "description": "Class ConfigurationError definition and methods.", "line_start": 15, "line_end": 25}, {"name": "ValidationError Class", "description": "Class ValidationError definition and methods.", "line_start": 21, "line_end": 31}, {"name": "ConnectionError Class", "description": "Class ConnectionError definition and methods.", "line_start": 27, "line_end": 37}, {"name": "TimeoutError Class", "description": "Class TimeoutError definition and methods.", "line_start": 33, "line_end": 43}], "content_hash": "c8d70126b2ff92f0990f78b78b4ed33c"}'
- path: libs/opsvi-core/src/opsvi_core/config.py
  line_count: 79
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "config.py", "description": "Python module with 0 functions and 2 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "Config", "line": 17, "inherits_from": ["BaseModel):"], "methods": [], "properties": [], "description": "Represents configuration settings."}, {"name": "ConfigManager", "line": 30, "inherits_from": [], "methods": [{"name": "__init__", "line": 33, "parameters": [{"name": "self", "type": "self"}, {"name": "config_class", "type": "type[Config]", "default": "Config):"}], "is_async": false, "signature": "__init__(self, config_class: type[Config] = Config):)"}, {"name": "load_from_env", "line": 38, "parameters": [{"name": "self", "type": "self"}, {"name": "env_file", "type": "Path | None = None", "default": "None"}], "is_async": false, "return_type": "Config", "description": "Load configuration from environment variables and optional .env file.", "signature": "load_from_env(self, env_file: Path | None = None = None) -> Config"}, {"name": "_load_env_file", "line": 55, "parameters": [{"name": "self", "type": "self"}, {"name": "env_file", "type": "Path"}], "is_async": false, "return_type": "None", "description": "Load environment variables from .env file.", "signature": "_load_env_file(self, env_file: Path) -> None"}, {"name": "config", "line": 71, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "Config", "description": "Get the current configuration.", "signature": "config(self) -> Config"}, {"name": "get", "line": 79, "parameters": [{"name": "self", "type": "self"}, {"name": "key", "type": "str, default: Any = None"}, {"name": "default", "type": "Any = None", "default": "None"}], "is_async": false, "return_type": "Any", "description": "Get a configuration value.", "signature": "get(self, key: str, default: Any = None, default: Any = None = None) -> Any"}], "properties": [], "description": "Manages loading, saving, and updating configuration data."}], "imports": [{"module": "os", "alias": null, "line": 5, "statement": "import os"}, {"module": "structlog", "alias": null, "line": 9, "statement": "import structlog"}, {"module": "pathlib", "alias": null, "line": 6, "statement": "from pathlib import Path"}, {"module": "typing", "alias": null, "line": 7, "statement": "from typing import Any"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import BaseModel"}, {"module": "pydantic", "alias": null, "line": 10, "statement": "from pydantic import Field"}, {"module": "exceptions", "alias": null, "line": 12, "statement": "from exceptions import ConfigurationError"}], "constants": []}, "key_elements": [{"name": "os", "type": "import", "line": 5}, {"name": "structlog", "type": "import", "line": 9}, {"name": "from pathlib import Path", "type": "import", "line": 6}, {"name": "from typing import Any", "type": "import", "line": 7}, {"name": "from pydantic import BaseModel", "type": "import", "line": 10}, {"name": "from pydantic import Field", "type": "import", "line": 10}, {"name": "from exceptions import ConfigurationError", "type": "import", "line": 12}, {"name": "Config", "type": "class", "line": 17}, {"name": "ConfigManager", "type": "class", "line": 30}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 18}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 12}, {"name": "Config Class", "description": "Class Config definition and methods.", "line_start": 17, "line_end": 27}, {"name": "ConfigManager Class", "description": "Class ConfigManager definition and methods.", "line_start": 30, "line_end": 82}], "content_hash": "86bed1166db1bdc68af7df87bc8a0550"}'
- path: libs/opsvi-core/src/opsvi_core/logging.py
  line_count: 63
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "logging.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "setup_logging", "line": 10, "parameters": [{"name": "level", "type": "str", "default": "INFO"}, {"name": "format", "type": "str", "default": "json"}, {"name": "include_timestamp", "type": "bool", "default": "True"}, {"name": "include_process", "type": "bool", "default": "True"}, {"name": "include_thread", "type": "bool", "default": "True"}], "is_async": false, "return_type": "None", "description": "Configures the logging system with specified level, format, and optional inclusion of timestamp, process, and thread information.", "signature": "setup_logging(level: str = INFO, format: str = json, include_timestamp: bool = True, include_process: bool = True, include_thread: bool = True) -> None"}, {"name": "get_logger", "line": 63, "parameters": [{"name": "name", "type": "str | None = None", "default": "None"}], "is_async": false, "return_type": "structlog.BoundLogger", "description": "Retrieves a structured logger instance optionally bound to a specific name.", "signature": "get_logger(name: str | None = None = None) -> structlog.BoundLogger"}], "classes": [], "imports": [{"module": "sys", "alias": null, "line": 5, "statement": "import sys"}, {"module": "structlog", "alias": null, "line": 7, "statement": "import structlog"}], "constants": []}, "key_elements": [{"name": "sys", "type": "import", "line": 5}, {"name": "structlog", "type": "import", "line": 7}, {"name": "setup_logging", "type": "function", "line": 10}, {"name": "get_logger", "type": "function", "line": 63}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 17}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 7}, {"name": "setup_logging Function", "description": "Function setup_logging implementation.", "line_start": 10, "line_end": 62}, {"name": "get_logger Function", "description": "Function get_logger implementation.", "line_start": 63, "line_end": 68}], "content_hash": "5d061a67fba4627a0caa16a1bb452560"}'
- path: libs/opsvi-agents/src/opsvi/__init__.py
  line_count: 1
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [], "constants": []}, "key_elements": [], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}], "content_hash": "2a35222043dd8c22b1c74cc97aeffcaa"}'
- path: libs/opsvi-agents/src/opsvi/agents/__init__.py
  line_count: 6
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "__init__.py", "description": "Python module with 0 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [], "imports": [{"module": "crew_adapter", "alias": null, "line": 5, "statement": "from crew_adapter import CrewAdapter"}, {"module": "graph_adapter", "alias": null, "line": 6, "statement": "from graph_adapter import GraphAdapter"}], "constants": []}, "key_elements": [{"name": "from crew_adapter import CrewAdapter", "type": "import", "line": 5}, {"name": "from graph_adapter import GraphAdapter", "type": "import", "line": 6}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 3}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 6}], "content_hash": "a4e41f15112783048c0cee9e4b8eb8de"}'
- path: libs/opsvi-agents/src/opsvi/agents/crew_adapter.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "crew_adapter.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "CrewAdapter", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the CrewAI adapter.", "signature": "__init__(self) -> None"}, {"name": "create_crew", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "agents", "type": "Any, tasks: Any"}, {"name": "tasks", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Create a crew with agents and tasks.", "signature": "create_crew(self, agents: Any, tasks: Any, tasks: Any) -> dict[str, Any]"}], "properties": [], "description": "Handles the adaptation and management of crew data for display or processing."}], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "CrewAdapter", "type": "class", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "CrewAdapter Class", "description": "Class CrewAdapter definition and methods.", "line_start": 8, "line_end": 19}], "content_hash": "3df954d155323de4992d7cfc8bf95ef8"}'
- path: libs/opsvi-agents/src/opsvi/agents/graph_adapter.py
  line_count: 17
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "graph_adapter.py", "description": "Python module with 0 functions and 1 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [], "classes": [{"name": "GraphAdapter", "line": 8, "inherits_from": [], "methods": [{"name": "__init__", "line": 11, "parameters": [{"name": "self", "type": "self"}], "is_async": false, "return_type": "None", "description": "Initialize the LangGraph adapter.", "signature": "__init__(self) -> None"}, {"name": "create_graph", "line": 16, "parameters": [{"name": "self", "type": "self"}, {"name": "nodes", "type": "Any, edges: Any"}, {"name": "edges", "type": "Any"}], "is_async": false, "return_type": "dict[str, Any]", "description": "Create a graph with nodes and edges.", "signature": "create_graph(self, nodes: Any, edges: Any, edges: Any) -> dict[str, Any]"}], "properties": [], "description": "Adapter class to interface with different graph data structures and provide a unified API."}], "imports": [{"module": "typing", "alias": null, "line": 5, "statement": "from typing import Any"}], "constants": []}, "key_elements": [{"name": "from typing import Any", "type": "import", "line": 5}, {"name": "GraphAdapter", "type": "class", "line": 8}], "sections": [{"name": "Module Docstring", "description": "Module-level documentation describing the file''s purpose.", "line_start": 3, "line_end": 9}, {"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 5, "line_end": 5}, {"name": "GraphAdapter Class", "description": "Class GraphAdapter definition and methods.", "line_start": 8, "line_end": 19}], "content_hash": "50169f8f554f08d027a8b72fedbe932b"}'
- path: tests/opsvi_core/test_logging.py
  line_count: 11
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "test_logging.py", "description": "Python module with 1 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "test_get_logger_returns_logger", "line": 6, "parameters": [], "is_async": false, "return_type": "None", "signature": "test_get_logger_returns_logger() -> None", "description": "Tests that get_logger function returns a valid logger instance."}], "classes": [], "imports": [{"module": "opsvi_core.logging", "alias": "log_mod", "line": 3, "statement": "import opsvi_core.logging as log_mod"}], "constants": []}, "key_elements": [{"name": "opsvi_core.logging", "type": "import", "line": 3}, {"name": "test_get_logger_returns_logger", "type": "function", "line": 6}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 3, "line_end": 3}, {"name": "test_get_logger_returns_logger Function", "description": "Function test_get_logger_returns_logger implementation.", "line_start": 6, "line_end": 11}], "content_hash": "944ebe676ed84ac91ffe6c096fbe9e20"}'
- path: tools/rag_init.py
  line_count: 129
  filemap: '{"file_metadata": {"type": "python", "language": "python", "title": "rag_init.py", "description": "Python module with 2 functions and 0 classes", "last_updated": "2025-08-05"}, "code_elements": {"functions": [{"name": "init_rag_system", "line": 22, "parameters": [{"name": "collection_name", "type": "str = \"global__demo\"", "default": "global__demo"}], "is_async": true, "return_type": "None", "description": "Initializes the RAG (Retrieval-Augmented Generation) system with the specified collection name.", "signature": "async init_rag_system(collection_name: str = \"global__demo\" = global__demo) -> None"}, {"name": "main", "line": 114, "parameters": [], "is_async": false, "return_type": "None", "description": "Entry point of the application that runs the main program logic.", "signature": "main() -> None"}], "classes": [], "imports": [{"module": "asyncio", "alias": null, "line": 6, "statement": "import asyncio"}, {"module": "sys", "alias": null, "line": 7, "statement": "import sys"}, {"module": "pathlib", "alias": null, "line": 8, "statement": "from pathlib import Path"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import get_logger"}, {"module": "opsvi_core", "alias": null, "line": 15, "statement": "from opsvi_core import setup_logging"}, {"module": "qdrant_client", "alias": null, "line": 16, "statement": "from qdrant_client import QdrantClient"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import Distance"}, {"module": "qdrant_client.models", "alias": null, "line": 17, "statement": "from qdrant_client.models import VectorParams"}], "constants": []}, "key_elements": [{"name": "asyncio", "type": "import", "line": 6}, {"name": "sys", "type": "import", "line": 7}, {"name": "from pathlib import Path", "type": "import", "line": 8}, {"name": "from opsvi_core import get_logger", "type": "import", "line": 15}, {"name": "from opsvi_core import setup_logging", "type": "import", "line": 15}, {"name": "from qdrant_client import QdrantClient", "type": "import", "line": 16}, {"name": "from qdrant_client.models import Distance", "type": "import", "line": 17}, {"name": "from qdrant_client.models import VectorParams", "type": "import", "line": 17}, {"name": "init_rag_system", "type": "function", "line": 22}, {"name": "main", "type": "function", "line": 114}], "sections": [{"name": "Imports", "description": "Import statements for required modules and libraries.", "line_start": 6, "line_end": 17}, {"name": "init_rag_system Function", "description": "Function init_rag_system implementation.", "line_start": 22, "line_end": 113}, {"name": "main Function", "description": "Function main implementation.", "line_start": 114, "line_end": 119}], "content_hash": "39167ba7fbb839ddb12cdbf519704ce8"}'
