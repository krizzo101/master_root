# CONSULT AGENT INTEGRATION PATTERN

**Validation**: "Rule 957 Protocol Active"

## Pattern Recognition

**Triggers**: Development tasks requiring expert guidance, complex implementation planning, production-ready code generation, or architectural decision-making
**Principles**: Clear prompt engineering, appropriate artifact types, quality control through critic, iterative refinement, session management for context preservation
**Signatures**: MCP tool calls with structured parameters, session IDs, artifact type specification, intelligent parameter analysis
**Validation**: Response quality indicators, critic suggestions, production readiness, session continuity maintenance
**Integration**: MCP server integration, autonomous agent workflows, development pipeline integration, project intelligence auto-attachment

## Tool Interface

**MCP Tool Name**: `mcp_consult_agent_consult`
**Server Configuration**: ACCF MCP Agent Server with `AGENT_TYPE=consult`
**Response Format**: Detailed, actionable prompts with critic suggestions and quality control

## Autonomous Decision Patterns

### **Session Management Strategy**
- **Context Preservation**: Use specific, descriptive session IDs for related tasks
- **Session Tracking**: Maintain session state on requesting agent side
- **Context Quality**: Same session for iterative development, new session for unrelated tasks
- **Memory Architecture**: 1-hour timeout, last 3 exchanges preserved, automatic cleanup

### **Parameter Optimization**
- **Auto-Selection Trust**: Let intelligent gatekeeper determine optimal parameters
- **Model Selection**: gpt-5-nano for code, o3 for architecture, gpt-5-mini for documentation
- **Quality Control**: Enable critic for production code, disable for simple queries
- **Iteration Strategy**: 1 for simple tasks, 2 for complex, 3 for critical systems

### **Prompt Engineering Patterns**
- **Code Generation**: TASK + LANGUAGE/RUNTIME + INPUTS + CONSTRAINTS + OUTPUT_FORMAT
- **Architecture Planning**: ROLE + OBJECTIVE + CONTEXT + DELIVERABLES + FORMAT + RULES
- **Documentation**: TARGET_AUDIENCE + DOC_TYPE + PRODUCT_CONTEXT + MUST_INCLUDE + TONE

### **Context Enhancement**
- **Project Intelligence**: Automatic attachment for new sessions
- **File Dependencies**: Dynamic analysis and filtering by intelligent gatekeeper
- **Request Enhancement**: Automatic improvement and context pollution prevention
- **Smart Caching**: 24-hour cache for project intelligence, efficient reuse

## Quality Gates

### **Pre-Execution Validation**
- Clear, specific prompt with all requirements
- Appropriate artifact type selection
- Session ID follows naming convention
- Quality control enabled for production code
- Iteration count appropriate for task complexity

### **Post-Execution Validation**
- Response addresses all requirements
- Critic suggestions reviewed and addressed
- Production readiness confirmed
- Best practices followed
- Session continuity maintained

## Anti-Patterns

### **Session Management Issues**
- Generic session IDs ("test", "session1")
- Session pollution (mixing unrelated tasks)
- Context loss (not maintaining session continuity)
- No session tracking on requesting agent side
- Over-reliance on default session ID

### **Parameter Misuse**
- Unnecessary model override when auto-selection suffices
- Disabling critic for production code
- Over-iteration for simple tasks
- Wrong artifact type for task requirements

### **Prompt Engineering Failures**
- Vague requests without specific requirements
- Missing context and constraints
- Incomplete requirements (no error handling, security, performance)
- Assumptions about agent knowledge of project context

## Integration Workflows

### **Development Pipeline**
1. **Requirement Analysis**: Use consult agent for initial planning
2. **Implementation**: Generate production-ready code
3. **Testing**: Create comprehensive test strategies
4. **Documentation**: Generate user and technical documentation
5. **Deployment**: Plan deployment and operational procedures

### **Autonomous Agent Integration**
- **Prompt Generation**: Use consult agent to create detailed prompts for other agents
- **Quality Assurance**: Leverage critic suggestions for validation
- **Iterative Improvement**: Use multiple iterations for refinement

## Reference Templates

[consult-agent-examples.md](mdc:.cursor/templates/consult-agent-examples.md)
[consult-agent-workflows.md](mdc:.cursor/templates/consult-agent-workflows.md)
[consult-agent-troubleshooting.md](mdc:.cursor/templates/consult-agent-troubleshooting.md)

description: "use when INTEGRATING CONSULT AGENTS to ENFORCE PATTERNS for QUALITY DEVELOPMENT"
globs:
alwaysApply: false
---
