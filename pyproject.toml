[project]
name = "opsvi-master"
version = "0.1.0"
description = "OPSVI Master Workspace - Monorepo for AI/ML Operations"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "OPSVI Team", email = "team@opsvi.ai"}
]
keywords = ["ai", "ml", "operations", "monorepo", "workspace"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Dependencies for the root workspace
dependencies = [
    "uv>=0.7.0",
    "hatchling>=1.8.0",
]

# Development dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
]

# Root workspace - no build system needed

# UV workspace configuration
[tool.uv.workspace]
members = [
    "libs/*",
    "apps/project-intel",
    "apps/accf",
    "apps/genfilemap",
]
exclude = [
    "libs/contexts",
    "libs/gatekeeper",
    "platform/*",
    "tools/*",
    "scripts/*",
]

# UV sources for workspace dependencies
[tool.uv.sources]
# Local workspace packages will be resolved from workspace
opsvi-core = {workspace = true}
opsvi-llm = {workspace = true}
opsvi-rag = {workspace = true}
opsvi-agents = {workspace = true}
opsvi-foundation = {workspace = true}
opsvi-auth = {workspace = true}
opsvi-communication = {workspace = true}
opsvi-data = {workspace = true}
opsvi-deploy = {workspace = true}
opsvi-fs = {workspace = true}
opsvi-gateway = {workspace = true}
opsvi-http = {workspace = true}
opsvi-memory = {workspace = true}
opsvi-monitoring = {workspace = true}
opsvi-orchestration = {workspace = true}
opsvi-pipeline = {workspace = true}
opsvi-security = {workspace = true}

# Tool configurations
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
explicit_package_bases = true
exclude = [
    "libs/opsvi-llm/src/opsvi/__init__.py",
    "libs/opsvi-agents/src/opsvi/__init__.py"
]

[tool.pytest.ini_options]
testpaths = ["tests", "libs", "apps"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=libs",
    "--cov=apps",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["libs", "apps"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
