"""Health check endpoints for production monitoring."""

import asyncio
import time
import psutil
from datetime import datetime, timezone
from typing import Dict, Any, List
from fastapi import APIRouter, Depends, HTTPException
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
from fastapi.responses import Response, JSONResponse

from monitoring.metrics.system_metrics import (
    update_health_status,
    SYSTEM_UP,
    CPU_USAGE_PERCENT,
    MEMORY_USAGE_PERCENT,
    DB_CONNECTION_POOL_ACTIVE,
    DB_CONNECTION_POOL_SIZE
)
from monitoring.logging_config import get_logger, CorrelationContext, generate_correlation_id
from memory.graph.client import Neo4jClient
from auto_forge.config.settings import settings

router = APIRouter(prefix="/health", tags=["health"])
logger = get_logger(__name__)

class HealthChecker:
    """Health checker for system components."""

    def __init__(self, neo4j_client: Neo4jClient):
        self.neo4j_client = neo4j_client
        self.start_time = time.time()

    async def check_system_health(self) -> Dict[str, Any]:
        """Check overall system health."""
        with CorrelationContext() as corr_id:
            logger.info("Starting system health check", correlation_id=corr_id)

            health_status = {
                "status": "healthy",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "version": settings.app_version,
                "uptime_seconds": time.time() - self.start_time,
                "correlation_id": corr_id,
                "services": {},
                "system": {},
                "dependencies": {}
            }

            # Check system resources
            system_health = await self._check_system_resources()
            health_status["system"] = system_health

            # Check dependencies
            dependencies_health = await self._check_dependencies()
            health_status["dependencies"] = dependencies_health

            # Check services
            services_health = await self._check_services()
            health_status["services"] = services_health

            # Determine overall status
            all_healthy = (
                system_health["status"] == "healthy" and
                dependencies_health["status"] == "healthy" and
                services_health["status"] == "healthy"
            )

            health_status["status"] = "healthy" if all_healthy else "unhealthy"

            # Update Prometheus metrics
            update_health_status(all_healthy)

            logger.info(
                "System health check completed",
                correlation_id=corr_id,
                status=health_status["status"],
                overall_healthy=all_healthy
            )

            return health_status

    async def _check_system_resources(self) -> Dict[str, Any]:
        """Check system resource usage."""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')

            # Update Prometheus metrics
            CPU_USAGE_PERCENT.set(cpu_percent)
            MEMORY_USAGE_PERCENT.set(memory.percent)

            system_health = {
                "status": "healthy",
                "cpu_usage_percent": cpu_percent,
                "memory_usage_percent": memory.percent,
                "memory_available_bytes": memory.available,
                "disk_usage_percent": disk.percent,
                "disk_free_bytes": disk.free,
                "load_average": psutil.getloadavg()
            }

            # Check thresholds
            if cpu_percent > 90:
                system_health["status"] = "warning"
                system_health["warnings"] = ["High CPU usage"]

            if memory.percent > 90:
                system_health["status"] = "warning"
                if "warnings" not in system_health:
                    system_health["warnings"] = []
                system_health["warnings"].append("High memory usage")

            if disk.percent > 90:
                system_health["status"] = "warning"
                if "warnings" not in system_health:
                    system_health["warnings"] = []
                system_health["warnings"].append("High disk usage")

            return system_health

        except Exception as e:
            logger.error(f"Error checking system resources: {e}")
            return {
                "status": "unhealthy",
                "error": str(e)
            }

    async def _check_dependencies(self) -> Dict[str, Any]:
        """Check external dependencies."""
        dependencies = {
            "status": "healthy",
            "neo4j": {},
            "redis": {},
            "celery": {}
        }

        # Check Neo4j
        try:
            start_time = time.time()
            await self.neo4j_client.execute_query("RETURN 1 as test")
            duration = time.time() - start_time

            dependencies["neo4j"] = {
                "status": "healthy",
                "response_time_ms": duration * 1000,
                "connection_pool_size": getattr(self.neo4j_client, 'pool_size', 'unknown'),
                "active_connections": getattr(self.neo4j_client, 'active_connections', 'unknown')
            }

            # Update Prometheus metrics
            if hasattr(self.neo4j_client, 'pool_size'):
                DB_CONNECTION_POOL_SIZE.set(self.neo4j_client.pool_size)
            if hasattr(self.neo4j_client, 'active_connections'):
                DB_CONNECTION_POOL_ACTIVE.set(self.neo4j_client.active_connections)

        except Exception as e:
            dependencies["neo4j"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            dependencies["status"] = "unhealthy"

        # Check Redis (if available)
        try:
            import redis
            redis_client = redis.Redis.from_url(settings.redis_url)
            start_time = time.time()
            redis_client.ping()
            duration = time.time() - start_time

            dependencies["redis"] = {
                "status": "healthy",
                "response_time_ms": duration * 1000,
                "info": redis_client.info()
            }

        except Exception as e:
            dependencies["redis"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            dependencies["status"] = "unhealthy"

        # Check Celery (if available)
        try:
            from celery import current_app
            if current_app:
                inspect = current_app.control.inspect()
                stats = inspect.stats()

                if stats:
                    dependencies["celery"] = {
                        "status": "healthy",
                        "active_workers": len(stats),
                        "worker_stats": stats
                    }
                else:
                    dependencies["celery"] = {
                        "status": "warning",
                        "message": "No active workers found"
                    }
            else:
                dependencies["celery"] = {
                    "status": "unknown",
                    "message": "Celery not configured"
                }

        except Exception as e:
            dependencies["celery"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            dependencies["status"] = "unhealthy"

        return dependencies

    async def _check_services(self) -> Dict[str, Any]:
        """Check internal services."""
        services = {
            "status": "healthy",
            "api": {},
            "task_execution": {},
            "memory": {}
        }

        # Check API service
        try:
            services["api"] = {
                "status": "healthy",
                "endpoints": ["/health", "/metrics", "/docs"],
                "version": settings.app_version
            }
        except Exception as e:
            services["api"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            services["status"] = "unhealthy"

        # Check task execution service
        try:
            from auto_forge.application.orchestrator.task_execution_engine import TaskExecutionEngine
            # Basic check - could be enhanced with actual engine status
            services["task_execution"] = {
                "status": "healthy",
                "engine_available": True
            }
        except Exception as e:
            services["task_execution"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            services["status"] = "unhealthy"

        # Check memory service
        try:
            # Basic check for memory components
            services["memory"] = {
                "status": "healthy",
                "graph_available": self.neo4j_client is not None
            }
        except Exception as e:
            services["memory"] = {
                "status": "unhealthy",
                "error": str(e)
            }
            services["status"] = "unhealthy"

        return services

# Global health checker instance
health_checker: HealthChecker = None

def get_health_checker(neo4j_client: Neo4jClient = Depends()) -> HealthChecker:
    """Get health checker instance."""
    global health_checker
    if health_checker is None:
        health_checker = HealthChecker(neo4j_client)
    return health_checker

@router.get("/")
async def health_check(checker: HealthChecker = Depends(get_health_checker)) -> Dict[str, Any]:
    """Comprehensive health check endpoint."""
    return await checker.check_system_health()

@router.get("/ready")
async def readiness_check(checker: HealthChecker = Depends(get_health_checker)) -> Dict[str, Any]:
    """Readiness check for Kubernetes."""
    health_status = await checker.check_system_health()

    if health_status["status"] != "healthy":
        raise HTTPException(status_code=503, detail="Service not ready")

    return {"status": "ready"}

@router.get("/live")
async def liveness_check() -> Dict[str, Any]:
    """Liveness check for Kubernetes."""
    return {
        "status": "alive",
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@router.get("/metrics")
async def metrics_endpoint() -> Response:
    """Prometheus metrics endpoint."""
    return Response(
        content=generate_latest(),
        media_type=CONTENT_TYPE_LATEST
    )

@router.get("/detailed")
async def detailed_health_check(checker: HealthChecker = Depends(get_health_checker)) -> Dict[str, Any]:
    """Detailed health check with additional information."""
    health_status = await checker.check_system_health()

    # Add additional detailed information
    health_status["detailed"] = {
        "process_info": {
            "pid": psutil.getpid(),
            "create_time": psutil.Process().create_time(),
            "num_threads": psutil.Process().num_threads(),
            "memory_info": psutil.Process().memory_info()._asdict(),
            "cpu_percent": psutil.Process().cpu_percent(),
            "open_files": len(psutil.Process().open_files()),
            "connections": len(psutil.Process().connections())
        },
        "network_info": {
            "connections": psutil.net_connections(),
            "interfaces": psutil.net_if_addrs(),
            "io_counters": psutil.net_io_counters()._asdict()
        },
        "disk_info": {
            "partitions": [p._asdict() for p in psutil.disk_partitions()],
            "usage": psutil.disk_usage('/')._asdict()
        }
    }

    return health_status

@router.get("/dependencies")
async def dependencies_check(checker: HealthChecker = Depends(get_health_checker)) -> Dict[str, Any]:
    """Check only external dependencies."""
    return await checker._check_dependencies()

@router.get("/system")
async def system_check(checker: HealthChecker = Depends(get_health_checker)) -> Dict[str, Any]:
    """Check only system resources."""
    return await checker._check_system_resources()
