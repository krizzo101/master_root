import asyncio
import json
from asea_orchestrator.core import Orchestrator
from asea_orchestrator.workflow import WorkflowManager
from asea_orchestrator.plugins.types import PluginConfig

REPORT_FILE = "codebase_analysis_report.md"


async def main():
    """
    Demonstrates the capabilities of the ASEA Orchestrator by performing
    a multi-step analysis of its own codebase.
    """
    print("--- üöÄ Kicking off ASEA Orchestrator Demonstration ---")

    plugin_dir = "asea_orchestrator/src/asea_orchestrator/plugins/available"

    workflow_definitions = {
        "full_codebase_analysis": {
            "steps": [
                {
                    "plugin_name": "file_system",
                    "parameters": {
                        "action": "read",
                        "path": "asea_orchestrator/src/asea_orchestrator/core.py",
                    },
                    "outputs": {"content": "core_code"},
                },
                {
                    "plugin_name": "code_analysis",
                    "inputs": {"core_code": "code_content"},
                    "outputs": {"analysis_result": "core_analysis"},
                },
                {
                    "plugin_name": "web_search",
                    "parameters": {
                        "query": "open source python static code analysis libraries",
                        "max_results": 5,
                        "max_characters": 250,  # Explicitly truncate for this report
                    },
                    "outputs": {"search_results": "analysis_libraries"},
                },
                {
                    "plugin_name": "file_system",
                    "parameters": {
                        "action": "write",
                        "path": REPORT_FILE,
                        "content": "This report is auto-generated by the ASEA Orchestrator.",
                    },
                },
            ]
        }
    }

    workflow_manager = WorkflowManager(workflow_definitions)
    orchestrator = Orchestrator(plugin_dir, workflow_manager)

    # Note: Plugin configs would also need to be managed differently
    # in a fully dynamic system. For this demo, we'll keep it simple.
    plugin_configs: dict[str, PluginConfig] = {
        "file_system": PluginConfig(name="fs_conf", version="1.0"),
        "code_analysis": PluginConfig(name="ca_conf", version="1.0"),
        "web_search": PluginConfig(name="ws_conf", version="1.0"),
        "shell": PluginConfig(name="sh_conf", version="1.0"),
    }
    orchestrator.temp_configure_plugins(plugin_configs)

    print("\n--- üèÉ Running Workflow: full_codebase_analysis ---")
    final_state = await orchestrator.run_workflow("full_codebase_analysis", {})

    # --- Post-workflow processing has been simplified for the Celery refactor ---
    print("\n--- ‚úÖ Workflow execution complete. ---")
    print("\nFinal workflow state:")
    print(json.dumps(final_state, indent=2))

    print("\n---  demonstration complete ---")


if __name__ == "__main__":
    asyncio.run(main())
