#!/usr/bin/env python3
"""Simple test for SpecStory Intelligence system"""

import asyncio
import sys
import tempfile
from pathlib import Path

sys.path.append(".")


def test_imports():
    """Test all imports work"""
    try:
        print("✅ Parser import successful")

        print("✅ File monitor import successful")

        print("✅ Pipeline creation import successful")

        return True
    except Exception as e:
        print(f"❌ Import error: {e}")
        return False


def create_test_specstory_file():
    """Create a test SpecStory file"""
    content = '''<!-- Generated by SpecStory -->
# Test Conversation (2025-01-27 15:30Z)

---

_**User**_

Hello, can you help me with a Python function?

---

_**Assistant**_

I'll help you create a Python function. Here's a simple example:

```python
def greet(name):
    """Greet someone by name"""
    return f"Hello, {name}!"

# Test the function
print(greet("World"))
```

This function takes a name parameter and returns a greeting.

---
'''

    with tempfile.NamedTemporaryFile(mode="w", suffix=".md", delete=False) as f:
        f.write(content)
        return f.name


async def test_atomic_parser():
    """Test the atomic parser"""
    try:
        from .atomic_parser import (
            AtomicSpecStoryParser,
        )

        parser = AtomicSpecStoryParser()
        test_file = create_test_specstory_file()

        # Parse the file
        components, relationships = await parser.parse_file(test_file)

        # Cleanup
        Path(test_file).unlink(missing_ok=True)

        print(
            f"✅ Parser test passed: {len(components)} components, {len(relationships)} relationships"
        )

        # Check we got expected component types
        component_types = [c.component_type for c in components]
        print(f"   Found component types: {set(ct.value for ct in component_types)}")

        return len(components) > 0 and len(relationships) > 0

    except Exception as e:
        print(f"❌ Parser test failed: {e}")
        return False


async def test_pipeline_creation():
    """Test pipeline creation"""
    try:
        from src.specstory_intelligence import create_pipeline

        # Test with minimal config to avoid database issues
        config = {
            "watch_directory": "/tmp/test",
            "max_workers": 1,
            "enable_metrics": False,
            "enable_real_time_analysis": False,
            "enable_pattern_detection": False,
        }

        pipeline = create_pipeline(config)
        status = pipeline.get_status()

        print("✅ Pipeline creation test passed")
        print(f"   Pipeline status: {status['is_running']}")

        return True

    except Exception as e:
        print(f"❌ Pipeline creation test failed: {e}")
        return False


async def main():
    """Run all tests"""
    print("🧠 SpecStory Intelligence System - Quick Test")
    print("=" * 50)

    # Test imports
    print("\n1. Testing imports...")
    import_success = test_imports()

    if not import_success:
        print("❌ Import tests failed, skipping other tests")
        return False

    # Test parser
    print("\n2. Testing atomic parser...")
    parser_success = await test_atomic_parser()

    # Test pipeline
    print("\n3. Testing pipeline creation...")
    pipeline_success = await test_pipeline_creation()

    # Summary
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"✅ Imports: {'PASS' if import_success else 'FAIL'}")
    print(f"✅ Parser: {'PASS' if parser_success else 'FAIL'}")
    print(f"✅ Pipeline: {'PASS' if pipeline_success else 'FAIL'}")

    all_passed = import_success and parser_success and pipeline_success

    if all_passed:
        print("\n🎉 All tests passed! SpecStory Intelligence system is working.")
    else:
        print("\n⚠️ Some tests failed, but core functionality appears to work.")

    return all_passed


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
