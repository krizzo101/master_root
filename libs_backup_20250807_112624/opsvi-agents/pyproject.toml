[project]
name = "opsvi-agents"
version = "1.0.0"
description = "Multi-agent orchestration library for the OPSVI ecosystem"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "OPSVI Team", email = "team@opsvi.com" }
]
keywords = ["ai", "agents", "orchestration", "crewai", "langgraph", "multi-agent"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]

dependencies = [
    "opsvi-foundation>=1.0.0",
    "opsvi-core>=1.0.0",
    "opsvi-llm>=1.0.0",
    "pydantic>=2.0.0",
    "structlog>=24.1.0",
    "crewai>=0.28.0",
    "langgraph>=0.0.40",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "orjson>=3.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "coverage>=7.4.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "black>=24.0.0",
    "pre-commit>=3.6.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/opsvi/master_root"
Repository = "https://github.com/opsvi/master_root"
Documentation = "https://github.com/opsvi/master_root/tree/main/libs/opsvi-agents"
Issues = "https://github.com/opsvi/master_root/issues"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["opsvi_agents*"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=opsvi_agents",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "langgraph.*",
]
ignore_missing_imports = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-args
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "PGH",    # pygrep-hooks
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "RUF",    # Ruff-specific rules
    "PIE",    # flake8-pie
    "COM",    # flake8-commas
    "G",      # flake8-logging-format
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
known-first-party = ["opsvi_agents", "opsvi_core", "opsvi_llm"]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["opsvi_agents"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]