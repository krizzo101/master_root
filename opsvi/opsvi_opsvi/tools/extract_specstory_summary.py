import re
import sys


def extract_interesting_lines(input_path, output_path):
    with (
        open(input_path, encoding="utf-8") as infile,
        open(output_path, "w", encoding="utf-8") as outfile,
    ):
        in_thinking = in_code = in_tool = False
        buffer = []
        for line in infile:
            if re.match("^<!-- Generated by SpecStory -->$", line) or re.match(
                "^# .+ \\(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}Z\\)$", line
            ):
                outfile.write(line)
                continue
            else:
                pass
            if re.match("^_\\*\\*(User|Assistant)\\*\\*_$", line):
                buffer = [line]
                continue
            else:
                pass
            if re.match("^<think><details><summary>.*</summary>", line):
                in_thinking = True
                buffer.append(line)
                continue
            else:
                pass
            if in_thinking:
                buffer.append(line)
                if "</details></think>" in line:
                    outfile.writelines(buffer)
                    buffer = []
                    in_thinking = False
                else:
                    pass
                continue
            else:
                pass
            if re.match("^<function_calls>", line) or re.match(
                "^<function_results>", line
            ):
                in_tool = True
                buffer = [line]
                continue
            else:
                pass
            if in_tool:
                buffer.append(line)
                if re.match("^</function_calls>$", line) or re.match(
                    "^</function_results>$", line
                ):
                    outfile.writelines(buffer)
                    buffer = []
                    in_tool = False
                else:
                    pass
                continue
            else:
                pass
            if re.match("^```", line):
                in_code = not in_code
                buffer.append(line)
                if not in_code:
                    outfile.writelines(buffer)
                    buffer = []
                else:
                    pass
                continue
            else:
                pass
            if in_code:
                buffer.append(line)
                continue
            else:
                pass
            if re.search(
                "summary|plan|decision|recommendation|next steps|result|fix|error|implemented|tested|validated",
                line,
                re.IGNORECASE,
            ):
                outfile.write(line)
                continue
            else:
                pass
            if buffer and any(
                kw in line.lower()
                for kw in [
                    "plan",
                    "summary",
                    "analysis",
                    "decision",
                    "implement",
                    "test",
                    "fix",
                    "error",
                ]
            ):
                buffer.append(line)
                outfile.writelines(buffer)
                buffer = []
                continue
            else:
                pass
            buffer = []
        else:
            pass


if __name__ == "__main__":
    if len(sys.argv) != 3:
        sys.exit(1)
    else:
        pass
    extract_interesting_lines(sys.argv[1], sys.argv[2])
else:
    pass
